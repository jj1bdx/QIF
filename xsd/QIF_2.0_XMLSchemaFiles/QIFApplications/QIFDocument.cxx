// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "QIFDocument.hxx"

namespace xsd
{
  namespace qif2
  {
    // QIFDocumentType
    // 

    const QIFDocumentType::Attributes_optional& QIFDocumentType::
    Attributes () const
    {
      return this->Attributes_;
    }

    QIFDocumentType::Attributes_optional& QIFDocumentType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void QIFDocumentType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void QIFDocumentType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void QIFDocumentType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const QIFDocumentType::VersionHistory_optional& QIFDocumentType::
    VersionHistory () const
    {
      return this->VersionHistory_;
    }

    QIFDocumentType::VersionHistory_optional& QIFDocumentType::
    VersionHistory ()
    {
      return this->VersionHistory_;
    }

    void QIFDocumentType::
    VersionHistory (const VersionHistory_type& x)
    {
      this->VersionHistory_.set (x);
    }

    void QIFDocumentType::
    VersionHistory (const VersionHistory_optional& x)
    {
      this->VersionHistory_ = x;
    }

    void QIFDocumentType::
    VersionHistory (::std::auto_ptr< VersionHistory_type > x)
    {
      this->VersionHistory_.set (x);
    }

    const QIFDocumentType::Version_optional& QIFDocumentType::
    Version () const
    {
      return this->Version_;
    }

    QIFDocumentType::Version_optional& QIFDocumentType::
    Version ()
    {
      return this->Version_;
    }

    void QIFDocumentType::
    Version (const Version_type& x)
    {
      this->Version_.set (x);
    }

    void QIFDocumentType::
    Version (const Version_optional& x)
    {
      this->Version_ = x;
    }

    void QIFDocumentType::
    Version (::std::auto_ptr< Version_type > x)
    {
      this->Version_.set (x);
    }

    const QIFDocumentType::Header_optional& QIFDocumentType::
    Header () const
    {
      return this->Header_;
    }

    QIFDocumentType::Header_optional& QIFDocumentType::
    Header ()
    {
      return this->Header_;
    }

    void QIFDocumentType::
    Header (const Header_type& x)
    {
      this->Header_.set (x);
    }

    void QIFDocumentType::
    Header (const Header_optional& x)
    {
      this->Header_ = x;
    }

    void QIFDocumentType::
    Header (::std::auto_ptr< Header_type > x)
    {
      this->Header_.set (x);
    }

    const QIFDocumentType::PreInspectionTraceability_optional& QIFDocumentType::
    PreInspectionTraceability () const
    {
      return this->PreInspectionTraceability_;
    }

    QIFDocumentType::PreInspectionTraceability_optional& QIFDocumentType::
    PreInspectionTraceability ()
    {
      return this->PreInspectionTraceability_;
    }

    void QIFDocumentType::
    PreInspectionTraceability (const PreInspectionTraceability_type& x)
    {
      this->PreInspectionTraceability_.set (x);
    }

    void QIFDocumentType::
    PreInspectionTraceability (const PreInspectionTraceability_optional& x)
    {
      this->PreInspectionTraceability_ = x;
    }

    void QIFDocumentType::
    PreInspectionTraceability (::std::auto_ptr< PreInspectionTraceability_type > x)
    {
      this->PreInspectionTraceability_.set (x);
    }

    const QIFDocumentType::FileUnits_optional& QIFDocumentType::
    FileUnits () const
    {
      return this->FileUnits_;
    }

    QIFDocumentType::FileUnits_optional& QIFDocumentType::
    FileUnits ()
    {
      return this->FileUnits_;
    }

    void QIFDocumentType::
    FileUnits (const FileUnits_type& x)
    {
      this->FileUnits_.set (x);
    }

    void QIFDocumentType::
    FileUnits (const FileUnits_optional& x)
    {
      this->FileUnits_ = x;
    }

    void QIFDocumentType::
    FileUnits (::std::auto_ptr< FileUnits_type > x)
    {
      this->FileUnits_.set (x);
    }

    const QIFDocumentType::DatumDefinitions_optional& QIFDocumentType::
    DatumDefinitions () const
    {
      return this->DatumDefinitions_;
    }

    QIFDocumentType::DatumDefinitions_optional& QIFDocumentType::
    DatumDefinitions ()
    {
      return this->DatumDefinitions_;
    }

    void QIFDocumentType::
    DatumDefinitions (const DatumDefinitions_type& x)
    {
      this->DatumDefinitions_.set (x);
    }

    void QIFDocumentType::
    DatumDefinitions (const DatumDefinitions_optional& x)
    {
      this->DatumDefinitions_ = x;
    }

    void QIFDocumentType::
    DatumDefinitions (::std::auto_ptr< DatumDefinitions_type > x)
    {
      this->DatumDefinitions_.set (x);
    }

    const QIFDocumentType::DatumTargetDefinitions_optional& QIFDocumentType::
    DatumTargetDefinitions () const
    {
      return this->DatumTargetDefinitions_;
    }

    QIFDocumentType::DatumTargetDefinitions_optional& QIFDocumentType::
    DatumTargetDefinitions ()
    {
      return this->DatumTargetDefinitions_;
    }

    void QIFDocumentType::
    DatumTargetDefinitions (const DatumTargetDefinitions_type& x)
    {
      this->DatumTargetDefinitions_.set (x);
    }

    void QIFDocumentType::
    DatumTargetDefinitions (const DatumTargetDefinitions_optional& x)
    {
      this->DatumTargetDefinitions_ = x;
    }

    void QIFDocumentType::
    DatumTargetDefinitions (::std::auto_ptr< DatumTargetDefinitions_type > x)
    {
      this->DatumTargetDefinitions_.set (x);
    }

    const QIFDocumentType::Transforms_optional& QIFDocumentType::
    Transforms () const
    {
      return this->Transforms_;
    }

    QIFDocumentType::Transforms_optional& QIFDocumentType::
    Transforms ()
    {
      return this->Transforms_;
    }

    void QIFDocumentType::
    Transforms (const Transforms_type& x)
    {
      this->Transforms_.set (x);
    }

    void QIFDocumentType::
    Transforms (const Transforms_optional& x)
    {
      this->Transforms_ = x;
    }

    void QIFDocumentType::
    Transforms (::std::auto_ptr< Transforms_type > x)
    {
      this->Transforms_.set (x);
    }

    const QIFDocumentType::CoordinateSystems_optional& QIFDocumentType::
    CoordinateSystems () const
    {
      return this->CoordinateSystems_;
    }

    QIFDocumentType::CoordinateSystems_optional& QIFDocumentType::
    CoordinateSystems ()
    {
      return this->CoordinateSystems_;
    }

    void QIFDocumentType::
    CoordinateSystems (const CoordinateSystems_type& x)
    {
      this->CoordinateSystems_.set (x);
    }

    void QIFDocumentType::
    CoordinateSystems (const CoordinateSystems_optional& x)
    {
      this->CoordinateSystems_ = x;
    }

    void QIFDocumentType::
    CoordinateSystems (::std::auto_ptr< CoordinateSystems_type > x)
    {
      this->CoordinateSystems_.set (x);
    }

    const QIFDocumentType::DatumReferenceFrames_optional& QIFDocumentType::
    DatumReferenceFrames () const
    {
      return this->DatumReferenceFrames_;
    }

    QIFDocumentType::DatumReferenceFrames_optional& QIFDocumentType::
    DatumReferenceFrames ()
    {
      return this->DatumReferenceFrames_;
    }

    void QIFDocumentType::
    DatumReferenceFrames (const DatumReferenceFrames_type& x)
    {
      this->DatumReferenceFrames_.set (x);
    }

    void QIFDocumentType::
    DatumReferenceFrames (const DatumReferenceFrames_optional& x)
    {
      this->DatumReferenceFrames_ = x;
    }

    void QIFDocumentType::
    DatumReferenceFrames (::std::auto_ptr< DatumReferenceFrames_type > x)
    {
      this->DatumReferenceFrames_.set (x);
    }

    const QIFDocumentType::MeasurementResources_optional& QIFDocumentType::
    MeasurementResources () const
    {
      return this->MeasurementResources_;
    }

    QIFDocumentType::MeasurementResources_optional& QIFDocumentType::
    MeasurementResources ()
    {
      return this->MeasurementResources_;
    }

    void QIFDocumentType::
    MeasurementResources (const MeasurementResources_type& x)
    {
      this->MeasurementResources_.set (x);
    }

    void QIFDocumentType::
    MeasurementResources (const MeasurementResources_optional& x)
    {
      this->MeasurementResources_ = x;
    }

    void QIFDocumentType::
    MeasurementResources (::std::auto_ptr< MeasurementResources_type > x)
    {
      this->MeasurementResources_.set (x);
    }

    const QIFDocumentType::ThreadSpecifications_optional& QIFDocumentType::
    ThreadSpecifications () const
    {
      return this->ThreadSpecifications_;
    }

    QIFDocumentType::ThreadSpecifications_optional& QIFDocumentType::
    ThreadSpecifications ()
    {
      return this->ThreadSpecifications_;
    }

    void QIFDocumentType::
    ThreadSpecifications (const ThreadSpecifications_type& x)
    {
      this->ThreadSpecifications_.set (x);
    }

    void QIFDocumentType::
    ThreadSpecifications (const ThreadSpecifications_optional& x)
    {
      this->ThreadSpecifications_ = x;
    }

    void QIFDocumentType::
    ThreadSpecifications (::std::auto_ptr< ThreadSpecifications_type > x)
    {
      this->ThreadSpecifications_.set (x);
    }

    const QIFDocumentType::Product_optional& QIFDocumentType::
    Product () const
    {
      return this->Product_;
    }

    QIFDocumentType::Product_optional& QIFDocumentType::
    Product ()
    {
      return this->Product_;
    }

    void QIFDocumentType::
    Product (const Product_type& x)
    {
      this->Product_.set (x);
    }

    void QIFDocumentType::
    Product (const Product_optional& x)
    {
      this->Product_ = x;
    }

    void QIFDocumentType::
    Product (::std::auto_ptr< Product_type > x)
    {
      this->Product_.set (x);
    }

    const QIFDocumentType::Features_optional& QIFDocumentType::
    Features () const
    {
      return this->Features_;
    }

    QIFDocumentType::Features_optional& QIFDocumentType::
    Features ()
    {
      return this->Features_;
    }

    void QIFDocumentType::
    Features (const Features_type& x)
    {
      this->Features_.set (x);
    }

    void QIFDocumentType::
    Features (const Features_optional& x)
    {
      this->Features_ = x;
    }

    void QIFDocumentType::
    Features (::std::auto_ptr< Features_type > x)
    {
      this->Features_.set (x);
    }

    const QIFDocumentType::Characteristics_optional& QIFDocumentType::
    Characteristics () const
    {
      return this->Characteristics_;
    }

    QIFDocumentType::Characteristics_optional& QIFDocumentType::
    Characteristics ()
    {
      return this->Characteristics_;
    }

    void QIFDocumentType::
    Characteristics (const Characteristics_type& x)
    {
      this->Characteristics_.set (x);
    }

    void QIFDocumentType::
    Characteristics (const Characteristics_optional& x)
    {
      this->Characteristics_ = x;
    }

    void QIFDocumentType::
    Characteristics (::std::auto_ptr< Characteristics_type > x)
    {
      this->Characteristics_.set (x);
    }

    const QIFDocumentType::MeasurementPlan_optional& QIFDocumentType::
    MeasurementPlan () const
    {
      return this->MeasurementPlan_;
    }

    QIFDocumentType::MeasurementPlan_optional& QIFDocumentType::
    MeasurementPlan ()
    {
      return this->MeasurementPlan_;
    }

    void QIFDocumentType::
    MeasurementPlan (const MeasurementPlan_type& x)
    {
      this->MeasurementPlan_.set (x);
    }

    void QIFDocumentType::
    MeasurementPlan (const MeasurementPlan_optional& x)
    {
      this->MeasurementPlan_ = x;
    }

    void QIFDocumentType::
    MeasurementPlan (::std::auto_ptr< MeasurementPlan_type > x)
    {
      this->MeasurementPlan_.set (x);
    }

    const QIFDocumentType::MeasurementsResults_optional& QIFDocumentType::
    MeasurementsResults () const
    {
      return this->MeasurementsResults_;
    }

    QIFDocumentType::MeasurementsResults_optional& QIFDocumentType::
    MeasurementsResults ()
    {
      return this->MeasurementsResults_;
    }

    void QIFDocumentType::
    MeasurementsResults (const MeasurementsResults_type& x)
    {
      this->MeasurementsResults_.set (x);
    }

    void QIFDocumentType::
    MeasurementsResults (const MeasurementsResults_optional& x)
    {
      this->MeasurementsResults_ = x;
    }

    void QIFDocumentType::
    MeasurementsResults (::std::auto_ptr< MeasurementsResults_type > x)
    {
      this->MeasurementsResults_.set (x);
    }

    const QIFDocumentType::Statistics_optional& QIFDocumentType::
    Statistics () const
    {
      return this->Statistics_;
    }

    QIFDocumentType::Statistics_optional& QIFDocumentType::
    Statistics ()
    {
      return this->Statistics_;
    }

    void QIFDocumentType::
    Statistics (const Statistics_type& x)
    {
      this->Statistics_.set (x);
    }

    void QIFDocumentType::
    Statistics (const Statistics_optional& x)
    {
      this->Statistics_ = x;
    }

    void QIFDocumentType::
    Statistics (::std::auto_ptr< Statistics_type > x)
    {
      this->Statistics_.set (x);
    }

    const QIFDocumentType::ManufacturingProcessTraceabilities_optional& QIFDocumentType::
    ManufacturingProcessTraceabilities () const
    {
      return this->ManufacturingProcessTraceabilities_;
    }

    QIFDocumentType::ManufacturingProcessTraceabilities_optional& QIFDocumentType::
    ManufacturingProcessTraceabilities ()
    {
      return this->ManufacturingProcessTraceabilities_;
    }

    void QIFDocumentType::
    ManufacturingProcessTraceabilities (const ManufacturingProcessTraceabilities_type& x)
    {
      this->ManufacturingProcessTraceabilities_.set (x);
    }

    void QIFDocumentType::
    ManufacturingProcessTraceabilities (const ManufacturingProcessTraceabilities_optional& x)
    {
      this->ManufacturingProcessTraceabilities_ = x;
    }

    void QIFDocumentType::
    ManufacturingProcessTraceabilities (::std::auto_ptr< ManufacturingProcessTraceabilities_type > x)
    {
      this->ManufacturingProcessTraceabilities_.set (x);
    }

    const QIFDocumentType::Rules_optional& QIFDocumentType::
    Rules () const
    {
      return this->Rules_;
    }

    QIFDocumentType::Rules_optional& QIFDocumentType::
    Rules ()
    {
      return this->Rules_;
    }

    void QIFDocumentType::
    Rules (const Rules_type& x)
    {
      this->Rules_.set (x);
    }

    void QIFDocumentType::
    Rules (const Rules_optional& x)
    {
      this->Rules_ = x;
    }

    void QIFDocumentType::
    Rules (::std::auto_ptr< Rules_type > x)
    {
      this->Rules_.set (x);
    }

    const QIFDocumentType::UserDataXML_optional& QIFDocumentType::
    UserDataXML () const
    {
      return this->UserDataXML_;
    }

    QIFDocumentType::UserDataXML_optional& QIFDocumentType::
    UserDataXML ()
    {
      return this->UserDataXML_;
    }

    void QIFDocumentType::
    UserDataXML (const UserDataXML_type& x)
    {
      this->UserDataXML_.set (x);
    }

    void QIFDocumentType::
    UserDataXML (const UserDataXML_optional& x)
    {
      this->UserDataXML_ = x;
    }

    void QIFDocumentType::
    UserDataXML (::std::auto_ptr< UserDataXML_type > x)
    {
      this->UserDataXML_.set (x);
    }

    const QIFDocumentType::versionQIF_type& QIFDocumentType::
    versionQIF () const
    {
      return this->versionQIF_.get ();
    }

    const QIFDocumentType::versionQIF_type& QIFDocumentType::
    versionQIF_default_value ()
    {
      return versionQIF_default_value_;
    }

    const QIFDocumentType::idMax_optional& QIFDocumentType::
    idMax () const
    {
      return this->idMax_;
    }

    QIFDocumentType::idMax_optional& QIFDocumentType::
    idMax ()
    {
      return this->idMax_;
    }

    void QIFDocumentType::
    idMax (const idMax_type& x)
    {
      this->idMax_.set (x);
    }

    void QIFDocumentType::
    idMax (const idMax_optional& x)
    {
      this->idMax_ = x;
    }


    // QIFDocumentHeaderType
    // 

    const QIFDocumentHeaderType::Application_optional& QIFDocumentHeaderType::
    Application () const
    {
      return this->Application_;
    }

    QIFDocumentHeaderType::Application_optional& QIFDocumentHeaderType::
    Application ()
    {
      return this->Application_;
    }

    void QIFDocumentHeaderType::
    Application (const Application_type& x)
    {
      this->Application_.set (x);
    }

    void QIFDocumentHeaderType::
    Application (const Application_optional& x)
    {
      this->Application_ = x;
    }

    void QIFDocumentHeaderType::
    Application (::std::auto_ptr< Application_type > x)
    {
      this->Application_.set (x);
    }

    const QIFDocumentHeaderType::Author_optional& QIFDocumentHeaderType::
    Author () const
    {
      return this->Author_;
    }

    QIFDocumentHeaderType::Author_optional& QIFDocumentHeaderType::
    Author ()
    {
      return this->Author_;
    }

    void QIFDocumentHeaderType::
    Author (const Author_type& x)
    {
      this->Author_.set (x);
    }

    void QIFDocumentHeaderType::
    Author (const Author_optional& x)
    {
      this->Author_ = x;
    }

    void QIFDocumentHeaderType::
    Author (::std::auto_ptr< Author_type > x)
    {
      this->Author_.set (x);
    }

    const QIFDocumentHeaderType::ApplicationSource_optional& QIFDocumentHeaderType::
    ApplicationSource () const
    {
      return this->ApplicationSource_;
    }

    QIFDocumentHeaderType::ApplicationSource_optional& QIFDocumentHeaderType::
    ApplicationSource ()
    {
      return this->ApplicationSource_;
    }

    void QIFDocumentHeaderType::
    ApplicationSource (const ApplicationSource_type& x)
    {
      this->ApplicationSource_.set (x);
    }

    void QIFDocumentHeaderType::
    ApplicationSource (const ApplicationSource_optional& x)
    {
      this->ApplicationSource_ = x;
    }

    void QIFDocumentHeaderType::
    ApplicationSource (::std::auto_ptr< ApplicationSource_type > x)
    {
      this->ApplicationSource_.set (x);
    }

    const QIFDocumentHeaderType::Description_optional& QIFDocumentHeaderType::
    Description () const
    {
      return this->Description_;
    }

    QIFDocumentHeaderType::Description_optional& QIFDocumentHeaderType::
    Description ()
    {
      return this->Description_;
    }

    void QIFDocumentHeaderType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void QIFDocumentHeaderType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void QIFDocumentHeaderType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const QIFDocumentHeaderType::Scope_optional& QIFDocumentHeaderType::
    Scope () const
    {
      return this->Scope_;
    }

    QIFDocumentHeaderType::Scope_optional& QIFDocumentHeaderType::
    Scope ()
    {
      return this->Scope_;
    }

    void QIFDocumentHeaderType::
    Scope (const Scope_type& x)
    {
      this->Scope_.set (x);
    }

    void QIFDocumentHeaderType::
    Scope (const Scope_optional& x)
    {
      this->Scope_ = x;
    }

    void QIFDocumentHeaderType::
    Scope (::std::auto_ptr< Scope_type > x)
    {
      this->Scope_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xsd
{
  namespace qif2
  {
    // QIFDocumentType
    //

    const QIFDocumentType::versionQIF_type QIFDocumentType::versionQIF_default_value_ (
      "2.0.0");

    QIFDocumentType::
    QIFDocumentType ()
    : ::xml_schema::type (),
      Attributes_ (::xml_schema::flags (), this),
      VersionHistory_ (::xml_schema::flags (), this),
      Version_ (::xml_schema::flags (), this),
      Header_ (::xml_schema::flags (), this),
      PreInspectionTraceability_ (::xml_schema::flags (), this),
      FileUnits_ (::xml_schema::flags (), this),
      DatumDefinitions_ (::xml_schema::flags (), this),
      DatumTargetDefinitions_ (::xml_schema::flags (), this),
      Transforms_ (::xml_schema::flags (), this),
      CoordinateSystems_ (::xml_schema::flags (), this),
      DatumReferenceFrames_ (::xml_schema::flags (), this),
      MeasurementResources_ (::xml_schema::flags (), this),
      ThreadSpecifications_ (::xml_schema::flags (), this),
      Product_ (::xml_schema::flags (), this),
      Features_ (::xml_schema::flags (), this),
      Characteristics_ (::xml_schema::flags (), this),
      MeasurementPlan_ (::xml_schema::flags (), this),
      MeasurementsResults_ (::xml_schema::flags (), this),
      Statistics_ (::xml_schema::flags (), this),
      ManufacturingProcessTraceabilities_ (::xml_schema::flags (), this),
      Rules_ (::xml_schema::flags (), this),
      UserDataXML_ (::xml_schema::flags (), this),
      versionQIF_ (versionQIF_default_value (), ::xml_schema::flags (), this),
      idMax_ (::xml_schema::flags (), this)
    {
    }

    QIFDocumentType::
    QIFDocumentType (const QIFDocumentType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      VersionHistory_ (x.VersionHistory_, f, this),
      Version_ (x.Version_, f, this),
      Header_ (x.Header_, f, this),
      PreInspectionTraceability_ (x.PreInspectionTraceability_, f, this),
      FileUnits_ (x.FileUnits_, f, this),
      DatumDefinitions_ (x.DatumDefinitions_, f, this),
      DatumTargetDefinitions_ (x.DatumTargetDefinitions_, f, this),
      Transforms_ (x.Transforms_, f, this),
      CoordinateSystems_ (x.CoordinateSystems_, f, this),
      DatumReferenceFrames_ (x.DatumReferenceFrames_, f, this),
      MeasurementResources_ (x.MeasurementResources_, f, this),
      ThreadSpecifications_ (x.ThreadSpecifications_, f, this),
      Product_ (x.Product_, f, this),
      Features_ (x.Features_, f, this),
      Characteristics_ (x.Characteristics_, f, this),
      MeasurementPlan_ (x.MeasurementPlan_, f, this),
      MeasurementsResults_ (x.MeasurementsResults_, f, this),
      Statistics_ (x.Statistics_, f, this),
      ManufacturingProcessTraceabilities_ (x.ManufacturingProcessTraceabilities_, f, this),
      Rules_ (x.Rules_, f, this),
      UserDataXML_ (x.UserDataXML_, f, this),
      versionQIF_ (x.versionQIF_, f, this),
      idMax_ (x.idMax_, f, this)
    {
    }

    QIFDocumentType::
    QIFDocumentType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (f, this),
      VersionHistory_ (f, this),
      Version_ (f, this),
      Header_ (f, this),
      PreInspectionTraceability_ (f, this),
      FileUnits_ (f, this),
      DatumDefinitions_ (f, this),
      DatumTargetDefinitions_ (f, this),
      Transforms_ (f, this),
      CoordinateSystems_ (f, this),
      DatumReferenceFrames_ (f, this),
      MeasurementResources_ (f, this),
      ThreadSpecifications_ (f, this),
      Product_ (f, this),
      Features_ (f, this),
      Characteristics_ (f, this),
      MeasurementPlan_ (f, this),
      MeasurementsResults_ (f, this),
      Statistics_ (f, this),
      ManufacturingProcessTraceabilities_ (f, this),
      Rules_ (f, this),
      UserDataXML_ (f, this),
      versionQIF_ (f, this),
      idMax_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void QIFDocumentType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // VersionHistory
        //
        if (n.name () == "VersionHistory" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< VersionHistory_type > r (
            VersionHistory_traits::create (i, f, this));

          if (!this->VersionHistory_)
          {
            this->VersionHistory_.set (r);
            continue;
          }
        }

        // Version
        //
        if (n.name () == "Version" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Version_type > r (
            Version_traits::create (i, f, this));

          if (!this->Version_)
          {
            this->Version_.set (r);
            continue;
          }
        }

        // Header
        //
        if (n.name () == "Header" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Header_type > r (
            Header_traits::create (i, f, this));

          if (!this->Header_)
          {
            this->Header_.set (r);
            continue;
          }
        }

        // PreInspectionTraceability
        //
        if (n.name () == "PreInspectionTraceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PreInspectionTraceability_type > r (
            PreInspectionTraceability_traits::create (i, f, this));

          if (!this->PreInspectionTraceability_)
          {
            this->PreInspectionTraceability_.set (r);
            continue;
          }
        }

        // FileUnits
        //
        if (n.name () == "FileUnits" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FileUnits_type > r (
            FileUnits_traits::create (i, f, this));

          if (!this->FileUnits_)
          {
            this->FileUnits_.set (r);
            continue;
          }
        }

        // DatumDefinitions
        //
        if (n.name () == "DatumDefinitions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumDefinitions_type > r (
            DatumDefinitions_traits::create (i, f, this));

          if (!this->DatumDefinitions_)
          {
            this->DatumDefinitions_.set (r);
            continue;
          }
        }

        // DatumTargetDefinitions
        //
        if (n.name () == "DatumTargetDefinitions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumTargetDefinitions_type > r (
            DatumTargetDefinitions_traits::create (i, f, this));

          if (!this->DatumTargetDefinitions_)
          {
            this->DatumTargetDefinitions_.set (r);
            continue;
          }
        }

        // Transforms
        //
        if (n.name () == "Transforms" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transforms_type > r (
            Transforms_traits::create (i, f, this));

          if (!this->Transforms_)
          {
            this->Transforms_.set (r);
            continue;
          }
        }

        // CoordinateSystems
        //
        if (n.name () == "CoordinateSystems" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystems_type > r (
            CoordinateSystems_traits::create (i, f, this));

          if (!this->CoordinateSystems_)
          {
            this->CoordinateSystems_.set (r);
            continue;
          }
        }

        // DatumReferenceFrames
        //
        if (n.name () == "DatumReferenceFrames" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumReferenceFrames_type > r (
            DatumReferenceFrames_traits::create (i, f, this));

          if (!this->DatumReferenceFrames_)
          {
            this->DatumReferenceFrames_.set (r);
            continue;
          }
        }

        // MeasurementResources
        //
        if (n.name () == "MeasurementResources" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementResources_type > r (
            MeasurementResources_traits::create (i, f, this));

          if (!this->MeasurementResources_)
          {
            this->MeasurementResources_.set (r);
            continue;
          }
        }

        // ThreadSpecifications
        //
        if (n.name () == "ThreadSpecifications" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThreadSpecifications_type > r (
            ThreadSpecifications_traits::create (i, f, this));

          if (!this->ThreadSpecifications_)
          {
            this->ThreadSpecifications_.set (r);
            continue;
          }
        }

        // Product
        //
        if (n.name () == "Product" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Product_type > r (
            Product_traits::create (i, f, this));

          if (!this->Product_)
          {
            this->Product_.set (r);
            continue;
          }
        }

        // Features
        //
        if (n.name () == "Features" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Features_type > r (
            Features_traits::create (i, f, this));

          if (!this->Features_)
          {
            this->Features_.set (r);
            continue;
          }
        }

        // Characteristics
        //
        if (n.name () == "Characteristics" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Characteristics_type > r (
            Characteristics_traits::create (i, f, this));

          if (!this->Characteristics_)
          {
            this->Characteristics_.set (r);
            continue;
          }
        }

        // MeasurementPlan
        //
        if (n.name () == "MeasurementPlan" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementPlan_type > r (
            MeasurementPlan_traits::create (i, f, this));

          if (!this->MeasurementPlan_)
          {
            this->MeasurementPlan_.set (r);
            continue;
          }
        }

        // MeasurementsResults
        //
        if (n.name () == "MeasurementsResults" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementsResults_type > r (
            MeasurementsResults_traits::create (i, f, this));

          if (!this->MeasurementsResults_)
          {
            this->MeasurementsResults_.set (r);
            continue;
          }
        }

        // Statistics
        //
        if (n.name () == "Statistics" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Statistics_type > r (
            Statistics_traits::create (i, f, this));

          if (!this->Statistics_)
          {
            this->Statistics_.set (r);
            continue;
          }
        }

        // ManufacturingProcessTraceabilities
        //
        if (n.name () == "ManufacturingProcessTraceabilities" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessTraceabilities_type > r (
            ManufacturingProcessTraceabilities_traits::create (i, f, this));

          if (!this->ManufacturingProcessTraceabilities_)
          {
            this->ManufacturingProcessTraceabilities_.set (r);
            continue;
          }
        }

        // Rules
        //
        if (n.name () == "Rules" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Rules_type > r (
            Rules_traits::create (i, f, this));

          if (!this->Rules_)
          {
            this->Rules_.set (r);
            continue;
          }
        }

        // UserDataXML
        //
        if (n.name () == "UserDataXML" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UserDataXML_type > r (
            UserDataXML_traits::create (i, f, this));

          if (!this->UserDataXML_)
          {
            this->UserDataXML_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "versionQIF" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< versionQIF_type > r (
            versionQIF_traits::create (i, f, this));

          this->versionQIF_.set (r);
          continue;
        }

        if (n.name () == "idMax" && n.namespace_ ().empty ())
        {
          this->idMax_.set (idMax_traits::create (i, f, this));
          continue;
        }
      }

      if (!versionQIF_.present ())
      {
        this->versionQIF_.set (versionQIF_default_value ());
      }
    }

    QIFDocumentType* QIFDocumentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class QIFDocumentType (*this, f, c);
    }

    QIFDocumentType::
    ~QIFDocumentType ()
    {
    }

    // QIFDocumentHeaderType
    //

    QIFDocumentHeaderType::
    QIFDocumentHeaderType ()
    : ::xml_schema::type (),
      Application_ (::xml_schema::flags (), this),
      Author_ (::xml_schema::flags (), this),
      ApplicationSource_ (::xml_schema::flags (), this),
      Description_ (::xml_schema::flags (), this),
      Scope_ (::xml_schema::flags (), this)
    {
    }

    QIFDocumentHeaderType::
    QIFDocumentHeaderType (const QIFDocumentHeaderType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Application_ (x.Application_, f, this),
      Author_ (x.Author_, f, this),
      ApplicationSource_ (x.ApplicationSource_, f, this),
      Description_ (x.Description_, f, this),
      Scope_ (x.Scope_, f, this)
    {
    }

    QIFDocumentHeaderType::
    QIFDocumentHeaderType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Application_ (f, this),
      Author_ (f, this),
      ApplicationSource_ (f, this),
      Description_ (f, this),
      Scope_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void QIFDocumentHeaderType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Application
        //
        if (n.name () == "Application" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Application_type > r (
            Application_traits::create (i, f, this));

          if (!this->Application_)
          {
            this->Application_.set (r);
            continue;
          }
        }

        // Author
        //
        if (n.name () == "Author" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Author_type > r (
            Author_traits::create (i, f, this));

          if (!this->Author_)
          {
            this->Author_.set (r);
            continue;
          }
        }

        // ApplicationSource
        //
        if (n.name () == "ApplicationSource" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ApplicationSource_type > r (
            ApplicationSource_traits::create (i, f, this));

          if (!this->ApplicationSource_)
          {
            this->ApplicationSource_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // Scope
        //
        if (n.name () == "Scope" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Scope_type > r (
            Scope_traits::create (i, f, this));

          if (!this->Scope_)
          {
            this->Scope_.set (r);
            continue;
          }
        }

        break;
      }
    }

    QIFDocumentHeaderType* QIFDocumentHeaderType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class QIFDocumentHeaderType (*this, f, c);
    }

    QIFDocumentHeaderType::
    ~QIFDocumentHeaderType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
        ::xsd::qif2::QIFDocument (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
        ::xsd::qif2::QIFDocument (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
        ::xsd::qif2::QIFDocument (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::QIFDocument (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::QIFDocument (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::QIFDocument (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::QIFDocument (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::QIFDocument (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::QIFDocument (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
        ::xsd::qif2::QIFDocument (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
        ::xsd::qif2::QIFDocument (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
        ::xsd::qif2::QIFDocument (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
          ::xsd::qif2::QIFDocument (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "QIFDocument" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::QIFDocumentType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "QIFDocument",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentType >
    QIFDocument (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "QIFDocument" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::QIFDocumentType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::QIFDocumentType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "QIFDocument",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
        ::xsd::qif2::Header (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
        ::xsd::qif2::Header (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
        ::xsd::qif2::Header (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Header (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Header (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Header (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Header (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Header (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Header (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
        ::xsd::qif2::Header (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
        ::xsd::qif2::Header (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
        ::xsd::qif2::Header (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
          ::xsd::qif2::Header (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Header" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::QIFDocumentHeaderType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Header",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType >
    Header (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Header" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::QIFDocumentHeaderType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::QIFDocumentHeaderType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Header",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

