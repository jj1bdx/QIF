// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Statistics.hxx"

namespace xsd
{
  namespace qif2
  {
    // StatsValuesEnumType
    // 

    StatsValuesEnumType::
    StatsValuesEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_StatsValuesEnumType_literals_[v])
    {
    }

    StatsValuesEnumType::
    StatsValuesEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    StatsValuesEnumType::
    StatsValuesEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    StatsValuesEnumType::
    StatsValuesEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    StatsValuesEnumType::
    StatsValuesEnumType (const StatsValuesEnumType& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    StatsValuesEnumType& StatsValuesEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_StatsValuesEnumType_literals_[v]);

      return *this;
    }


    // ListAccumulatedStatsValuesType
    //

    ListAccumulatedStatsValuesType::
    ListAccumulatedStatsValuesType ()
    : ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > ( ::xml_schema::flags (0), this)
    {
    }

    ListAccumulatedStatsValuesType::
    ListAccumulatedStatsValuesType (size_type n, const ::xsd::qif2::StatsValuesEnumType& x)
    : ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (n, x, this)
    {
    }

    ListAccumulatedStatsValuesType::
    ListAccumulatedStatsValuesType (const ListAccumulatedStatsValuesType& o,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (o, f, this)
    {
    }

    // SubgroupStatsValuesEnumType
    // 

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_SubgroupStatsValuesEnumType_literals_[v])
    {
    }

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const SubgroupStatsValuesEnumType& v,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    SubgroupStatsValuesEnumType& SubgroupStatsValuesEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_SubgroupStatsValuesEnumType_literals_[v]);

      return *this;
    }


    // ListSubgroupStatsValuesType
    //

    ListSubgroupStatsValuesType::
    ListSubgroupStatsValuesType ()
    : ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > ( ::xml_schema::flags (0), this)
    {
    }

    ListSubgroupStatsValuesType::
    ListSubgroupStatsValuesType (size_type n, const ::xsd::qif2::SubgroupStatsValuesEnumType& x)
    : ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > (n, x, this)
    {
    }

    ListSubgroupStatsValuesType::
    ListSubgroupStatsValuesType (const ListSubgroupStatsValuesType& o,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > (o, f, this)
    {
    }

    // SubgroupDecimalType
    // 

    const SubgroupDecimalType::subgroupId_type& SubgroupDecimalType::
    subgroupId () const
    {
      return this->subgroupId_.get ();
    }

    SubgroupDecimalType::subgroupId_type& SubgroupDecimalType::
    subgroupId ()
    {
      return this->subgroupId_.get ();
    }

    void SubgroupDecimalType::
    subgroupId (const subgroupId_type& x)
    {
      this->subgroupId_.set (x);
    }

    void SubgroupDecimalType::
    subgroupId (::std::auto_ptr< subgroupId_type > x)
    {
      this->subgroupId_.set (x);
    }


    // SubgroupIntegerType
    // 

    const SubgroupIntegerType::subgroupId_type& SubgroupIntegerType::
    subgroupId () const
    {
      return this->subgroupId_.get ();
    }

    SubgroupIntegerType::subgroupId_type& SubgroupIntegerType::
    subgroupId ()
    {
      return this->subgroupId_.get ();
    }

    void SubgroupIntegerType::
    subgroupId (const subgroupId_type& x)
    {
      this->subgroupId_.set (x);
    }

    void SubgroupIntegerType::
    subgroupId (::std::auto_ptr< subgroupId_type > x)
    {
      this->subgroupId_.set (x);
    }


    // SummaryStatsValuesEnumType
    // 

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_SummaryStatsValuesEnumType_literals_[v])
    {
    }

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const SummaryStatsValuesEnumType& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    SummaryStatsValuesEnumType& SummaryStatsValuesEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_SummaryStatsValuesEnumType_literals_[v]);

      return *this;
    }


    // ListSummaryStatsValuesType
    //

    ListSummaryStatsValuesType::
    ListSummaryStatsValuesType ()
    : ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > ( ::xml_schema::flags (0), this)
    {
    }

    ListSummaryStatsValuesType::
    ListSummaryStatsValuesType (size_type n, const ::xsd::qif2::StatsValuesEnumType& x)
    : ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (n, x, this)
    {
    }

    ListSummaryStatsValuesType::
    ListSummaryStatsValuesType (const ListSummaryStatsValuesType& o,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::simple_type (o, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (o, f, this)
    {
    }

    // SummaryStatsValuesType
    // 

    const SummaryStatsValuesType::SummaryType_type& SummaryStatsValuesType::
    SummaryType () const
    {
      return this->SummaryType_.get ();
    }

    SummaryStatsValuesType::SummaryType_type& SummaryStatsValuesType::
    SummaryType ()
    {
      return this->SummaryType_.get ();
    }

    void SummaryStatsValuesType::
    SummaryType (const SummaryType_type& x)
    {
      this->SummaryType_.set (x);
    }

    void SummaryStatsValuesType::
    SummaryType (::std::auto_ptr< SummaryType_type > x)
    {
      this->SummaryType_.set (x);
    }

    const SummaryStatsValuesType::SummaryStats_type& SummaryStatsValuesType::
    SummaryStats () const
    {
      return this->SummaryStats_.get ();
    }

    SummaryStatsValuesType::SummaryStats_type& SummaryStatsValuesType::
    SummaryStats ()
    {
      return this->SummaryStats_.get ();
    }

    void SummaryStatsValuesType::
    SummaryStats (const SummaryStats_type& x)
    {
      this->SummaryStats_.set (x);
    }

    void SummaryStatsValuesType::
    SummaryStats (::std::auto_ptr< SummaryStats_type > x)
    {
      this->SummaryStats_.set (x);
    }


    // LimitingNumberType
    // 

    const LimitingNumberType::Count_optional& LimitingNumberType::
    Count () const
    {
      return this->Count_;
    }

    LimitingNumberType::Count_optional& LimitingNumberType::
    Count ()
    {
      return this->Count_;
    }

    void LimitingNumberType::
    Count (const Count_type& x)
    {
      this->Count_.set (x);
    }

    void LimitingNumberType::
    Count (const Count_optional& x)
    {
      this->Count_ = x;
    }

    const LimitingNumberType::Fraction_optional& LimitingNumberType::
    Fraction () const
    {
      return this->Fraction_;
    }

    LimitingNumberType::Fraction_optional& LimitingNumberType::
    Fraction ()
    {
      return this->Fraction_;
    }

    void LimitingNumberType::
    Fraction (const Fraction_type& x)
    {
      this->Fraction_.set (x);
    }

    void LimitingNumberType::
    Fraction (const Fraction_optional& x)
    {
      this->Fraction_ = x;
    }


    // CriterionDecimalType
    // 

    const CriterionDecimalType::Limit_type& CriterionDecimalType::
    Limit () const
    {
      return this->Limit_.get ();
    }

    CriterionDecimalType::Limit_type& CriterionDecimalType::
    Limit ()
    {
      return this->Limit_.get ();
    }

    void CriterionDecimalType::
    Limit (const Limit_type& x)
    {
      this->Limit_.set (x);
    }

    const CriterionDecimalType::NumberAllowedExceptions_optional& CriterionDecimalType::
    NumberAllowedExceptions () const
    {
      return this->NumberAllowedExceptions_;
    }

    CriterionDecimalType::NumberAllowedExceptions_optional& CriterionDecimalType::
    NumberAllowedExceptions ()
    {
      return this->NumberAllowedExceptions_;
    }

    void CriterionDecimalType::
    NumberAllowedExceptions (const NumberAllowedExceptions_type& x)
    {
      this->NumberAllowedExceptions_.set (x);
    }

    void CriterionDecimalType::
    NumberAllowedExceptions (const NumberAllowedExceptions_optional& x)
    {
      this->NumberAllowedExceptions_ = x;
    }

    void CriterionDecimalType::
    NumberAllowedExceptions (::std::auto_ptr< NumberAllowedExceptions_type > x)
    {
      this->NumberAllowedExceptions_.set (x);
    }

    const CriterionDecimalType::ExtremeLimit_optional& CriterionDecimalType::
    ExtremeLimit () const
    {
      return this->ExtremeLimit_;
    }

    CriterionDecimalType::ExtremeLimit_optional& CriterionDecimalType::
    ExtremeLimit ()
    {
      return this->ExtremeLimit_;
    }

    void CriterionDecimalType::
    ExtremeLimit (const ExtremeLimit_type& x)
    {
      this->ExtremeLimit_.set (x);
    }

    void CriterionDecimalType::
    ExtremeLimit (const ExtremeLimit_optional& x)
    {
      this->ExtremeLimit_ = x;
    }


    // CriterionLinearType
    // 

    const CriterionLinearType::linearUnit_optional& CriterionLinearType::
    linearUnit () const
    {
      return this->linearUnit_;
    }

    CriterionLinearType::linearUnit_optional& CriterionLinearType::
    linearUnit ()
    {
      return this->linearUnit_;
    }

    void CriterionLinearType::
    linearUnit (const linearUnit_type& x)
    {
      this->linearUnit_.set (x);
    }

    void CriterionLinearType::
    linearUnit (const linearUnit_optional& x)
    {
      this->linearUnit_ = x;
    }

    void CriterionLinearType::
    linearUnit (::std::auto_ptr< linearUnit_type > x)
    {
      this->linearUnit_.set (x);
    }


    // CriterionAngularType
    // 

    const CriterionAngularType::angularUnit_optional& CriterionAngularType::
    angularUnit () const
    {
      return this->angularUnit_;
    }

    CriterionAngularType::angularUnit_optional& CriterionAngularType::
    angularUnit ()
    {
      return this->angularUnit_;
    }

    void CriterionAngularType::
    angularUnit (const angularUnit_type& x)
    {
      this->angularUnit_.set (x);
    }

    void CriterionAngularType::
    angularUnit (const angularUnit_optional& x)
    {
      this->angularUnit_ = x;
    }

    void CriterionAngularType::
    angularUnit (::std::auto_ptr< angularUnit_type > x)
    {
      this->angularUnit_.set (x);
    }


    // CriterionAreaType
    // 

    const CriterionAreaType::areaUnit_optional& CriterionAreaType::
    areaUnit () const
    {
      return this->areaUnit_;
    }

    CriterionAreaType::areaUnit_optional& CriterionAreaType::
    areaUnit ()
    {
      return this->areaUnit_;
    }

    void CriterionAreaType::
    areaUnit (const areaUnit_type& x)
    {
      this->areaUnit_.set (x);
    }

    void CriterionAreaType::
    areaUnit (const areaUnit_optional& x)
    {
      this->areaUnit_ = x;
    }

    void CriterionAreaType::
    areaUnit (::std::auto_ptr< areaUnit_type > x)
    {
      this->areaUnit_.set (x);
    }


    // CriterionForceType
    // 

    const CriterionForceType::forceUnit_optional& CriterionForceType::
    forceUnit () const
    {
      return this->forceUnit_;
    }

    CriterionForceType::forceUnit_optional& CriterionForceType::
    forceUnit ()
    {
      return this->forceUnit_;
    }

    void CriterionForceType::
    forceUnit (const forceUnit_type& x)
    {
      this->forceUnit_.set (x);
    }

    void CriterionForceType::
    forceUnit (const forceUnit_optional& x)
    {
      this->forceUnit_ = x;
    }

    void CriterionForceType::
    forceUnit (::std::auto_ptr< forceUnit_type > x)
    {
      this->forceUnit_.set (x);
    }


    // CriterionMassType
    // 

    const CriterionMassType::massUnit_optional& CriterionMassType::
    massUnit () const
    {
      return this->massUnit_;
    }

    CriterionMassType::massUnit_optional& CriterionMassType::
    massUnit ()
    {
      return this->massUnit_;
    }

    void CriterionMassType::
    massUnit (const massUnit_type& x)
    {
      this->massUnit_.set (x);
    }

    void CriterionMassType::
    massUnit (const massUnit_optional& x)
    {
      this->massUnit_ = x;
    }

    void CriterionMassType::
    massUnit (::std::auto_ptr< massUnit_type > x)
    {
      this->massUnit_.set (x);
    }


    // CriterionPressureType
    // 

    const CriterionPressureType::pressureUnit_optional& CriterionPressureType::
    pressureUnit () const
    {
      return this->pressureUnit_;
    }

    CriterionPressureType::pressureUnit_optional& CriterionPressureType::
    pressureUnit ()
    {
      return this->pressureUnit_;
    }

    void CriterionPressureType::
    pressureUnit (const pressureUnit_type& x)
    {
      this->pressureUnit_.set (x);
    }

    void CriterionPressureType::
    pressureUnit (const pressureUnit_optional& x)
    {
      this->pressureUnit_ = x;
    }

    void CriterionPressureType::
    pressureUnit (::std::auto_ptr< pressureUnit_type > x)
    {
      this->pressureUnit_.set (x);
    }


    // CriterionSpeedType
    // 

    const CriterionSpeedType::speedUnit_optional& CriterionSpeedType::
    speedUnit () const
    {
      return this->speedUnit_;
    }

    CriterionSpeedType::speedUnit_optional& CriterionSpeedType::
    speedUnit ()
    {
      return this->speedUnit_;
    }

    void CriterionSpeedType::
    speedUnit (const speedUnit_type& x)
    {
      this->speedUnit_.set (x);
    }

    void CriterionSpeedType::
    speedUnit (const speedUnit_optional& x)
    {
      this->speedUnit_ = x;
    }

    void CriterionSpeedType::
    speedUnit (::std::auto_ptr< speedUnit_type > x)
    {
      this->speedUnit_.set (x);
    }


    // CriterionTemperatureType
    // 

    const CriterionTemperatureType::temperatureUnit_optional& CriterionTemperatureType::
    temperatureUnit () const
    {
      return this->temperatureUnit_;
    }

    CriterionTemperatureType::temperatureUnit_optional& CriterionTemperatureType::
    temperatureUnit ()
    {
      return this->temperatureUnit_;
    }

    void CriterionTemperatureType::
    temperatureUnit (const temperatureUnit_type& x)
    {
      this->temperatureUnit_.set (x);
    }

    void CriterionTemperatureType::
    temperatureUnit (const temperatureUnit_optional& x)
    {
      this->temperatureUnit_ = x;
    }

    void CriterionTemperatureType::
    temperatureUnit (::std::auto_ptr< temperatureUnit_type > x)
    {
      this->temperatureUnit_.set (x);
    }


    // CriterionTimeType
    // 

    const CriterionTimeType::timeUnit_optional& CriterionTimeType::
    timeUnit () const
    {
      return this->timeUnit_;
    }

    CriterionTimeType::timeUnit_optional& CriterionTimeType::
    timeUnit ()
    {
      return this->timeUnit_;
    }

    void CriterionTimeType::
    timeUnit (const timeUnit_type& x)
    {
      this->timeUnit_.set (x);
    }

    void CriterionTimeType::
    timeUnit (const timeUnit_optional& x)
    {
      this->timeUnit_ = x;
    }

    void CriterionTimeType::
    timeUnit (::std::auto_ptr< timeUnit_type > x)
    {
      this->timeUnit_.set (x);
    }


    // CriterionUserDefinedUnitType
    // 

    const CriterionUserDefinedUnitType::unitName_type& CriterionUserDefinedUnitType::
    unitName () const
    {
      return this->unitName_.get ();
    }

    CriterionUserDefinedUnitType::unitName_type& CriterionUserDefinedUnitType::
    unitName ()
    {
      return this->unitName_.get ();
    }

    void CriterionUserDefinedUnitType::
    unitName (const unitName_type& x)
    {
      this->unitName_.set (x);
    }

    void CriterionUserDefinedUnitType::
    unitName (::std::auto_ptr< unitName_type > x)
    {
      this->unitName_.set (x);
    }


    // CriterionIntegerType
    // 

    const CriterionIntegerType::Limit_type& CriterionIntegerType::
    Limit () const
    {
      return this->Limit_.get ();
    }

    CriterionIntegerType::Limit_type& CriterionIntegerType::
    Limit ()
    {
      return this->Limit_.get ();
    }

    void CriterionIntegerType::
    Limit (const Limit_type& x)
    {
      this->Limit_.set (x);
    }

    const CriterionIntegerType::NumberAllowedExceptions_optional& CriterionIntegerType::
    NumberAllowedExceptions () const
    {
      return this->NumberAllowedExceptions_;
    }

    CriterionIntegerType::NumberAllowedExceptions_optional& CriterionIntegerType::
    NumberAllowedExceptions ()
    {
      return this->NumberAllowedExceptions_;
    }

    void CriterionIntegerType::
    NumberAllowedExceptions (const NumberAllowedExceptions_type& x)
    {
      this->NumberAllowedExceptions_.set (x);
    }

    void CriterionIntegerType::
    NumberAllowedExceptions (const NumberAllowedExceptions_optional& x)
    {
      this->NumberAllowedExceptions_ = x;
    }

    void CriterionIntegerType::
    NumberAllowedExceptions (::std::auto_ptr< NumberAllowedExceptions_type > x)
    {
      this->NumberAllowedExceptions_.set (x);
    }

    const CriterionIntegerType::ExtremeLimit_optional& CriterionIntegerType::
    ExtremeLimit () const
    {
      return this->ExtremeLimit_;
    }

    CriterionIntegerType::ExtremeLimit_optional& CriterionIntegerType::
    ExtremeLimit ()
    {
      return this->ExtremeLimit_;
    }

    void CriterionIntegerType::
    ExtremeLimit (const ExtremeLimit_type& x)
    {
      this->ExtremeLimit_.set (x);
    }

    void CriterionIntegerType::
    ExtremeLimit (const ExtremeLimit_optional& x)
    {
      this->ExtremeLimit_ = x;
    }


    // CriterionOutOfType
    // 

    const CriterionOutOfType::Numerator_type& CriterionOutOfType::
    Numerator () const
    {
      return this->Numerator_.get ();
    }

    CriterionOutOfType::Numerator_type& CriterionOutOfType::
    Numerator ()
    {
      return this->Numerator_.get ();
    }

    void CriterionOutOfType::
    Numerator (const Numerator_type& x)
    {
      this->Numerator_.set (x);
    }

    const CriterionOutOfType::Denominator_type& CriterionOutOfType::
    Denominator () const
    {
      return this->Denominator_.get ();
    }

    CriterionOutOfType::Denominator_type& CriterionOutOfType::
    Denominator ()
    {
      return this->Denominator_.get ();
    }

    void CriterionOutOfType::
    Denominator (const Denominator_type& x)
    {
      this->Denominator_.set (x);
    }

    const CriterionOutOfType::NumberAllowedExceptions_optional& CriterionOutOfType::
    NumberAllowedExceptions () const
    {
      return this->NumberAllowedExceptions_;
    }

    CriterionOutOfType::NumberAllowedExceptions_optional& CriterionOutOfType::
    NumberAllowedExceptions ()
    {
      return this->NumberAllowedExceptions_;
    }

    void CriterionOutOfType::
    NumberAllowedExceptions (const NumberAllowedExceptions_type& x)
    {
      this->NumberAllowedExceptions_.set (x);
    }

    void CriterionOutOfType::
    NumberAllowedExceptions (const NumberAllowedExceptions_optional& x)
    {
      this->NumberAllowedExceptions_ = x;
    }

    void CriterionOutOfType::
    NumberAllowedExceptions (::std::auto_ptr< NumberAllowedExceptions_type > x)
    {
      this->NumberAllowedExceptions_.set (x);
    }


    // SamplingMethodType
    // 

    const SamplingMethodType::SampleSize_type& SamplingMethodType::
    SampleSize () const
    {
      return this->SampleSize_.get ();
    }

    SamplingMethodType::SampleSize_type& SamplingMethodType::
    SampleSize ()
    {
      return this->SampleSize_.get ();
    }

    void SamplingMethodType::
    SampleSize (const SampleSize_type& x)
    {
      this->SampleSize_.set (x);
    }

    const SamplingMethodType::SamplingPeriod_optional& SamplingMethodType::
    SamplingPeriod () const
    {
      return this->SamplingPeriod_;
    }

    SamplingMethodType::SamplingPeriod_optional& SamplingMethodType::
    SamplingPeriod ()
    {
      return this->SamplingPeriod_;
    }

    void SamplingMethodType::
    SamplingPeriod (const SamplingPeriod_type& x)
    {
      this->SamplingPeriod_.set (x);
    }

    void SamplingMethodType::
    SamplingPeriod (const SamplingPeriod_optional& x)
    {
      this->SamplingPeriod_ = x;
    }

    const SamplingMethodType::SamplingFrequency_optional& SamplingMethodType::
    SamplingFrequency () const
    {
      return this->SamplingFrequency_;
    }

    SamplingMethodType::SamplingFrequency_optional& SamplingMethodType::
    SamplingFrequency ()
    {
      return this->SamplingFrequency_;
    }

    void SamplingMethodType::
    SamplingFrequency (const SamplingFrequency_type& x)
    {
      this->SamplingFrequency_.set (x);
    }

    void SamplingMethodType::
    SamplingFrequency (const SamplingFrequency_optional& x)
    {
      this->SamplingFrequency_ = x;
    }

    const SamplingMethodType::SamplingInterval_optional& SamplingMethodType::
    SamplingInterval () const
    {
      return this->SamplingInterval_;
    }

    SamplingMethodType::SamplingInterval_optional& SamplingMethodType::
    SamplingInterval ()
    {
      return this->SamplingInterval_;
    }

    void SamplingMethodType::
    SamplingInterval (const SamplingInterval_type& x)
    {
      this->SamplingInterval_.set (x);
    }

    void SamplingMethodType::
    SamplingInterval (const SamplingInterval_optional& x)
    {
      this->SamplingInterval_ = x;
    }

    void SamplingMethodType::
    SamplingInterval (::std::auto_ptr< SamplingInterval_type > x)
    {
      this->SamplingInterval_.set (x);
    }


    // SamplingIntervalEnumType
    // 

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_SamplingIntervalEnumType_literals_[v])
    {
    }

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const SamplingIntervalEnumType& v,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    SamplingIntervalEnumType& SamplingIntervalEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_SamplingIntervalEnumType_literals_[v]);

      return *this;
    }


    // SamplingIntervalType
    // 

    const SamplingIntervalType::SamplingIntervalEnum_optional& SamplingIntervalType::
    SamplingIntervalEnum () const
    {
      return this->SamplingIntervalEnum_;
    }

    SamplingIntervalType::SamplingIntervalEnum_optional& SamplingIntervalType::
    SamplingIntervalEnum ()
    {
      return this->SamplingIntervalEnum_;
    }

    void SamplingIntervalType::
    SamplingIntervalEnum (const SamplingIntervalEnum_type& x)
    {
      this->SamplingIntervalEnum_.set (x);
    }

    void SamplingIntervalType::
    SamplingIntervalEnum (const SamplingIntervalEnum_optional& x)
    {
      this->SamplingIntervalEnum_ = x;
    }

    void SamplingIntervalType::
    SamplingIntervalEnum (::std::auto_ptr< SamplingIntervalEnum_type > x)
    {
      this->SamplingIntervalEnum_.set (x);
    }

    const SamplingIntervalType::OtherSamplingInterval_optional& SamplingIntervalType::
    OtherSamplingInterval () const
    {
      return this->OtherSamplingInterval_;
    }

    SamplingIntervalType::OtherSamplingInterval_optional& SamplingIntervalType::
    OtherSamplingInterval ()
    {
      return this->OtherSamplingInterval_;
    }

    void SamplingIntervalType::
    OtherSamplingInterval (const OtherSamplingInterval_type& x)
    {
      this->OtherSamplingInterval_.set (x);
    }

    void SamplingIntervalType::
    OtherSamplingInterval (const OtherSamplingInterval_optional& x)
    {
      this->OtherSamplingInterval_ = x;
    }

    void SamplingIntervalType::
    OtherSamplingInterval (::std::auto_ptr< OtherSamplingInterval_type > x)
    {
      this->OtherSamplingInterval_.set (x);
    }


    // ExclusionEnumType
    // 

    ExclusionEnumType::
    ExclusionEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ExclusionEnumType_literals_[v])
    {
    }

    ExclusionEnumType::
    ExclusionEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExclusionEnumType::
    ExclusionEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExclusionEnumType::
    ExclusionEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExclusionEnumType::
    ExclusionEnumType (const ExclusionEnumType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ExclusionEnumType& ExclusionEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ExclusionEnumType_literals_[v]);

      return *this;
    }


    // ExclusionReasonType
    // 

    const ExclusionReasonType::ExclusionReasonEnum_optional& ExclusionReasonType::
    ExclusionReasonEnum () const
    {
      return this->ExclusionReasonEnum_;
    }

    ExclusionReasonType::ExclusionReasonEnum_optional& ExclusionReasonType::
    ExclusionReasonEnum ()
    {
      return this->ExclusionReasonEnum_;
    }

    void ExclusionReasonType::
    ExclusionReasonEnum (const ExclusionReasonEnum_type& x)
    {
      this->ExclusionReasonEnum_.set (x);
    }

    void ExclusionReasonType::
    ExclusionReasonEnum (const ExclusionReasonEnum_optional& x)
    {
      this->ExclusionReasonEnum_ = x;
    }

    void ExclusionReasonType::
    ExclusionReasonEnum (::std::auto_ptr< ExclusionReasonEnum_type > x)
    {
      this->ExclusionReasonEnum_.set (x);
    }

    const ExclusionReasonType::OtherExclusionReason_optional& ExclusionReasonType::
    OtherExclusionReason () const
    {
      return this->OtherExclusionReason_;
    }

    ExclusionReasonType::OtherExclusionReason_optional& ExclusionReasonType::
    OtherExclusionReason ()
    {
      return this->OtherExclusionReason_;
    }

    void ExclusionReasonType::
    OtherExclusionReason (const OtherExclusionReason_type& x)
    {
      this->OtherExclusionReason_.set (x);
    }

    void ExclusionReasonType::
    OtherExclusionReason (const OtherExclusionReason_optional& x)
    {
      this->OtherExclusionReason_ = x;
    }

    void ExclusionReasonType::
    OtherExclusionReason (::std::auto_ptr< OtherExclusionReason_type > x)
    {
      this->OtherExclusionReason_.set (x);
    }


    // ExclusionType
    // 

    const ExclusionType::Id_type& ExclusionType::
    Id () const
    {
      return this->Id_.get ();
    }

    ExclusionType::Id_type& ExclusionType::
    Id ()
    {
      return this->Id_.get ();
    }

    void ExclusionType::
    Id (const Id_type& x)
    {
      this->Id_.set (x);
    }

    void ExclusionType::
    Id (::std::auto_ptr< Id_type > x)
    {
      this->Id_.set (x);
    }

    const ExclusionType::Reason_type& ExclusionType::
    Reason () const
    {
      return this->Reason_.get ();
    }

    ExclusionType::Reason_type& ExclusionType::
    Reason ()
    {
      return this->Reason_.get ();
    }

    void ExclusionType::
    Reason (const Reason_type& x)
    {
      this->Reason_.set (x);
    }

    void ExclusionType::
    Reason (::std::auto_ptr< Reason_type > x)
    {
      this->Reason_.set (x);
    }


    // StatsArrayIdType
    // 

    const StatsArrayIdType::Ids_type& StatsArrayIdType::
    Ids () const
    {
      return this->Ids_.get ();
    }

    StatsArrayIdType::Ids_type& StatsArrayIdType::
    Ids ()
    {
      return this->Ids_.get ();
    }

    void StatsArrayIdType::
    Ids (const Ids_type& x)
    {
      this->Ids_.set (x);
    }

    void StatsArrayIdType::
    Ids (::std::auto_ptr< Ids_type > x)
    {
      this->Ids_.set (x);
    }

    const StatsArrayIdType::Exclusion_sequence& StatsArrayIdType::
    Exclusion () const
    {
      return this->Exclusion_;
    }

    StatsArrayIdType::Exclusion_sequence& StatsArrayIdType::
    Exclusion ()
    {
      return this->Exclusion_;
    }

    void StatsArrayIdType::
    Exclusion (const Exclusion_sequence& s)
    {
      this->Exclusion_ = s;
    }


    // StatsEvalStatusEnumType
    // 

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_StatsEvalStatusEnumType_literals_[v])
    {
    }

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const StatsEvalStatusEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    StatsEvalStatusEnumType& StatsEvalStatusEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_StatsEvalStatusEnumType_literals_[v]);

      return *this;
    }


    // StatsEvalStatusType
    // 

    const StatsEvalStatusType::StatsEvalStatusEnum_optional& StatsEvalStatusType::
    StatsEvalStatusEnum () const
    {
      return this->StatsEvalStatusEnum_;
    }

    StatsEvalStatusType::StatsEvalStatusEnum_optional& StatsEvalStatusType::
    StatsEvalStatusEnum ()
    {
      return this->StatsEvalStatusEnum_;
    }

    void StatsEvalStatusType::
    StatsEvalStatusEnum (const StatsEvalStatusEnum_type& x)
    {
      this->StatsEvalStatusEnum_.set (x);
    }

    void StatsEvalStatusType::
    StatsEvalStatusEnum (const StatsEvalStatusEnum_optional& x)
    {
      this->StatsEvalStatusEnum_ = x;
    }

    void StatsEvalStatusType::
    StatsEvalStatusEnum (::std::auto_ptr< StatsEvalStatusEnum_type > x)
    {
      this->StatsEvalStatusEnum_.set (x);
    }

    const StatsEvalStatusType::OtherStatsEvalStatus_optional& StatsEvalStatusType::
    OtherStatsEvalStatus () const
    {
      return this->OtherStatsEvalStatus_;
    }

    StatsEvalStatusType::OtherStatsEvalStatus_optional& StatsEvalStatusType::
    OtherStatsEvalStatus ()
    {
      return this->OtherStatsEvalStatus_;
    }

    void StatsEvalStatusType::
    OtherStatsEvalStatus (const OtherStatsEvalStatus_type& x)
    {
      this->OtherStatsEvalStatus_.set (x);
    }

    void StatsEvalStatusType::
    OtherStatsEvalStatus (const OtherStatsEvalStatus_optional& x)
    {
      this->OtherStatsEvalStatus_ = x;
    }

    void StatsEvalStatusType::
    OtherStatsEvalStatus (::std::auto_ptr< OtherStatsEvalStatus_type > x)
    {
      this->OtherStatsEvalStatus_.set (x);
    }


    // OneSidedCapabilityCalculationEnumType
    // 

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_OneSidedCapabilityCalculationEnumType_literals_[v])
    {
    }

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const OneSidedCapabilityCalculationEnumType& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    OneSidedCapabilityCalculationEnumType& OneSidedCapabilityCalculationEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_OneSidedCapabilityCalculationEnumType_literals_[v]);

      return *this;
    }


    // PositionCapabilityCalculationEnumType
    // 

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_PositionCapabilityCalculationEnumType_literals_[v])
    {
    }

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const PositionCapabilityCalculationEnumType& v,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    PositionCapabilityCalculationEnumType& PositionCapabilityCalculationEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_PositionCapabilityCalculationEnumType_literals_[v]);

      return *this;
    }


    // DistributionTransformationEnumType
    // 

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_DistributionTransformationEnumType_literals_[v])
    {
    }

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const DistributionTransformationEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    DistributionTransformationEnumType& DistributionTransformationEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_DistributionTransformationEnumType_literals_[v]);

      return *this;
    }


    // DistributionTransformationType
    // 

    const DistributionTransformationType::DistributionTransformationEnum_optional& DistributionTransformationType::
    DistributionTransformationEnum () const
    {
      return this->DistributionTransformationEnum_;
    }

    DistributionTransformationType::DistributionTransformationEnum_optional& DistributionTransformationType::
    DistributionTransformationEnum ()
    {
      return this->DistributionTransformationEnum_;
    }

    void DistributionTransformationType::
    DistributionTransformationEnum (const DistributionTransformationEnum_type& x)
    {
      this->DistributionTransformationEnum_.set (x);
    }

    void DistributionTransformationType::
    DistributionTransformationEnum (const DistributionTransformationEnum_optional& x)
    {
      this->DistributionTransformationEnum_ = x;
    }

    void DistributionTransformationType::
    DistributionTransformationEnum (::std::auto_ptr< DistributionTransformationEnum_type > x)
    {
      this->DistributionTransformationEnum_.set (x);
    }

    const DistributionTransformationType::BoxCoxTransformation_optional& DistributionTransformationType::
    BoxCoxTransformation () const
    {
      return this->BoxCoxTransformation_;
    }

    DistributionTransformationType::BoxCoxTransformation_optional& DistributionTransformationType::
    BoxCoxTransformation ()
    {
      return this->BoxCoxTransformation_;
    }

    void DistributionTransformationType::
    BoxCoxTransformation (const BoxCoxTransformation_type& x)
    {
      this->BoxCoxTransformation_.set (x);
    }

    void DistributionTransformationType::
    BoxCoxTransformation (const BoxCoxTransformation_optional& x)
    {
      this->BoxCoxTransformation_ = x;
    }

    const DistributionTransformationType::OtherDistributionTransformation_optional& DistributionTransformationType::
    OtherDistributionTransformation () const
    {
      return this->OtherDistributionTransformation_;
    }

    DistributionTransformationType::OtherDistributionTransformation_optional& DistributionTransformationType::
    OtherDistributionTransformation ()
    {
      return this->OtherDistributionTransformation_;
    }

    void DistributionTransformationType::
    OtherDistributionTransformation (const OtherDistributionTransformation_type& x)
    {
      this->OtherDistributionTransformation_.set (x);
    }

    void DistributionTransformationType::
    OtherDistributionTransformation (const OtherDistributionTransformation_optional& x)
    {
      this->OtherDistributionTransformation_ = x;
    }

    void DistributionTransformationType::
    OtherDistributionTransformation (::std::auto_ptr< OtherDistributionTransformation_type > x)
    {
      this->OtherDistributionTransformation_.set (x);
    }


    // ActualSubgroupType
    // 

    const ActualSubgroupType::ActualIds_type& ActualSubgroupType::
    ActualIds () const
    {
      return this->ActualIds_.get ();
    }

    ActualSubgroupType::ActualIds_type& ActualSubgroupType::
    ActualIds ()
    {
      return this->ActualIds_.get ();
    }

    void ActualSubgroupType::
    ActualIds (const ActualIds_type& x)
    {
      this->ActualIds_.set (x);
    }

    void ActualSubgroupType::
    ActualIds (::std::auto_ptr< ActualIds_type > x)
    {
      this->ActualIds_.set (x);
    }

    const ActualSubgroupType::id_type& ActualSubgroupType::
    id () const
    {
      return this->id_.get ();
    }

    ActualSubgroupType::id_type& ActualSubgroupType::
    id ()
    {
      return this->id_.get ();
    }

    void ActualSubgroupType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void ActualSubgroupType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // CharacteristicStatsEvalBaseType
    // 

    const CharacteristicStatsEvalBaseType::Attributes_optional& CharacteristicStatsEvalBaseType::
    Attributes () const
    {
      return this->Attributes_;
    }

    CharacteristicStatsEvalBaseType::Attributes_optional& CharacteristicStatsEvalBaseType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void CharacteristicStatsEvalBaseType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void CharacteristicStatsEvalBaseType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void CharacteristicStatsEvalBaseType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const CharacteristicStatsEvalBaseType::ActualIds_optional& CharacteristicStatsEvalBaseType::
    ActualIds () const
    {
      return this->ActualIds_;
    }

    CharacteristicStatsEvalBaseType::ActualIds_optional& CharacteristicStatsEvalBaseType::
    ActualIds ()
    {
      return this->ActualIds_;
    }

    void CharacteristicStatsEvalBaseType::
    ActualIds (const ActualIds_type& x)
    {
      this->ActualIds_.set (x);
    }

    void CharacteristicStatsEvalBaseType::
    ActualIds (const ActualIds_optional& x)
    {
      this->ActualIds_ = x;
    }

    void CharacteristicStatsEvalBaseType::
    ActualIds (::std::auto_ptr< ActualIds_type > x)
    {
      this->ActualIds_.set (x);
    }

    const CharacteristicStatsEvalBaseType::Subgroup_sequence& CharacteristicStatsEvalBaseType::
    Subgroup () const
    {
      return this->Subgroup_;
    }

    CharacteristicStatsEvalBaseType::Subgroup_sequence& CharacteristicStatsEvalBaseType::
    Subgroup ()
    {
      return this->Subgroup_;
    }

    void CharacteristicStatsEvalBaseType::
    Subgroup (const Subgroup_sequence& s)
    {
      this->Subgroup_ = s;
    }

    const CharacteristicStatsEvalBaseType::Status_type& CharacteristicStatsEvalBaseType::
    Status () const
    {
      return this->Status_.get ();
    }

    CharacteristicStatsEvalBaseType::Status_type& CharacteristicStatsEvalBaseType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CharacteristicStatsEvalBaseType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CharacteristicStatsEvalBaseType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const CharacteristicStatsEvalBaseType::StudyIssue_optional& CharacteristicStatsEvalBaseType::
    StudyIssue () const
    {
      return this->StudyIssue_;
    }

    CharacteristicStatsEvalBaseType::StudyIssue_optional& CharacteristicStatsEvalBaseType::
    StudyIssue ()
    {
      return this->StudyIssue_;
    }

    void CharacteristicStatsEvalBaseType::
    StudyIssue (const StudyIssue_type& x)
    {
      this->StudyIssue_.set (x);
    }

    void CharacteristicStatsEvalBaseType::
    StudyIssue (const StudyIssue_optional& x)
    {
      this->StudyIssue_ = x;
    }

    void CharacteristicStatsEvalBaseType::
    StudyIssue (::std::auto_ptr< StudyIssue_type > x)
    {
      this->StudyIssue_.set (x);
    }

    const CharacteristicStatsEvalBaseType::DistributionTransformation_optional& CharacteristicStatsEvalBaseType::
    DistributionTransformation () const
    {
      return this->DistributionTransformation_;
    }

    CharacteristicStatsEvalBaseType::DistributionTransformation_optional& CharacteristicStatsEvalBaseType::
    DistributionTransformation ()
    {
      return this->DistributionTransformation_;
    }

    void CharacteristicStatsEvalBaseType::
    DistributionTransformation (const DistributionTransformation_type& x)
    {
      this->DistributionTransformation_.set (x);
    }

    void CharacteristicStatsEvalBaseType::
    DistributionTransformation (const DistributionTransformation_optional& x)
    {
      this->DistributionTransformation_ = x;
    }

    void CharacteristicStatsEvalBaseType::
    DistributionTransformation (::std::auto_ptr< DistributionTransformation_type > x)
    {
      this->DistributionTransformation_.set (x);
    }


    // StatsBaseType
    // 

    const StatsBaseType::TotalNumber_optional& StatsBaseType::
    TotalNumber () const
    {
      return this->TotalNumber_;
    }

    StatsBaseType::TotalNumber_optional& StatsBaseType::
    TotalNumber ()
    {
      return this->TotalNumber_;
    }

    void StatsBaseType::
    TotalNumber (const TotalNumber_type& x)
    {
      this->TotalNumber_.set (x);
    }

    void StatsBaseType::
    TotalNumber (const TotalNumber_optional& x)
    {
      this->TotalNumber_ = x;
    }

    const StatsBaseType::SubgroupTotalNumber_sequence& StatsBaseType::
    SubgroupTotalNumber () const
    {
      return this->SubgroupTotalNumber_;
    }

    StatsBaseType::SubgroupTotalNumber_sequence& StatsBaseType::
    SubgroupTotalNumber ()
    {
      return this->SubgroupTotalNumber_;
    }

    void StatsBaseType::
    SubgroupTotalNumber (const SubgroupTotalNumber_sequence& s)
    {
      this->SubgroupTotalNumber_ = s;
    }

    const StatsBaseType::EffectiveNumber_optional& StatsBaseType::
    EffectiveNumber () const
    {
      return this->EffectiveNumber_;
    }

    StatsBaseType::EffectiveNumber_optional& StatsBaseType::
    EffectiveNumber ()
    {
      return this->EffectiveNumber_;
    }

    void StatsBaseType::
    EffectiveNumber (const EffectiveNumber_type& x)
    {
      this->EffectiveNumber_.set (x);
    }

    void StatsBaseType::
    EffectiveNumber (const EffectiveNumber_optional& x)
    {
      this->EffectiveNumber_ = x;
    }

    const StatsBaseType::SubgroupEffectiveNumber_sequence& StatsBaseType::
    SubgroupEffectiveNumber () const
    {
      return this->SubgroupEffectiveNumber_;
    }

    StatsBaseType::SubgroupEffectiveNumber_sequence& StatsBaseType::
    SubgroupEffectiveNumber ()
    {
      return this->SubgroupEffectiveNumber_;
    }

    void StatsBaseType::
    SubgroupEffectiveNumber (const SubgroupEffectiveNumber_sequence& s)
    {
      this->SubgroupEffectiveNumber_ = s;
    }

    const StatsBaseType::NumberSubgroups_optional& StatsBaseType::
    NumberSubgroups () const
    {
      return this->NumberSubgroups_;
    }

    StatsBaseType::NumberSubgroups_optional& StatsBaseType::
    NumberSubgroups ()
    {
      return this->NumberSubgroups_;
    }

    void StatsBaseType::
    NumberSubgroups (const NumberSubgroups_type& x)
    {
      this->NumberSubgroups_.set (x);
    }

    void StatsBaseType::
    NumberSubgroups (const NumberSubgroups_optional& x)
    {
      this->NumberSubgroups_ = x;
    }


    // StatsNumericalBaseType
    // 

    const StatsNumericalBaseType::Average_optional& StatsNumericalBaseType::
    Average () const
    {
      return this->Average_;
    }

    StatsNumericalBaseType::Average_optional& StatsNumericalBaseType::
    Average ()
    {
      return this->Average_;
    }

    void StatsNumericalBaseType::
    Average (const Average_type& x)
    {
      this->Average_.set (x);
    }

    void StatsNumericalBaseType::
    Average (const Average_optional& x)
    {
      this->Average_ = x;
    }

    void StatsNumericalBaseType::
    Average (::std::auto_ptr< Average_type > x)
    {
      this->Average_.set (x);
    }

    const StatsNumericalBaseType::SubgroupAverage_sequence& StatsNumericalBaseType::
    SubgroupAverage () const
    {
      return this->SubgroupAverage_;
    }

    StatsNumericalBaseType::SubgroupAverage_sequence& StatsNumericalBaseType::
    SubgroupAverage ()
    {
      return this->SubgroupAverage_;
    }

    void StatsNumericalBaseType::
    SubgroupAverage (const SubgroupAverage_sequence& s)
    {
      this->SubgroupAverage_ = s;
    }

    const StatsNumericalBaseType::Difference_optional& StatsNumericalBaseType::
    Difference () const
    {
      return this->Difference_;
    }

    StatsNumericalBaseType::Difference_optional& StatsNumericalBaseType::
    Difference ()
    {
      return this->Difference_;
    }

    void StatsNumericalBaseType::
    Difference (const Difference_type& x)
    {
      this->Difference_.set (x);
    }

    void StatsNumericalBaseType::
    Difference (const Difference_optional& x)
    {
      this->Difference_ = x;
    }

    void StatsNumericalBaseType::
    Difference (::std::auto_ptr< Difference_type > x)
    {
      this->Difference_.set (x);
    }

    const StatsNumericalBaseType::SubgroupDifference_sequence& StatsNumericalBaseType::
    SubgroupDifference () const
    {
      return this->SubgroupDifference_;
    }

    StatsNumericalBaseType::SubgroupDifference_sequence& StatsNumericalBaseType::
    SubgroupDifference ()
    {
      return this->SubgroupDifference_;
    }

    void StatsNumericalBaseType::
    SubgroupDifference (const SubgroupDifference_sequence& s)
    {
      this->SubgroupDifference_ = s;
    }

    const StatsNumericalBaseType::RootMeanSquare_optional& StatsNumericalBaseType::
    RootMeanSquare () const
    {
      return this->RootMeanSquare_;
    }

    StatsNumericalBaseType::RootMeanSquare_optional& StatsNumericalBaseType::
    RootMeanSquare ()
    {
      return this->RootMeanSquare_;
    }

    void StatsNumericalBaseType::
    RootMeanSquare (const RootMeanSquare_type& x)
    {
      this->RootMeanSquare_.set (x);
    }

    void StatsNumericalBaseType::
    RootMeanSquare (const RootMeanSquare_optional& x)
    {
      this->RootMeanSquare_ = x;
    }

    void StatsNumericalBaseType::
    RootMeanSquare (::std::auto_ptr< RootMeanSquare_type > x)
    {
      this->RootMeanSquare_.set (x);
    }

    const StatsNumericalBaseType::Maximum_optional& StatsNumericalBaseType::
    Maximum () const
    {
      return this->Maximum_;
    }

    StatsNumericalBaseType::Maximum_optional& StatsNumericalBaseType::
    Maximum ()
    {
      return this->Maximum_;
    }

    void StatsNumericalBaseType::
    Maximum (const Maximum_type& x)
    {
      this->Maximum_.set (x);
    }

    void StatsNumericalBaseType::
    Maximum (const Maximum_optional& x)
    {
      this->Maximum_ = x;
    }

    void StatsNumericalBaseType::
    Maximum (::std::auto_ptr< Maximum_type > x)
    {
      this->Maximum_.set (x);
    }

    const StatsNumericalBaseType::MaximumId_optional& StatsNumericalBaseType::
    MaximumId () const
    {
      return this->MaximumId_;
    }

    StatsNumericalBaseType::MaximumId_optional& StatsNumericalBaseType::
    MaximumId ()
    {
      return this->MaximumId_;
    }

    void StatsNumericalBaseType::
    MaximumId (const MaximumId_type& x)
    {
      this->MaximumId_.set (x);
    }

    void StatsNumericalBaseType::
    MaximumId (const MaximumId_optional& x)
    {
      this->MaximumId_ = x;
    }

    void StatsNumericalBaseType::
    MaximumId (::std::auto_ptr< MaximumId_type > x)
    {
      this->MaximumId_.set (x);
    }

    const StatsNumericalBaseType::SubgroupMaximum_optional& StatsNumericalBaseType::
    SubgroupMaximum () const
    {
      return this->SubgroupMaximum_;
    }

    StatsNumericalBaseType::SubgroupMaximum_optional& StatsNumericalBaseType::
    SubgroupMaximum ()
    {
      return this->SubgroupMaximum_;
    }

    void StatsNumericalBaseType::
    SubgroupMaximum (const SubgroupMaximum_type& x)
    {
      this->SubgroupMaximum_.set (x);
    }

    void StatsNumericalBaseType::
    SubgroupMaximum (const SubgroupMaximum_optional& x)
    {
      this->SubgroupMaximum_ = x;
    }

    void StatsNumericalBaseType::
    SubgroupMaximum (::std::auto_ptr< SubgroupMaximum_type > x)
    {
      this->SubgroupMaximum_.set (x);
    }

    const StatsNumericalBaseType::Minimum_optional& StatsNumericalBaseType::
    Minimum () const
    {
      return this->Minimum_;
    }

    StatsNumericalBaseType::Minimum_optional& StatsNumericalBaseType::
    Minimum ()
    {
      return this->Minimum_;
    }

    void StatsNumericalBaseType::
    Minimum (const Minimum_type& x)
    {
      this->Minimum_.set (x);
    }

    void StatsNumericalBaseType::
    Minimum (const Minimum_optional& x)
    {
      this->Minimum_ = x;
    }

    void StatsNumericalBaseType::
    Minimum (::std::auto_ptr< Minimum_type > x)
    {
      this->Minimum_.set (x);
    }

    const StatsNumericalBaseType::MinimumId_optional& StatsNumericalBaseType::
    MinimumId () const
    {
      return this->MinimumId_;
    }

    StatsNumericalBaseType::MinimumId_optional& StatsNumericalBaseType::
    MinimumId ()
    {
      return this->MinimumId_;
    }

    void StatsNumericalBaseType::
    MinimumId (const MinimumId_type& x)
    {
      this->MinimumId_.set (x);
    }

    void StatsNumericalBaseType::
    MinimumId (const MinimumId_optional& x)
    {
      this->MinimumId_ = x;
    }

    void StatsNumericalBaseType::
    MinimumId (::std::auto_ptr< MinimumId_type > x)
    {
      this->MinimumId_.set (x);
    }

    const StatsNumericalBaseType::SubgroupMinimum_optional& StatsNumericalBaseType::
    SubgroupMinimum () const
    {
      return this->SubgroupMinimum_;
    }

    StatsNumericalBaseType::SubgroupMinimum_optional& StatsNumericalBaseType::
    SubgroupMinimum ()
    {
      return this->SubgroupMinimum_;
    }

    void StatsNumericalBaseType::
    SubgroupMinimum (const SubgroupMinimum_type& x)
    {
      this->SubgroupMinimum_.set (x);
    }

    void StatsNumericalBaseType::
    SubgroupMinimum (const SubgroupMinimum_optional& x)
    {
      this->SubgroupMinimum_ = x;
    }

    void StatsNumericalBaseType::
    SubgroupMinimum (::std::auto_ptr< SubgroupMinimum_type > x)
    {
      this->SubgroupMinimum_.set (x);
    }

    const StatsNumericalBaseType::Range_optional& StatsNumericalBaseType::
    Range () const
    {
      return this->Range_;
    }

    StatsNumericalBaseType::Range_optional& StatsNumericalBaseType::
    Range ()
    {
      return this->Range_;
    }

    void StatsNumericalBaseType::
    Range (const Range_type& x)
    {
      this->Range_.set (x);
    }

    void StatsNumericalBaseType::
    Range (const Range_optional& x)
    {
      this->Range_ = x;
    }

    void StatsNumericalBaseType::
    Range (::std::auto_ptr< Range_type > x)
    {
      this->Range_.set (x);
    }

    const StatsNumericalBaseType::SubgroupRange_optional& StatsNumericalBaseType::
    SubgroupRange () const
    {
      return this->SubgroupRange_;
    }

    StatsNumericalBaseType::SubgroupRange_optional& StatsNumericalBaseType::
    SubgroupRange ()
    {
      return this->SubgroupRange_;
    }

    void StatsNumericalBaseType::
    SubgroupRange (const SubgroupRange_type& x)
    {
      this->SubgroupRange_.set (x);
    }

    void StatsNumericalBaseType::
    SubgroupRange (const SubgroupRange_optional& x)
    {
      this->SubgroupRange_ = x;
    }

    void StatsNumericalBaseType::
    SubgroupRange (::std::auto_ptr< SubgroupRange_type > x)
    {
      this->SubgroupRange_.set (x);
    }

    const StatsNumericalBaseType::AverageRange_optional& StatsNumericalBaseType::
    AverageRange () const
    {
      return this->AverageRange_;
    }

    StatsNumericalBaseType::AverageRange_optional& StatsNumericalBaseType::
    AverageRange ()
    {
      return this->AverageRange_;
    }

    void StatsNumericalBaseType::
    AverageRange (const AverageRange_type& x)
    {
      this->AverageRange_.set (x);
    }

    void StatsNumericalBaseType::
    AverageRange (const AverageRange_optional& x)
    {
      this->AverageRange_ = x;
    }

    void StatsNumericalBaseType::
    AverageRange (::std::auto_ptr< AverageRange_type > x)
    {
      this->AverageRange_.set (x);
    }

    const StatsNumericalBaseType::StandardDeviation_optional& StatsNumericalBaseType::
    StandardDeviation () const
    {
      return this->StandardDeviation_;
    }

    StatsNumericalBaseType::StandardDeviation_optional& StatsNumericalBaseType::
    StandardDeviation ()
    {
      return this->StandardDeviation_;
    }

    void StatsNumericalBaseType::
    StandardDeviation (const StandardDeviation_type& x)
    {
      this->StandardDeviation_.set (x);
    }

    void StatsNumericalBaseType::
    StandardDeviation (const StandardDeviation_optional& x)
    {
      this->StandardDeviation_ = x;
    }

    void StatsNumericalBaseType::
    StandardDeviation (::std::auto_ptr< StandardDeviation_type > x)
    {
      this->StandardDeviation_.set (x);
    }

    const StatsNumericalBaseType::Skew_optional& StatsNumericalBaseType::
    Skew () const
    {
      return this->Skew_;
    }

    StatsNumericalBaseType::Skew_optional& StatsNumericalBaseType::
    Skew ()
    {
      return this->Skew_;
    }

    void StatsNumericalBaseType::
    Skew (const Skew_type& x)
    {
      this->Skew_.set (x);
    }

    void StatsNumericalBaseType::
    Skew (const Skew_optional& x)
    {
      this->Skew_ = x;
    }

    void StatsNumericalBaseType::
    Skew (::std::auto_ptr< Skew_type > x)
    {
      this->Skew_.set (x);
    }

    const StatsNumericalBaseType::Kurtosis_optional& StatsNumericalBaseType::
    Kurtosis () const
    {
      return this->Kurtosis_;
    }

    StatsNumericalBaseType::Kurtosis_optional& StatsNumericalBaseType::
    Kurtosis ()
    {
      return this->Kurtosis_;
    }

    void StatsNumericalBaseType::
    Kurtosis (const Kurtosis_type& x)
    {
      this->Kurtosis_.set (x);
    }

    void StatsNumericalBaseType::
    Kurtosis (const Kurtosis_optional& x)
    {
      this->Kurtosis_ = x;
    }

    void StatsNumericalBaseType::
    Kurtosis (::std::auto_ptr< Kurtosis_type > x)
    {
      this->Kurtosis_.set (x);
    }

    const StatsNumericalBaseType::Normality_optional& StatsNumericalBaseType::
    Normality () const
    {
      return this->Normality_;
    }

    StatsNumericalBaseType::Normality_optional& StatsNumericalBaseType::
    Normality ()
    {
      return this->Normality_;
    }

    void StatsNumericalBaseType::
    Normality (const Normality_type& x)
    {
      this->Normality_.set (x);
    }

    void StatsNumericalBaseType::
    Normality (const Normality_optional& x)
    {
      this->Normality_ = x;
    }

    void StatsNumericalBaseType::
    Normality (::std::auto_ptr< Normality_type > x)
    {
      this->Normality_.set (x);
    }

    const StatsNumericalBaseType::ProcessVariation_optional& StatsNumericalBaseType::
    ProcessVariation () const
    {
      return this->ProcessVariation_;
    }

    StatsNumericalBaseType::ProcessVariation_optional& StatsNumericalBaseType::
    ProcessVariation ()
    {
      return this->ProcessVariation_;
    }

    void StatsNumericalBaseType::
    ProcessVariation (const ProcessVariation_type& x)
    {
      this->ProcessVariation_.set (x);
    }

    void StatsNumericalBaseType::
    ProcessVariation (const ProcessVariation_optional& x)
    {
      this->ProcessVariation_ = x;
    }

    void StatsNumericalBaseType::
    ProcessVariation (::std::auto_ptr< ProcessVariation_type > x)
    {
      this->ProcessVariation_.set (x);
    }

    const StatsNumericalBaseType::EstimatedStandardDeviation_optional& StatsNumericalBaseType::
    EstimatedStandardDeviation () const
    {
      return this->EstimatedStandardDeviation_;
    }

    StatsNumericalBaseType::EstimatedStandardDeviation_optional& StatsNumericalBaseType::
    EstimatedStandardDeviation ()
    {
      return this->EstimatedStandardDeviation_;
    }

    void StatsNumericalBaseType::
    EstimatedStandardDeviation (const EstimatedStandardDeviation_type& x)
    {
      this->EstimatedStandardDeviation_.set (x);
    }

    void StatsNumericalBaseType::
    EstimatedStandardDeviation (const EstimatedStandardDeviation_optional& x)
    {
      this->EstimatedStandardDeviation_ = x;
    }

    void StatsNumericalBaseType::
    EstimatedStandardDeviation (::std::auto_ptr< EstimatedStandardDeviation_type > x)
    {
      this->EstimatedStandardDeviation_.set (x);
    }

    const StatsNumericalBaseType::UpperControlLimit_optional& StatsNumericalBaseType::
    UpperControlLimit () const
    {
      return this->UpperControlLimit_;
    }

    StatsNumericalBaseType::UpperControlLimit_optional& StatsNumericalBaseType::
    UpperControlLimit ()
    {
      return this->UpperControlLimit_;
    }

    void StatsNumericalBaseType::
    UpperControlLimit (const UpperControlLimit_type& x)
    {
      this->UpperControlLimit_.set (x);
    }

    void StatsNumericalBaseType::
    UpperControlLimit (const UpperControlLimit_optional& x)
    {
      this->UpperControlLimit_ = x;
    }

    void StatsNumericalBaseType::
    UpperControlLimit (::std::auto_ptr< UpperControlLimit_type > x)
    {
      this->UpperControlLimit_.set (x);
    }

    const StatsNumericalBaseType::LowerControlLimit_optional& StatsNumericalBaseType::
    LowerControlLimit () const
    {
      return this->LowerControlLimit_;
    }

    StatsNumericalBaseType::LowerControlLimit_optional& StatsNumericalBaseType::
    LowerControlLimit ()
    {
      return this->LowerControlLimit_;
    }

    void StatsNumericalBaseType::
    LowerControlLimit (const LowerControlLimit_type& x)
    {
      this->LowerControlLimit_.set (x);
    }

    void StatsNumericalBaseType::
    LowerControlLimit (const LowerControlLimit_optional& x)
    {
      this->LowerControlLimit_ = x;
    }

    void StatsNumericalBaseType::
    LowerControlLimit (::std::auto_ptr< LowerControlLimit_type > x)
    {
      this->LowerControlLimit_.set (x);
    }

    const StatsNumericalBaseType::UpperControlLimitRange_optional& StatsNumericalBaseType::
    UpperControlLimitRange () const
    {
      return this->UpperControlLimitRange_;
    }

    StatsNumericalBaseType::UpperControlLimitRange_optional& StatsNumericalBaseType::
    UpperControlLimitRange ()
    {
      return this->UpperControlLimitRange_;
    }

    void StatsNumericalBaseType::
    UpperControlLimitRange (const UpperControlLimitRange_type& x)
    {
      this->UpperControlLimitRange_.set (x);
    }

    void StatsNumericalBaseType::
    UpperControlLimitRange (const UpperControlLimitRange_optional& x)
    {
      this->UpperControlLimitRange_ = x;
    }

    void StatsNumericalBaseType::
    UpperControlLimitRange (::std::auto_ptr< UpperControlLimitRange_type > x)
    {
      this->UpperControlLimitRange_.set (x);
    }

    const StatsNumericalBaseType::LowerControlLimitRange_optional& StatsNumericalBaseType::
    LowerControlLimitRange () const
    {
      return this->LowerControlLimitRange_;
    }

    StatsNumericalBaseType::LowerControlLimitRange_optional& StatsNumericalBaseType::
    LowerControlLimitRange ()
    {
      return this->LowerControlLimitRange_;
    }

    void StatsNumericalBaseType::
    LowerControlLimitRange (const LowerControlLimitRange_type& x)
    {
      this->LowerControlLimitRange_.set (x);
    }

    void StatsNumericalBaseType::
    LowerControlLimitRange (const LowerControlLimitRange_optional& x)
    {
      this->LowerControlLimitRange_ = x;
    }

    void StatsNumericalBaseType::
    LowerControlLimitRange (::std::auto_ptr< LowerControlLimitRange_type > x)
    {
      this->LowerControlLimitRange_.set (x);
    }

    const StatsNumericalBaseType::NumberOutOfControl_optional& StatsNumericalBaseType::
    NumberOutOfControl () const
    {
      return this->NumberOutOfControl_;
    }

    StatsNumericalBaseType::NumberOutOfControl_optional& StatsNumericalBaseType::
    NumberOutOfControl ()
    {
      return this->NumberOutOfControl_;
    }

    void StatsNumericalBaseType::
    NumberOutOfControl (const NumberOutOfControl_type& x)
    {
      this->NumberOutOfControl_.set (x);
    }

    void StatsNumericalBaseType::
    NumberOutOfControl (const NumberOutOfControl_optional& x)
    {
      this->NumberOutOfControl_ = x;
    }

    const StatsNumericalBaseType::OutOfControlIds_optional& StatsNumericalBaseType::
    OutOfControlIds () const
    {
      return this->OutOfControlIds_;
    }

    StatsNumericalBaseType::OutOfControlIds_optional& StatsNumericalBaseType::
    OutOfControlIds ()
    {
      return this->OutOfControlIds_;
    }

    void StatsNumericalBaseType::
    OutOfControlIds (const OutOfControlIds_type& x)
    {
      this->OutOfControlIds_.set (x);
    }

    void StatsNumericalBaseType::
    OutOfControlIds (const OutOfControlIds_optional& x)
    {
      this->OutOfControlIds_ = x;
    }

    void StatsNumericalBaseType::
    OutOfControlIds (::std::auto_ptr< OutOfControlIds_type > x)
    {
      this->OutOfControlIds_.set (x);
    }

    const StatsNumericalBaseType::AppraiserVariation_optional& StatsNumericalBaseType::
    AppraiserVariation () const
    {
      return this->AppraiserVariation_;
    }

    StatsNumericalBaseType::AppraiserVariation_optional& StatsNumericalBaseType::
    AppraiserVariation ()
    {
      return this->AppraiserVariation_;
    }

    void StatsNumericalBaseType::
    AppraiserVariation (const AppraiserVariation_type& x)
    {
      this->AppraiserVariation_.set (x);
    }

    void StatsNumericalBaseType::
    AppraiserVariation (const AppraiserVariation_optional& x)
    {
      this->AppraiserVariation_ = x;
    }

    void StatsNumericalBaseType::
    AppraiserVariation (::std::auto_ptr< AppraiserVariation_type > x)
    {
      this->AppraiserVariation_.set (x);
    }

    const StatsNumericalBaseType::EquipmentVariation_optional& StatsNumericalBaseType::
    EquipmentVariation () const
    {
      return this->EquipmentVariation_;
    }

    StatsNumericalBaseType::EquipmentVariation_optional& StatsNumericalBaseType::
    EquipmentVariation ()
    {
      return this->EquipmentVariation_;
    }

    void StatsNumericalBaseType::
    EquipmentVariation (const EquipmentVariation_type& x)
    {
      this->EquipmentVariation_.set (x);
    }

    void StatsNumericalBaseType::
    EquipmentVariation (const EquipmentVariation_optional& x)
    {
      this->EquipmentVariation_ = x;
    }

    void StatsNumericalBaseType::
    EquipmentVariation (::std::auto_ptr< EquipmentVariation_type > x)
    {
      this->EquipmentVariation_.set (x);
    }

    const StatsNumericalBaseType::Interaction_optional& StatsNumericalBaseType::
    Interaction () const
    {
      return this->Interaction_;
    }

    StatsNumericalBaseType::Interaction_optional& StatsNumericalBaseType::
    Interaction ()
    {
      return this->Interaction_;
    }

    void StatsNumericalBaseType::
    Interaction (const Interaction_type& x)
    {
      this->Interaction_.set (x);
    }

    void StatsNumericalBaseType::
    Interaction (const Interaction_optional& x)
    {
      this->Interaction_ = x;
    }

    void StatsNumericalBaseType::
    Interaction (::std::auto_ptr< Interaction_type > x)
    {
      this->Interaction_.set (x);
    }

    const StatsNumericalBaseType::GageRandR_optional& StatsNumericalBaseType::
    GageRandR () const
    {
      return this->GageRandR_;
    }

    StatsNumericalBaseType::GageRandR_optional& StatsNumericalBaseType::
    GageRandR ()
    {
      return this->GageRandR_;
    }

    void StatsNumericalBaseType::
    GageRandR (const GageRandR_type& x)
    {
      this->GageRandR_.set (x);
    }

    void StatsNumericalBaseType::
    GageRandR (const GageRandR_optional& x)
    {
      this->GageRandR_ = x;
    }

    void StatsNumericalBaseType::
    GageRandR (::std::auto_ptr< GageRandR_type > x)
    {
      this->GageRandR_.set (x);
    }

    const StatsNumericalBaseType::PartVariation_optional& StatsNumericalBaseType::
    PartVariation () const
    {
      return this->PartVariation_;
    }

    StatsNumericalBaseType::PartVariation_optional& StatsNumericalBaseType::
    PartVariation ()
    {
      return this->PartVariation_;
    }

    void StatsNumericalBaseType::
    PartVariation (const PartVariation_type& x)
    {
      this->PartVariation_.set (x);
    }

    void StatsNumericalBaseType::
    PartVariation (const PartVariation_optional& x)
    {
      this->PartVariation_ = x;
    }

    void StatsNumericalBaseType::
    PartVariation (::std::auto_ptr< PartVariation_type > x)
    {
      this->PartVariation_.set (x);
    }

    const StatsNumericalBaseType::TotalVariation_optional& StatsNumericalBaseType::
    TotalVariation () const
    {
      return this->TotalVariation_;
    }

    StatsNumericalBaseType::TotalVariation_optional& StatsNumericalBaseType::
    TotalVariation ()
    {
      return this->TotalVariation_;
    }

    void StatsNumericalBaseType::
    TotalVariation (const TotalVariation_type& x)
    {
      this->TotalVariation_.set (x);
    }

    void StatsNumericalBaseType::
    TotalVariation (const TotalVariation_optional& x)
    {
      this->TotalVariation_ = x;
    }

    void StatsNumericalBaseType::
    TotalVariation (::std::auto_ptr< TotalVariation_type > x)
    {
      this->TotalVariation_.set (x);
    }

    const StatsNumericalBaseType::Linearity_optional& StatsNumericalBaseType::
    Linearity () const
    {
      return this->Linearity_;
    }

    StatsNumericalBaseType::Linearity_optional& StatsNumericalBaseType::
    Linearity ()
    {
      return this->Linearity_;
    }

    void StatsNumericalBaseType::
    Linearity (const Linearity_type& x)
    {
      this->Linearity_.set (x);
    }

    void StatsNumericalBaseType::
    Linearity (const Linearity_optional& x)
    {
      this->Linearity_ = x;
    }

    void StatsNumericalBaseType::
    Linearity (::std::auto_ptr< Linearity_type > x)
    {
      this->Linearity_.set (x);
    }

    const StatsNumericalBaseType::Bias_optional& StatsNumericalBaseType::
    Bias () const
    {
      return this->Bias_;
    }

    StatsNumericalBaseType::Bias_optional& StatsNumericalBaseType::
    Bias ()
    {
      return this->Bias_;
    }

    void StatsNumericalBaseType::
    Bias (const Bias_type& x)
    {
      this->Bias_.set (x);
    }

    void StatsNumericalBaseType::
    Bias (const Bias_optional& x)
    {
      this->Bias_ = x;
    }

    void StatsNumericalBaseType::
    Bias (::std::auto_ptr< Bias_type > x)
    {
      this->Bias_.set (x);
    }

    const StatsNumericalBaseType::RelativeLinearity_optional& StatsNumericalBaseType::
    RelativeLinearity () const
    {
      return this->RelativeLinearity_;
    }

    StatsNumericalBaseType::RelativeLinearity_optional& StatsNumericalBaseType::
    RelativeLinearity ()
    {
      return this->RelativeLinearity_;
    }

    void StatsNumericalBaseType::
    RelativeLinearity (const RelativeLinearity_type& x)
    {
      this->RelativeLinearity_.set (x);
    }

    void StatsNumericalBaseType::
    RelativeLinearity (const RelativeLinearity_optional& x)
    {
      this->RelativeLinearity_ = x;
    }

    void StatsNumericalBaseType::
    RelativeLinearity (::std::auto_ptr< RelativeLinearity_type > x)
    {
      this->RelativeLinearity_.set (x);
    }

    const StatsNumericalBaseType::RelativeBias_optional& StatsNumericalBaseType::
    RelativeBias () const
    {
      return this->RelativeBias_;
    }

    StatsNumericalBaseType::RelativeBias_optional& StatsNumericalBaseType::
    RelativeBias ()
    {
      return this->RelativeBias_;
    }

    void StatsNumericalBaseType::
    RelativeBias (const RelativeBias_type& x)
    {
      this->RelativeBias_.set (x);
    }

    void StatsNumericalBaseType::
    RelativeBias (const RelativeBias_optional& x)
    {
      this->RelativeBias_ = x;
    }

    void StatsNumericalBaseType::
    RelativeBias (::std::auto_ptr< RelativeBias_type > x)
    {
      this->RelativeBias_.set (x);
    }

    const StatsNumericalBaseType::GoodnessOfFit_optional& StatsNumericalBaseType::
    GoodnessOfFit () const
    {
      return this->GoodnessOfFit_;
    }

    StatsNumericalBaseType::GoodnessOfFit_optional& StatsNumericalBaseType::
    GoodnessOfFit ()
    {
      return this->GoodnessOfFit_;
    }

    void StatsNumericalBaseType::
    GoodnessOfFit (const GoodnessOfFit_type& x)
    {
      this->GoodnessOfFit_.set (x);
    }

    void StatsNumericalBaseType::
    GoodnessOfFit (const GoodnessOfFit_optional& x)
    {
      this->GoodnessOfFit_ = x;
    }

    void StatsNumericalBaseType::
    GoodnessOfFit (::std::auto_ptr< GoodnessOfFit_type > x)
    {
      this->GoodnessOfFit_.set (x);
    }

    const StatsNumericalBaseType::RegressionSlope_optional& StatsNumericalBaseType::
    RegressionSlope () const
    {
      return this->RegressionSlope_;
    }

    StatsNumericalBaseType::RegressionSlope_optional& StatsNumericalBaseType::
    RegressionSlope ()
    {
      return this->RegressionSlope_;
    }

    void StatsNumericalBaseType::
    RegressionSlope (const RegressionSlope_type& x)
    {
      this->RegressionSlope_.set (x);
    }

    void StatsNumericalBaseType::
    RegressionSlope (const RegressionSlope_optional& x)
    {
      this->RegressionSlope_ = x;
    }

    void StatsNumericalBaseType::
    RegressionSlope (::std::auto_ptr< RegressionSlope_type > x)
    {
      this->RegressionSlope_.set (x);
    }

    const StatsNumericalBaseType::RegressionIntercept_optional& StatsNumericalBaseType::
    RegressionIntercept () const
    {
      return this->RegressionIntercept_;
    }

    StatsNumericalBaseType::RegressionIntercept_optional& StatsNumericalBaseType::
    RegressionIntercept ()
    {
      return this->RegressionIntercept_;
    }

    void StatsNumericalBaseType::
    RegressionIntercept (const RegressionIntercept_type& x)
    {
      this->RegressionIntercept_.set (x);
    }

    void StatsNumericalBaseType::
    RegressionIntercept (const RegressionIntercept_optional& x)
    {
      this->RegressionIntercept_ = x;
    }

    void StatsNumericalBaseType::
    RegressionIntercept (::std::auto_ptr< RegressionIntercept_type > x)
    {
      this->RegressionIntercept_.set (x);
    }

    const StatsNumericalBaseType::UpperConfidenceLimit_optional& StatsNumericalBaseType::
    UpperConfidenceLimit () const
    {
      return this->UpperConfidenceLimit_;
    }

    StatsNumericalBaseType::UpperConfidenceLimit_optional& StatsNumericalBaseType::
    UpperConfidenceLimit ()
    {
      return this->UpperConfidenceLimit_;
    }

    void StatsNumericalBaseType::
    UpperConfidenceLimit (const UpperConfidenceLimit_type& x)
    {
      this->UpperConfidenceLimit_.set (x);
    }

    void StatsNumericalBaseType::
    UpperConfidenceLimit (const UpperConfidenceLimit_optional& x)
    {
      this->UpperConfidenceLimit_ = x;
    }

    void StatsNumericalBaseType::
    UpperConfidenceLimit (::std::auto_ptr< UpperConfidenceLimit_type > x)
    {
      this->UpperConfidenceLimit_.set (x);
    }

    const StatsNumericalBaseType::LowerConfidenceLimit_optional& StatsNumericalBaseType::
    LowerConfidenceLimit () const
    {
      return this->LowerConfidenceLimit_;
    }

    StatsNumericalBaseType::LowerConfidenceLimit_optional& StatsNumericalBaseType::
    LowerConfidenceLimit ()
    {
      return this->LowerConfidenceLimit_;
    }

    void StatsNumericalBaseType::
    LowerConfidenceLimit (const LowerConfidenceLimit_type& x)
    {
      this->LowerConfidenceLimit_.set (x);
    }

    void StatsNumericalBaseType::
    LowerConfidenceLimit (const LowerConfidenceLimit_optional& x)
    {
      this->LowerConfidenceLimit_ = x;
    }

    void StatsNumericalBaseType::
    LowerConfidenceLimit (::std::auto_ptr< LowerConfidenceLimit_type > x)
    {
      this->LowerConfidenceLimit_.set (x);
    }

    const StatsNumericalBaseType::TDistribution_optional& StatsNumericalBaseType::
    TDistribution () const
    {
      return this->TDistribution_;
    }

    StatsNumericalBaseType::TDistribution_optional& StatsNumericalBaseType::
    TDistribution ()
    {
      return this->TDistribution_;
    }

    void StatsNumericalBaseType::
    TDistribution (const TDistribution_type& x)
    {
      this->TDistribution_.set (x);
    }

    void StatsNumericalBaseType::
    TDistribution (const TDistribution_optional& x)
    {
      this->TDistribution_ = x;
    }

    void StatsNumericalBaseType::
    TDistribution (::std::auto_ptr< TDistribution_type > x)
    {
      this->TDistribution_.set (x);
    }


    // StatsWithTolNumericalBaseType
    // 

    const StatsWithTolNumericalBaseType::NumberOutOfTolerance_optional& StatsWithTolNumericalBaseType::
    NumberOutOfTolerance () const
    {
      return this->NumberOutOfTolerance_;
    }

    StatsWithTolNumericalBaseType::NumberOutOfTolerance_optional& StatsWithTolNumericalBaseType::
    NumberOutOfTolerance ()
    {
      return this->NumberOutOfTolerance_;
    }

    void StatsWithTolNumericalBaseType::
    NumberOutOfTolerance (const NumberOutOfTolerance_type& x)
    {
      this->NumberOutOfTolerance_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    NumberOutOfTolerance (const NumberOutOfTolerance_optional& x)
    {
      this->NumberOutOfTolerance_ = x;
    }

    const StatsWithTolNumericalBaseType::OutOfToleranceIds_optional& StatsWithTolNumericalBaseType::
    OutOfToleranceIds () const
    {
      return this->OutOfToleranceIds_;
    }

    StatsWithTolNumericalBaseType::OutOfToleranceIds_optional& StatsWithTolNumericalBaseType::
    OutOfToleranceIds ()
    {
      return this->OutOfToleranceIds_;
    }

    void StatsWithTolNumericalBaseType::
    OutOfToleranceIds (const OutOfToleranceIds_type& x)
    {
      this->OutOfToleranceIds_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    OutOfToleranceIds (const OutOfToleranceIds_optional& x)
    {
      this->OutOfToleranceIds_ = x;
    }

    void StatsWithTolNumericalBaseType::
    OutOfToleranceIds (::std::auto_ptr< OutOfToleranceIds_type > x)
    {
      this->OutOfToleranceIds_.set (x);
    }

    const StatsWithTolNumericalBaseType::SubgroupNumberOutOfTolerance_optional& StatsWithTolNumericalBaseType::
    SubgroupNumberOutOfTolerance () const
    {
      return this->SubgroupNumberOutOfTolerance_;
    }

    StatsWithTolNumericalBaseType::SubgroupNumberOutOfTolerance_optional& StatsWithTolNumericalBaseType::
    SubgroupNumberOutOfTolerance ()
    {
      return this->SubgroupNumberOutOfTolerance_;
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberOutOfTolerance (const SubgroupNumberOutOfTolerance_type& x)
    {
      this->SubgroupNumberOutOfTolerance_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberOutOfTolerance (const SubgroupNumberOutOfTolerance_optional& x)
    {
      this->SubgroupNumberOutOfTolerance_ = x;
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberOutOfTolerance (::std::auto_ptr< SubgroupNumberOutOfTolerance_type > x)
    {
      this->SubgroupNumberOutOfTolerance_.set (x);
    }

    const StatsWithTolNumericalBaseType::NumberOverUpperTolerance_optional& StatsWithTolNumericalBaseType::
    NumberOverUpperTolerance () const
    {
      return this->NumberOverUpperTolerance_;
    }

    StatsWithTolNumericalBaseType::NumberOverUpperTolerance_optional& StatsWithTolNumericalBaseType::
    NumberOverUpperTolerance ()
    {
      return this->NumberOverUpperTolerance_;
    }

    void StatsWithTolNumericalBaseType::
    NumberOverUpperTolerance (const NumberOverUpperTolerance_type& x)
    {
      this->NumberOverUpperTolerance_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    NumberOverUpperTolerance (const NumberOverUpperTolerance_optional& x)
    {
      this->NumberOverUpperTolerance_ = x;
    }

    const StatsWithTolNumericalBaseType::OverUpperToleranceIds_optional& StatsWithTolNumericalBaseType::
    OverUpperToleranceIds () const
    {
      return this->OverUpperToleranceIds_;
    }

    StatsWithTolNumericalBaseType::OverUpperToleranceIds_optional& StatsWithTolNumericalBaseType::
    OverUpperToleranceIds ()
    {
      return this->OverUpperToleranceIds_;
    }

    void StatsWithTolNumericalBaseType::
    OverUpperToleranceIds (const OverUpperToleranceIds_type& x)
    {
      this->OverUpperToleranceIds_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    OverUpperToleranceIds (const OverUpperToleranceIds_optional& x)
    {
      this->OverUpperToleranceIds_ = x;
    }

    void StatsWithTolNumericalBaseType::
    OverUpperToleranceIds (::std::auto_ptr< OverUpperToleranceIds_type > x)
    {
      this->OverUpperToleranceIds_.set (x);
    }

    const StatsWithTolNumericalBaseType::SubgroupNumberOverUpperTolerance_optional& StatsWithTolNumericalBaseType::
    SubgroupNumberOverUpperTolerance () const
    {
      return this->SubgroupNumberOverUpperTolerance_;
    }

    StatsWithTolNumericalBaseType::SubgroupNumberOverUpperTolerance_optional& StatsWithTolNumericalBaseType::
    SubgroupNumberOverUpperTolerance ()
    {
      return this->SubgroupNumberOverUpperTolerance_;
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberOverUpperTolerance (const SubgroupNumberOverUpperTolerance_type& x)
    {
      this->SubgroupNumberOverUpperTolerance_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberOverUpperTolerance (const SubgroupNumberOverUpperTolerance_optional& x)
    {
      this->SubgroupNumberOverUpperTolerance_ = x;
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberOverUpperTolerance (::std::auto_ptr< SubgroupNumberOverUpperTolerance_type > x)
    {
      this->SubgroupNumberOverUpperTolerance_.set (x);
    }

    const StatsWithTolNumericalBaseType::NumberUnderLowerTolerance_optional& StatsWithTolNumericalBaseType::
    NumberUnderLowerTolerance () const
    {
      return this->NumberUnderLowerTolerance_;
    }

    StatsWithTolNumericalBaseType::NumberUnderLowerTolerance_optional& StatsWithTolNumericalBaseType::
    NumberUnderLowerTolerance ()
    {
      return this->NumberUnderLowerTolerance_;
    }

    void StatsWithTolNumericalBaseType::
    NumberUnderLowerTolerance (const NumberUnderLowerTolerance_type& x)
    {
      this->NumberUnderLowerTolerance_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    NumberUnderLowerTolerance (const NumberUnderLowerTolerance_optional& x)
    {
      this->NumberUnderLowerTolerance_ = x;
    }

    const StatsWithTolNumericalBaseType::UnderLowerToleranceIds_optional& StatsWithTolNumericalBaseType::
    UnderLowerToleranceIds () const
    {
      return this->UnderLowerToleranceIds_;
    }

    StatsWithTolNumericalBaseType::UnderLowerToleranceIds_optional& StatsWithTolNumericalBaseType::
    UnderLowerToleranceIds ()
    {
      return this->UnderLowerToleranceIds_;
    }

    void StatsWithTolNumericalBaseType::
    UnderLowerToleranceIds (const UnderLowerToleranceIds_type& x)
    {
      this->UnderLowerToleranceIds_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    UnderLowerToleranceIds (const UnderLowerToleranceIds_optional& x)
    {
      this->UnderLowerToleranceIds_ = x;
    }

    void StatsWithTolNumericalBaseType::
    UnderLowerToleranceIds (::std::auto_ptr< UnderLowerToleranceIds_type > x)
    {
      this->UnderLowerToleranceIds_.set (x);
    }

    const StatsWithTolNumericalBaseType::SubgroupNumberUnderLowerTolerance_optional& StatsWithTolNumericalBaseType::
    SubgroupNumberUnderLowerTolerance () const
    {
      return this->SubgroupNumberUnderLowerTolerance_;
    }

    StatsWithTolNumericalBaseType::SubgroupNumberUnderLowerTolerance_optional& StatsWithTolNumericalBaseType::
    SubgroupNumberUnderLowerTolerance ()
    {
      return this->SubgroupNumberUnderLowerTolerance_;
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberUnderLowerTolerance (const SubgroupNumberUnderLowerTolerance_type& x)
    {
      this->SubgroupNumberUnderLowerTolerance_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberUnderLowerTolerance (const SubgroupNumberUnderLowerTolerance_optional& x)
    {
      this->SubgroupNumberUnderLowerTolerance_ = x;
    }

    void StatsWithTolNumericalBaseType::
    SubgroupNumberUnderLowerTolerance (::std::auto_ptr< SubgroupNumberUnderLowerTolerance_type > x)
    {
      this->SubgroupNumberUnderLowerTolerance_.set (x);
    }

    const StatsWithTolNumericalBaseType::Cp_optional& StatsWithTolNumericalBaseType::
    Cp () const
    {
      return this->Cp_;
    }

    StatsWithTolNumericalBaseType::Cp_optional& StatsWithTolNumericalBaseType::
    Cp ()
    {
      return this->Cp_;
    }

    void StatsWithTolNumericalBaseType::
    Cp (const Cp_type& x)
    {
      this->Cp_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    Cp (const Cp_optional& x)
    {
      this->Cp_ = x;
    }

    void StatsWithTolNumericalBaseType::
    Cp (::std::auto_ptr< Cp_type > x)
    {
      this->Cp_.set (x);
    }

    const StatsWithTolNumericalBaseType::Cpk_optional& StatsWithTolNumericalBaseType::
    Cpk () const
    {
      return this->Cpk_;
    }

    StatsWithTolNumericalBaseType::Cpk_optional& StatsWithTolNumericalBaseType::
    Cpk ()
    {
      return this->Cpk_;
    }

    void StatsWithTolNumericalBaseType::
    Cpk (const Cpk_type& x)
    {
      this->Cpk_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    Cpk (const Cpk_optional& x)
    {
      this->Cpk_ = x;
    }

    void StatsWithTolNumericalBaseType::
    Cpk (::std::auto_ptr< Cpk_type > x)
    {
      this->Cpk_.set (x);
    }

    const StatsWithTolNumericalBaseType::Pp_optional& StatsWithTolNumericalBaseType::
    Pp () const
    {
      return this->Pp_;
    }

    StatsWithTolNumericalBaseType::Pp_optional& StatsWithTolNumericalBaseType::
    Pp ()
    {
      return this->Pp_;
    }

    void StatsWithTolNumericalBaseType::
    Pp (const Pp_type& x)
    {
      this->Pp_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    Pp (const Pp_optional& x)
    {
      this->Pp_ = x;
    }

    void StatsWithTolNumericalBaseType::
    Pp (::std::auto_ptr< Pp_type > x)
    {
      this->Pp_.set (x);
    }

    const StatsWithTolNumericalBaseType::Ppk_optional& StatsWithTolNumericalBaseType::
    Ppk () const
    {
      return this->Ppk_;
    }

    StatsWithTolNumericalBaseType::Ppk_optional& StatsWithTolNumericalBaseType::
    Ppk ()
    {
      return this->Ppk_;
    }

    void StatsWithTolNumericalBaseType::
    Ppk (const Ppk_type& x)
    {
      this->Ppk_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    Ppk (const Ppk_optional& x)
    {
      this->Ppk_ = x;
    }

    void StatsWithTolNumericalBaseType::
    Ppk (::std::auto_ptr< Ppk_type > x)
    {
      this->Ppk_.set (x);
    }

    const StatsWithTolNumericalBaseType::Cm_optional& StatsWithTolNumericalBaseType::
    Cm () const
    {
      return this->Cm_;
    }

    StatsWithTolNumericalBaseType::Cm_optional& StatsWithTolNumericalBaseType::
    Cm ()
    {
      return this->Cm_;
    }

    void StatsWithTolNumericalBaseType::
    Cm (const Cm_type& x)
    {
      this->Cm_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    Cm (const Cm_optional& x)
    {
      this->Cm_ = x;
    }

    void StatsWithTolNumericalBaseType::
    Cm (::std::auto_ptr< Cm_type > x)
    {
      this->Cm_.set (x);
    }

    const StatsWithTolNumericalBaseType::Cmk_optional& StatsWithTolNumericalBaseType::
    Cmk () const
    {
      return this->Cmk_;
    }

    StatsWithTolNumericalBaseType::Cmk_optional& StatsWithTolNumericalBaseType::
    Cmk ()
    {
      return this->Cmk_;
    }

    void StatsWithTolNumericalBaseType::
    Cmk (const Cmk_type& x)
    {
      this->Cmk_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    Cmk (const Cmk_optional& x)
    {
      this->Cmk_ = x;
    }

    void StatsWithTolNumericalBaseType::
    Cmk (::std::auto_ptr< Cmk_type > x)
    {
      this->Cmk_.set (x);
    }

    const StatsWithTolNumericalBaseType::RelativeAppraiserVariation_optional& StatsWithTolNumericalBaseType::
    RelativeAppraiserVariation () const
    {
      return this->RelativeAppraiserVariation_;
    }

    StatsWithTolNumericalBaseType::RelativeAppraiserVariation_optional& StatsWithTolNumericalBaseType::
    RelativeAppraiserVariation ()
    {
      return this->RelativeAppraiserVariation_;
    }

    void StatsWithTolNumericalBaseType::
    RelativeAppraiserVariation (const RelativeAppraiserVariation_type& x)
    {
      this->RelativeAppraiserVariation_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    RelativeAppraiserVariation (const RelativeAppraiserVariation_optional& x)
    {
      this->RelativeAppraiserVariation_ = x;
    }

    void StatsWithTolNumericalBaseType::
    RelativeAppraiserVariation (::std::auto_ptr< RelativeAppraiserVariation_type > x)
    {
      this->RelativeAppraiserVariation_.set (x);
    }

    const StatsWithTolNumericalBaseType::RelativeEquipmentVariation_optional& StatsWithTolNumericalBaseType::
    RelativeEquipmentVariation () const
    {
      return this->RelativeEquipmentVariation_;
    }

    StatsWithTolNumericalBaseType::RelativeEquipmentVariation_optional& StatsWithTolNumericalBaseType::
    RelativeEquipmentVariation ()
    {
      return this->RelativeEquipmentVariation_;
    }

    void StatsWithTolNumericalBaseType::
    RelativeEquipmentVariation (const RelativeEquipmentVariation_type& x)
    {
      this->RelativeEquipmentVariation_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    RelativeEquipmentVariation (const RelativeEquipmentVariation_optional& x)
    {
      this->RelativeEquipmentVariation_ = x;
    }

    void StatsWithTolNumericalBaseType::
    RelativeEquipmentVariation (::std::auto_ptr< RelativeEquipmentVariation_type > x)
    {
      this->RelativeEquipmentVariation_.set (x);
    }

    const StatsWithTolNumericalBaseType::RelativeInteraction_optional& StatsWithTolNumericalBaseType::
    RelativeInteraction () const
    {
      return this->RelativeInteraction_;
    }

    StatsWithTolNumericalBaseType::RelativeInteraction_optional& StatsWithTolNumericalBaseType::
    RelativeInteraction ()
    {
      return this->RelativeInteraction_;
    }

    void StatsWithTolNumericalBaseType::
    RelativeInteraction (const RelativeInteraction_type& x)
    {
      this->RelativeInteraction_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    RelativeInteraction (const RelativeInteraction_optional& x)
    {
      this->RelativeInteraction_ = x;
    }

    void StatsWithTolNumericalBaseType::
    RelativeInteraction (::std::auto_ptr< RelativeInteraction_type > x)
    {
      this->RelativeInteraction_.set (x);
    }

    const StatsWithTolNumericalBaseType::RelativeGageRandR_optional& StatsWithTolNumericalBaseType::
    RelativeGageRandR () const
    {
      return this->RelativeGageRandR_;
    }

    StatsWithTolNumericalBaseType::RelativeGageRandR_optional& StatsWithTolNumericalBaseType::
    RelativeGageRandR ()
    {
      return this->RelativeGageRandR_;
    }

    void StatsWithTolNumericalBaseType::
    RelativeGageRandR (const RelativeGageRandR_type& x)
    {
      this->RelativeGageRandR_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    RelativeGageRandR (const RelativeGageRandR_optional& x)
    {
      this->RelativeGageRandR_ = x;
    }

    void StatsWithTolNumericalBaseType::
    RelativeGageRandR (::std::auto_ptr< RelativeGageRandR_type > x)
    {
      this->RelativeGageRandR_.set (x);
    }

    const StatsWithTolNumericalBaseType::RelativePartVariation_optional& StatsWithTolNumericalBaseType::
    RelativePartVariation () const
    {
      return this->RelativePartVariation_;
    }

    StatsWithTolNumericalBaseType::RelativePartVariation_optional& StatsWithTolNumericalBaseType::
    RelativePartVariation ()
    {
      return this->RelativePartVariation_;
    }

    void StatsWithTolNumericalBaseType::
    RelativePartVariation (const RelativePartVariation_type& x)
    {
      this->RelativePartVariation_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    RelativePartVariation (const RelativePartVariation_optional& x)
    {
      this->RelativePartVariation_ = x;
    }

    void StatsWithTolNumericalBaseType::
    RelativePartVariation (::std::auto_ptr< RelativePartVariation_type > x)
    {
      this->RelativePartVariation_.set (x);
    }

    const StatsWithTolNumericalBaseType::RelativeTotalVariation_optional& StatsWithTolNumericalBaseType::
    RelativeTotalVariation () const
    {
      return this->RelativeTotalVariation_;
    }

    StatsWithTolNumericalBaseType::RelativeTotalVariation_optional& StatsWithTolNumericalBaseType::
    RelativeTotalVariation ()
    {
      return this->RelativeTotalVariation_;
    }

    void StatsWithTolNumericalBaseType::
    RelativeTotalVariation (const RelativeTotalVariation_type& x)
    {
      this->RelativeTotalVariation_.set (x);
    }

    void StatsWithTolNumericalBaseType::
    RelativeTotalVariation (const RelativeTotalVariation_optional& x)
    {
      this->RelativeTotalVariation_ = x;
    }

    void StatsWithTolNumericalBaseType::
    RelativeTotalVariation (::std::auto_ptr< RelativeTotalVariation_type > x)
    {
      this->RelativeTotalVariation_.set (x);
    }


    // StatsWithTolLinearType
    // 

    const StatsWithTolLinearType::linearUnit_optional& StatsWithTolLinearType::
    linearUnit () const
    {
      return this->linearUnit_;
    }

    StatsWithTolLinearType::linearUnit_optional& StatsWithTolLinearType::
    linearUnit ()
    {
      return this->linearUnit_;
    }

    void StatsWithTolLinearType::
    linearUnit (const linearUnit_type& x)
    {
      this->linearUnit_.set (x);
    }

    void StatsWithTolLinearType::
    linearUnit (const linearUnit_optional& x)
    {
      this->linearUnit_ = x;
    }

    void StatsWithTolLinearType::
    linearUnit (::std::auto_ptr< linearUnit_type > x)
    {
      this->linearUnit_.set (x);
    }


    // StatsWithTolAngularType
    // 

    const StatsWithTolAngularType::angularUnit_optional& StatsWithTolAngularType::
    angularUnit () const
    {
      return this->angularUnit_;
    }

    StatsWithTolAngularType::angularUnit_optional& StatsWithTolAngularType::
    angularUnit ()
    {
      return this->angularUnit_;
    }

    void StatsWithTolAngularType::
    angularUnit (const angularUnit_type& x)
    {
      this->angularUnit_.set (x);
    }

    void StatsWithTolAngularType::
    angularUnit (const angularUnit_optional& x)
    {
      this->angularUnit_ = x;
    }

    void StatsWithTolAngularType::
    angularUnit (::std::auto_ptr< angularUnit_type > x)
    {
      this->angularUnit_.set (x);
    }


    // StatsWithTolAreaType
    // 

    const StatsWithTolAreaType::areaUnit_optional& StatsWithTolAreaType::
    areaUnit () const
    {
      return this->areaUnit_;
    }

    StatsWithTolAreaType::areaUnit_optional& StatsWithTolAreaType::
    areaUnit ()
    {
      return this->areaUnit_;
    }

    void StatsWithTolAreaType::
    areaUnit (const areaUnit_type& x)
    {
      this->areaUnit_.set (x);
    }

    void StatsWithTolAreaType::
    areaUnit (const areaUnit_optional& x)
    {
      this->areaUnit_ = x;
    }

    void StatsWithTolAreaType::
    areaUnit (::std::auto_ptr< areaUnit_type > x)
    {
      this->areaUnit_.set (x);
    }


    // StatsWithTolForceType
    // 

    const StatsWithTolForceType::forceUnit_optional& StatsWithTolForceType::
    forceUnit () const
    {
      return this->forceUnit_;
    }

    StatsWithTolForceType::forceUnit_optional& StatsWithTolForceType::
    forceUnit ()
    {
      return this->forceUnit_;
    }

    void StatsWithTolForceType::
    forceUnit (const forceUnit_type& x)
    {
      this->forceUnit_.set (x);
    }

    void StatsWithTolForceType::
    forceUnit (const forceUnit_optional& x)
    {
      this->forceUnit_ = x;
    }

    void StatsWithTolForceType::
    forceUnit (::std::auto_ptr< forceUnit_type > x)
    {
      this->forceUnit_.set (x);
    }


    // StatsWithTolMassType
    // 

    const StatsWithTolMassType::massUnit_optional& StatsWithTolMassType::
    massUnit () const
    {
      return this->massUnit_;
    }

    StatsWithTolMassType::massUnit_optional& StatsWithTolMassType::
    massUnit ()
    {
      return this->massUnit_;
    }

    void StatsWithTolMassType::
    massUnit (const massUnit_type& x)
    {
      this->massUnit_.set (x);
    }

    void StatsWithTolMassType::
    massUnit (const massUnit_optional& x)
    {
      this->massUnit_ = x;
    }

    void StatsWithTolMassType::
    massUnit (::std::auto_ptr< massUnit_type > x)
    {
      this->massUnit_.set (x);
    }


    // StatsWithTolPressureType
    // 

    const StatsWithTolPressureType::pressureUnit_optional& StatsWithTolPressureType::
    pressureUnit () const
    {
      return this->pressureUnit_;
    }

    StatsWithTolPressureType::pressureUnit_optional& StatsWithTolPressureType::
    pressureUnit ()
    {
      return this->pressureUnit_;
    }

    void StatsWithTolPressureType::
    pressureUnit (const pressureUnit_type& x)
    {
      this->pressureUnit_.set (x);
    }

    void StatsWithTolPressureType::
    pressureUnit (const pressureUnit_optional& x)
    {
      this->pressureUnit_ = x;
    }

    void StatsWithTolPressureType::
    pressureUnit (::std::auto_ptr< pressureUnit_type > x)
    {
      this->pressureUnit_.set (x);
    }


    // StatsWithTolSpeedType
    // 

    const StatsWithTolSpeedType::speedUnit_optional& StatsWithTolSpeedType::
    speedUnit () const
    {
      return this->speedUnit_;
    }

    StatsWithTolSpeedType::speedUnit_optional& StatsWithTolSpeedType::
    speedUnit ()
    {
      return this->speedUnit_;
    }

    void StatsWithTolSpeedType::
    speedUnit (const speedUnit_type& x)
    {
      this->speedUnit_.set (x);
    }

    void StatsWithTolSpeedType::
    speedUnit (const speedUnit_optional& x)
    {
      this->speedUnit_ = x;
    }

    void StatsWithTolSpeedType::
    speedUnit (::std::auto_ptr< speedUnit_type > x)
    {
      this->speedUnit_.set (x);
    }


    // StatsWithTolTemperatureType
    // 

    const StatsWithTolTemperatureType::temperatureUnit_optional& StatsWithTolTemperatureType::
    temperatureUnit () const
    {
      return this->temperatureUnit_;
    }

    StatsWithTolTemperatureType::temperatureUnit_optional& StatsWithTolTemperatureType::
    temperatureUnit ()
    {
      return this->temperatureUnit_;
    }

    void StatsWithTolTemperatureType::
    temperatureUnit (const temperatureUnit_type& x)
    {
      this->temperatureUnit_.set (x);
    }

    void StatsWithTolTemperatureType::
    temperatureUnit (const temperatureUnit_optional& x)
    {
      this->temperatureUnit_ = x;
    }

    void StatsWithTolTemperatureType::
    temperatureUnit (::std::auto_ptr< temperatureUnit_type > x)
    {
      this->temperatureUnit_.set (x);
    }


    // StatsWithTolTimeType
    // 

    const StatsWithTolTimeType::timeUnit_optional& StatsWithTolTimeType::
    timeUnit () const
    {
      return this->timeUnit_;
    }

    StatsWithTolTimeType::timeUnit_optional& StatsWithTolTimeType::
    timeUnit ()
    {
      return this->timeUnit_;
    }

    void StatsWithTolTimeType::
    timeUnit (const timeUnit_type& x)
    {
      this->timeUnit_.set (x);
    }

    void StatsWithTolTimeType::
    timeUnit (const timeUnit_optional& x)
    {
      this->timeUnit_ = x;
    }

    void StatsWithTolTimeType::
    timeUnit (::std::auto_ptr< timeUnit_type > x)
    {
      this->timeUnit_.set (x);
    }


    // StatsWithTolUserDefinedUnitType
    // 

    const StatsWithTolUserDefinedUnitType::unitName_type& StatsWithTolUserDefinedUnitType::
    unitName () const
    {
      return this->unitName_.get ();
    }

    StatsWithTolUserDefinedUnitType::unitName_type& StatsWithTolUserDefinedUnitType::
    unitName ()
    {
      return this->unitName_.get ();
    }

    void StatsWithTolUserDefinedUnitType::
    unitName (const unitName_type& x)
    {
      this->unitName_.set (x);
    }

    void StatsWithTolUserDefinedUnitType::
    unitName (::std::auto_ptr< unitName_type > x)
    {
      this->unitName_.set (x);
    }


    // StatsLinearType
    // 

    const StatsLinearType::linearUnit_optional& StatsLinearType::
    linearUnit () const
    {
      return this->linearUnit_;
    }

    StatsLinearType::linearUnit_optional& StatsLinearType::
    linearUnit ()
    {
      return this->linearUnit_;
    }

    void StatsLinearType::
    linearUnit (const linearUnit_type& x)
    {
      this->linearUnit_.set (x);
    }

    void StatsLinearType::
    linearUnit (const linearUnit_optional& x)
    {
      this->linearUnit_ = x;
    }

    void StatsLinearType::
    linearUnit (::std::auto_ptr< linearUnit_type > x)
    {
      this->linearUnit_.set (x);
    }


    // StatsAngularType
    // 

    const StatsAngularType::angularUnit_optional& StatsAngularType::
    angularUnit () const
    {
      return this->angularUnit_;
    }

    StatsAngularType::angularUnit_optional& StatsAngularType::
    angularUnit ()
    {
      return this->angularUnit_;
    }

    void StatsAngularType::
    angularUnit (const angularUnit_type& x)
    {
      this->angularUnit_.set (x);
    }

    void StatsAngularType::
    angularUnit (const angularUnit_optional& x)
    {
      this->angularUnit_ = x;
    }

    void StatsAngularType::
    angularUnit (::std::auto_ptr< angularUnit_type > x)
    {
      this->angularUnit_.set (x);
    }


    // StatsAreaType
    // 

    const StatsAreaType::areaUnit_optional& StatsAreaType::
    areaUnit () const
    {
      return this->areaUnit_;
    }

    StatsAreaType::areaUnit_optional& StatsAreaType::
    areaUnit ()
    {
      return this->areaUnit_;
    }

    void StatsAreaType::
    areaUnit (const areaUnit_type& x)
    {
      this->areaUnit_.set (x);
    }

    void StatsAreaType::
    areaUnit (const areaUnit_optional& x)
    {
      this->areaUnit_ = x;
    }

    void StatsAreaType::
    areaUnit (::std::auto_ptr< areaUnit_type > x)
    {
      this->areaUnit_.set (x);
    }


    // StatsForceType
    // 

    const StatsForceType::forceUnit_optional& StatsForceType::
    forceUnit () const
    {
      return this->forceUnit_;
    }

    StatsForceType::forceUnit_optional& StatsForceType::
    forceUnit ()
    {
      return this->forceUnit_;
    }

    void StatsForceType::
    forceUnit (const forceUnit_type& x)
    {
      this->forceUnit_.set (x);
    }

    void StatsForceType::
    forceUnit (const forceUnit_optional& x)
    {
      this->forceUnit_ = x;
    }

    void StatsForceType::
    forceUnit (::std::auto_ptr< forceUnit_type > x)
    {
      this->forceUnit_.set (x);
    }


    // StatsMassType
    // 

    const StatsMassType::massUnit_optional& StatsMassType::
    massUnit () const
    {
      return this->massUnit_;
    }

    StatsMassType::massUnit_optional& StatsMassType::
    massUnit ()
    {
      return this->massUnit_;
    }

    void StatsMassType::
    massUnit (const massUnit_type& x)
    {
      this->massUnit_.set (x);
    }

    void StatsMassType::
    massUnit (const massUnit_optional& x)
    {
      this->massUnit_ = x;
    }

    void StatsMassType::
    massUnit (::std::auto_ptr< massUnit_type > x)
    {
      this->massUnit_.set (x);
    }


    // StatsPressureType
    // 

    const StatsPressureType::pressureUnit_optional& StatsPressureType::
    pressureUnit () const
    {
      return this->pressureUnit_;
    }

    StatsPressureType::pressureUnit_optional& StatsPressureType::
    pressureUnit ()
    {
      return this->pressureUnit_;
    }

    void StatsPressureType::
    pressureUnit (const pressureUnit_type& x)
    {
      this->pressureUnit_.set (x);
    }

    void StatsPressureType::
    pressureUnit (const pressureUnit_optional& x)
    {
      this->pressureUnit_ = x;
    }

    void StatsPressureType::
    pressureUnit (::std::auto_ptr< pressureUnit_type > x)
    {
      this->pressureUnit_.set (x);
    }


    // StatsSpeedType
    // 

    const StatsSpeedType::speedUnit_optional& StatsSpeedType::
    speedUnit () const
    {
      return this->speedUnit_;
    }

    StatsSpeedType::speedUnit_optional& StatsSpeedType::
    speedUnit ()
    {
      return this->speedUnit_;
    }

    void StatsSpeedType::
    speedUnit (const speedUnit_type& x)
    {
      this->speedUnit_.set (x);
    }

    void StatsSpeedType::
    speedUnit (const speedUnit_optional& x)
    {
      this->speedUnit_ = x;
    }

    void StatsSpeedType::
    speedUnit (::std::auto_ptr< speedUnit_type > x)
    {
      this->speedUnit_.set (x);
    }


    // StatsTemperatureType
    // 

    const StatsTemperatureType::temperatureUnit_optional& StatsTemperatureType::
    temperatureUnit () const
    {
      return this->temperatureUnit_;
    }

    StatsTemperatureType::temperatureUnit_optional& StatsTemperatureType::
    temperatureUnit ()
    {
      return this->temperatureUnit_;
    }

    void StatsTemperatureType::
    temperatureUnit (const temperatureUnit_type& x)
    {
      this->temperatureUnit_.set (x);
    }

    void StatsTemperatureType::
    temperatureUnit (const temperatureUnit_optional& x)
    {
      this->temperatureUnit_ = x;
    }

    void StatsTemperatureType::
    temperatureUnit (::std::auto_ptr< temperatureUnit_type > x)
    {
      this->temperatureUnit_.set (x);
    }


    // StatsTimeType
    // 

    const StatsTimeType::timeUnit_optional& StatsTimeType::
    timeUnit () const
    {
      return this->timeUnit_;
    }

    StatsTimeType::timeUnit_optional& StatsTimeType::
    timeUnit ()
    {
      return this->timeUnit_;
    }

    void StatsTimeType::
    timeUnit (const timeUnit_type& x)
    {
      this->timeUnit_.set (x);
    }

    void StatsTimeType::
    timeUnit (const timeUnit_optional& x)
    {
      this->timeUnit_ = x;
    }

    void StatsTimeType::
    timeUnit (::std::auto_ptr< timeUnit_type > x)
    {
      this->timeUnit_.set (x);
    }


    // StatsUserDefinedUnitType
    // 

    const StatsUserDefinedUnitType::unitName_type& StatsUserDefinedUnitType::
    unitName () const
    {
      return this->unitName_.get ();
    }

    StatsUserDefinedUnitType::unitName_type& StatsUserDefinedUnitType::
    unitName ()
    {
      return this->unitName_.get ();
    }

    void StatsUserDefinedUnitType::
    unitName (const unitName_type& x)
    {
      this->unitName_.set (x);
    }

    void StatsUserDefinedUnitType::
    unitName (::std::auto_ptr< unitName_type > x)
    {
      this->unitName_.set (x);
    }


    // StatsPassFailType
    // 

    const StatsPassFailType::FailurePercentage_optional& StatsPassFailType::
    FailurePercentage () const
    {
      return this->FailurePercentage_;
    }

    StatsPassFailType::FailurePercentage_optional& StatsPassFailType::
    FailurePercentage ()
    {
      return this->FailurePercentage_;
    }

    void StatsPassFailType::
    FailurePercentage (const FailurePercentage_type& x)
    {
      this->FailurePercentage_.set (x);
    }

    void StatsPassFailType::
    FailurePercentage (const FailurePercentage_optional& x)
    {
      this->FailurePercentage_ = x;
    }

    const StatsPassFailType::NumberFailures_optional& StatsPassFailType::
    NumberFailures () const
    {
      return this->NumberFailures_;
    }

    StatsPassFailType::NumberFailures_optional& StatsPassFailType::
    NumberFailures ()
    {
      return this->NumberFailures_;
    }

    void StatsPassFailType::
    NumberFailures (const NumberFailures_type& x)
    {
      this->NumberFailures_.set (x);
    }

    void StatsPassFailType::
    NumberFailures (const NumberFailures_optional& x)
    {
      this->NumberFailures_ = x;
    }


    // GeometricCharacteristicStatsEvalType
    // 

    const GeometricCharacteristicStatsEvalType::ValueStats_optional& GeometricCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    GeometricCharacteristicStatsEvalType::ValueStats_optional& GeometricCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void GeometricCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void GeometricCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void GeometricCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const GeometricCharacteristicStatsEvalType::MaxValueStats_optional& GeometricCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    GeometricCharacteristicStatsEvalType::MaxValueStats_optional& GeometricCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void GeometricCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void GeometricCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void GeometricCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const GeometricCharacteristicStatsEvalType::MinValueStats_optional& GeometricCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    GeometricCharacteristicStatsEvalType::MinValueStats_optional& GeometricCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void GeometricCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void GeometricCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void GeometricCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }


    // CompositeSegmentStatsEvalBaseType
    // 

    const CompositeSegmentStatsEvalBaseType::ValueStats_optional& CompositeSegmentStatsEvalBaseType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    CompositeSegmentStatsEvalBaseType::ValueStats_optional& CompositeSegmentStatsEvalBaseType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void CompositeSegmentStatsEvalBaseType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void CompositeSegmentStatsEvalBaseType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void CompositeSegmentStatsEvalBaseType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const CompositeSegmentStatsEvalBaseType::MaxValueStats_optional& CompositeSegmentStatsEvalBaseType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    CompositeSegmentStatsEvalBaseType::MaxValueStats_optional& CompositeSegmentStatsEvalBaseType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void CompositeSegmentStatsEvalBaseType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void CompositeSegmentStatsEvalBaseType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void CompositeSegmentStatsEvalBaseType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const CompositeSegmentStatsEvalBaseType::MinValueStats_optional& CompositeSegmentStatsEvalBaseType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    CompositeSegmentStatsEvalBaseType::MinValueStats_optional& CompositeSegmentStatsEvalBaseType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void CompositeSegmentStatsEvalBaseType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void CompositeSegmentStatsEvalBaseType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void CompositeSegmentStatsEvalBaseType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }


    // CompositeSegmentPositionStatsEvalType
    // 


    // CompositeSegmentsPositionStatsEvalType
    // 

    const CompositeSegmentsPositionStatsEvalType::SecondCompositeSegmentPositionStats_type& CompositeSegmentsPositionStatsEvalType::
    SecondCompositeSegmentPositionStats () const
    {
      return this->SecondCompositeSegmentPositionStats_.get ();
    }

    CompositeSegmentsPositionStatsEvalType::SecondCompositeSegmentPositionStats_type& CompositeSegmentsPositionStatsEvalType::
    SecondCompositeSegmentPositionStats ()
    {
      return this->SecondCompositeSegmentPositionStats_.get ();
    }

    void CompositeSegmentsPositionStatsEvalType::
    SecondCompositeSegmentPositionStats (const SecondCompositeSegmentPositionStats_type& x)
    {
      this->SecondCompositeSegmentPositionStats_.set (x);
    }

    void CompositeSegmentsPositionStatsEvalType::
    SecondCompositeSegmentPositionStats (::std::auto_ptr< SecondCompositeSegmentPositionStats_type > x)
    {
      this->SecondCompositeSegmentPositionStats_.set (x);
    }

    const CompositeSegmentsPositionStatsEvalType::ThirdCompositeSegmentPositionStats_optional& CompositeSegmentsPositionStatsEvalType::
    ThirdCompositeSegmentPositionStats () const
    {
      return this->ThirdCompositeSegmentPositionStats_;
    }

    CompositeSegmentsPositionStatsEvalType::ThirdCompositeSegmentPositionStats_optional& CompositeSegmentsPositionStatsEvalType::
    ThirdCompositeSegmentPositionStats ()
    {
      return this->ThirdCompositeSegmentPositionStats_;
    }

    void CompositeSegmentsPositionStatsEvalType::
    ThirdCompositeSegmentPositionStats (const ThirdCompositeSegmentPositionStats_type& x)
    {
      this->ThirdCompositeSegmentPositionStats_.set (x);
    }

    void CompositeSegmentsPositionStatsEvalType::
    ThirdCompositeSegmentPositionStats (const ThirdCompositeSegmentPositionStats_optional& x)
    {
      this->ThirdCompositeSegmentPositionStats_ = x;
    }

    void CompositeSegmentsPositionStatsEvalType::
    ThirdCompositeSegmentPositionStats (::std::auto_ptr< ThirdCompositeSegmentPositionStats_type > x)
    {
      this->ThirdCompositeSegmentPositionStats_.set (x);
    }

    const CompositeSegmentsPositionStatsEvalType::FourthCompositeSegmentPositionStats_optional& CompositeSegmentsPositionStatsEvalType::
    FourthCompositeSegmentPositionStats () const
    {
      return this->FourthCompositeSegmentPositionStats_;
    }

    CompositeSegmentsPositionStatsEvalType::FourthCompositeSegmentPositionStats_optional& CompositeSegmentsPositionStatsEvalType::
    FourthCompositeSegmentPositionStats ()
    {
      return this->FourthCompositeSegmentPositionStats_;
    }

    void CompositeSegmentsPositionStatsEvalType::
    FourthCompositeSegmentPositionStats (const FourthCompositeSegmentPositionStats_type& x)
    {
      this->FourthCompositeSegmentPositionStats_.set (x);
    }

    void CompositeSegmentsPositionStatsEvalType::
    FourthCompositeSegmentPositionStats (const FourthCompositeSegmentPositionStats_optional& x)
    {
      this->FourthCompositeSegmentPositionStats_ = x;
    }

    void CompositeSegmentsPositionStatsEvalType::
    FourthCompositeSegmentPositionStats (::std::auto_ptr< FourthCompositeSegmentPositionStats_type > x)
    {
      this->FourthCompositeSegmentPositionStats_.set (x);
    }


    // CompositeSegmentProfileStatsEvalType
    // 


    // CompositeSegmentsProfileStatsEvalType
    // 

    const CompositeSegmentsProfileStatsEvalType::SecondCompositeSegmentProfileStats_type& CompositeSegmentsProfileStatsEvalType::
    SecondCompositeSegmentProfileStats () const
    {
      return this->SecondCompositeSegmentProfileStats_.get ();
    }

    CompositeSegmentsProfileStatsEvalType::SecondCompositeSegmentProfileStats_type& CompositeSegmentsProfileStatsEvalType::
    SecondCompositeSegmentProfileStats ()
    {
      return this->SecondCompositeSegmentProfileStats_.get ();
    }

    void CompositeSegmentsProfileStatsEvalType::
    SecondCompositeSegmentProfileStats (const SecondCompositeSegmentProfileStats_type& x)
    {
      this->SecondCompositeSegmentProfileStats_.set (x);
    }

    void CompositeSegmentsProfileStatsEvalType::
    SecondCompositeSegmentProfileStats (::std::auto_ptr< SecondCompositeSegmentProfileStats_type > x)
    {
      this->SecondCompositeSegmentProfileStats_.set (x);
    }

    const CompositeSegmentsProfileStatsEvalType::ThirdCompositeSegmentProfileStats_optional& CompositeSegmentsProfileStatsEvalType::
    ThirdCompositeSegmentProfileStats () const
    {
      return this->ThirdCompositeSegmentProfileStats_;
    }

    CompositeSegmentsProfileStatsEvalType::ThirdCompositeSegmentProfileStats_optional& CompositeSegmentsProfileStatsEvalType::
    ThirdCompositeSegmentProfileStats ()
    {
      return this->ThirdCompositeSegmentProfileStats_;
    }

    void CompositeSegmentsProfileStatsEvalType::
    ThirdCompositeSegmentProfileStats (const ThirdCompositeSegmentProfileStats_type& x)
    {
      this->ThirdCompositeSegmentProfileStats_.set (x);
    }

    void CompositeSegmentsProfileStatsEvalType::
    ThirdCompositeSegmentProfileStats (const ThirdCompositeSegmentProfileStats_optional& x)
    {
      this->ThirdCompositeSegmentProfileStats_ = x;
    }

    void CompositeSegmentsProfileStatsEvalType::
    ThirdCompositeSegmentProfileStats (::std::auto_ptr< ThirdCompositeSegmentProfileStats_type > x)
    {
      this->ThirdCompositeSegmentProfileStats_.set (x);
    }

    const CompositeSegmentsProfileStatsEvalType::FourthCompositeSegmentProfileStats_optional& CompositeSegmentsProfileStatsEvalType::
    FourthCompositeSegmentProfileStats () const
    {
      return this->FourthCompositeSegmentProfileStats_;
    }

    CompositeSegmentsProfileStatsEvalType::FourthCompositeSegmentProfileStats_optional& CompositeSegmentsProfileStatsEvalType::
    FourthCompositeSegmentProfileStats ()
    {
      return this->FourthCompositeSegmentProfileStats_;
    }

    void CompositeSegmentsProfileStatsEvalType::
    FourthCompositeSegmentProfileStats (const FourthCompositeSegmentProfileStats_type& x)
    {
      this->FourthCompositeSegmentProfileStats_.set (x);
    }

    void CompositeSegmentsProfileStatsEvalType::
    FourthCompositeSegmentProfileStats (const FourthCompositeSegmentProfileStats_optional& x)
    {
      this->FourthCompositeSegmentProfileStats_ = x;
    }

    void CompositeSegmentsProfileStatsEvalType::
    FourthCompositeSegmentProfileStats (::std::auto_ptr< FourthCompositeSegmentProfileStats_type > x)
    {
      this->FourthCompositeSegmentProfileStats_.set (x);
    }


    // CompositeSegmentSymmetryStatsEvalType
    // 


    // CompositeSegmentsSymmetryStatsEvalType
    // 

    const CompositeSegmentsSymmetryStatsEvalType::SecondCompositeSegmentSymmetryStats_type& CompositeSegmentsSymmetryStatsEvalType::
    SecondCompositeSegmentSymmetryStats () const
    {
      return this->SecondCompositeSegmentSymmetryStats_.get ();
    }

    CompositeSegmentsSymmetryStatsEvalType::SecondCompositeSegmentSymmetryStats_type& CompositeSegmentsSymmetryStatsEvalType::
    SecondCompositeSegmentSymmetryStats ()
    {
      return this->SecondCompositeSegmentSymmetryStats_.get ();
    }

    void CompositeSegmentsSymmetryStatsEvalType::
    SecondCompositeSegmentSymmetryStats (const SecondCompositeSegmentSymmetryStats_type& x)
    {
      this->SecondCompositeSegmentSymmetryStats_.set (x);
    }

    void CompositeSegmentsSymmetryStatsEvalType::
    SecondCompositeSegmentSymmetryStats (::std::auto_ptr< SecondCompositeSegmentSymmetryStats_type > x)
    {
      this->SecondCompositeSegmentSymmetryStats_.set (x);
    }

    const CompositeSegmentsSymmetryStatsEvalType::ThirdCompositeSegmentSymmetryStats_optional& CompositeSegmentsSymmetryStatsEvalType::
    ThirdCompositeSegmentSymmetryStats () const
    {
      return this->ThirdCompositeSegmentSymmetryStats_;
    }

    CompositeSegmentsSymmetryStatsEvalType::ThirdCompositeSegmentSymmetryStats_optional& CompositeSegmentsSymmetryStatsEvalType::
    ThirdCompositeSegmentSymmetryStats ()
    {
      return this->ThirdCompositeSegmentSymmetryStats_;
    }

    void CompositeSegmentsSymmetryStatsEvalType::
    ThirdCompositeSegmentSymmetryStats (const ThirdCompositeSegmentSymmetryStats_type& x)
    {
      this->ThirdCompositeSegmentSymmetryStats_.set (x);
    }

    void CompositeSegmentsSymmetryStatsEvalType::
    ThirdCompositeSegmentSymmetryStats (const ThirdCompositeSegmentSymmetryStats_optional& x)
    {
      this->ThirdCompositeSegmentSymmetryStats_ = x;
    }

    void CompositeSegmentsSymmetryStatsEvalType::
    ThirdCompositeSegmentSymmetryStats (::std::auto_ptr< ThirdCompositeSegmentSymmetryStats_type > x)
    {
      this->ThirdCompositeSegmentSymmetryStats_.set (x);
    }


    // LinearCharacteristicStatsEvalType
    // 

    const LinearCharacteristicStatsEvalType::ValueStats_optional& LinearCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    LinearCharacteristicStatsEvalType::ValueStats_optional& LinearCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void LinearCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void LinearCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void LinearCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const LinearCharacteristicStatsEvalType::MaxValueStats_optional& LinearCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    LinearCharacteristicStatsEvalType::MaxValueStats_optional& LinearCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void LinearCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void LinearCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void LinearCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const LinearCharacteristicStatsEvalType::MinValueStats_optional& LinearCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    LinearCharacteristicStatsEvalType::MinValueStats_optional& LinearCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void LinearCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void LinearCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void LinearCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const LinearCharacteristicStatsEvalType::DeviationStats_optional& LinearCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    LinearCharacteristicStatsEvalType::DeviationStats_optional& LinearCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void LinearCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void LinearCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void LinearCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const LinearCharacteristicStatsEvalType::MaxDeviationStats_optional& LinearCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    LinearCharacteristicStatsEvalType::MaxDeviationStats_optional& LinearCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void LinearCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void LinearCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void LinearCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const LinearCharacteristicStatsEvalType::MinDeviationStats_optional& LinearCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    LinearCharacteristicStatsEvalType::MinDeviationStats_optional& LinearCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void LinearCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void LinearCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void LinearCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // AngularCharacteristicStatsEvalType
    // 

    const AngularCharacteristicStatsEvalType::ValueStats_optional& AngularCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    AngularCharacteristicStatsEvalType::ValueStats_optional& AngularCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void AngularCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void AngularCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void AngularCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const AngularCharacteristicStatsEvalType::MaxValueStats_optional& AngularCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    AngularCharacteristicStatsEvalType::MaxValueStats_optional& AngularCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void AngularCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void AngularCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void AngularCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const AngularCharacteristicStatsEvalType::MinValueStats_optional& AngularCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    AngularCharacteristicStatsEvalType::MinValueStats_optional& AngularCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void AngularCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void AngularCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void AngularCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const AngularCharacteristicStatsEvalType::DeviationStats_optional& AngularCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    AngularCharacteristicStatsEvalType::DeviationStats_optional& AngularCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void AngularCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void AngularCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void AngularCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const AngularCharacteristicStatsEvalType::MaxDeviationStats_optional& AngularCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    AngularCharacteristicStatsEvalType::MaxDeviationStats_optional& AngularCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void AngularCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void AngularCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void AngularCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const AngularCharacteristicStatsEvalType::MinDeviationStats_optional& AngularCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    AngularCharacteristicStatsEvalType::MinDeviationStats_optional& AngularCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void AngularCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void AngularCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void AngularCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedAttributeCharacteristicStatsEvalType
    // 

    const UserDefinedAttributeCharacteristicStatsEvalType::AttributeStats_optional& UserDefinedAttributeCharacteristicStatsEvalType::
    AttributeStats () const
    {
      return this->AttributeStats_;
    }

    UserDefinedAttributeCharacteristicStatsEvalType::AttributeStats_optional& UserDefinedAttributeCharacteristicStatsEvalType::
    AttributeStats ()
    {
      return this->AttributeStats_;
    }

    void UserDefinedAttributeCharacteristicStatsEvalType::
    AttributeStats (const AttributeStats_type& x)
    {
      this->AttributeStats_.set (x);
    }

    void UserDefinedAttributeCharacteristicStatsEvalType::
    AttributeStats (const AttributeStats_optional& x)
    {
      this->AttributeStats_ = x;
    }

    void UserDefinedAttributeCharacteristicStatsEvalType::
    AttributeStats (::std::auto_ptr< AttributeStats_type > x)
    {
      this->AttributeStats_.set (x);
    }


    // UserDefinedLinearCharacteristicStatsEvalType
    // 

    const UserDefinedLinearCharacteristicStatsEvalType::ValueStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedLinearCharacteristicStatsEvalType::ValueStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedLinearCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedLinearCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedLinearCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedLinearCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedLinearCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedLinearCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedLinearCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedLinearCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedLinearCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedLinearCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedLinearCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedAngularCharacteristicStatsEvalType
    // 

    const UserDefinedAngularCharacteristicStatsEvalType::ValueStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedAngularCharacteristicStatsEvalType::ValueStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedAngularCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedAngularCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedAngularCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedAngularCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedAngularCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedAngularCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedAngularCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedAngularCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedAngularCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedAngularCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedAngularCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedAreaCharacteristicStatsEvalType
    // 

    const UserDefinedAreaCharacteristicStatsEvalType::ValueStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedAreaCharacteristicStatsEvalType::ValueStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedAreaCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedAreaCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedAreaCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedAreaCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedAreaCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedAreaCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedAreaCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedAreaCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedAreaCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedAreaCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedAreaCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedForceCharacteristicStatsEvalType
    // 

    const UserDefinedForceCharacteristicStatsEvalType::ValueStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedForceCharacteristicStatsEvalType::ValueStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedForceCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedForceCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedForceCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedForceCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedForceCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedForceCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedForceCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedForceCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedForceCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedForceCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedForceCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedMassCharacteristicStatsEvalType
    // 

    const UserDefinedMassCharacteristicStatsEvalType::ValueStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedMassCharacteristicStatsEvalType::ValueStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedMassCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedMassCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedMassCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedMassCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedMassCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedMassCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedMassCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedMassCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedMassCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedMassCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedMassCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedPressureCharacteristicStatsEvalType
    // 

    const UserDefinedPressureCharacteristicStatsEvalType::ValueStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedPressureCharacteristicStatsEvalType::ValueStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedPressureCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedPressureCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedPressureCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedPressureCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedPressureCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedPressureCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedPressureCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedPressureCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedPressureCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedPressureCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedPressureCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedSpeedCharacteristicStatsEvalType
    // 

    const UserDefinedSpeedCharacteristicStatsEvalType::ValueStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedSpeedCharacteristicStatsEvalType::ValueStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedSpeedCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedSpeedCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedSpeedCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedSpeedCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedSpeedCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedSpeedCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedSpeedCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedSpeedCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedSpeedCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedSpeedCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedSpeedCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedTemperatureCharacteristicStatsEvalType
    // 

    const UserDefinedTemperatureCharacteristicStatsEvalType::ValueStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::ValueStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedTemperatureCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedTemperatureCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedTemperatureCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedTemperatureCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedTemperatureCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedTemperatureCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedTimeCharacteristicStatsEvalType
    // 

    const UserDefinedTimeCharacteristicStatsEvalType::ValueStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedTimeCharacteristicStatsEvalType::ValueStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedTimeCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedTimeCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedTimeCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedTimeCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedTimeCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedTimeCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedTimeCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedTimeCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedTimeCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedTimeCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedTimeCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // UserDefinedUnitCharacteristicStatsEvalType
    // 

    const UserDefinedUnitCharacteristicStatsEvalType::ValueStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    ValueStats () const
    {
      return this->ValueStats_;
    }

    UserDefinedUnitCharacteristicStatsEvalType::ValueStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    ValueStats ()
    {
      return this->ValueStats_;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    ValueStats (const ValueStats_type& x)
    {
      this->ValueStats_.set (x);
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    ValueStats (const ValueStats_optional& x)
    {
      this->ValueStats_ = x;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    ValueStats (::std::auto_ptr< ValueStats_type > x)
    {
      this->ValueStats_.set (x);
    }

    const UserDefinedUnitCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MaxValueStats () const
    {
      return this->MaxValueStats_;
    }

    UserDefinedUnitCharacteristicStatsEvalType::MaxValueStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MaxValueStats ()
    {
      return this->MaxValueStats_;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_type& x)
    {
      this->MaxValueStats_.set (x);
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MaxValueStats (const MaxValueStats_optional& x)
    {
      this->MaxValueStats_ = x;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MaxValueStats (::std::auto_ptr< MaxValueStats_type > x)
    {
      this->MaxValueStats_.set (x);
    }

    const UserDefinedUnitCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MinValueStats () const
    {
      return this->MinValueStats_;
    }

    UserDefinedUnitCharacteristicStatsEvalType::MinValueStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MinValueStats ()
    {
      return this->MinValueStats_;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_type& x)
    {
      this->MinValueStats_.set (x);
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MinValueStats (const MinValueStats_optional& x)
    {
      this->MinValueStats_ = x;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MinValueStats (::std::auto_ptr< MinValueStats_type > x)
    {
      this->MinValueStats_.set (x);
    }

    const UserDefinedUnitCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_;
    }

    UserDefinedUnitCharacteristicStatsEvalType::DeviationStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    DeviationStats (const DeviationStats_optional& x)
    {
      this->DeviationStats_ = x;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }

    const UserDefinedUnitCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MaxDeviationStats () const
    {
      return this->MaxDeviationStats_;
    }

    UserDefinedUnitCharacteristicStatsEvalType::MaxDeviationStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MaxDeviationStats ()
    {
      return this->MaxDeviationStats_;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_type& x)
    {
      this->MaxDeviationStats_.set (x);
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MaxDeviationStats (const MaxDeviationStats_optional& x)
    {
      this->MaxDeviationStats_ = x;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MaxDeviationStats (::std::auto_ptr< MaxDeviationStats_type > x)
    {
      this->MaxDeviationStats_.set (x);
    }

    const UserDefinedUnitCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MinDeviationStats () const
    {
      return this->MinDeviationStats_;
    }

    UserDefinedUnitCharacteristicStatsEvalType::MinDeviationStats_optional& UserDefinedUnitCharacteristicStatsEvalType::
    MinDeviationStats ()
    {
      return this->MinDeviationStats_;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_type& x)
    {
      this->MinDeviationStats_.set (x);
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MinDeviationStats (const MinDeviationStats_optional& x)
    {
      this->MinDeviationStats_ = x;
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    MinDeviationStats (::std::auto_ptr< MinDeviationStats_type > x)
    {
      this->MinDeviationStats_.set (x);
    }


    // SurfaceTextureCharacteristicStatsEvalType
    // 

    const SurfaceTextureCharacteristicStatsEvalType::RoughnessAverageValueStats_optional& SurfaceTextureCharacteristicStatsEvalType::
    RoughnessAverageValueStats () const
    {
      return this->RoughnessAverageValueStats_;
    }

    SurfaceTextureCharacteristicStatsEvalType::RoughnessAverageValueStats_optional& SurfaceTextureCharacteristicStatsEvalType::
    RoughnessAverageValueStats ()
    {
      return this->RoughnessAverageValueStats_;
    }

    void SurfaceTextureCharacteristicStatsEvalType::
    RoughnessAverageValueStats (const RoughnessAverageValueStats_type& x)
    {
      this->RoughnessAverageValueStats_.set (x);
    }

    void SurfaceTextureCharacteristicStatsEvalType::
    RoughnessAverageValueStats (const RoughnessAverageValueStats_optional& x)
    {
      this->RoughnessAverageValueStats_ = x;
    }

    void SurfaceTextureCharacteristicStatsEvalType::
    RoughnessAverageValueStats (::std::auto_ptr< RoughnessAverageValueStats_type > x)
    {
      this->RoughnessAverageValueStats_.set (x);
    }


    // OrientationCharacteristicStatsEvalType
    // 

    const OrientationCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& OrientationCharacteristicStatsEvalType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    OrientationCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& OrientationCharacteristicStatsEvalType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void OrientationCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void OrientationCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void OrientationCharacteristicStatsEvalType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    const OrientationCharacteristicStatsEvalType::DatumsOkStats_optional& OrientationCharacteristicStatsEvalType::
    DatumsOkStats () const
    {
      return this->DatumsOkStats_;
    }

    OrientationCharacteristicStatsEvalType::DatumsOkStats_optional& OrientationCharacteristicStatsEvalType::
    DatumsOkStats ()
    {
      return this->DatumsOkStats_;
    }

    void OrientationCharacteristicStatsEvalType::
    DatumsOkStats (const DatumsOkStats_type& x)
    {
      this->DatumsOkStats_.set (x);
    }

    void OrientationCharacteristicStatsEvalType::
    DatumsOkStats (const DatumsOkStats_optional& x)
    {
      this->DatumsOkStats_ = x;
    }

    void OrientationCharacteristicStatsEvalType::
    DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > x)
    {
      this->DatumsOkStats_.set (x);
    }

    const OrientationCharacteristicStatsEvalType::BonusStats_optional& OrientationCharacteristicStatsEvalType::
    BonusStats () const
    {
      return this->BonusStats_;
    }

    OrientationCharacteristicStatsEvalType::BonusStats_optional& OrientationCharacteristicStatsEvalType::
    BonusStats ()
    {
      return this->BonusStats_;
    }

    void OrientationCharacteristicStatsEvalType::
    BonusStats (const BonusStats_type& x)
    {
      this->BonusStats_.set (x);
    }

    void OrientationCharacteristicStatsEvalType::
    BonusStats (const BonusStats_optional& x)
    {
      this->BonusStats_ = x;
    }

    void OrientationCharacteristicStatsEvalType::
    BonusStats (::std::auto_ptr< BonusStats_type > x)
    {
      this->BonusStats_.set (x);
    }

    const OrientationCharacteristicStatsEvalType::ReferenceLengthStats_optional& OrientationCharacteristicStatsEvalType::
    ReferenceLengthStats () const
    {
      return this->ReferenceLengthStats_;
    }

    OrientationCharacteristicStatsEvalType::ReferenceLengthStats_optional& OrientationCharacteristicStatsEvalType::
    ReferenceLengthStats ()
    {
      return this->ReferenceLengthStats_;
    }

    void OrientationCharacteristicStatsEvalType::
    ReferenceLengthStats (const ReferenceLengthStats_type& x)
    {
      this->ReferenceLengthStats_.set (x);
    }

    void OrientationCharacteristicStatsEvalType::
    ReferenceLengthStats (const ReferenceLengthStats_optional& x)
    {
      this->ReferenceLengthStats_ = x;
    }

    void OrientationCharacteristicStatsEvalType::
    ReferenceLengthStats (::std::auto_ptr< ReferenceLengthStats_type > x)
    {
      this->ReferenceLengthStats_.set (x);
    }


    // AngularityCharacteristicStatsEvalType
    // 


    // PerpendicularityCharacteristicStatsEvalType
    // 


    // ParallelismCharacteristicStatsEvalType
    // 


    // FormCharacteristicStatsEvalBaseType
    // 

    const FormCharacteristicStatsEvalBaseType::CapabilityCalculationMethod_optional& FormCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    FormCharacteristicStatsEvalBaseType::CapabilityCalculationMethod_optional& FormCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void FormCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void FormCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void FormCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }


    // StraightnessCharacteristicStatsEvalType
    // 

    const StraightnessCharacteristicStatsEvalType::MaxStraightnessStats_optional& StraightnessCharacteristicStatsEvalType::
    MaxStraightnessStats () const
    {
      return this->MaxStraightnessStats_;
    }

    StraightnessCharacteristicStatsEvalType::MaxStraightnessStats_optional& StraightnessCharacteristicStatsEvalType::
    MaxStraightnessStats ()
    {
      return this->MaxStraightnessStats_;
    }

    void StraightnessCharacteristicStatsEvalType::
    MaxStraightnessStats (const MaxStraightnessStats_type& x)
    {
      this->MaxStraightnessStats_.set (x);
    }

    void StraightnessCharacteristicStatsEvalType::
    MaxStraightnessStats (const MaxStraightnessStats_optional& x)
    {
      this->MaxStraightnessStats_ = x;
    }

    void StraightnessCharacteristicStatsEvalType::
    MaxStraightnessStats (::std::auto_ptr< MaxStraightnessStats_type > x)
    {
      this->MaxStraightnessStats_.set (x);
    }


    // FlatnessCharacteristicStatsEvalType
    // 

    const FlatnessCharacteristicStatsEvalType::MaxFlatnessStats_optional& FlatnessCharacteristicStatsEvalType::
    MaxFlatnessStats () const
    {
      return this->MaxFlatnessStats_;
    }

    FlatnessCharacteristicStatsEvalType::MaxFlatnessStats_optional& FlatnessCharacteristicStatsEvalType::
    MaxFlatnessStats ()
    {
      return this->MaxFlatnessStats_;
    }

    void FlatnessCharacteristicStatsEvalType::
    MaxFlatnessStats (const MaxFlatnessStats_type& x)
    {
      this->MaxFlatnessStats_.set (x);
    }

    void FlatnessCharacteristicStatsEvalType::
    MaxFlatnessStats (const MaxFlatnessStats_optional& x)
    {
      this->MaxFlatnessStats_ = x;
    }

    void FlatnessCharacteristicStatsEvalType::
    MaxFlatnessStats (::std::auto_ptr< MaxFlatnessStats_type > x)
    {
      this->MaxFlatnessStats_.set (x);
    }


    // CircularityCharacteristicStatsEvalType
    // 

    const CircularityCharacteristicStatsEvalType::MaxCircularityStats_optional& CircularityCharacteristicStatsEvalType::
    MaxCircularityStats () const
    {
      return this->MaxCircularityStats_;
    }

    CircularityCharacteristicStatsEvalType::MaxCircularityStats_optional& CircularityCharacteristicStatsEvalType::
    MaxCircularityStats ()
    {
      return this->MaxCircularityStats_;
    }

    void CircularityCharacteristicStatsEvalType::
    MaxCircularityStats (const MaxCircularityStats_type& x)
    {
      this->MaxCircularityStats_.set (x);
    }

    void CircularityCharacteristicStatsEvalType::
    MaxCircularityStats (const MaxCircularityStats_optional& x)
    {
      this->MaxCircularityStats_ = x;
    }

    void CircularityCharacteristicStatsEvalType::
    MaxCircularityStats (::std::auto_ptr< MaxCircularityStats_type > x)
    {
      this->MaxCircularityStats_.set (x);
    }


    // CylindricityCharacteristicStatsEvalType
    // 

    const CylindricityCharacteristicStatsEvalType::MaxCylindricityStats_optional& CylindricityCharacteristicStatsEvalType::
    MaxCylindricityStats () const
    {
      return this->MaxCylindricityStats_;
    }

    CylindricityCharacteristicStatsEvalType::MaxCylindricityStats_optional& CylindricityCharacteristicStatsEvalType::
    MaxCylindricityStats ()
    {
      return this->MaxCylindricityStats_;
    }

    void CylindricityCharacteristicStatsEvalType::
    MaxCylindricityStats (const MaxCylindricityStats_type& x)
    {
      this->MaxCylindricityStats_.set (x);
    }

    void CylindricityCharacteristicStatsEvalType::
    MaxCylindricityStats (const MaxCylindricityStats_optional& x)
    {
      this->MaxCylindricityStats_ = x;
    }

    void CylindricityCharacteristicStatsEvalType::
    MaxCylindricityStats (::std::auto_ptr< MaxCylindricityStats_type > x)
    {
      this->MaxCylindricityStats_.set (x);
    }


    // LocationCharacteristicStatsEvalType
    // 

    const LocationCharacteristicStatsEvalType::DatumsOkStats_optional& LocationCharacteristicStatsEvalType::
    DatumsOkStats () const
    {
      return this->DatumsOkStats_;
    }

    LocationCharacteristicStatsEvalType::DatumsOkStats_optional& LocationCharacteristicStatsEvalType::
    DatumsOkStats ()
    {
      return this->DatumsOkStats_;
    }

    void LocationCharacteristicStatsEvalType::
    DatumsOkStats (const DatumsOkStats_type& x)
    {
      this->DatumsOkStats_.set (x);
    }

    void LocationCharacteristicStatsEvalType::
    DatumsOkStats (const DatumsOkStats_optional& x)
    {
      this->DatumsOkStats_ = x;
    }

    void LocationCharacteristicStatsEvalType::
    DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > x)
    {
      this->DatumsOkStats_.set (x);
    }


    // PositionCharacteristicStatsEvalType
    // 

    const PositionCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& PositionCharacteristicStatsEvalType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    PositionCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& PositionCharacteristicStatsEvalType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void PositionCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void PositionCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void PositionCharacteristicStatsEvalType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    const PositionCharacteristicStatsEvalType::CompositeSegmentsStats_optional& PositionCharacteristicStatsEvalType::
    CompositeSegmentsStats () const
    {
      return this->CompositeSegmentsStats_;
    }

    PositionCharacteristicStatsEvalType::CompositeSegmentsStats_optional& PositionCharacteristicStatsEvalType::
    CompositeSegmentsStats ()
    {
      return this->CompositeSegmentsStats_;
    }

    void PositionCharacteristicStatsEvalType::
    CompositeSegmentsStats (const CompositeSegmentsStats_type& x)
    {
      this->CompositeSegmentsStats_.set (x);
    }

    void PositionCharacteristicStatsEvalType::
    CompositeSegmentsStats (const CompositeSegmentsStats_optional& x)
    {
      this->CompositeSegmentsStats_ = x;
    }

    void PositionCharacteristicStatsEvalType::
    CompositeSegmentsStats (::std::auto_ptr< CompositeSegmentsStats_type > x)
    {
      this->CompositeSegmentsStats_.set (x);
    }


    // AngularCoordinateCharacteristicStatsEvalType
    // 


    // AngleCharacteristicStatsEvalType
    // 


    // AngleFromCharacteristicStatsEvalType
    // 


    // AngleBetweenCharacteristicStatsEvalType
    // 


    // LinearCoordinateCharacteristicStatsEvalType
    // 


    // CurveLengthCharacteristicStatsEvalType
    // 


    // DiameterCharacteristicStatsEvalType
    // 


    // LengthCharacteristicStatsEvalType
    // 


    // WidthCharacteristicStatsEvalType
    // 


    // HeightCharacteristicStatsEvalType
    // 


    // DepthCharacteristicStatsEvalType
    // 


    // ThicknessCharacteristicStatsEvalType
    // 


    // SquareCharacteristicStatsEvalType
    // 


    // DistanceFromCharacteristicStatsEvalType
    // 


    // DistanceBetweenCharacteristicStatsEvalType
    // 


    // RadiusCharacteristicStatsEvalType
    // 


    // ChordCharacteristicStatsEvalType
    // 


    // RunoutCharacteristicStatsEvalBaseType
    // 

    const RunoutCharacteristicStatsEvalBaseType::CapabilityCalculationMethod_optional& RunoutCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    RunoutCharacteristicStatsEvalBaseType::CapabilityCalculationMethod_optional& RunoutCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void RunoutCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void RunoutCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void RunoutCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    const RunoutCharacteristicStatsEvalBaseType::DatumsOkStats_optional& RunoutCharacteristicStatsEvalBaseType::
    DatumsOkStats () const
    {
      return this->DatumsOkStats_;
    }

    RunoutCharacteristicStatsEvalBaseType::DatumsOkStats_optional& RunoutCharacteristicStatsEvalBaseType::
    DatumsOkStats ()
    {
      return this->DatumsOkStats_;
    }

    void RunoutCharacteristicStatsEvalBaseType::
    DatumsOkStats (const DatumsOkStats_type& x)
    {
      this->DatumsOkStats_.set (x);
    }

    void RunoutCharacteristicStatsEvalBaseType::
    DatumsOkStats (const DatumsOkStats_optional& x)
    {
      this->DatumsOkStats_ = x;
    }

    void RunoutCharacteristicStatsEvalBaseType::
    DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > x)
    {
      this->DatumsOkStats_.set (x);
    }


    // CircularRunoutCharacteristicStatsEvalType
    // 


    // TotalRunoutCharacteristicStatsEvalType
    // 


    // ConcentricityCharacteristicStatsEvalType
    // 

    const ConcentricityCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& ConcentricityCharacteristicStatsEvalType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    ConcentricityCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& ConcentricityCharacteristicStatsEvalType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void ConcentricityCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void ConcentricityCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void ConcentricityCharacteristicStatsEvalType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }


    // SymmetryCharacteristicStatsEvalType
    // 

    const SymmetryCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& SymmetryCharacteristicStatsEvalType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    SymmetryCharacteristicStatsEvalType::CapabilityCalculationMethod_optional& SymmetryCharacteristicStatsEvalType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void SymmetryCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void SymmetryCharacteristicStatsEvalType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void SymmetryCharacteristicStatsEvalType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    const SymmetryCharacteristicStatsEvalType::CompositeSegmentsStats_optional& SymmetryCharacteristicStatsEvalType::
    CompositeSegmentsStats () const
    {
      return this->CompositeSegmentsStats_;
    }

    SymmetryCharacteristicStatsEvalType::CompositeSegmentsStats_optional& SymmetryCharacteristicStatsEvalType::
    CompositeSegmentsStats ()
    {
      return this->CompositeSegmentsStats_;
    }

    void SymmetryCharacteristicStatsEvalType::
    CompositeSegmentsStats (const CompositeSegmentsStats_type& x)
    {
      this->CompositeSegmentsStats_.set (x);
    }

    void SymmetryCharacteristicStatsEvalType::
    CompositeSegmentsStats (const CompositeSegmentsStats_optional& x)
    {
      this->CompositeSegmentsStats_ = x;
    }

    void SymmetryCharacteristicStatsEvalType::
    CompositeSegmentsStats (::std::auto_ptr< CompositeSegmentsStats_type > x)
    {
      this->CompositeSegmentsStats_.set (x);
    }


    // PointDeviationStatsEvalType
    // 

    const PointDeviationStatsEvalType::MeasurePointActualIds_type& PointDeviationStatsEvalType::
    MeasurePointActualIds () const
    {
      return this->MeasurePointActualIds_.get ();
    }

    PointDeviationStatsEvalType::MeasurePointActualIds_type& PointDeviationStatsEvalType::
    MeasurePointActualIds ()
    {
      return this->MeasurePointActualIds_.get ();
    }

    void PointDeviationStatsEvalType::
    MeasurePointActualIds (const MeasurePointActualIds_type& x)
    {
      this->MeasurePointActualIds_.set (x);
    }

    void PointDeviationStatsEvalType::
    MeasurePointActualIds (::std::auto_ptr< MeasurePointActualIds_type > x)
    {
      this->MeasurePointActualIds_.set (x);
    }

    const PointDeviationStatsEvalType::DeviationStats_type& PointDeviationStatsEvalType::
    DeviationStats () const
    {
      return this->DeviationStats_.get ();
    }

    PointDeviationStatsEvalType::DeviationStats_type& PointDeviationStatsEvalType::
    DeviationStats ()
    {
      return this->DeviationStats_.get ();
    }

    void PointDeviationStatsEvalType::
    DeviationStats (const DeviationStats_type& x)
    {
      this->DeviationStats_.set (x);
    }

    void PointDeviationStatsEvalType::
    DeviationStats (::std::auto_ptr< DeviationStats_type > x)
    {
      this->DeviationStats_.set (x);
    }


    // PointDeviationsStatsEvalType
    // 

    const PointDeviationsStatsEvalType::PointDeviationStats_sequence& PointDeviationsStatsEvalType::
    PointDeviationStats () const
    {
      return this->PointDeviationStats_;
    }

    PointDeviationsStatsEvalType::PointDeviationStats_sequence& PointDeviationsStatsEvalType::
    PointDeviationStats ()
    {
      return this->PointDeviationStats_;
    }

    void PointDeviationsStatsEvalType::
    PointDeviationStats (const PointDeviationStats_sequence& s)
    {
      this->PointDeviationStats_ = s;
    }


    // ProfileCharacteristicStatsEvalBaseType
    // 

    const ProfileCharacteristicStatsEvalBaseType::CapabilityCalculationMethod_optional& ProfileCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod () const
    {
      return this->CapabilityCalculationMethod_;
    }

    ProfileCharacteristicStatsEvalBaseType::CapabilityCalculationMethod_optional& ProfileCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod ()
    {
      return this->CapabilityCalculationMethod_;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_type& x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    void ProfileCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (const CapabilityCalculationMethod_optional& x)
    {
      this->CapabilityCalculationMethod_ = x;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    CapabilityCalculationMethod (::std::auto_ptr< CapabilityCalculationMethod_type > x)
    {
      this->CapabilityCalculationMethod_.set (x);
    }

    const ProfileCharacteristicStatsEvalBaseType::WorstPositiveDeviationStats_optional& ProfileCharacteristicStatsEvalBaseType::
    WorstPositiveDeviationStats () const
    {
      return this->WorstPositiveDeviationStats_;
    }

    ProfileCharacteristicStatsEvalBaseType::WorstPositiveDeviationStats_optional& ProfileCharacteristicStatsEvalBaseType::
    WorstPositiveDeviationStats ()
    {
      return this->WorstPositiveDeviationStats_;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    WorstPositiveDeviationStats (const WorstPositiveDeviationStats_type& x)
    {
      this->WorstPositiveDeviationStats_.set (x);
    }

    void ProfileCharacteristicStatsEvalBaseType::
    WorstPositiveDeviationStats (const WorstPositiveDeviationStats_optional& x)
    {
      this->WorstPositiveDeviationStats_ = x;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    WorstPositiveDeviationStats (::std::auto_ptr< WorstPositiveDeviationStats_type > x)
    {
      this->WorstPositiveDeviationStats_.set (x);
    }

    const ProfileCharacteristicStatsEvalBaseType::WorstNegativeDeviationStats_optional& ProfileCharacteristicStatsEvalBaseType::
    WorstNegativeDeviationStats () const
    {
      return this->WorstNegativeDeviationStats_;
    }

    ProfileCharacteristicStatsEvalBaseType::WorstNegativeDeviationStats_optional& ProfileCharacteristicStatsEvalBaseType::
    WorstNegativeDeviationStats ()
    {
      return this->WorstNegativeDeviationStats_;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    WorstNegativeDeviationStats (const WorstNegativeDeviationStats_type& x)
    {
      this->WorstNegativeDeviationStats_.set (x);
    }

    void ProfileCharacteristicStatsEvalBaseType::
    WorstNegativeDeviationStats (const WorstNegativeDeviationStats_optional& x)
    {
      this->WorstNegativeDeviationStats_ = x;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    WorstNegativeDeviationStats (::std::auto_ptr< WorstNegativeDeviationStats_type > x)
    {
      this->WorstNegativeDeviationStats_.set (x);
    }

    const ProfileCharacteristicStatsEvalBaseType::PointDeviationsStats_optional& ProfileCharacteristicStatsEvalBaseType::
    PointDeviationsStats () const
    {
      return this->PointDeviationsStats_;
    }

    ProfileCharacteristicStatsEvalBaseType::PointDeviationsStats_optional& ProfileCharacteristicStatsEvalBaseType::
    PointDeviationsStats ()
    {
      return this->PointDeviationsStats_;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    PointDeviationsStats (const PointDeviationsStats_type& x)
    {
      this->PointDeviationsStats_.set (x);
    }

    void ProfileCharacteristicStatsEvalBaseType::
    PointDeviationsStats (const PointDeviationsStats_optional& x)
    {
      this->PointDeviationsStats_ = x;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    PointDeviationsStats (::std::auto_ptr< PointDeviationsStats_type > x)
    {
      this->PointDeviationsStats_.set (x);
    }

    const ProfileCharacteristicStatsEvalBaseType::DatumsOkStats_optional& ProfileCharacteristicStatsEvalBaseType::
    DatumsOkStats () const
    {
      return this->DatumsOkStats_;
    }

    ProfileCharacteristicStatsEvalBaseType::DatumsOkStats_optional& ProfileCharacteristicStatsEvalBaseType::
    DatumsOkStats ()
    {
      return this->DatumsOkStats_;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    DatumsOkStats (const DatumsOkStats_type& x)
    {
      this->DatumsOkStats_.set (x);
    }

    void ProfileCharacteristicStatsEvalBaseType::
    DatumsOkStats (const DatumsOkStats_optional& x)
    {
      this->DatumsOkStats_ = x;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    DatumsOkStats (::std::auto_ptr< DatumsOkStats_type > x)
    {
      this->DatumsOkStats_.set (x);
    }

    const ProfileCharacteristicStatsEvalBaseType::CompositeSegmentsStats_optional& ProfileCharacteristicStatsEvalBaseType::
    CompositeSegmentsStats () const
    {
      return this->CompositeSegmentsStats_;
    }

    ProfileCharacteristicStatsEvalBaseType::CompositeSegmentsStats_optional& ProfileCharacteristicStatsEvalBaseType::
    CompositeSegmentsStats ()
    {
      return this->CompositeSegmentsStats_;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    CompositeSegmentsStats (const CompositeSegmentsStats_type& x)
    {
      this->CompositeSegmentsStats_.set (x);
    }

    void ProfileCharacteristicStatsEvalBaseType::
    CompositeSegmentsStats (const CompositeSegmentsStats_optional& x)
    {
      this->CompositeSegmentsStats_ = x;
    }

    void ProfileCharacteristicStatsEvalBaseType::
    CompositeSegmentsStats (::std::auto_ptr< CompositeSegmentsStats_type > x)
    {
      this->CompositeSegmentsStats_.set (x);
    }


    // LineProfileCharacteristicStatsEvalType
    // 


    // PointProfileCharacteristicStatsEvalType
    // 


    // SurfaceProfileCharacteristicStatsEvalType
    // 


    // SurfaceProfileNonUniformCharacteristicStatsEvalType
    // 


    // ThreadCharacteristicStatsEvalType
    // 

    const ThreadCharacteristicStatsEvalType::ThreadStats_optional& ThreadCharacteristicStatsEvalType::
    ThreadStats () const
    {
      return this->ThreadStats_;
    }

    ThreadCharacteristicStatsEvalType::ThreadStats_optional& ThreadCharacteristicStatsEvalType::
    ThreadStats ()
    {
      return this->ThreadStats_;
    }

    void ThreadCharacteristicStatsEvalType::
    ThreadStats (const ThreadStats_type& x)
    {
      this->ThreadStats_.set (x);
    }

    void ThreadCharacteristicStatsEvalType::
    ThreadStats (const ThreadStats_optional& x)
    {
      this->ThreadStats_ = x;
    }

    void ThreadCharacteristicStatsEvalType::
    ThreadStats (::std::auto_ptr< ThreadStats_type > x)
    {
      this->ThreadStats_.set (x);
    }

    const ThreadCharacteristicStatsEvalType::PitchDiameterStats_optional& ThreadCharacteristicStatsEvalType::
    PitchDiameterStats () const
    {
      return this->PitchDiameterStats_;
    }

    ThreadCharacteristicStatsEvalType::PitchDiameterStats_optional& ThreadCharacteristicStatsEvalType::
    PitchDiameterStats ()
    {
      return this->PitchDiameterStats_;
    }

    void ThreadCharacteristicStatsEvalType::
    PitchDiameterStats (const PitchDiameterStats_type& x)
    {
      this->PitchDiameterStats_.set (x);
    }

    void ThreadCharacteristicStatsEvalType::
    PitchDiameterStats (const PitchDiameterStats_optional& x)
    {
      this->PitchDiameterStats_ = x;
    }

    void ThreadCharacteristicStatsEvalType::
    PitchDiameterStats (::std::auto_ptr< PitchDiameterStats_type > x)
    {
      this->PitchDiameterStats_.set (x);
    }

    const ThreadCharacteristicStatsEvalType::FunctionalSizeStats_optional& ThreadCharacteristicStatsEvalType::
    FunctionalSizeStats () const
    {
      return this->FunctionalSizeStats_;
    }

    ThreadCharacteristicStatsEvalType::FunctionalSizeStats_optional& ThreadCharacteristicStatsEvalType::
    FunctionalSizeStats ()
    {
      return this->FunctionalSizeStats_;
    }

    void ThreadCharacteristicStatsEvalType::
    FunctionalSizeStats (const FunctionalSizeStats_type& x)
    {
      this->FunctionalSizeStats_.set (x);
    }

    void ThreadCharacteristicStatsEvalType::
    FunctionalSizeStats (const FunctionalSizeStats_optional& x)
    {
      this->FunctionalSizeStats_ = x;
    }

    void ThreadCharacteristicStatsEvalType::
    FunctionalSizeStats (::std::auto_ptr< FunctionalSizeStats_type > x)
    {
      this->FunctionalSizeStats_.set (x);
    }


    // CharacteristicsStatsType
    // 

    const CharacteristicsStatsType::CharacteristicStats_sequence& CharacteristicsStatsType::
    CharacteristicStats () const
    {
      return this->CharacteristicStats_;
    }

    CharacteristicsStatsType::CharacteristicStats_sequence& CharacteristicsStatsType::
    CharacteristicStats ()
    {
      return this->CharacteristicStats_;
    }

    void CharacteristicsStatsType::
    CharacteristicStats (const CharacteristicStats_sequence& s)
    {
      this->CharacteristicStats_ = s;
    }


    // AverageFeatureType
    // 

    const AverageFeatureType::FeatureActual_type& AverageFeatureType::
    FeatureActual () const
    {
      return this->FeatureActual_.get ();
    }

    AverageFeatureType::FeatureActual_type& AverageFeatureType::
    FeatureActual ()
    {
      return this->FeatureActual_.get ();
    }

    void AverageFeatureType::
    FeatureActual (const FeatureActual_type& x)
    {
      this->FeatureActual_.set (x);
    }

    void AverageFeatureType::
    FeatureActual (::std::auto_ptr< FeatureActual_type > x)
    {
      this->FeatureActual_.set (x);
    }

    const AverageFeatureType::ActualIds_type& AverageFeatureType::
    ActualIds () const
    {
      return this->ActualIds_.get ();
    }

    AverageFeatureType::ActualIds_type& AverageFeatureType::
    ActualIds ()
    {
      return this->ActualIds_.get ();
    }

    void AverageFeatureType::
    ActualIds (const ActualIds_type& x)
    {
      this->ActualIds_.set (x);
    }

    void AverageFeatureType::
    ActualIds (::std::auto_ptr< ActualIds_type > x)
    {
      this->ActualIds_.set (x);
    }


    // AverageFeaturesType
    // 

    const AverageFeaturesType::AverageFeature_sequence& AverageFeaturesType::
    AverageFeature () const
    {
      return this->AverageFeature_;
    }

    AverageFeaturesType::AverageFeature_sequence& AverageFeaturesType::
    AverageFeature ()
    {
      return this->AverageFeature_;
    }

    void AverageFeaturesType::
    AverageFeature (const AverageFeature_sequence& s)
    {
      this->AverageFeature_ = s;
    }


    // SummaryStatisticsType
    // 

    const SummaryStatisticsType::SummaryType_type& SummaryStatisticsType::
    SummaryType () const
    {
      return this->SummaryType_.get ();
    }

    SummaryStatisticsType::SummaryType_type& SummaryStatisticsType::
    SummaryType ()
    {
      return this->SummaryType_.get ();
    }

    void SummaryStatisticsType::
    SummaryType (const SummaryType_type& x)
    {
      this->SummaryType_.set (x);
    }

    void SummaryStatisticsType::
    SummaryType (::std::auto_ptr< SummaryType_type > x)
    {
      this->SummaryType_.set (x);
    }

    const SummaryStatisticsType::Average_optional& SummaryStatisticsType::
    Average () const
    {
      return this->Average_;
    }

    SummaryStatisticsType::Average_optional& SummaryStatisticsType::
    Average ()
    {
      return this->Average_;
    }

    void SummaryStatisticsType::
    Average (const Average_type& x)
    {
      this->Average_.set (x);
    }

    void SummaryStatisticsType::
    Average (const Average_optional& x)
    {
      this->Average_ = x;
    }

    void SummaryStatisticsType::
    Average (::std::auto_ptr< Average_type > x)
    {
      this->Average_.set (x);
    }

    const SummaryStatisticsType::Maximum_optional& SummaryStatisticsType::
    Maximum () const
    {
      return this->Maximum_;
    }

    SummaryStatisticsType::Maximum_optional& SummaryStatisticsType::
    Maximum ()
    {
      return this->Maximum_;
    }

    void SummaryStatisticsType::
    Maximum (const Maximum_type& x)
    {
      this->Maximum_.set (x);
    }

    void SummaryStatisticsType::
    Maximum (const Maximum_optional& x)
    {
      this->Maximum_ = x;
    }

    void SummaryStatisticsType::
    Maximum (::std::auto_ptr< Maximum_type > x)
    {
      this->Maximum_.set (x);
    }

    const SummaryStatisticsType::Minimum_optional& SummaryStatisticsType::
    Minimum () const
    {
      return this->Minimum_;
    }

    SummaryStatisticsType::Minimum_optional& SummaryStatisticsType::
    Minimum ()
    {
      return this->Minimum_;
    }

    void SummaryStatisticsType::
    Minimum (const Minimum_type& x)
    {
      this->Minimum_.set (x);
    }

    void SummaryStatisticsType::
    Minimum (const Minimum_optional& x)
    {
      this->Minimum_ = x;
    }

    void SummaryStatisticsType::
    Minimum (::std::auto_ptr< Minimum_type > x)
    {
      this->Minimum_.set (x);
    }

    const SummaryStatisticsType::Range_optional& SummaryStatisticsType::
    Range () const
    {
      return this->Range_;
    }

    SummaryStatisticsType::Range_optional& SummaryStatisticsType::
    Range ()
    {
      return this->Range_;
    }

    void SummaryStatisticsType::
    Range (const Range_type& x)
    {
      this->Range_.set (x);
    }

    void SummaryStatisticsType::
    Range (const Range_optional& x)
    {
      this->Range_ = x;
    }

    void SummaryStatisticsType::
    Range (::std::auto_ptr< Range_type > x)
    {
      this->Range_.set (x);
    }

    const SummaryStatisticsType::StandardDeviation_optional& SummaryStatisticsType::
    StandardDeviation () const
    {
      return this->StandardDeviation_;
    }

    SummaryStatisticsType::StandardDeviation_optional& SummaryStatisticsType::
    StandardDeviation ()
    {
      return this->StandardDeviation_;
    }

    void SummaryStatisticsType::
    StandardDeviation (const StandardDeviation_type& x)
    {
      this->StandardDeviation_.set (x);
    }

    void SummaryStatisticsType::
    StandardDeviation (const StandardDeviation_optional& x)
    {
      this->StandardDeviation_ = x;
    }

    void SummaryStatisticsType::
    StandardDeviation (::std::auto_ptr< StandardDeviation_type > x)
    {
      this->StandardDeviation_.set (x);
    }


    // SummaryStatisticsLinearType
    // 

    const SummaryStatisticsLinearType::linearUnit_optional& SummaryStatisticsLinearType::
    linearUnit () const
    {
      return this->linearUnit_;
    }

    SummaryStatisticsLinearType::linearUnit_optional& SummaryStatisticsLinearType::
    linearUnit ()
    {
      return this->linearUnit_;
    }

    void SummaryStatisticsLinearType::
    linearUnit (const linearUnit_type& x)
    {
      this->linearUnit_.set (x);
    }

    void SummaryStatisticsLinearType::
    linearUnit (const linearUnit_optional& x)
    {
      this->linearUnit_ = x;
    }

    void SummaryStatisticsLinearType::
    linearUnit (::std::auto_ptr< linearUnit_type > x)
    {
      this->linearUnit_.set (x);
    }


    // SummaryStatisticsAngularType
    // 

    const SummaryStatisticsAngularType::angularUnit_optional& SummaryStatisticsAngularType::
    angularUnit () const
    {
      return this->angularUnit_;
    }

    SummaryStatisticsAngularType::angularUnit_optional& SummaryStatisticsAngularType::
    angularUnit ()
    {
      return this->angularUnit_;
    }

    void SummaryStatisticsAngularType::
    angularUnit (const angularUnit_type& x)
    {
      this->angularUnit_.set (x);
    }

    void SummaryStatisticsAngularType::
    angularUnit (const angularUnit_optional& x)
    {
      this->angularUnit_ = x;
    }

    void SummaryStatisticsAngularType::
    angularUnit (::std::auto_ptr< angularUnit_type > x)
    {
      this->angularUnit_.set (x);
    }


    // SummaryStatisticsAreaType
    // 

    const SummaryStatisticsAreaType::areaUnit_optional& SummaryStatisticsAreaType::
    areaUnit () const
    {
      return this->areaUnit_;
    }

    SummaryStatisticsAreaType::areaUnit_optional& SummaryStatisticsAreaType::
    areaUnit ()
    {
      return this->areaUnit_;
    }

    void SummaryStatisticsAreaType::
    areaUnit (const areaUnit_type& x)
    {
      this->areaUnit_.set (x);
    }

    void SummaryStatisticsAreaType::
    areaUnit (const areaUnit_optional& x)
    {
      this->areaUnit_ = x;
    }

    void SummaryStatisticsAreaType::
    areaUnit (::std::auto_ptr< areaUnit_type > x)
    {
      this->areaUnit_.set (x);
    }


    // SummaryStatisticsForceType
    // 

    const SummaryStatisticsForceType::forceUnit_optional& SummaryStatisticsForceType::
    forceUnit () const
    {
      return this->forceUnit_;
    }

    SummaryStatisticsForceType::forceUnit_optional& SummaryStatisticsForceType::
    forceUnit ()
    {
      return this->forceUnit_;
    }

    void SummaryStatisticsForceType::
    forceUnit (const forceUnit_type& x)
    {
      this->forceUnit_.set (x);
    }

    void SummaryStatisticsForceType::
    forceUnit (const forceUnit_optional& x)
    {
      this->forceUnit_ = x;
    }

    void SummaryStatisticsForceType::
    forceUnit (::std::auto_ptr< forceUnit_type > x)
    {
      this->forceUnit_.set (x);
    }


    // SummaryStatisticsMassType
    // 

    const SummaryStatisticsMassType::massUnit_optional& SummaryStatisticsMassType::
    massUnit () const
    {
      return this->massUnit_;
    }

    SummaryStatisticsMassType::massUnit_optional& SummaryStatisticsMassType::
    massUnit ()
    {
      return this->massUnit_;
    }

    void SummaryStatisticsMassType::
    massUnit (const massUnit_type& x)
    {
      this->massUnit_.set (x);
    }

    void SummaryStatisticsMassType::
    massUnit (const massUnit_optional& x)
    {
      this->massUnit_ = x;
    }

    void SummaryStatisticsMassType::
    massUnit (::std::auto_ptr< massUnit_type > x)
    {
      this->massUnit_.set (x);
    }


    // SummaryStatisticsPressureType
    // 

    const SummaryStatisticsPressureType::pressureUnit_optional& SummaryStatisticsPressureType::
    pressureUnit () const
    {
      return this->pressureUnit_;
    }

    SummaryStatisticsPressureType::pressureUnit_optional& SummaryStatisticsPressureType::
    pressureUnit ()
    {
      return this->pressureUnit_;
    }

    void SummaryStatisticsPressureType::
    pressureUnit (const pressureUnit_type& x)
    {
      this->pressureUnit_.set (x);
    }

    void SummaryStatisticsPressureType::
    pressureUnit (const pressureUnit_optional& x)
    {
      this->pressureUnit_ = x;
    }

    void SummaryStatisticsPressureType::
    pressureUnit (::std::auto_ptr< pressureUnit_type > x)
    {
      this->pressureUnit_.set (x);
    }


    // SummaryStatisticsSpeedType
    // 

    const SummaryStatisticsSpeedType::speedUnit_optional& SummaryStatisticsSpeedType::
    speedUnit () const
    {
      return this->speedUnit_;
    }

    SummaryStatisticsSpeedType::speedUnit_optional& SummaryStatisticsSpeedType::
    speedUnit ()
    {
      return this->speedUnit_;
    }

    void SummaryStatisticsSpeedType::
    speedUnit (const speedUnit_type& x)
    {
      this->speedUnit_.set (x);
    }

    void SummaryStatisticsSpeedType::
    speedUnit (const speedUnit_optional& x)
    {
      this->speedUnit_ = x;
    }

    void SummaryStatisticsSpeedType::
    speedUnit (::std::auto_ptr< speedUnit_type > x)
    {
      this->speedUnit_.set (x);
    }


    // SummaryStatisticsTemperatureType
    // 

    const SummaryStatisticsTemperatureType::temperatureUnit_optional& SummaryStatisticsTemperatureType::
    temperatureUnit () const
    {
      return this->temperatureUnit_;
    }

    SummaryStatisticsTemperatureType::temperatureUnit_optional& SummaryStatisticsTemperatureType::
    temperatureUnit ()
    {
      return this->temperatureUnit_;
    }

    void SummaryStatisticsTemperatureType::
    temperatureUnit (const temperatureUnit_type& x)
    {
      this->temperatureUnit_.set (x);
    }

    void SummaryStatisticsTemperatureType::
    temperatureUnit (const temperatureUnit_optional& x)
    {
      this->temperatureUnit_ = x;
    }

    void SummaryStatisticsTemperatureType::
    temperatureUnit (::std::auto_ptr< temperatureUnit_type > x)
    {
      this->temperatureUnit_.set (x);
    }


    // SummaryStatisticsTimeType
    // 

    const SummaryStatisticsTimeType::timeUnit_optional& SummaryStatisticsTimeType::
    timeUnit () const
    {
      return this->timeUnit_;
    }

    SummaryStatisticsTimeType::timeUnit_optional& SummaryStatisticsTimeType::
    timeUnit ()
    {
      return this->timeUnit_;
    }

    void SummaryStatisticsTimeType::
    timeUnit (const timeUnit_type& x)
    {
      this->timeUnit_.set (x);
    }

    void SummaryStatisticsTimeType::
    timeUnit (const timeUnit_optional& x)
    {
      this->timeUnit_ = x;
    }

    void SummaryStatisticsTimeType::
    timeUnit (::std::auto_ptr< timeUnit_type > x)
    {
      this->timeUnit_.set (x);
    }


    // SummaryStatisticsUserDefinedUnitType
    // 

    const SummaryStatisticsUserDefinedUnitType::unitName_type& SummaryStatisticsUserDefinedUnitType::
    unitName () const
    {
      return this->unitName_.get ();
    }

    SummaryStatisticsUserDefinedUnitType::unitName_type& SummaryStatisticsUserDefinedUnitType::
    unitName ()
    {
      return this->unitName_.get ();
    }

    void SummaryStatisticsUserDefinedUnitType::
    unitName (const unitName_type& x)
    {
      this->unitName_.set (x);
    }

    void SummaryStatisticsUserDefinedUnitType::
    unitName (::std::auto_ptr< unitName_type > x)
    {
      this->unitName_.set (x);
    }


    // AssignableCauseEnumType
    // 

    AssignableCauseEnumType::
    AssignableCauseEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_AssignableCauseEnumType_literals_[v])
    {
    }

    AssignableCauseEnumType::
    AssignableCauseEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    AssignableCauseEnumType::
    AssignableCauseEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    AssignableCauseEnumType::
    AssignableCauseEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    AssignableCauseEnumType::
    AssignableCauseEnumType (const AssignableCauseEnumType& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    AssignableCauseEnumType& AssignableCauseEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_AssignableCauseEnumType_literals_[v]);

      return *this;
    }


    // AssignableCauseType
    // 

    const AssignableCauseType::Attributes_optional& AssignableCauseType::
    Attributes () const
    {
      return this->Attributes_;
    }

    AssignableCauseType::Attributes_optional& AssignableCauseType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void AssignableCauseType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void AssignableCauseType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void AssignableCauseType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const AssignableCauseType::Description_optional& AssignableCauseType::
    Description () const
    {
      return this->Description_;
    }

    AssignableCauseType::Description_optional& AssignableCauseType::
    Description ()
    {
      return this->Description_;
    }

    void AssignableCauseType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void AssignableCauseType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void AssignableCauseType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const AssignableCauseType::AssignableCauseEnum_optional& AssignableCauseType::
    AssignableCauseEnum () const
    {
      return this->AssignableCauseEnum_;
    }

    AssignableCauseType::AssignableCauseEnum_optional& AssignableCauseType::
    AssignableCauseEnum ()
    {
      return this->AssignableCauseEnum_;
    }

    void AssignableCauseType::
    AssignableCauseEnum (const AssignableCauseEnum_type& x)
    {
      this->AssignableCauseEnum_.set (x);
    }

    void AssignableCauseType::
    AssignableCauseEnum (const AssignableCauseEnum_optional& x)
    {
      this->AssignableCauseEnum_ = x;
    }

    void AssignableCauseType::
    AssignableCauseEnum (::std::auto_ptr< AssignableCauseEnum_type > x)
    {
      this->AssignableCauseEnum_.set (x);
    }

    const AssignableCauseType::CorrectiveActionIds_optional& AssignableCauseType::
    CorrectiveActionIds () const
    {
      return this->CorrectiveActionIds_;
    }

    AssignableCauseType::CorrectiveActionIds_optional& AssignableCauseType::
    CorrectiveActionIds ()
    {
      return this->CorrectiveActionIds_;
    }

    void AssignableCauseType::
    CorrectiveActionIds (const CorrectiveActionIds_type& x)
    {
      this->CorrectiveActionIds_.set (x);
    }

    void AssignableCauseType::
    CorrectiveActionIds (const CorrectiveActionIds_optional& x)
    {
      this->CorrectiveActionIds_ = x;
    }

    void AssignableCauseType::
    CorrectiveActionIds (::std::auto_ptr< CorrectiveActionIds_type > x)
    {
      this->CorrectiveActionIds_.set (x);
    }

    const AssignableCauseType::id_type& AssignableCauseType::
    id () const
    {
      return this->id_.get ();
    }

    AssignableCauseType::id_type& AssignableCauseType::
    id ()
    {
      return this->id_.get ();
    }

    void AssignableCauseType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void AssignableCauseType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // AssignableCausesType
    // 

    const AssignableCausesType::AssignableCause_sequence& AssignableCausesType::
    AssignableCause () const
    {
      return this->AssignableCause_;
    }

    AssignableCausesType::AssignableCause_sequence& AssignableCausesType::
    AssignableCause ()
    {
      return this->AssignableCause_;
    }

    void AssignableCausesType::
    AssignableCause (const AssignableCause_sequence& s)
    {
      this->AssignableCause_ = s;
    }


    // ActionToTakeEnumType
    // 

    ActionToTakeEnumType::
    ActionToTakeEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ActionToTakeEnumType_literals_[v])
    {
    }

    ActionToTakeEnumType::
    ActionToTakeEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ActionToTakeEnumType::
    ActionToTakeEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ActionToTakeEnumType::
    ActionToTakeEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ActionToTakeEnumType::
    ActionToTakeEnumType (const ActionToTakeEnumType& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ActionToTakeEnumType& ActionToTakeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ActionToTakeEnumType_literals_[v]);

      return *this;
    }


    // CorrectiveActionType
    // 

    const CorrectiveActionType::Attributes_optional& CorrectiveActionType::
    Attributes () const
    {
      return this->Attributes_;
    }

    CorrectiveActionType::Attributes_optional& CorrectiveActionType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void CorrectiveActionType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void CorrectiveActionType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void CorrectiveActionType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const CorrectiveActionType::ActionToTake_optional& CorrectiveActionType::
    ActionToTake () const
    {
      return this->ActionToTake_;
    }

    CorrectiveActionType::ActionToTake_optional& CorrectiveActionType::
    ActionToTake ()
    {
      return this->ActionToTake_;
    }

    void CorrectiveActionType::
    ActionToTake (const ActionToTake_type& x)
    {
      this->ActionToTake_.set (x);
    }

    void CorrectiveActionType::
    ActionToTake (const ActionToTake_optional& x)
    {
      this->ActionToTake_ = x;
    }

    void CorrectiveActionType::
    ActionToTake (::std::auto_ptr< ActionToTake_type > x)
    {
      this->ActionToTake_.set (x);
    }

    const CorrectiveActionType::ActionToTakeEnum_optional& CorrectiveActionType::
    ActionToTakeEnum () const
    {
      return this->ActionToTakeEnum_;
    }

    CorrectiveActionType::ActionToTakeEnum_optional& CorrectiveActionType::
    ActionToTakeEnum ()
    {
      return this->ActionToTakeEnum_;
    }

    void CorrectiveActionType::
    ActionToTakeEnum (const ActionToTakeEnum_type& x)
    {
      this->ActionToTakeEnum_.set (x);
    }

    void CorrectiveActionType::
    ActionToTakeEnum (const ActionToTakeEnum_optional& x)
    {
      this->ActionToTakeEnum_ = x;
    }

    void CorrectiveActionType::
    ActionToTakeEnum (::std::auto_ptr< ActionToTakeEnum_type > x)
    {
      this->ActionToTakeEnum_.set (x);
    }

    const CorrectiveActionType::id_type& CorrectiveActionType::
    id () const
    {
      return this->id_.get ();
    }

    CorrectiveActionType::id_type& CorrectiveActionType::
    id ()
    {
      return this->id_.get ();
    }

    void CorrectiveActionType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void CorrectiveActionType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // CorrectiveActionsType
    // 

    const CorrectiveActionsType::CorrectiveAction_sequence& CorrectiveActionsType::
    CorrectiveAction () const
    {
      return this->CorrectiveAction_;
    }

    CorrectiveActionsType::CorrectiveAction_sequence& CorrectiveActionsType::
    CorrectiveAction ()
    {
      return this->CorrectiveAction_;
    }

    void CorrectiveActionsType::
    CorrectiveAction (const CorrectiveAction_sequence& s)
    {
      this->CorrectiveAction_ = s;
    }


    // StudyIssueType
    // 

    const StudyIssueType::Traceability_optional& StudyIssueType::
    Traceability () const
    {
      return this->Traceability_;
    }

    StudyIssueType::Traceability_optional& StudyIssueType::
    Traceability ()
    {
      return this->Traceability_;
    }

    void StudyIssueType::
    Traceability (const Traceability_type& x)
    {
      this->Traceability_.set (x);
    }

    void StudyIssueType::
    Traceability (const Traceability_optional& x)
    {
      this->Traceability_ = x;
    }

    void StudyIssueType::
    Traceability (::std::auto_ptr< Traceability_type > x)
    {
      this->Traceability_.set (x);
    }

    const StudyIssueType::AssignableCauseIds_optional& StudyIssueType::
    AssignableCauseIds () const
    {
      return this->AssignableCauseIds_;
    }

    StudyIssueType::AssignableCauseIds_optional& StudyIssueType::
    AssignableCauseIds ()
    {
      return this->AssignableCauseIds_;
    }

    void StudyIssueType::
    AssignableCauseIds (const AssignableCauseIds_type& x)
    {
      this->AssignableCauseIds_.set (x);
    }

    void StudyIssueType::
    AssignableCauseIds (const AssignableCauseIds_optional& x)
    {
      this->AssignableCauseIds_ = x;
    }

    void StudyIssueType::
    AssignableCauseIds (::std::auto_ptr< AssignableCauseIds_type > x)
    {
      this->AssignableCauseIds_.set (x);
    }

    const StudyIssueType::CorrectiveActionIds_optional& StudyIssueType::
    CorrectiveActionIds () const
    {
      return this->CorrectiveActionIds_;
    }

    StudyIssueType::CorrectiveActionIds_optional& StudyIssueType::
    CorrectiveActionIds ()
    {
      return this->CorrectiveActionIds_;
    }

    void StudyIssueType::
    CorrectiveActionIds (const CorrectiveActionIds_type& x)
    {
      this->CorrectiveActionIds_.set (x);
    }

    void StudyIssueType::
    CorrectiveActionIds (const CorrectiveActionIds_optional& x)
    {
      this->CorrectiveActionIds_ = x;
    }

    void StudyIssueType::
    CorrectiveActionIds (::std::auto_ptr< CorrectiveActionIds_type > x)
    {
      this->CorrectiveActionIds_.set (x);
    }

    const StudyIssueType::Resolution_optional& StudyIssueType::
    Resolution () const
    {
      return this->Resolution_;
    }

    StudyIssueType::Resolution_optional& StudyIssueType::
    Resolution ()
    {
      return this->Resolution_;
    }

    void StudyIssueType::
    Resolution (const Resolution_type& x)
    {
      this->Resolution_.set (x);
    }

    void StudyIssueType::
    Resolution (const Resolution_optional& x)
    {
      this->Resolution_ = x;
    }

    void StudyIssueType::
    Resolution (::std::auto_ptr< Resolution_type > x)
    {
      this->Resolution_.set (x);
    }

    const StudyIssueType::CharacteristicIds_optional& StudyIssueType::
    CharacteristicIds () const
    {
      return this->CharacteristicIds_;
    }

    StudyIssueType::CharacteristicIds_optional& StudyIssueType::
    CharacteristicIds ()
    {
      return this->CharacteristicIds_;
    }

    void StudyIssueType::
    CharacteristicIds (const CharacteristicIds_type& x)
    {
      this->CharacteristicIds_.set (x);
    }

    void StudyIssueType::
    CharacteristicIds (const CharacteristicIds_optional& x)
    {
      this->CharacteristicIds_ = x;
    }

    void StudyIssueType::
    CharacteristicIds (::std::auto_ptr< CharacteristicIds_type > x)
    {
      this->CharacteristicIds_.set (x);
    }

    const StudyIssueType::SubgroupIds_optional& StudyIssueType::
    SubgroupIds () const
    {
      return this->SubgroupIds_;
    }

    StudyIssueType::SubgroupIds_optional& StudyIssueType::
    SubgroupIds ()
    {
      return this->SubgroupIds_;
    }

    void StudyIssueType::
    SubgroupIds (const SubgroupIds_type& x)
    {
      this->SubgroupIds_.set (x);
    }

    void StudyIssueType::
    SubgroupIds (const SubgroupIds_optional& x)
    {
      this->SubgroupIds_ = x;
    }

    void StudyIssueType::
    SubgroupIds (::std::auto_ptr< SubgroupIds_type > x)
    {
      this->SubgroupIds_.set (x);
    }

    const StudyIssueType::id_type& StudyIssueType::
    id () const
    {
      return this->id_.get ();
    }

    StudyIssueType::id_type& StudyIssueType::
    id ()
    {
      return this->id_.get ();
    }

    void StudyIssueType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void StudyIssueType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // ControlIssueEnumType
    // 

    ControlIssueEnumType::
    ControlIssueEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ControlIssueEnumType_literals_[v])
    {
    }

    ControlIssueEnumType::
    ControlIssueEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ControlIssueEnumType::
    ControlIssueEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ControlIssueEnumType::
    ControlIssueEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ControlIssueEnumType::
    ControlIssueEnumType (const ControlIssueEnumType& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ControlIssueEnumType& ControlIssueEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ControlIssueEnumType_literals_[v]);

      return *this;
    }


    // ControlIssueType
    // 

    const ControlIssueType::ControlIssueEnum_optional& ControlIssueType::
    ControlIssueEnum () const
    {
      return this->ControlIssueEnum_;
    }

    ControlIssueType::ControlIssueEnum_optional& ControlIssueType::
    ControlIssueEnum ()
    {
      return this->ControlIssueEnum_;
    }

    void ControlIssueType::
    ControlIssueEnum (const ControlIssueEnum_type& x)
    {
      this->ControlIssueEnum_.set (x);
    }

    void ControlIssueType::
    ControlIssueEnum (const ControlIssueEnum_optional& x)
    {
      this->ControlIssueEnum_ = x;
    }

    void ControlIssueType::
    ControlIssueEnum (::std::auto_ptr< ControlIssueEnum_type > x)
    {
      this->ControlIssueEnum_.set (x);
    }

    const ControlIssueType::OtherControlIssue_optional& ControlIssueType::
    OtherControlIssue () const
    {
      return this->OtherControlIssue_;
    }

    ControlIssueType::OtherControlIssue_optional& ControlIssueType::
    OtherControlIssue ()
    {
      return this->OtherControlIssue_;
    }

    void ControlIssueType::
    OtherControlIssue (const OtherControlIssue_type& x)
    {
      this->OtherControlIssue_.set (x);
    }

    void ControlIssueType::
    OtherControlIssue (const OtherControlIssue_optional& x)
    {
      this->OtherControlIssue_ = x;
    }

    void ControlIssueType::
    OtherControlIssue (::std::auto_ptr< OtherControlIssue_type > x)
    {
      this->OtherControlIssue_.set (x);
    }


    // ControlIssueDetailsType
    // 

    const ControlIssueDetailsType::ControlIssue_type& ControlIssueDetailsType::
    ControlIssue () const
    {
      return this->ControlIssue_.get ();
    }

    ControlIssueDetailsType::ControlIssue_type& ControlIssueDetailsType::
    ControlIssue ()
    {
      return this->ControlIssue_.get ();
    }

    void ControlIssueDetailsType::
    ControlIssue (const ControlIssue_type& x)
    {
      this->ControlIssue_.set (x);
    }

    void ControlIssueDetailsType::
    ControlIssue (::std::auto_ptr< ControlIssue_type > x)
    {
      this->ControlIssue_.set (x);
    }

    const ControlIssueDetailsType::ControlMethodId_optional& ControlIssueDetailsType::
    ControlMethodId () const
    {
      return this->ControlMethodId_;
    }

    ControlIssueDetailsType::ControlMethodId_optional& ControlIssueDetailsType::
    ControlMethodId ()
    {
      return this->ControlMethodId_;
    }

    void ControlIssueDetailsType::
    ControlMethodId (const ControlMethodId_type& x)
    {
      this->ControlMethodId_.set (x);
    }

    void ControlIssueDetailsType::
    ControlMethodId (const ControlMethodId_optional& x)
    {
      this->ControlMethodId_ = x;
    }

    void ControlIssueDetailsType::
    ControlMethodId (::std::auto_ptr< ControlMethodId_type > x)
    {
      this->ControlMethodId_.set (x);
    }

    const ControlIssueDetailsType::StudyIssueId_optional& ControlIssueDetailsType::
    StudyIssueId () const
    {
      return this->StudyIssueId_;
    }

    ControlIssueDetailsType::StudyIssueId_optional& ControlIssueDetailsType::
    StudyIssueId ()
    {
      return this->StudyIssueId_;
    }

    void ControlIssueDetailsType::
    StudyIssueId (const StudyIssueId_type& x)
    {
      this->StudyIssueId_.set (x);
    }

    void ControlIssueDetailsType::
    StudyIssueId (const StudyIssueId_optional& x)
    {
      this->StudyIssueId_ = x;
    }

    void ControlIssueDetailsType::
    StudyIssueId (::std::auto_ptr< StudyIssueId_type > x)
    {
      this->StudyIssueId_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xsd
{
  namespace qif2
  {
    // StatsValuesEnumType
    //

    StatsValuesEnumType::
    StatsValuesEnumType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_StatsValuesEnumType_convert ();
    }

    StatsValuesEnumType::
    StatsValuesEnumType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_StatsValuesEnumType_convert ();
    }

    StatsValuesEnumType::
    StatsValuesEnumType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_StatsValuesEnumType_convert ();
    }

    StatsValuesEnumType* StatsValuesEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsValuesEnumType (*this, f, c);
    }

    StatsValuesEnumType::value StatsValuesEnumType::
    _xsd_StatsValuesEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StatsValuesEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_StatsValuesEnumType_indexes_,
                        _xsd_StatsValuesEnumType_indexes_ + 52,
                        *this,
                        c));

      if (i == _xsd_StatsValuesEnumType_indexes_ + 52 || _xsd_StatsValuesEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const StatsValuesEnumType::
    _xsd_StatsValuesEnumType_literals_[52] =
    {
      "TOTNUM",
      "EFFNUM",
      "NUMSUB",
      "AVG",
      "DIFF",
      "RMS",
      "MAX",
      "MIN",
      "RANGE",
      "AVGRNG",
      "STDDEV",
      "SKEW",
      "KURT",
      "NORM",
      "PROVAR",
      "ESTSTDV",
      "UCL",
      "LCL",
      "UCLRNG",
      "LCLRNG",
      "NUMOOC",
      "NUMOOT",
      "NOOTHI",
      "NOOTLO",
      "CP",
      "CPK",
      "PP",
      "PPK",
      "CM",
      "CMK",
      "AV",
      "REL_AV",
      "EV",
      "REL_EV",
      "INTERACTION",
      "REL_INTERACTION",
      "RANDR",
      "REL_RANDR",
      "PV",
      "REL_PV",
      "TV",
      "REL_TV",
      "LNRTY",
      "BIAS",
      "REL_LNRTY",
      "REL_BIAS",
      "R_SQR",
      "SLOPE",
      "INTCPT",
      "UPRCONFLIM",
      "LWRCONFLIM",
      "TDIST"
    };

    const StatsValuesEnumType::value StatsValuesEnumType::
    _xsd_StatsValuesEnumType_indexes_[52] =
    {
      ::xsd::qif2::StatsValuesEnumType::AV,
      ::xsd::qif2::StatsValuesEnumType::AVG,
      ::xsd::qif2::StatsValuesEnumType::AVGRNG,
      ::xsd::qif2::StatsValuesEnumType::BIAS,
      ::xsd::qif2::StatsValuesEnumType::CM,
      ::xsd::qif2::StatsValuesEnumType::CMK,
      ::xsd::qif2::StatsValuesEnumType::CP,
      ::xsd::qif2::StatsValuesEnumType::CPK,
      ::xsd::qif2::StatsValuesEnumType::DIFF,
      ::xsd::qif2::StatsValuesEnumType::EFFNUM,
      ::xsd::qif2::StatsValuesEnumType::ESTSTDV,
      ::xsd::qif2::StatsValuesEnumType::EV,
      ::xsd::qif2::StatsValuesEnumType::INTCPT,
      ::xsd::qif2::StatsValuesEnumType::INTERACTION,
      ::xsd::qif2::StatsValuesEnumType::KURT,
      ::xsd::qif2::StatsValuesEnumType::LCL,
      ::xsd::qif2::StatsValuesEnumType::LCLRNG,
      ::xsd::qif2::StatsValuesEnumType::LNRTY,
      ::xsd::qif2::StatsValuesEnumType::LWRCONFLIM,
      ::xsd::qif2::StatsValuesEnumType::MAX,
      ::xsd::qif2::StatsValuesEnumType::MIN,
      ::xsd::qif2::StatsValuesEnumType::NOOTHI,
      ::xsd::qif2::StatsValuesEnumType::NOOTLO,
      ::xsd::qif2::StatsValuesEnumType::NORM,
      ::xsd::qif2::StatsValuesEnumType::NUMOOC,
      ::xsd::qif2::StatsValuesEnumType::NUMOOT,
      ::xsd::qif2::StatsValuesEnumType::NUMSUB,
      ::xsd::qif2::StatsValuesEnumType::PP,
      ::xsd::qif2::StatsValuesEnumType::PPK,
      ::xsd::qif2::StatsValuesEnumType::PROVAR,
      ::xsd::qif2::StatsValuesEnumType::PV,
      ::xsd::qif2::StatsValuesEnumType::RANDR,
      ::xsd::qif2::StatsValuesEnumType::RANGE,
      ::xsd::qif2::StatsValuesEnumType::REL_AV,
      ::xsd::qif2::StatsValuesEnumType::REL_BIAS,
      ::xsd::qif2::StatsValuesEnumType::REL_EV,
      ::xsd::qif2::StatsValuesEnumType::REL_INTERACTION,
      ::xsd::qif2::StatsValuesEnumType::REL_LNRTY,
      ::xsd::qif2::StatsValuesEnumType::REL_PV,
      ::xsd::qif2::StatsValuesEnumType::REL_RANDR,
      ::xsd::qif2::StatsValuesEnumType::REL_TV,
      ::xsd::qif2::StatsValuesEnumType::RMS,
      ::xsd::qif2::StatsValuesEnumType::R_SQR,
      ::xsd::qif2::StatsValuesEnumType::SKEW,
      ::xsd::qif2::StatsValuesEnumType::SLOPE,
      ::xsd::qif2::StatsValuesEnumType::STDDEV,
      ::xsd::qif2::StatsValuesEnumType::TDIST,
      ::xsd::qif2::StatsValuesEnumType::TOTNUM,
      ::xsd::qif2::StatsValuesEnumType::TV,
      ::xsd::qif2::StatsValuesEnumType::UCL,
      ::xsd::qif2::StatsValuesEnumType::UCLRNG,
      ::xsd::qif2::StatsValuesEnumType::UPRCONFLIM
    };

    // ListAccumulatedStatsValuesType
    //

    ListAccumulatedStatsValuesType::
    ListAccumulatedStatsValuesType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (e, f, this)
    {
    }

    ListAccumulatedStatsValuesType::
    ListAccumulatedStatsValuesType (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (a, f, this)
    {
    }

    ListAccumulatedStatsValuesType::
    ListAccumulatedStatsValuesType (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (s, e, f, this)
    {
    }

    ListAccumulatedStatsValuesType* ListAccumulatedStatsValuesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ListAccumulatedStatsValuesType (*this, f, c);
    }

    ListAccumulatedStatsValuesType::
    ~ListAccumulatedStatsValuesType ()
    {
    }

    // SubgroupStatsValuesEnumType
    //

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_SubgroupStatsValuesEnumType_convert ();
    }

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_SubgroupStatsValuesEnumType_convert ();
    }

    SubgroupStatsValuesEnumType::
    SubgroupStatsValuesEnumType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_SubgroupStatsValuesEnumType_convert ();
    }

    SubgroupStatsValuesEnumType* SubgroupStatsValuesEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SubgroupStatsValuesEnumType (*this, f, c);
    }

    SubgroupStatsValuesEnumType::value SubgroupStatsValuesEnumType::
    _xsd_SubgroupStatsValuesEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SubgroupStatsValuesEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SubgroupStatsValuesEnumType_indexes_,
                        _xsd_SubgroupStatsValuesEnumType_indexes_ + 10,
                        *this,
                        c));

      if (i == _xsd_SubgroupStatsValuesEnumType_indexes_ + 10 || _xsd_SubgroupStatsValuesEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const SubgroupStatsValuesEnumType::
    _xsd_SubgroupStatsValuesEnumType_literals_[10] =
    {
      "TOTNUM",
      "EFFNUM",
      "AVG",
      "DIFF",
      "MAX",
      "MIN",
      "RANGE",
      "NUMOOT",
      "NOOTHI",
      "NOOTLO"
    };

    const SubgroupStatsValuesEnumType::value SubgroupStatsValuesEnumType::
    _xsd_SubgroupStatsValuesEnumType_indexes_[10] =
    {
      ::xsd::qif2::SubgroupStatsValuesEnumType::AVG,
      ::xsd::qif2::SubgroupStatsValuesEnumType::DIFF,
      ::xsd::qif2::SubgroupStatsValuesEnumType::EFFNUM,
      ::xsd::qif2::SubgroupStatsValuesEnumType::MAX,
      ::xsd::qif2::SubgroupStatsValuesEnumType::MIN,
      ::xsd::qif2::SubgroupStatsValuesEnumType::NOOTHI,
      ::xsd::qif2::SubgroupStatsValuesEnumType::NOOTLO,
      ::xsd::qif2::SubgroupStatsValuesEnumType::NUMOOT,
      ::xsd::qif2::SubgroupStatsValuesEnumType::RANGE,
      ::xsd::qif2::SubgroupStatsValuesEnumType::TOTNUM
    };

    // ListSubgroupStatsValuesType
    //

    ListSubgroupStatsValuesType::
    ListSubgroupStatsValuesType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > (e, f, this)
    {
    }

    ListSubgroupStatsValuesType::
    ListSubgroupStatsValuesType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > (a, f, this)
    {
    }

    ListSubgroupStatsValuesType::
    ListSubgroupStatsValuesType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::SubgroupStatsValuesEnumType, char > (s, e, f, this)
    {
    }

    ListSubgroupStatsValuesType* ListSubgroupStatsValuesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ListSubgroupStatsValuesType (*this, f, c);
    }

    ListSubgroupStatsValuesType::
    ~ListSubgroupStatsValuesType ()
    {
    }

    // SubgroupDecimalType
    //

    SubgroupDecimalType::
    SubgroupDecimalType (const ::xml_schema::decimal& _xsd_decimal_base,
                         const subgroupId_type& subgroupId)
    : ::xsd::qif2::ActualDecimalType (_xsd_decimal_base),
      subgroupId_ (subgroupId, ::xml_schema::flags (), this)
    {
    }

    SubgroupDecimalType::
    SubgroupDecimalType (const SubgroupDecimalType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::ActualDecimalType (x, f, c),
      subgroupId_ (x.subgroupId_, f, this)
    {
    }

    SubgroupDecimalType::
    SubgroupDecimalType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::ActualDecimalType (e, f | ::xml_schema::flags::base, c),
      subgroupId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void SubgroupDecimalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ActualDecimalType::parse (p, f);

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "subgroupId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< subgroupId_type > r (
            subgroupId_traits::create (i, f, this));

          this->subgroupId_.set (r);
          continue;
        }
      }

      if (!subgroupId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "subgroupId",
          "");
      }
    }

    SubgroupDecimalType* SubgroupDecimalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SubgroupDecimalType (*this, f, c);
    }

    SubgroupDecimalType::
    ~SubgroupDecimalType ()
    {
    }

    // SubgroupIntegerType
    //

    SubgroupIntegerType::
    SubgroupIntegerType (const ::xml_schema::positive_integer& _xsd_positive_integer_base,
                         const subgroupId_type& subgroupId)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (_xsd_positive_integer_base),
      subgroupId_ (subgroupId, ::xml_schema::flags (), this)
    {
    }

    SubgroupIntegerType::
    SubgroupIntegerType (const SubgroupIntegerType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (x, f, c),
      subgroupId_ (x.subgroupId_, f, this)
    {
    }

    SubgroupIntegerType::
    SubgroupIntegerType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (e, f | ::xml_schema::flags::base, c),
      subgroupId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void SubgroupIntegerType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "subgroupId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< subgroupId_type > r (
            subgroupId_traits::create (i, f, this));

          this->subgroupId_.set (r);
          continue;
        }
      }

      if (!subgroupId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "subgroupId",
          "");
      }
    }

    SubgroupIntegerType* SubgroupIntegerType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SubgroupIntegerType (*this, f, c);
    }

    SubgroupIntegerType::
    ~SubgroupIntegerType ()
    {
    }

    // SummaryStatsValuesEnumType
    //

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_SummaryStatsValuesEnumType_convert ();
    }

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_SummaryStatsValuesEnumType_convert ();
    }

    SummaryStatsValuesEnumType::
    SummaryStatsValuesEnumType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_SummaryStatsValuesEnumType_convert ();
    }

    SummaryStatsValuesEnumType* SummaryStatsValuesEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatsValuesEnumType (*this, f, c);
    }

    SummaryStatsValuesEnumType::value SummaryStatsValuesEnumType::
    _xsd_SummaryStatsValuesEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SummaryStatsValuesEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SummaryStatsValuesEnumType_indexes_,
                        _xsd_SummaryStatsValuesEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_SummaryStatsValuesEnumType_indexes_ + 5 || _xsd_SummaryStatsValuesEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const SummaryStatsValuesEnumType::
    _xsd_SummaryStatsValuesEnumType_literals_[5] =
    {
      "AVG",
      "MAX",
      "MIN",
      "RANGE",
      "STDDEV"
    };

    const SummaryStatsValuesEnumType::value SummaryStatsValuesEnumType::
    _xsd_SummaryStatsValuesEnumType_indexes_[5] =
    {
      ::xsd::qif2::SummaryStatsValuesEnumType::AVG,
      ::xsd::qif2::SummaryStatsValuesEnumType::MAX,
      ::xsd::qif2::SummaryStatsValuesEnumType::MIN,
      ::xsd::qif2::SummaryStatsValuesEnumType::RANGE,
      ::xsd::qif2::SummaryStatsValuesEnumType::STDDEV
    };

    // ListSummaryStatsValuesType
    //

    ListSummaryStatsValuesType::
    ListSummaryStatsValuesType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::simple_type (e, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (e, f, this)
    {
    }

    ListSummaryStatsValuesType::
    ListSummaryStatsValuesType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::simple_type (a, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (a, f, this)
    {
    }

    ListSummaryStatsValuesType::
    ListSummaryStatsValuesType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::simple_type (s, e, f, c),
      ::xsd::cxx::tree::list< ::xsd::qif2::StatsValuesEnumType, char > (s, e, f, this)
    {
    }

    ListSummaryStatsValuesType* ListSummaryStatsValuesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ListSummaryStatsValuesType (*this, f, c);
    }

    ListSummaryStatsValuesType::
    ~ListSummaryStatsValuesType ()
    {
    }

    // SummaryStatsValuesType
    //

    SummaryStatsValuesType::
    SummaryStatsValuesType (const SummaryType_type& SummaryType,
                            const SummaryStats_type& SummaryStats)
    : ::xml_schema::type (),
      SummaryType_ (SummaryType, ::xml_schema::flags (), this),
      SummaryStats_ (SummaryStats, ::xml_schema::flags (), this)
    {
    }

    SummaryStatsValuesType::
    SummaryStatsValuesType (const SummaryStatsValuesType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SummaryType_ (x.SummaryType_, f, this),
      SummaryStats_ (x.SummaryStats_, f, this)
    {
    }

    SummaryStatsValuesType::
    SummaryStatsValuesType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SummaryType_ (f, this),
      SummaryStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SummaryStatsValuesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SummaryType
        //
        if (n.name () == "SummaryType" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SummaryType_type > r (
            SummaryType_traits::create (i, f, this));

          if (!SummaryType_.present ())
          {
            this->SummaryType_.set (r);
            continue;
          }
        }

        // SummaryStats
        //
        if (n.name () == "SummaryStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SummaryStats_type > r (
            SummaryStats_traits::create (i, f, this));

          if (!SummaryStats_.present ())
          {
            this->SummaryStats_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SummaryType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SummaryType",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!SummaryStats_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SummaryStats",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SummaryStatsValuesType* SummaryStatsValuesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatsValuesType (*this, f, c);
    }

    SummaryStatsValuesType::
    ~SummaryStatsValuesType ()
    {
    }

    // LimitingNumberType
    //

    LimitingNumberType::
    LimitingNumberType ()
    : ::xml_schema::type (),
      Count_ (::xml_schema::flags (), this),
      Fraction_ (::xml_schema::flags (), this)
    {
    }

    LimitingNumberType::
    LimitingNumberType (const LimitingNumberType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Count_ (x.Count_, f, this),
      Fraction_ (x.Fraction_, f, this)
    {
    }

    LimitingNumberType::
    LimitingNumberType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Count_ (f, this),
      Fraction_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void LimitingNumberType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Count
        //
        if (n.name () == "Count" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->Count_)
          {
            this->Count_.set (Count_traits::create (i, f, this));
            continue;
          }
        }

        // Fraction
        //
        if (n.name () == "Fraction" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->Fraction_)
          {
            this->Fraction_.set (Fraction_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    LimitingNumberType* LimitingNumberType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LimitingNumberType (*this, f, c);
    }

    LimitingNumberType::
    ~LimitingNumberType ()
    {
    }

    // CriterionDecimalType
    //

    CriterionDecimalType::
    CriterionDecimalType (const Limit_type& Limit)
    : ::xml_schema::type (),
      Limit_ (Limit, ::xml_schema::flags (), this),
      NumberAllowedExceptions_ (::xml_schema::flags (), this),
      ExtremeLimit_ (::xml_schema::flags (), this)
    {
    }

    CriterionDecimalType::
    CriterionDecimalType (const CriterionDecimalType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Limit_ (x.Limit_, f, this),
      NumberAllowedExceptions_ (x.NumberAllowedExceptions_, f, this),
      ExtremeLimit_ (x.ExtremeLimit_, f, this)
    {
    }

    CriterionDecimalType::
    CriterionDecimalType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Limit_ (f, this),
      NumberAllowedExceptions_ (f, this),
      ExtremeLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CriterionDecimalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Limit
        //
        if (n.name () == "Limit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Limit_.present ())
          {
            this->Limit_.set (Limit_traits::create (i, f, this));
            continue;
          }
        }

        // NumberAllowedExceptions
        //
        if (n.name () == "NumberAllowedExceptions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NumberAllowedExceptions_type > r (
            NumberAllowedExceptions_traits::create (i, f, this));

          if (!this->NumberAllowedExceptions_)
          {
            this->NumberAllowedExceptions_.set (r);
            continue;
          }
        }

        // ExtremeLimit
        //
        if (n.name () == "ExtremeLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->ExtremeLimit_)
          {
            this->ExtremeLimit_.set (ExtremeLimit_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!Limit_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Limit",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CriterionDecimalType* CriterionDecimalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionDecimalType (*this, f, c);
    }

    CriterionDecimalType::
    ~CriterionDecimalType ()
    {
    }

    // CriterionLinearType
    //

    CriterionLinearType::
    CriterionLinearType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      linearUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionLinearType::
    CriterionLinearType (const CriterionLinearType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      linearUnit_ (x.linearUnit_, f, this)
    {
    }

    CriterionLinearType::
    CriterionLinearType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      linearUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionLinearType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "linearUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< linearUnit_type > r (
            linearUnit_traits::create (i, f, this));

          this->linearUnit_.set (r);
          continue;
        }
      }
    }

    CriterionLinearType* CriterionLinearType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionLinearType (*this, f, c);
    }

    CriterionLinearType::
    ~CriterionLinearType ()
    {
    }

    // CriterionAngularType
    //

    CriterionAngularType::
    CriterionAngularType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      angularUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionAngularType::
    CriterionAngularType (const CriterionAngularType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      angularUnit_ (x.angularUnit_, f, this)
    {
    }

    CriterionAngularType::
    CriterionAngularType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      angularUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionAngularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "angularUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< angularUnit_type > r (
            angularUnit_traits::create (i, f, this));

          this->angularUnit_.set (r);
          continue;
        }
      }
    }

    CriterionAngularType* CriterionAngularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionAngularType (*this, f, c);
    }

    CriterionAngularType::
    ~CriterionAngularType ()
    {
    }

    // CriterionAreaType
    //

    CriterionAreaType::
    CriterionAreaType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      areaUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionAreaType::
    CriterionAreaType (const CriterionAreaType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      areaUnit_ (x.areaUnit_, f, this)
    {
    }

    CriterionAreaType::
    CriterionAreaType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      areaUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionAreaType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "areaUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< areaUnit_type > r (
            areaUnit_traits::create (i, f, this));

          this->areaUnit_.set (r);
          continue;
        }
      }
    }

    CriterionAreaType* CriterionAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionAreaType (*this, f, c);
    }

    CriterionAreaType::
    ~CriterionAreaType ()
    {
    }

    // CriterionForceType
    //

    CriterionForceType::
    CriterionForceType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      forceUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionForceType::
    CriterionForceType (const CriterionForceType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      forceUnit_ (x.forceUnit_, f, this)
    {
    }

    CriterionForceType::
    CriterionForceType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      forceUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionForceType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "forceUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< forceUnit_type > r (
            forceUnit_traits::create (i, f, this));

          this->forceUnit_.set (r);
          continue;
        }
      }
    }

    CriterionForceType* CriterionForceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionForceType (*this, f, c);
    }

    CriterionForceType::
    ~CriterionForceType ()
    {
    }

    // CriterionMassType
    //

    CriterionMassType::
    CriterionMassType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      massUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionMassType::
    CriterionMassType (const CriterionMassType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      massUnit_ (x.massUnit_, f, this)
    {
    }

    CriterionMassType::
    CriterionMassType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      massUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionMassType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "massUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< massUnit_type > r (
            massUnit_traits::create (i, f, this));

          this->massUnit_.set (r);
          continue;
        }
      }
    }

    CriterionMassType* CriterionMassType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionMassType (*this, f, c);
    }

    CriterionMassType::
    ~CriterionMassType ()
    {
    }

    // CriterionPressureType
    //

    CriterionPressureType::
    CriterionPressureType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      pressureUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionPressureType::
    CriterionPressureType (const CriterionPressureType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      pressureUnit_ (x.pressureUnit_, f, this)
    {
    }

    CriterionPressureType::
    CriterionPressureType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      pressureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionPressureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "pressureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< pressureUnit_type > r (
            pressureUnit_traits::create (i, f, this));

          this->pressureUnit_.set (r);
          continue;
        }
      }
    }

    CriterionPressureType* CriterionPressureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionPressureType (*this, f, c);
    }

    CriterionPressureType::
    ~CriterionPressureType ()
    {
    }

    // CriterionSpeedType
    //

    CriterionSpeedType::
    CriterionSpeedType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      speedUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionSpeedType::
    CriterionSpeedType (const CriterionSpeedType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      speedUnit_ (x.speedUnit_, f, this)
    {
    }

    CriterionSpeedType::
    CriterionSpeedType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      speedUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionSpeedType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "speedUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< speedUnit_type > r (
            speedUnit_traits::create (i, f, this));

          this->speedUnit_.set (r);
          continue;
        }
      }
    }

    CriterionSpeedType* CriterionSpeedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionSpeedType (*this, f, c);
    }

    CriterionSpeedType::
    ~CriterionSpeedType ()
    {
    }

    // CriterionTemperatureType
    //

    CriterionTemperatureType::
    CriterionTemperatureType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      temperatureUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionTemperatureType::
    CriterionTemperatureType (const CriterionTemperatureType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      temperatureUnit_ (x.temperatureUnit_, f, this)
    {
    }

    CriterionTemperatureType::
    CriterionTemperatureType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      temperatureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionTemperatureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "temperatureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< temperatureUnit_type > r (
            temperatureUnit_traits::create (i, f, this));

          this->temperatureUnit_.set (r);
          continue;
        }
      }
    }

    CriterionTemperatureType* CriterionTemperatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionTemperatureType (*this, f, c);
    }

    CriterionTemperatureType::
    ~CriterionTemperatureType ()
    {
    }

    // CriterionTimeType
    //

    CriterionTimeType::
    CriterionTimeType (const Limit_type& Limit)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      timeUnit_ (::xml_schema::flags (), this)
    {
    }

    CriterionTimeType::
    CriterionTimeType (const CriterionTimeType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      timeUnit_ (x.timeUnit_, f, this)
    {
    }

    CriterionTimeType::
    CriterionTimeType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      timeUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionTimeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "timeUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< timeUnit_type > r (
            timeUnit_traits::create (i, f, this));

          this->timeUnit_.set (r);
          continue;
        }
      }
    }

    CriterionTimeType* CriterionTimeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionTimeType (*this, f, c);
    }

    CriterionTimeType::
    ~CriterionTimeType ()
    {
    }

    // CriterionUserDefinedUnitType
    //

    CriterionUserDefinedUnitType::
    CriterionUserDefinedUnitType (const Limit_type& Limit,
                                  const unitName_type& unitName)
    : ::xsd::qif2::CriterionDecimalType (Limit),
      unitName_ (unitName, ::xml_schema::flags (), this)
    {
    }

    CriterionUserDefinedUnitType::
    CriterionUserDefinedUnitType (const CriterionUserDefinedUnitType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (x, f, c),
      unitName_ (x.unitName_, f, this)
    {
    }

    CriterionUserDefinedUnitType::
    CriterionUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::CriterionDecimalType (e, f | ::xml_schema::flags::base, c),
      unitName_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CriterionUserDefinedUnitType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CriterionDecimalType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "unitName" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unitName_type > r (
            unitName_traits::create (i, f, this));

          this->unitName_.set (r);
          continue;
        }
      }

      if (!unitName_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "unitName",
          "");
      }
    }

    CriterionUserDefinedUnitType* CriterionUserDefinedUnitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionUserDefinedUnitType (*this, f, c);
    }

    CriterionUserDefinedUnitType::
    ~CriterionUserDefinedUnitType ()
    {
    }

    // CriterionIntegerType
    //

    CriterionIntegerType::
    CriterionIntegerType (const Limit_type& Limit)
    : ::xml_schema::type (),
      Limit_ (Limit, ::xml_schema::flags (), this),
      NumberAllowedExceptions_ (::xml_schema::flags (), this),
      ExtremeLimit_ (::xml_schema::flags (), this)
    {
    }

    CriterionIntegerType::
    CriterionIntegerType (const CriterionIntegerType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Limit_ (x.Limit_, f, this),
      NumberAllowedExceptions_ (x.NumberAllowedExceptions_, f, this),
      ExtremeLimit_ (x.ExtremeLimit_, f, this)
    {
    }

    CriterionIntegerType::
    CriterionIntegerType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Limit_ (f, this),
      NumberAllowedExceptions_ (f, this),
      ExtremeLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CriterionIntegerType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Limit
        //
        if (n.name () == "Limit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Limit_.present ())
          {
            this->Limit_.set (Limit_traits::create (i, f, this));
            continue;
          }
        }

        // NumberAllowedExceptions
        //
        if (n.name () == "NumberAllowedExceptions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NumberAllowedExceptions_type > r (
            NumberAllowedExceptions_traits::create (i, f, this));

          if (!this->NumberAllowedExceptions_)
          {
            this->NumberAllowedExceptions_.set (r);
            continue;
          }
        }

        // ExtremeLimit
        //
        if (n.name () == "ExtremeLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->ExtremeLimit_)
          {
            this->ExtremeLimit_.set (ExtremeLimit_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!Limit_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Limit",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CriterionIntegerType* CriterionIntegerType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionIntegerType (*this, f, c);
    }

    CriterionIntegerType::
    ~CriterionIntegerType ()
    {
    }

    // CriterionOutOfType
    //

    CriterionOutOfType::
    CriterionOutOfType (const Numerator_type& Numerator,
                        const Denominator_type& Denominator)
    : ::xml_schema::type (),
      Numerator_ (Numerator, ::xml_schema::flags (), this),
      Denominator_ (Denominator, ::xml_schema::flags (), this),
      NumberAllowedExceptions_ (::xml_schema::flags (), this)
    {
    }

    CriterionOutOfType::
    CriterionOutOfType (const CriterionOutOfType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Numerator_ (x.Numerator_, f, this),
      Denominator_ (x.Denominator_, f, this),
      NumberAllowedExceptions_ (x.NumberAllowedExceptions_, f, this)
    {
    }

    CriterionOutOfType::
    CriterionOutOfType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Numerator_ (f, this),
      Denominator_ (f, this),
      NumberAllowedExceptions_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CriterionOutOfType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Numerator
        //
        if (n.name () == "Numerator" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Numerator_.present ())
          {
            this->Numerator_.set (Numerator_traits::create (i, f, this));
            continue;
          }
        }

        // Denominator
        //
        if (n.name () == "Denominator" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Denominator_.present ())
          {
            this->Denominator_.set (Denominator_traits::create (i, f, this));
            continue;
          }
        }

        // NumberAllowedExceptions
        //
        if (n.name () == "NumberAllowedExceptions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NumberAllowedExceptions_type > r (
            NumberAllowedExceptions_traits::create (i, f, this));

          if (!this->NumberAllowedExceptions_)
          {
            this->NumberAllowedExceptions_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Numerator_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Numerator",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Denominator_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Denominator",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CriterionOutOfType* CriterionOutOfType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CriterionOutOfType (*this, f, c);
    }

    CriterionOutOfType::
    ~CriterionOutOfType ()
    {
    }

    // SamplingMethodType
    //

    SamplingMethodType::
    SamplingMethodType (const SampleSize_type& SampleSize)
    : ::xml_schema::type (),
      SampleSize_ (SampleSize, ::xml_schema::flags (), this),
      SamplingPeriod_ (::xml_schema::flags (), this),
      SamplingFrequency_ (::xml_schema::flags (), this),
      SamplingInterval_ (::xml_schema::flags (), this)
    {
    }

    SamplingMethodType::
    SamplingMethodType (const SamplingMethodType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SampleSize_ (x.SampleSize_, f, this),
      SamplingPeriod_ (x.SamplingPeriod_, f, this),
      SamplingFrequency_ (x.SamplingFrequency_, f, this),
      SamplingInterval_ (x.SamplingInterval_, f, this)
    {
    }

    SamplingMethodType::
    SamplingMethodType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SampleSize_ (f, this),
      SamplingPeriod_ (f, this),
      SamplingFrequency_ (f, this),
      SamplingInterval_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SamplingMethodType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SampleSize
        //
        if (n.name () == "SampleSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!SampleSize_.present ())
          {
            this->SampleSize_.set (SampleSize_traits::create (i, f, this));
            continue;
          }
        }

        // SamplingPeriod
        //
        if (n.name () == "SamplingPeriod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->SamplingPeriod_)
          {
            this->SamplingPeriod_.set (SamplingPeriod_traits::create (i, f, this));
            continue;
          }
        }

        // SamplingFrequency
        //
        if (n.name () == "SamplingFrequency" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->SamplingFrequency_)
          {
            this->SamplingFrequency_.set (SamplingFrequency_traits::create (i, f, this));
            continue;
          }
        }

        // SamplingInterval
        //
        if (n.name () == "SamplingInterval" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SamplingInterval_type > r (
            SamplingInterval_traits::create (i, f, this));

          if (!this->SamplingInterval_)
          {
            this->SamplingInterval_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SampleSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SampleSize",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SamplingMethodType* SamplingMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SamplingMethodType (*this, f, c);
    }

    SamplingMethodType::
    ~SamplingMethodType ()
    {
    }

    // SamplingIntervalEnumType
    //

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_SamplingIntervalEnumType_convert ();
    }

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_SamplingIntervalEnumType_convert ();
    }

    SamplingIntervalEnumType::
    SamplingIntervalEnumType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_SamplingIntervalEnumType_convert ();
    }

    SamplingIntervalEnumType* SamplingIntervalEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SamplingIntervalEnumType (*this, f, c);
    }

    SamplingIntervalEnumType::value SamplingIntervalEnumType::
    _xsd_SamplingIntervalEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SamplingIntervalEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SamplingIntervalEnumType_indexes_,
                        _xsd_SamplingIntervalEnumType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_SamplingIntervalEnumType_indexes_ + 7 || _xsd_SamplingIntervalEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const SamplingIntervalEnumType::
    _xsd_SamplingIntervalEnumType_literals_[7] =
    {
      "SHIFT",
      "DAY",
      "HOUR",
      "WEEK",
      "MONTH",
      "BATCH",
      "LOT"
    };

    const SamplingIntervalEnumType::value SamplingIntervalEnumType::
    _xsd_SamplingIntervalEnumType_indexes_[7] =
    {
      ::xsd::qif2::SamplingIntervalEnumType::BATCH,
      ::xsd::qif2::SamplingIntervalEnumType::DAY,
      ::xsd::qif2::SamplingIntervalEnumType::HOUR,
      ::xsd::qif2::SamplingIntervalEnumType::LOT,
      ::xsd::qif2::SamplingIntervalEnumType::MONTH,
      ::xsd::qif2::SamplingIntervalEnumType::SHIFT,
      ::xsd::qif2::SamplingIntervalEnumType::WEEK
    };

    // SamplingIntervalType
    //

    SamplingIntervalType::
    SamplingIntervalType ()
    : ::xml_schema::type (),
      SamplingIntervalEnum_ (::xml_schema::flags (), this),
      OtherSamplingInterval_ (::xml_schema::flags (), this)
    {
    }

    SamplingIntervalType::
    SamplingIntervalType (const SamplingIntervalType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SamplingIntervalEnum_ (x.SamplingIntervalEnum_, f, this),
      OtherSamplingInterval_ (x.OtherSamplingInterval_, f, this)
    {
    }

    SamplingIntervalType::
    SamplingIntervalType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SamplingIntervalEnum_ (f, this),
      OtherSamplingInterval_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SamplingIntervalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SamplingIntervalEnum
        //
        if (n.name () == "SamplingIntervalEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SamplingIntervalEnum_type > r (
            SamplingIntervalEnum_traits::create (i, f, this));

          if (!this->SamplingIntervalEnum_)
          {
            this->SamplingIntervalEnum_.set (r);
            continue;
          }
        }

        // OtherSamplingInterval
        //
        if (n.name () == "OtherSamplingInterval" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherSamplingInterval_type > r (
            OtherSamplingInterval_traits::create (i, f, this));

          if (!this->OtherSamplingInterval_)
          {
            this->OtherSamplingInterval_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SamplingIntervalType* SamplingIntervalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SamplingIntervalType (*this, f, c);
    }

    SamplingIntervalType::
    ~SamplingIntervalType ()
    {
    }

    // ExclusionEnumType
    //

    ExclusionEnumType::
    ExclusionEnumType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ExclusionEnumType_convert ();
    }

    ExclusionEnumType::
    ExclusionEnumType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ExclusionEnumType_convert ();
    }

    ExclusionEnumType::
    ExclusionEnumType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ExclusionEnumType_convert ();
    }

    ExclusionEnumType* ExclusionEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExclusionEnumType (*this, f, c);
    }

    ExclusionEnumType::value ExclusionEnumType::
    _xsd_ExclusionEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ExclusionEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ExclusionEnumType_indexes_,
                        _xsd_ExclusionEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_ExclusionEnumType_indexes_ + 4 || _xsd_ExclusionEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ExclusionEnumType::
    _xsd_ExclusionEnumType_literals_[4] =
    {
      "FLIER",
      "EQUIPERROR",
      "REWORK",
      "KNOWNCAUSE"
    };

    const ExclusionEnumType::value ExclusionEnumType::
    _xsd_ExclusionEnumType_indexes_[4] =
    {
      ::xsd::qif2::ExclusionEnumType::EQUIPERROR,
      ::xsd::qif2::ExclusionEnumType::FLIER,
      ::xsd::qif2::ExclusionEnumType::KNOWNCAUSE,
      ::xsd::qif2::ExclusionEnumType::REWORK
    };

    // ExclusionReasonType
    //

    ExclusionReasonType::
    ExclusionReasonType ()
    : ::xml_schema::type (),
      ExclusionReasonEnum_ (::xml_schema::flags (), this),
      OtherExclusionReason_ (::xml_schema::flags (), this)
    {
    }

    ExclusionReasonType::
    ExclusionReasonType (const ExclusionReasonType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ExclusionReasonEnum_ (x.ExclusionReasonEnum_, f, this),
      OtherExclusionReason_ (x.OtherExclusionReason_, f, this)
    {
    }

    ExclusionReasonType::
    ExclusionReasonType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ExclusionReasonEnum_ (f, this),
      OtherExclusionReason_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ExclusionReasonType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ExclusionReasonEnum
        //
        if (n.name () == "ExclusionReasonEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ExclusionReasonEnum_type > r (
            ExclusionReasonEnum_traits::create (i, f, this));

          if (!this->ExclusionReasonEnum_)
          {
            this->ExclusionReasonEnum_.set (r);
            continue;
          }
        }

        // OtherExclusionReason
        //
        if (n.name () == "OtherExclusionReason" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherExclusionReason_type > r (
            OtherExclusionReason_traits::create (i, f, this));

          if (!this->OtherExclusionReason_)
          {
            this->OtherExclusionReason_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ExclusionReasonType* ExclusionReasonType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExclusionReasonType (*this, f, c);
    }

    ExclusionReasonType::
    ~ExclusionReasonType ()
    {
    }

    // ExclusionType
    //

    ExclusionType::
    ExclusionType (const Id_type& Id,
                   const Reason_type& Reason)
    : ::xml_schema::type (),
      Id_ (Id, ::xml_schema::flags (), this),
      Reason_ (Reason, ::xml_schema::flags (), this)
    {
    }

    ExclusionType::
    ExclusionType (::std::auto_ptr< Id_type >& Id,
                   ::std::auto_ptr< Reason_type >& Reason)
    : ::xml_schema::type (),
      Id_ (Id, ::xml_schema::flags (), this),
      Reason_ (Reason, ::xml_schema::flags (), this)
    {
    }

    ExclusionType::
    ExclusionType (const ExclusionType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Id_ (x.Id_, f, this),
      Reason_ (x.Reason_, f, this)
    {
    }

    ExclusionType::
    ExclusionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Id_ (f, this),
      Reason_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ExclusionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Id
        //
        if (n.name () == "Id" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          if (!Id_.present ())
          {
            this->Id_.set (r);
            continue;
          }
        }

        // Reason
        //
        if (n.name () == "Reason" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Reason_type > r (
            Reason_traits::create (i, f, this));

          if (!Reason_.present ())
          {
            this->Reason_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Id",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Reason_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Reason",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ExclusionType* ExclusionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExclusionType (*this, f, c);
    }

    ExclusionType::
    ~ExclusionType ()
    {
    }

    // StatsArrayIdType
    //

    StatsArrayIdType::
    StatsArrayIdType (const Ids_type& Ids)
    : ::xml_schema::type (),
      Ids_ (Ids, ::xml_schema::flags (), this),
      Exclusion_ (::xml_schema::flags (), this)
    {
    }

    StatsArrayIdType::
    StatsArrayIdType (::std::auto_ptr< Ids_type >& Ids)
    : ::xml_schema::type (),
      Ids_ (Ids, ::xml_schema::flags (), this),
      Exclusion_ (::xml_schema::flags (), this)
    {
    }

    StatsArrayIdType::
    StatsArrayIdType (const StatsArrayIdType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Ids_ (x.Ids_, f, this),
      Exclusion_ (x.Exclusion_, f, this)
    {
    }

    StatsArrayIdType::
    StatsArrayIdType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Ids_ (f, this),
      Exclusion_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatsArrayIdType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Ids
        //
        if (n.name () == "Ids" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Ids_type > r (
            Ids_traits::create (i, f, this));

          if (!Ids_.present ())
          {
            this->Ids_.set (r);
            continue;
          }
        }

        // Exclusion
        //
        if (n.name () == "Exclusion" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Exclusion_type > r (
            Exclusion_traits::create (i, f, this));

          this->Exclusion_.push_back (r);
          continue;
        }

        break;
      }

      if (!Ids_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Ids",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    StatsArrayIdType* StatsArrayIdType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsArrayIdType (*this, f, c);
    }

    StatsArrayIdType::
    ~StatsArrayIdType ()
    {
    }

    // StatsEvalStatusEnumType
    //

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_StatsEvalStatusEnumType_convert ();
    }

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_StatsEvalStatusEnumType_convert ();
    }

    StatsEvalStatusEnumType::
    StatsEvalStatusEnumType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_StatsEvalStatusEnumType_convert ();
    }

    StatsEvalStatusEnumType* StatsEvalStatusEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsEvalStatusEnumType (*this, f, c);
    }

    StatsEvalStatusEnumType::value StatsEvalStatusEnumType::
    _xsd_StatsEvalStatusEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StatsEvalStatusEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_StatsEvalStatusEnumType_indexes_,
                        _xsd_StatsEvalStatusEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_StatsEvalStatusEnumType_indexes_ + 4 || _xsd_StatsEvalStatusEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const StatsEvalStatusEnumType::
    _xsd_StatsEvalStatusEnumType_literals_[4] =
    {
      "PASS",
      "FAIL",
      "INFORMATIONAL",
      "UNDEFINED"
    };

    const StatsEvalStatusEnumType::value StatsEvalStatusEnumType::
    _xsd_StatsEvalStatusEnumType_indexes_[4] =
    {
      ::xsd::qif2::StatsEvalStatusEnumType::FAIL,
      ::xsd::qif2::StatsEvalStatusEnumType::INFORMATIONAL,
      ::xsd::qif2::StatsEvalStatusEnumType::PASS,
      ::xsd::qif2::StatsEvalStatusEnumType::UNDEFINED
    };

    // StatsEvalStatusType
    //

    StatsEvalStatusType::
    StatsEvalStatusType ()
    : ::xml_schema::type (),
      StatsEvalStatusEnum_ (::xml_schema::flags (), this),
      OtherStatsEvalStatus_ (::xml_schema::flags (), this)
    {
    }

    StatsEvalStatusType::
    StatsEvalStatusType (const StatsEvalStatusType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      StatsEvalStatusEnum_ (x.StatsEvalStatusEnum_, f, this),
      OtherStatsEvalStatus_ (x.OtherStatsEvalStatus_, f, this)
    {
    }

    StatsEvalStatusType::
    StatsEvalStatusType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      StatsEvalStatusEnum_ (f, this),
      OtherStatsEvalStatus_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatsEvalStatusType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StatsEvalStatusEnum
        //
        if (n.name () == "StatsEvalStatusEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StatsEvalStatusEnum_type > r (
            StatsEvalStatusEnum_traits::create (i, f, this));

          if (!this->StatsEvalStatusEnum_)
          {
            this->StatsEvalStatusEnum_.set (r);
            continue;
          }
        }

        // OtherStatsEvalStatus
        //
        if (n.name () == "OtherStatsEvalStatus" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherStatsEvalStatus_type > r (
            OtherStatsEvalStatus_traits::create (i, f, this));

          if (!this->OtherStatsEvalStatus_)
          {
            this->OtherStatsEvalStatus_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StatsEvalStatusType* StatsEvalStatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsEvalStatusType (*this, f, c);
    }

    StatsEvalStatusType::
    ~StatsEvalStatusType ()
    {
    }

    // OneSidedCapabilityCalculationEnumType
    //

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_OneSidedCapabilityCalculationEnumType_convert ();
    }

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_OneSidedCapabilityCalculationEnumType_convert ();
    }

    OneSidedCapabilityCalculationEnumType::
    OneSidedCapabilityCalculationEnumType (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_OneSidedCapabilityCalculationEnumType_convert ();
    }

    OneSidedCapabilityCalculationEnumType* OneSidedCapabilityCalculationEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OneSidedCapabilityCalculationEnumType (*this, f, c);
    }

    OneSidedCapabilityCalculationEnumType::value OneSidedCapabilityCalculationEnumType::
    _xsd_OneSidedCapabilityCalculationEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OneSidedCapabilityCalculationEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_OneSidedCapabilityCalculationEnumType_indexes_,
                        _xsd_OneSidedCapabilityCalculationEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_OneSidedCapabilityCalculationEnumType_indexes_ + 2 || _xsd_OneSidedCapabilityCalculationEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const OneSidedCapabilityCalculationEnumType::
    _xsd_OneSidedCapabilityCalculationEnumType_literals_[2] =
    {
      "THREE_SIGMA",
      "SIX_SIGMA"
    };

    const OneSidedCapabilityCalculationEnumType::value OneSidedCapabilityCalculationEnumType::
    _xsd_OneSidedCapabilityCalculationEnumType_indexes_[2] =
    {
      ::xsd::qif2::OneSidedCapabilityCalculationEnumType::SIX_SIGMA,
      ::xsd::qif2::OneSidedCapabilityCalculationEnumType::THREE_SIGMA
    };

    // PositionCapabilityCalculationEnumType
    //

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_PositionCapabilityCalculationEnumType_convert ();
    }

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const ::xercesc::DOMAttr& a,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_PositionCapabilityCalculationEnumType_convert ();
    }

    PositionCapabilityCalculationEnumType::
    PositionCapabilityCalculationEnumType (const ::std::string& s,
                                           const ::xercesc::DOMElement* e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_PositionCapabilityCalculationEnumType_convert ();
    }

    PositionCapabilityCalculationEnumType* PositionCapabilityCalculationEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCapabilityCalculationEnumType (*this, f, c);
    }

    PositionCapabilityCalculationEnumType::value PositionCapabilityCalculationEnumType::
    _xsd_PositionCapabilityCalculationEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PositionCapabilityCalculationEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PositionCapabilityCalculationEnumType_indexes_,
                        _xsd_PositionCapabilityCalculationEnumType_indexes_ + 4,
                        *this,
                        c));

      if (i == _xsd_PositionCapabilityCalculationEnumType_indexes_ + 4 || _xsd_PositionCapabilityCalculationEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const PositionCapabilityCalculationEnumType::
    _xsd_PositionCapabilityCalculationEnumType_literals_[4] =
    {
      "THREE_SIGMA",
      "SIX_SIGMA",
      "BIVARIATE",
      "TRIVARIATE"
    };

    const PositionCapabilityCalculationEnumType::value PositionCapabilityCalculationEnumType::
    _xsd_PositionCapabilityCalculationEnumType_indexes_[4] =
    {
      ::xsd::qif2::PositionCapabilityCalculationEnumType::BIVARIATE,
      ::xsd::qif2::PositionCapabilityCalculationEnumType::SIX_SIGMA,
      ::xsd::qif2::PositionCapabilityCalculationEnumType::THREE_SIGMA,
      ::xsd::qif2::PositionCapabilityCalculationEnumType::TRIVARIATE
    };

    // DistributionTransformationEnumType
    //

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_DistributionTransformationEnumType_convert ();
    }

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_DistributionTransformationEnumType_convert ();
    }

    DistributionTransformationEnumType::
    DistributionTransformationEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_DistributionTransformationEnumType_convert ();
    }

    DistributionTransformationEnumType* DistributionTransformationEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistributionTransformationEnumType (*this, f, c);
    }

    DistributionTransformationEnumType::value DistributionTransformationEnumType::
    _xsd_DistributionTransformationEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DistributionTransformationEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_DistributionTransformationEnumType_indexes_,
                        _xsd_DistributionTransformationEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_DistributionTransformationEnumType_indexes_ + 3 || _xsd_DistributionTransformationEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const DistributionTransformationEnumType::
    _xsd_DistributionTransformationEnumType_literals_[3] =
    {
      "LOGNORMAL",
      "BOUNDED",
      "UNBOUNDED"
    };

    const DistributionTransformationEnumType::value DistributionTransformationEnumType::
    _xsd_DistributionTransformationEnumType_indexes_[3] =
    {
      ::xsd::qif2::DistributionTransformationEnumType::BOUNDED,
      ::xsd::qif2::DistributionTransformationEnumType::LOGNORMAL,
      ::xsd::qif2::DistributionTransformationEnumType::UNBOUNDED
    };

    // DistributionTransformationType
    //

    DistributionTransformationType::
    DistributionTransformationType ()
    : ::xml_schema::type (),
      DistributionTransformationEnum_ (::xml_schema::flags (), this),
      BoxCoxTransformation_ (::xml_schema::flags (), this),
      OtherDistributionTransformation_ (::xml_schema::flags (), this)
    {
    }

    DistributionTransformationType::
    DistributionTransformationType (const DistributionTransformationType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DistributionTransformationEnum_ (x.DistributionTransformationEnum_, f, this),
      BoxCoxTransformation_ (x.BoxCoxTransformation_, f, this),
      OtherDistributionTransformation_ (x.OtherDistributionTransformation_, f, this)
    {
    }

    DistributionTransformationType::
    DistributionTransformationType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DistributionTransformationEnum_ (f, this),
      BoxCoxTransformation_ (f, this),
      OtherDistributionTransformation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void DistributionTransformationType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DistributionTransformationEnum
        //
        if (n.name () == "DistributionTransformationEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DistributionTransformationEnum_type > r (
            DistributionTransformationEnum_traits::create (i, f, this));

          if (!this->DistributionTransformationEnum_)
          {
            this->DistributionTransformationEnum_.set (r);
            continue;
          }
        }

        // BoxCoxTransformation
        //
        if (n.name () == "BoxCoxTransformation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->BoxCoxTransformation_)
          {
            this->BoxCoxTransformation_.set (BoxCoxTransformation_traits::create (i, f, this));
            continue;
          }
        }

        // OtherDistributionTransformation
        //
        if (n.name () == "OtherDistributionTransformation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherDistributionTransformation_type > r (
            OtherDistributionTransformation_traits::create (i, f, this));

          if (!this->OtherDistributionTransformation_)
          {
            this->OtherDistributionTransformation_.set (r);
            continue;
          }
        }

        break;
      }
    }

    DistributionTransformationType* DistributionTransformationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistributionTransformationType (*this, f, c);
    }

    DistributionTransformationType::
    ~DistributionTransformationType ()
    {
    }

    // ActualSubgroupType
    //

    ActualSubgroupType::
    ActualSubgroupType (const ActualIds_type& ActualIds,
                        const id_type& id)
    : ::xml_schema::type (),
      ActualIds_ (ActualIds, ::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    ActualSubgroupType::
    ActualSubgroupType (::std::auto_ptr< ActualIds_type >& ActualIds,
                        const id_type& id)
    : ::xml_schema::type (),
      ActualIds_ (ActualIds, ::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    ActualSubgroupType::
    ActualSubgroupType (const ActualSubgroupType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ActualIds_ (x.ActualIds_, f, this),
      id_ (x.id_, f, this)
    {
    }

    ActualSubgroupType::
    ActualSubgroupType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ActualIds_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ActualSubgroupType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ActualIds
        //
        if (n.name () == "ActualIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualIds_type > r (
            ActualIds_traits::create (i, f, this));

          if (!ActualIds_.present ())
          {
            this->ActualIds_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ActualIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ActualIds",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    ActualSubgroupType* ActualSubgroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualSubgroupType (*this, f, c);
    }

    ActualSubgroupType::
    ~ActualSubgroupType ()
    {
    }

    // CharacteristicStatsEvalBaseType
    //

    CharacteristicStatsEvalBaseType::
    CharacteristicStatsEvalBaseType (const Status_type& Status)
    : ::xml_schema::type (),
      Attributes_ (::xml_schema::flags (), this),
      ActualIds_ (::xml_schema::flags (), this),
      Subgroup_ (::xml_schema::flags (), this),
      Status_ (Status, ::xml_schema::flags (), this),
      StudyIssue_ (::xml_schema::flags (), this),
      DistributionTransformation_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicStatsEvalBaseType::
    CharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >& Status)
    : ::xml_schema::type (),
      Attributes_ (::xml_schema::flags (), this),
      ActualIds_ (::xml_schema::flags (), this),
      Subgroup_ (::xml_schema::flags (), this),
      Status_ (Status, ::xml_schema::flags (), this),
      StudyIssue_ (::xml_schema::flags (), this),
      DistributionTransformation_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicStatsEvalBaseType::
    CharacteristicStatsEvalBaseType (const CharacteristicStatsEvalBaseType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      ActualIds_ (x.ActualIds_, f, this),
      Subgroup_ (x.Subgroup_, f, this),
      Status_ (x.Status_, f, this),
      StudyIssue_ (x.StudyIssue_, f, this),
      DistributionTransformation_ (x.DistributionTransformation_, f, this)
    {
    }

    CharacteristicStatsEvalBaseType::
    CharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (f, this),
      ActualIds_ (f, this),
      Subgroup_ (f, this),
      Status_ (f, this),
      StudyIssue_ (f, this),
      DistributionTransformation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicStatsEvalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // ActualIds
        //
        if (n.name () == "ActualIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualIds_type > r (
            ActualIds_traits::create (i, f, this));

          if (!this->ActualIds_)
          {
            this->ActualIds_.set (r);
            continue;
          }
        }

        // Subgroup
        //
        if (n.name () == "Subgroup" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Subgroup_type > r (
            Subgroup_traits::create (i, f, this));

          this->Subgroup_.push_back (r);
          continue;
        }

        // Status
        //
        if (n.name () == "Status" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (r);
            continue;
          }
        }

        // StudyIssue
        //
        if (n.name () == "StudyIssue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StudyIssue_type > r (
            StudyIssue_traits::create (i, f, this));

          if (!this->StudyIssue_)
          {
            this->StudyIssue_.set (r);
            continue;
          }
        }

        // DistributionTransformation
        //
        if (n.name () == "DistributionTransformation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DistributionTransformation_type > r (
            DistributionTransformation_traits::create (i, f, this));

          if (!this->DistributionTransformation_)
          {
            this->DistributionTransformation_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicStatsEvalBaseType* CharacteristicStatsEvalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicStatsEvalBaseType (*this, f, c);
    }

    CharacteristicStatsEvalBaseType::
    ~CharacteristicStatsEvalBaseType ()
    {
    }

    // StatsBaseType
    //

    StatsBaseType::
    StatsBaseType ()
    : ::xml_schema::type (),
      TotalNumber_ (::xml_schema::flags (), this),
      SubgroupTotalNumber_ (::xml_schema::flags (), this),
      EffectiveNumber_ (::xml_schema::flags (), this),
      SubgroupEffectiveNumber_ (::xml_schema::flags (), this),
      NumberSubgroups_ (::xml_schema::flags (), this)
    {
    }

    StatsBaseType::
    StatsBaseType (const StatsBaseType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      TotalNumber_ (x.TotalNumber_, f, this),
      SubgroupTotalNumber_ (x.SubgroupTotalNumber_, f, this),
      EffectiveNumber_ (x.EffectiveNumber_, f, this),
      SubgroupEffectiveNumber_ (x.SubgroupEffectiveNumber_, f, this),
      NumberSubgroups_ (x.NumberSubgroups_, f, this)
    {
    }

    StatsBaseType::
    StatsBaseType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      TotalNumber_ (f, this),
      SubgroupTotalNumber_ (f, this),
      EffectiveNumber_ (f, this),
      SubgroupEffectiveNumber_ (f, this),
      NumberSubgroups_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatsBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TotalNumber
        //
        if (n.name () == "TotalNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->TotalNumber_)
          {
            this->TotalNumber_.set (TotalNumber_traits::create (i, f, this));
            continue;
          }
        }

        // SubgroupTotalNumber
        //
        if (n.name () == "SubgroupTotalNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupTotalNumber_type > r (
            SubgroupTotalNumber_traits::create (i, f, this));

          this->SubgroupTotalNumber_.push_back (r);
          continue;
        }

        // EffectiveNumber
        //
        if (n.name () == "EffectiveNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->EffectiveNumber_)
          {
            this->EffectiveNumber_.set (EffectiveNumber_traits::create (i, f, this));
            continue;
          }
        }

        // SubgroupEffectiveNumber
        //
        if (n.name () == "SubgroupEffectiveNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupEffectiveNumber_type > r (
            SubgroupEffectiveNumber_traits::create (i, f, this));

          this->SubgroupEffectiveNumber_.push_back (r);
          continue;
        }

        // NumberSubgroups
        //
        if (n.name () == "NumberSubgroups" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NumberSubgroups_)
          {
            this->NumberSubgroups_.set (NumberSubgroups_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    StatsBaseType* StatsBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsBaseType (*this, f, c);
    }

    StatsBaseType::
    ~StatsBaseType ()
    {
    }

    // StatsNumericalBaseType
    //

    StatsNumericalBaseType::
    StatsNumericalBaseType ()
    : ::xsd::qif2::StatsBaseType (),
      Average_ (::xml_schema::flags (), this),
      SubgroupAverage_ (::xml_schema::flags (), this),
      Difference_ (::xml_schema::flags (), this),
      SubgroupDifference_ (::xml_schema::flags (), this),
      RootMeanSquare_ (::xml_schema::flags (), this),
      Maximum_ (::xml_schema::flags (), this),
      MaximumId_ (::xml_schema::flags (), this),
      SubgroupMaximum_ (::xml_schema::flags (), this),
      Minimum_ (::xml_schema::flags (), this),
      MinimumId_ (::xml_schema::flags (), this),
      SubgroupMinimum_ (::xml_schema::flags (), this),
      Range_ (::xml_schema::flags (), this),
      SubgroupRange_ (::xml_schema::flags (), this),
      AverageRange_ (::xml_schema::flags (), this),
      StandardDeviation_ (::xml_schema::flags (), this),
      Skew_ (::xml_schema::flags (), this),
      Kurtosis_ (::xml_schema::flags (), this),
      Normality_ (::xml_schema::flags (), this),
      ProcessVariation_ (::xml_schema::flags (), this),
      EstimatedStandardDeviation_ (::xml_schema::flags (), this),
      UpperControlLimit_ (::xml_schema::flags (), this),
      LowerControlLimit_ (::xml_schema::flags (), this),
      UpperControlLimitRange_ (::xml_schema::flags (), this),
      LowerControlLimitRange_ (::xml_schema::flags (), this),
      NumberOutOfControl_ (::xml_schema::flags (), this),
      OutOfControlIds_ (::xml_schema::flags (), this),
      AppraiserVariation_ (::xml_schema::flags (), this),
      EquipmentVariation_ (::xml_schema::flags (), this),
      Interaction_ (::xml_schema::flags (), this),
      GageRandR_ (::xml_schema::flags (), this),
      PartVariation_ (::xml_schema::flags (), this),
      TotalVariation_ (::xml_schema::flags (), this),
      Linearity_ (::xml_schema::flags (), this),
      Bias_ (::xml_schema::flags (), this),
      RelativeLinearity_ (::xml_schema::flags (), this),
      RelativeBias_ (::xml_schema::flags (), this),
      GoodnessOfFit_ (::xml_schema::flags (), this),
      RegressionSlope_ (::xml_schema::flags (), this),
      RegressionIntercept_ (::xml_schema::flags (), this),
      UpperConfidenceLimit_ (::xml_schema::flags (), this),
      LowerConfidenceLimit_ (::xml_schema::flags (), this),
      TDistribution_ (::xml_schema::flags (), this)
    {
    }

    StatsNumericalBaseType::
    StatsNumericalBaseType (const StatsNumericalBaseType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatsBaseType (x, f, c),
      Average_ (x.Average_, f, this),
      SubgroupAverage_ (x.SubgroupAverage_, f, this),
      Difference_ (x.Difference_, f, this),
      SubgroupDifference_ (x.SubgroupDifference_, f, this),
      RootMeanSquare_ (x.RootMeanSquare_, f, this),
      Maximum_ (x.Maximum_, f, this),
      MaximumId_ (x.MaximumId_, f, this),
      SubgroupMaximum_ (x.SubgroupMaximum_, f, this),
      Minimum_ (x.Minimum_, f, this),
      MinimumId_ (x.MinimumId_, f, this),
      SubgroupMinimum_ (x.SubgroupMinimum_, f, this),
      Range_ (x.Range_, f, this),
      SubgroupRange_ (x.SubgroupRange_, f, this),
      AverageRange_ (x.AverageRange_, f, this),
      StandardDeviation_ (x.StandardDeviation_, f, this),
      Skew_ (x.Skew_, f, this),
      Kurtosis_ (x.Kurtosis_, f, this),
      Normality_ (x.Normality_, f, this),
      ProcessVariation_ (x.ProcessVariation_, f, this),
      EstimatedStandardDeviation_ (x.EstimatedStandardDeviation_, f, this),
      UpperControlLimit_ (x.UpperControlLimit_, f, this),
      LowerControlLimit_ (x.LowerControlLimit_, f, this),
      UpperControlLimitRange_ (x.UpperControlLimitRange_, f, this),
      LowerControlLimitRange_ (x.LowerControlLimitRange_, f, this),
      NumberOutOfControl_ (x.NumberOutOfControl_, f, this),
      OutOfControlIds_ (x.OutOfControlIds_, f, this),
      AppraiserVariation_ (x.AppraiserVariation_, f, this),
      EquipmentVariation_ (x.EquipmentVariation_, f, this),
      Interaction_ (x.Interaction_, f, this),
      GageRandR_ (x.GageRandR_, f, this),
      PartVariation_ (x.PartVariation_, f, this),
      TotalVariation_ (x.TotalVariation_, f, this),
      Linearity_ (x.Linearity_, f, this),
      Bias_ (x.Bias_, f, this),
      RelativeLinearity_ (x.RelativeLinearity_, f, this),
      RelativeBias_ (x.RelativeBias_, f, this),
      GoodnessOfFit_ (x.GoodnessOfFit_, f, this),
      RegressionSlope_ (x.RegressionSlope_, f, this),
      RegressionIntercept_ (x.RegressionIntercept_, f, this),
      UpperConfidenceLimit_ (x.UpperConfidenceLimit_, f, this),
      LowerConfidenceLimit_ (x.LowerConfidenceLimit_, f, this),
      TDistribution_ (x.TDistribution_, f, this)
    {
    }

    StatsNumericalBaseType::
    StatsNumericalBaseType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatsBaseType (e, f | ::xml_schema::flags::base, c),
      Average_ (f, this),
      SubgroupAverage_ (f, this),
      Difference_ (f, this),
      SubgroupDifference_ (f, this),
      RootMeanSquare_ (f, this),
      Maximum_ (f, this),
      MaximumId_ (f, this),
      SubgroupMaximum_ (f, this),
      Minimum_ (f, this),
      MinimumId_ (f, this),
      SubgroupMinimum_ (f, this),
      Range_ (f, this),
      SubgroupRange_ (f, this),
      AverageRange_ (f, this),
      StandardDeviation_ (f, this),
      Skew_ (f, this),
      Kurtosis_ (f, this),
      Normality_ (f, this),
      ProcessVariation_ (f, this),
      EstimatedStandardDeviation_ (f, this),
      UpperControlLimit_ (f, this),
      LowerControlLimit_ (f, this),
      UpperControlLimitRange_ (f, this),
      LowerControlLimitRange_ (f, this),
      NumberOutOfControl_ (f, this),
      OutOfControlIds_ (f, this),
      AppraiserVariation_ (f, this),
      EquipmentVariation_ (f, this),
      Interaction_ (f, this),
      GageRandR_ (f, this),
      PartVariation_ (f, this),
      TotalVariation_ (f, this),
      Linearity_ (f, this),
      Bias_ (f, this),
      RelativeLinearity_ (f, this),
      RelativeBias_ (f, this),
      GoodnessOfFit_ (f, this),
      RegressionSlope_ (f, this),
      RegressionIntercept_ (f, this),
      UpperConfidenceLimit_ (f, this),
      LowerConfidenceLimit_ (f, this),
      TDistribution_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatsNumericalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Average
        //
        if (n.name () == "Average" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Average_type > r (
            Average_traits::create (i, f, this));

          if (!this->Average_)
          {
            this->Average_.set (r);
            continue;
          }
        }

        // SubgroupAverage
        //
        if (n.name () == "SubgroupAverage" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupAverage_type > r (
            SubgroupAverage_traits::create (i, f, this));

          this->SubgroupAverage_.push_back (r);
          continue;
        }

        // Difference
        //
        if (n.name () == "Difference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Difference_type > r (
            Difference_traits::create (i, f, this));

          if (!this->Difference_)
          {
            this->Difference_.set (r);
            continue;
          }
        }

        // SubgroupDifference
        //
        if (n.name () == "SubgroupDifference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupDifference_type > r (
            SubgroupDifference_traits::create (i, f, this));

          this->SubgroupDifference_.push_back (r);
          continue;
        }

        // RootMeanSquare
        //
        if (n.name () == "RootMeanSquare" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RootMeanSquare_type > r (
            RootMeanSquare_traits::create (i, f, this));

          if (!this->RootMeanSquare_)
          {
            this->RootMeanSquare_.set (r);
            continue;
          }
        }

        // Maximum
        //
        if (n.name () == "Maximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Maximum_type > r (
            Maximum_traits::create (i, f, this));

          if (!this->Maximum_)
          {
            this->Maximum_.set (r);
            continue;
          }
        }

        // MaximumId
        //
        if (n.name () == "MaximumId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumId_type > r (
            MaximumId_traits::create (i, f, this));

          if (!this->MaximumId_)
          {
            this->MaximumId_.set (r);
            continue;
          }
        }

        // SubgroupMaximum
        //
        if (n.name () == "SubgroupMaximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupMaximum_type > r (
            SubgroupMaximum_traits::create (i, f, this));

          if (!this->SubgroupMaximum_)
          {
            this->SubgroupMaximum_.set (r);
            continue;
          }
        }

        // Minimum
        //
        if (n.name () == "Minimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Minimum_type > r (
            Minimum_traits::create (i, f, this));

          if (!this->Minimum_)
          {
            this->Minimum_.set (r);
            continue;
          }
        }

        // MinimumId
        //
        if (n.name () == "MinimumId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinimumId_type > r (
            MinimumId_traits::create (i, f, this));

          if (!this->MinimumId_)
          {
            this->MinimumId_.set (r);
            continue;
          }
        }

        // SubgroupMinimum
        //
        if (n.name () == "SubgroupMinimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupMinimum_type > r (
            SubgroupMinimum_traits::create (i, f, this));

          if (!this->SubgroupMinimum_)
          {
            this->SubgroupMinimum_.set (r);
            continue;
          }
        }

        // Range
        //
        if (n.name () == "Range" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Range_type > r (
            Range_traits::create (i, f, this));

          if (!this->Range_)
          {
            this->Range_.set (r);
            continue;
          }
        }

        // SubgroupRange
        //
        if (n.name () == "SubgroupRange" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupRange_type > r (
            SubgroupRange_traits::create (i, f, this));

          if (!this->SubgroupRange_)
          {
            this->SubgroupRange_.set (r);
            continue;
          }
        }

        // AverageRange
        //
        if (n.name () == "AverageRange" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AverageRange_type > r (
            AverageRange_traits::create (i, f, this));

          if (!this->AverageRange_)
          {
            this->AverageRange_.set (r);
            continue;
          }
        }

        // StandardDeviation
        //
        if (n.name () == "StandardDeviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StandardDeviation_type > r (
            StandardDeviation_traits::create (i, f, this));

          if (!this->StandardDeviation_)
          {
            this->StandardDeviation_.set (r);
            continue;
          }
        }

        // Skew
        //
        if (n.name () == "Skew" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Skew_type > r (
            Skew_traits::create (i, f, this));

          if (!this->Skew_)
          {
            this->Skew_.set (r);
            continue;
          }
        }

        // Kurtosis
        //
        if (n.name () == "Kurtosis" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Kurtosis_type > r (
            Kurtosis_traits::create (i, f, this));

          if (!this->Kurtosis_)
          {
            this->Kurtosis_.set (r);
            continue;
          }
        }

        // Normality
        //
        if (n.name () == "Normality" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Normality_type > r (
            Normality_traits::create (i, f, this));

          if (!this->Normality_)
          {
            this->Normality_.set (r);
            continue;
          }
        }

        // ProcessVariation
        //
        if (n.name () == "ProcessVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ProcessVariation_type > r (
            ProcessVariation_traits::create (i, f, this));

          if (!this->ProcessVariation_)
          {
            this->ProcessVariation_.set (r);
            continue;
          }
        }

        // EstimatedStandardDeviation
        //
        if (n.name () == "EstimatedStandardDeviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EstimatedStandardDeviation_type > r (
            EstimatedStandardDeviation_traits::create (i, f, this));

          if (!this->EstimatedStandardDeviation_)
          {
            this->EstimatedStandardDeviation_.set (r);
            continue;
          }
        }

        // UpperControlLimit
        //
        if (n.name () == "UpperControlLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UpperControlLimit_type > r (
            UpperControlLimit_traits::create (i, f, this));

          if (!this->UpperControlLimit_)
          {
            this->UpperControlLimit_.set (r);
            continue;
          }
        }

        // LowerControlLimit
        //
        if (n.name () == "LowerControlLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LowerControlLimit_type > r (
            LowerControlLimit_traits::create (i, f, this));

          if (!this->LowerControlLimit_)
          {
            this->LowerControlLimit_.set (r);
            continue;
          }
        }

        // UpperControlLimitRange
        //
        if (n.name () == "UpperControlLimitRange" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UpperControlLimitRange_type > r (
            UpperControlLimitRange_traits::create (i, f, this));

          if (!this->UpperControlLimitRange_)
          {
            this->UpperControlLimitRange_.set (r);
            continue;
          }
        }

        // LowerControlLimitRange
        //
        if (n.name () == "LowerControlLimitRange" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LowerControlLimitRange_type > r (
            LowerControlLimitRange_traits::create (i, f, this));

          if (!this->LowerControlLimitRange_)
          {
            this->LowerControlLimitRange_.set (r);
            continue;
          }
        }

        // NumberOutOfControl
        //
        if (n.name () == "NumberOutOfControl" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NumberOutOfControl_)
          {
            this->NumberOutOfControl_.set (NumberOutOfControl_traits::create (i, f, this));
            continue;
          }
        }

        // OutOfControlIds
        //
        if (n.name () == "OutOfControlIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OutOfControlIds_type > r (
            OutOfControlIds_traits::create (i, f, this));

          if (!this->OutOfControlIds_)
          {
            this->OutOfControlIds_.set (r);
            continue;
          }
        }

        // AppraiserVariation
        //
        if (n.name () == "AppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AppraiserVariation_type > r (
            AppraiserVariation_traits::create (i, f, this));

          if (!this->AppraiserVariation_)
          {
            this->AppraiserVariation_.set (r);
            continue;
          }
        }

        // EquipmentVariation
        //
        if (n.name () == "EquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EquipmentVariation_type > r (
            EquipmentVariation_traits::create (i, f, this));

          if (!this->EquipmentVariation_)
          {
            this->EquipmentVariation_.set (r);
            continue;
          }
        }

        // Interaction
        //
        if (n.name () == "Interaction" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Interaction_type > r (
            Interaction_traits::create (i, f, this));

          if (!this->Interaction_)
          {
            this->Interaction_.set (r);
            continue;
          }
        }

        // GageRandR
        //
        if (n.name () == "GageRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< GageRandR_type > r (
            GageRandR_traits::create (i, f, this));

          if (!this->GageRandR_)
          {
            this->GageRandR_.set (r);
            continue;
          }
        }

        // PartVariation
        //
        if (n.name () == "PartVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PartVariation_type > r (
            PartVariation_traits::create (i, f, this));

          if (!this->PartVariation_)
          {
            this->PartVariation_.set (r);
            continue;
          }
        }

        // TotalVariation
        //
        if (n.name () == "TotalVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TotalVariation_type > r (
            TotalVariation_traits::create (i, f, this));

          if (!this->TotalVariation_)
          {
            this->TotalVariation_.set (r);
            continue;
          }
        }

        // Linearity
        //
        if (n.name () == "Linearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Linearity_type > r (
            Linearity_traits::create (i, f, this));

          if (!this->Linearity_)
          {
            this->Linearity_.set (r);
            continue;
          }
        }

        // Bias
        //
        if (n.name () == "Bias" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Bias_type > r (
            Bias_traits::create (i, f, this));

          if (!this->Bias_)
          {
            this->Bias_.set (r);
            continue;
          }
        }

        // RelativeLinearity
        //
        if (n.name () == "RelativeLinearity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeLinearity_type > r (
            RelativeLinearity_traits::create (i, f, this));

          if (!this->RelativeLinearity_)
          {
            this->RelativeLinearity_.set (r);
            continue;
          }
        }

        // RelativeBias
        //
        if (n.name () == "RelativeBias" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeBias_type > r (
            RelativeBias_traits::create (i, f, this));

          if (!this->RelativeBias_)
          {
            this->RelativeBias_.set (r);
            continue;
          }
        }

        // GoodnessOfFit
        //
        if (n.name () == "GoodnessOfFit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< GoodnessOfFit_type > r (
            GoodnessOfFit_traits::create (i, f, this));

          if (!this->GoodnessOfFit_)
          {
            this->GoodnessOfFit_.set (r);
            continue;
          }
        }

        // RegressionSlope
        //
        if (n.name () == "RegressionSlope" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RegressionSlope_type > r (
            RegressionSlope_traits::create (i, f, this));

          if (!this->RegressionSlope_)
          {
            this->RegressionSlope_.set (r);
            continue;
          }
        }

        // RegressionIntercept
        //
        if (n.name () == "RegressionIntercept" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RegressionIntercept_type > r (
            RegressionIntercept_traits::create (i, f, this));

          if (!this->RegressionIntercept_)
          {
            this->RegressionIntercept_.set (r);
            continue;
          }
        }

        // UpperConfidenceLimit
        //
        if (n.name () == "UpperConfidenceLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UpperConfidenceLimit_type > r (
            UpperConfidenceLimit_traits::create (i, f, this));

          if (!this->UpperConfidenceLimit_)
          {
            this->UpperConfidenceLimit_.set (r);
            continue;
          }
        }

        // LowerConfidenceLimit
        //
        if (n.name () == "LowerConfidenceLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LowerConfidenceLimit_type > r (
            LowerConfidenceLimit_traits::create (i, f, this));

          if (!this->LowerConfidenceLimit_)
          {
            this->LowerConfidenceLimit_.set (r);
            continue;
          }
        }

        // TDistribution
        //
        if (n.name () == "TDistribution" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TDistribution_type > r (
            TDistribution_traits::create (i, f, this));

          if (!this->TDistribution_)
          {
            this->TDistribution_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StatsNumericalBaseType* StatsNumericalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsNumericalBaseType (*this, f, c);
    }

    StatsNumericalBaseType::
    ~StatsNumericalBaseType ()
    {
    }

    // StatsWithTolNumericalBaseType
    //

    StatsWithTolNumericalBaseType::
    StatsWithTolNumericalBaseType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      NumberOutOfTolerance_ (::xml_schema::flags (), this),
      OutOfToleranceIds_ (::xml_schema::flags (), this),
      SubgroupNumberOutOfTolerance_ (::xml_schema::flags (), this),
      NumberOverUpperTolerance_ (::xml_schema::flags (), this),
      OverUpperToleranceIds_ (::xml_schema::flags (), this),
      SubgroupNumberOverUpperTolerance_ (::xml_schema::flags (), this),
      NumberUnderLowerTolerance_ (::xml_schema::flags (), this),
      UnderLowerToleranceIds_ (::xml_schema::flags (), this),
      SubgroupNumberUnderLowerTolerance_ (::xml_schema::flags (), this),
      Cp_ (::xml_schema::flags (), this),
      Cpk_ (::xml_schema::flags (), this),
      Pp_ (::xml_schema::flags (), this),
      Ppk_ (::xml_schema::flags (), this),
      Cm_ (::xml_schema::flags (), this),
      Cmk_ (::xml_schema::flags (), this),
      RelativeAppraiserVariation_ (::xml_schema::flags (), this),
      RelativeEquipmentVariation_ (::xml_schema::flags (), this),
      RelativeInteraction_ (::xml_schema::flags (), this),
      RelativeGageRandR_ (::xml_schema::flags (), this),
      RelativePartVariation_ (::xml_schema::flags (), this),
      RelativeTotalVariation_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolNumericalBaseType::
    StatsWithTolNumericalBaseType (const StatsWithTolNumericalBaseType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      NumberOutOfTolerance_ (x.NumberOutOfTolerance_, f, this),
      OutOfToleranceIds_ (x.OutOfToleranceIds_, f, this),
      SubgroupNumberOutOfTolerance_ (x.SubgroupNumberOutOfTolerance_, f, this),
      NumberOverUpperTolerance_ (x.NumberOverUpperTolerance_, f, this),
      OverUpperToleranceIds_ (x.OverUpperToleranceIds_, f, this),
      SubgroupNumberOverUpperTolerance_ (x.SubgroupNumberOverUpperTolerance_, f, this),
      NumberUnderLowerTolerance_ (x.NumberUnderLowerTolerance_, f, this),
      UnderLowerToleranceIds_ (x.UnderLowerToleranceIds_, f, this),
      SubgroupNumberUnderLowerTolerance_ (x.SubgroupNumberUnderLowerTolerance_, f, this),
      Cp_ (x.Cp_, f, this),
      Cpk_ (x.Cpk_, f, this),
      Pp_ (x.Pp_, f, this),
      Ppk_ (x.Ppk_, f, this),
      Cm_ (x.Cm_, f, this),
      Cmk_ (x.Cmk_, f, this),
      RelativeAppraiserVariation_ (x.RelativeAppraiserVariation_, f, this),
      RelativeEquipmentVariation_ (x.RelativeEquipmentVariation_, f, this),
      RelativeInteraction_ (x.RelativeInteraction_, f, this),
      RelativeGageRandR_ (x.RelativeGageRandR_, f, this),
      RelativePartVariation_ (x.RelativePartVariation_, f, this),
      RelativeTotalVariation_ (x.RelativeTotalVariation_, f, this)
    {
    }

    StatsWithTolNumericalBaseType::
    StatsWithTolNumericalBaseType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      NumberOutOfTolerance_ (f, this),
      OutOfToleranceIds_ (f, this),
      SubgroupNumberOutOfTolerance_ (f, this),
      NumberOverUpperTolerance_ (f, this),
      OverUpperToleranceIds_ (f, this),
      SubgroupNumberOverUpperTolerance_ (f, this),
      NumberUnderLowerTolerance_ (f, this),
      UnderLowerToleranceIds_ (f, this),
      SubgroupNumberUnderLowerTolerance_ (f, this),
      Cp_ (f, this),
      Cpk_ (f, this),
      Pp_ (f, this),
      Ppk_ (f, this),
      Cm_ (f, this),
      Cmk_ (f, this),
      RelativeAppraiserVariation_ (f, this),
      RelativeEquipmentVariation_ (f, this),
      RelativeInteraction_ (f, this),
      RelativeGageRandR_ (f, this),
      RelativePartVariation_ (f, this),
      RelativeTotalVariation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatsWithTolNumericalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // NumberOutOfTolerance
        //
        if (n.name () == "NumberOutOfTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NumberOutOfTolerance_)
          {
            this->NumberOutOfTolerance_.set (NumberOutOfTolerance_traits::create (i, f, this));
            continue;
          }
        }

        // OutOfToleranceIds
        //
        if (n.name () == "OutOfToleranceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OutOfToleranceIds_type > r (
            OutOfToleranceIds_traits::create (i, f, this));

          if (!this->OutOfToleranceIds_)
          {
            this->OutOfToleranceIds_.set (r);
            continue;
          }
        }

        // SubgroupNumberOutOfTolerance
        //
        if (n.name () == "SubgroupNumberOutOfTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupNumberOutOfTolerance_type > r (
            SubgroupNumberOutOfTolerance_traits::create (i, f, this));

          if (!this->SubgroupNumberOutOfTolerance_)
          {
            this->SubgroupNumberOutOfTolerance_.set (r);
            continue;
          }
        }

        // NumberOverUpperTolerance
        //
        if (n.name () == "NumberOverUpperTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NumberOverUpperTolerance_)
          {
            this->NumberOverUpperTolerance_.set (NumberOverUpperTolerance_traits::create (i, f, this));
            continue;
          }
        }

        // OverUpperToleranceIds
        //
        if (n.name () == "OverUpperToleranceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OverUpperToleranceIds_type > r (
            OverUpperToleranceIds_traits::create (i, f, this));

          if (!this->OverUpperToleranceIds_)
          {
            this->OverUpperToleranceIds_.set (r);
            continue;
          }
        }

        // SubgroupNumberOverUpperTolerance
        //
        if (n.name () == "SubgroupNumberOverUpperTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupNumberOverUpperTolerance_type > r (
            SubgroupNumberOverUpperTolerance_traits::create (i, f, this));

          if (!this->SubgroupNumberOverUpperTolerance_)
          {
            this->SubgroupNumberOverUpperTolerance_.set (r);
            continue;
          }
        }

        // NumberUnderLowerTolerance
        //
        if (n.name () == "NumberUnderLowerTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NumberUnderLowerTolerance_)
          {
            this->NumberUnderLowerTolerance_.set (NumberUnderLowerTolerance_traits::create (i, f, this));
            continue;
          }
        }

        // UnderLowerToleranceIds
        //
        if (n.name () == "UnderLowerToleranceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UnderLowerToleranceIds_type > r (
            UnderLowerToleranceIds_traits::create (i, f, this));

          if (!this->UnderLowerToleranceIds_)
          {
            this->UnderLowerToleranceIds_.set (r);
            continue;
          }
        }

        // SubgroupNumberUnderLowerTolerance
        //
        if (n.name () == "SubgroupNumberUnderLowerTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupNumberUnderLowerTolerance_type > r (
            SubgroupNumberUnderLowerTolerance_traits::create (i, f, this));

          if (!this->SubgroupNumberUnderLowerTolerance_)
          {
            this->SubgroupNumberUnderLowerTolerance_.set (r);
            continue;
          }
        }

        // Cp
        //
        if (n.name () == "Cp" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Cp_type > r (
            Cp_traits::create (i, f, this));

          if (!this->Cp_)
          {
            this->Cp_.set (r);
            continue;
          }
        }

        // Cpk
        //
        if (n.name () == "Cpk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Cpk_type > r (
            Cpk_traits::create (i, f, this));

          if (!this->Cpk_)
          {
            this->Cpk_.set (r);
            continue;
          }
        }

        // Pp
        //
        if (n.name () == "Pp" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Pp_type > r (
            Pp_traits::create (i, f, this));

          if (!this->Pp_)
          {
            this->Pp_.set (r);
            continue;
          }
        }

        // Ppk
        //
        if (n.name () == "Ppk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Ppk_type > r (
            Ppk_traits::create (i, f, this));

          if (!this->Ppk_)
          {
            this->Ppk_.set (r);
            continue;
          }
        }

        // Cm
        //
        if (n.name () == "Cm" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Cm_type > r (
            Cm_traits::create (i, f, this));

          if (!this->Cm_)
          {
            this->Cm_.set (r);
            continue;
          }
        }

        // Cmk
        //
        if (n.name () == "Cmk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Cmk_type > r (
            Cmk_traits::create (i, f, this));

          if (!this->Cmk_)
          {
            this->Cmk_.set (r);
            continue;
          }
        }

        // RelativeAppraiserVariation
        //
        if (n.name () == "RelativeAppraiserVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeAppraiserVariation_type > r (
            RelativeAppraiserVariation_traits::create (i, f, this));

          if (!this->RelativeAppraiserVariation_)
          {
            this->RelativeAppraiserVariation_.set (r);
            continue;
          }
        }

        // RelativeEquipmentVariation
        //
        if (n.name () == "RelativeEquipmentVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeEquipmentVariation_type > r (
            RelativeEquipmentVariation_traits::create (i, f, this));

          if (!this->RelativeEquipmentVariation_)
          {
            this->RelativeEquipmentVariation_.set (r);
            continue;
          }
        }

        // RelativeInteraction
        //
        if (n.name () == "RelativeInteraction" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeInteraction_type > r (
            RelativeInteraction_traits::create (i, f, this));

          if (!this->RelativeInteraction_)
          {
            this->RelativeInteraction_.set (r);
            continue;
          }
        }

        // RelativeGageRandR
        //
        if (n.name () == "RelativeGageRandR" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeGageRandR_type > r (
            RelativeGageRandR_traits::create (i, f, this));

          if (!this->RelativeGageRandR_)
          {
            this->RelativeGageRandR_.set (r);
            continue;
          }
        }

        // RelativePartVariation
        //
        if (n.name () == "RelativePartVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativePartVariation_type > r (
            RelativePartVariation_traits::create (i, f, this));

          if (!this->RelativePartVariation_)
          {
            this->RelativePartVariation_.set (r);
            continue;
          }
        }

        // RelativeTotalVariation
        //
        if (n.name () == "RelativeTotalVariation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RelativeTotalVariation_type > r (
            RelativeTotalVariation_traits::create (i, f, this));

          if (!this->RelativeTotalVariation_)
          {
            this->RelativeTotalVariation_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StatsWithTolNumericalBaseType* StatsWithTolNumericalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolNumericalBaseType (*this, f, c);
    }

    StatsWithTolNumericalBaseType::
    ~StatsWithTolNumericalBaseType ()
    {
    }

    // StatsWithTolLinearType
    //

    StatsWithTolLinearType::
    StatsWithTolLinearType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      linearUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolLinearType::
    StatsWithTolLinearType (const StatsWithTolLinearType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      linearUnit_ (x.linearUnit_, f, this)
    {
    }

    StatsWithTolLinearType::
    StatsWithTolLinearType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      linearUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolLinearType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "linearUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< linearUnit_type > r (
            linearUnit_traits::create (i, f, this));

          this->linearUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolLinearType* StatsWithTolLinearType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolLinearType (*this, f, c);
    }

    StatsWithTolLinearType::
    ~StatsWithTolLinearType ()
    {
    }

    // StatsWithTolAngularType
    //

    StatsWithTolAngularType::
    StatsWithTolAngularType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      angularUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolAngularType::
    StatsWithTolAngularType (const StatsWithTolAngularType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      angularUnit_ (x.angularUnit_, f, this)
    {
    }

    StatsWithTolAngularType::
    StatsWithTolAngularType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      angularUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolAngularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "angularUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< angularUnit_type > r (
            angularUnit_traits::create (i, f, this));

          this->angularUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolAngularType* StatsWithTolAngularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolAngularType (*this, f, c);
    }

    StatsWithTolAngularType::
    ~StatsWithTolAngularType ()
    {
    }

    // StatsWithTolAreaType
    //

    StatsWithTolAreaType::
    StatsWithTolAreaType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      areaUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolAreaType::
    StatsWithTolAreaType (const StatsWithTolAreaType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      areaUnit_ (x.areaUnit_, f, this)
    {
    }

    StatsWithTolAreaType::
    StatsWithTolAreaType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      areaUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolAreaType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "areaUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< areaUnit_type > r (
            areaUnit_traits::create (i, f, this));

          this->areaUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolAreaType* StatsWithTolAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolAreaType (*this, f, c);
    }

    StatsWithTolAreaType::
    ~StatsWithTolAreaType ()
    {
    }

    // StatsWithTolForceType
    //

    StatsWithTolForceType::
    StatsWithTolForceType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      forceUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolForceType::
    StatsWithTolForceType (const StatsWithTolForceType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      forceUnit_ (x.forceUnit_, f, this)
    {
    }

    StatsWithTolForceType::
    StatsWithTolForceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      forceUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolForceType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "forceUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< forceUnit_type > r (
            forceUnit_traits::create (i, f, this));

          this->forceUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolForceType* StatsWithTolForceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolForceType (*this, f, c);
    }

    StatsWithTolForceType::
    ~StatsWithTolForceType ()
    {
    }

    // StatsWithTolMassType
    //

    StatsWithTolMassType::
    StatsWithTolMassType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      massUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolMassType::
    StatsWithTolMassType (const StatsWithTolMassType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      massUnit_ (x.massUnit_, f, this)
    {
    }

    StatsWithTolMassType::
    StatsWithTolMassType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      massUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolMassType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "massUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< massUnit_type > r (
            massUnit_traits::create (i, f, this));

          this->massUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolMassType* StatsWithTolMassType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolMassType (*this, f, c);
    }

    StatsWithTolMassType::
    ~StatsWithTolMassType ()
    {
    }

    // StatsWithTolPressureType
    //

    StatsWithTolPressureType::
    StatsWithTolPressureType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      pressureUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolPressureType::
    StatsWithTolPressureType (const StatsWithTolPressureType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      pressureUnit_ (x.pressureUnit_, f, this)
    {
    }

    StatsWithTolPressureType::
    StatsWithTolPressureType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      pressureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolPressureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "pressureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< pressureUnit_type > r (
            pressureUnit_traits::create (i, f, this));

          this->pressureUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolPressureType* StatsWithTolPressureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolPressureType (*this, f, c);
    }

    StatsWithTolPressureType::
    ~StatsWithTolPressureType ()
    {
    }

    // StatsWithTolSpeedType
    //

    StatsWithTolSpeedType::
    StatsWithTolSpeedType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      speedUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolSpeedType::
    StatsWithTolSpeedType (const StatsWithTolSpeedType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      speedUnit_ (x.speedUnit_, f, this)
    {
    }

    StatsWithTolSpeedType::
    StatsWithTolSpeedType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      speedUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolSpeedType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "speedUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< speedUnit_type > r (
            speedUnit_traits::create (i, f, this));

          this->speedUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolSpeedType* StatsWithTolSpeedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolSpeedType (*this, f, c);
    }

    StatsWithTolSpeedType::
    ~StatsWithTolSpeedType ()
    {
    }

    // StatsWithTolTemperatureType
    //

    StatsWithTolTemperatureType::
    StatsWithTolTemperatureType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      temperatureUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolTemperatureType::
    StatsWithTolTemperatureType (const StatsWithTolTemperatureType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      temperatureUnit_ (x.temperatureUnit_, f, this)
    {
    }

    StatsWithTolTemperatureType::
    StatsWithTolTemperatureType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      temperatureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolTemperatureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "temperatureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< temperatureUnit_type > r (
            temperatureUnit_traits::create (i, f, this));

          this->temperatureUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolTemperatureType* StatsWithTolTemperatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolTemperatureType (*this, f, c);
    }

    StatsWithTolTemperatureType::
    ~StatsWithTolTemperatureType ()
    {
    }

    // StatsWithTolTimeType
    //

    StatsWithTolTimeType::
    StatsWithTolTimeType ()
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      timeUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsWithTolTimeType::
    StatsWithTolTimeType (const StatsWithTolTimeType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      timeUnit_ (x.timeUnit_, f, this)
    {
    }

    StatsWithTolTimeType::
    StatsWithTolTimeType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      timeUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolTimeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "timeUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< timeUnit_type > r (
            timeUnit_traits::create (i, f, this));

          this->timeUnit_.set (r);
          continue;
        }
      }
    }

    StatsWithTolTimeType* StatsWithTolTimeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolTimeType (*this, f, c);
    }

    StatsWithTolTimeType::
    ~StatsWithTolTimeType ()
    {
    }

    // StatsWithTolUserDefinedUnitType
    //

    StatsWithTolUserDefinedUnitType::
    StatsWithTolUserDefinedUnitType (const unitName_type& unitName)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (),
      unitName_ (unitName, ::xml_schema::flags (), this)
    {
    }

    StatsWithTolUserDefinedUnitType::
    StatsWithTolUserDefinedUnitType (const StatsWithTolUserDefinedUnitType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (x, f, c),
      unitName_ (x.unitName_, f, this)
    {
    }

    StatsWithTolUserDefinedUnitType::
    StatsWithTolUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::StatsWithTolNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      unitName_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsWithTolUserDefinedUnitType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsWithTolNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "unitName" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unitName_type > r (
            unitName_traits::create (i, f, this));

          this->unitName_.set (r);
          continue;
        }
      }

      if (!unitName_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "unitName",
          "");
      }
    }

    StatsWithTolUserDefinedUnitType* StatsWithTolUserDefinedUnitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsWithTolUserDefinedUnitType (*this, f, c);
    }

    StatsWithTolUserDefinedUnitType::
    ~StatsWithTolUserDefinedUnitType ()
    {
    }

    // StatsLinearType
    //

    StatsLinearType::
    StatsLinearType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      linearUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsLinearType::
    StatsLinearType (const StatsLinearType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      linearUnit_ (x.linearUnit_, f, this)
    {
    }

    StatsLinearType::
    StatsLinearType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      linearUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsLinearType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "linearUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< linearUnit_type > r (
            linearUnit_traits::create (i, f, this));

          this->linearUnit_.set (r);
          continue;
        }
      }
    }

    StatsLinearType* StatsLinearType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsLinearType (*this, f, c);
    }

    StatsLinearType::
    ~StatsLinearType ()
    {
    }

    // StatsAngularType
    //

    StatsAngularType::
    StatsAngularType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      angularUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsAngularType::
    StatsAngularType (const StatsAngularType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      angularUnit_ (x.angularUnit_, f, this)
    {
    }

    StatsAngularType::
    StatsAngularType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      angularUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsAngularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "angularUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< angularUnit_type > r (
            angularUnit_traits::create (i, f, this));

          this->angularUnit_.set (r);
          continue;
        }
      }
    }

    StatsAngularType* StatsAngularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsAngularType (*this, f, c);
    }

    StatsAngularType::
    ~StatsAngularType ()
    {
    }

    // StatsAreaType
    //

    StatsAreaType::
    StatsAreaType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      areaUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsAreaType::
    StatsAreaType (const StatsAreaType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      areaUnit_ (x.areaUnit_, f, this)
    {
    }

    StatsAreaType::
    StatsAreaType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      areaUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsAreaType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "areaUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< areaUnit_type > r (
            areaUnit_traits::create (i, f, this));

          this->areaUnit_.set (r);
          continue;
        }
      }
    }

    StatsAreaType* StatsAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsAreaType (*this, f, c);
    }

    StatsAreaType::
    ~StatsAreaType ()
    {
    }

    // StatsForceType
    //

    StatsForceType::
    StatsForceType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      forceUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsForceType::
    StatsForceType (const StatsForceType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      forceUnit_ (x.forceUnit_, f, this)
    {
    }

    StatsForceType::
    StatsForceType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      forceUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsForceType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "forceUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< forceUnit_type > r (
            forceUnit_traits::create (i, f, this));

          this->forceUnit_.set (r);
          continue;
        }
      }
    }

    StatsForceType* StatsForceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsForceType (*this, f, c);
    }

    StatsForceType::
    ~StatsForceType ()
    {
    }

    // StatsMassType
    //

    StatsMassType::
    StatsMassType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      massUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsMassType::
    StatsMassType (const StatsMassType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      massUnit_ (x.massUnit_, f, this)
    {
    }

    StatsMassType::
    StatsMassType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      massUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsMassType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "massUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< massUnit_type > r (
            massUnit_traits::create (i, f, this));

          this->massUnit_.set (r);
          continue;
        }
      }
    }

    StatsMassType* StatsMassType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsMassType (*this, f, c);
    }

    StatsMassType::
    ~StatsMassType ()
    {
    }

    // StatsPressureType
    //

    StatsPressureType::
    StatsPressureType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      pressureUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsPressureType::
    StatsPressureType (const StatsPressureType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      pressureUnit_ (x.pressureUnit_, f, this)
    {
    }

    StatsPressureType::
    StatsPressureType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      pressureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsPressureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "pressureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< pressureUnit_type > r (
            pressureUnit_traits::create (i, f, this));

          this->pressureUnit_.set (r);
          continue;
        }
      }
    }

    StatsPressureType* StatsPressureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsPressureType (*this, f, c);
    }

    StatsPressureType::
    ~StatsPressureType ()
    {
    }

    // StatsSpeedType
    //

    StatsSpeedType::
    StatsSpeedType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      speedUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsSpeedType::
    StatsSpeedType (const StatsSpeedType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      speedUnit_ (x.speedUnit_, f, this)
    {
    }

    StatsSpeedType::
    StatsSpeedType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      speedUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsSpeedType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "speedUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< speedUnit_type > r (
            speedUnit_traits::create (i, f, this));

          this->speedUnit_.set (r);
          continue;
        }
      }
    }

    StatsSpeedType* StatsSpeedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsSpeedType (*this, f, c);
    }

    StatsSpeedType::
    ~StatsSpeedType ()
    {
    }

    // StatsTemperatureType
    //

    StatsTemperatureType::
    StatsTemperatureType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      temperatureUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsTemperatureType::
    StatsTemperatureType (const StatsTemperatureType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      temperatureUnit_ (x.temperatureUnit_, f, this)
    {
    }

    StatsTemperatureType::
    StatsTemperatureType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      temperatureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsTemperatureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "temperatureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< temperatureUnit_type > r (
            temperatureUnit_traits::create (i, f, this));

          this->temperatureUnit_.set (r);
          continue;
        }
      }
    }

    StatsTemperatureType* StatsTemperatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsTemperatureType (*this, f, c);
    }

    StatsTemperatureType::
    ~StatsTemperatureType ()
    {
    }

    // StatsTimeType
    //

    StatsTimeType::
    StatsTimeType ()
    : ::xsd::qif2::StatsNumericalBaseType (),
      timeUnit_ (::xml_schema::flags (), this)
    {
    }

    StatsTimeType::
    StatsTimeType (const StatsTimeType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      timeUnit_ (x.timeUnit_, f, this)
    {
    }

    StatsTimeType::
    StatsTimeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      timeUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsTimeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "timeUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< timeUnit_type > r (
            timeUnit_traits::create (i, f, this));

          this->timeUnit_.set (r);
          continue;
        }
      }
    }

    StatsTimeType* StatsTimeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsTimeType (*this, f, c);
    }

    StatsTimeType::
    ~StatsTimeType ()
    {
    }

    // StatsUserDefinedUnitType
    //

    StatsUserDefinedUnitType::
    StatsUserDefinedUnitType (const unitName_type& unitName)
    : ::xsd::qif2::StatsNumericalBaseType (),
      unitName_ (unitName, ::xml_schema::flags (), this)
    {
    }

    StatsUserDefinedUnitType::
    StatsUserDefinedUnitType (const StatsUserDefinedUnitType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (x, f, c),
      unitName_ (x.unitName_, f, this)
    {
    }

    StatsUserDefinedUnitType::
    StatsUserDefinedUnitType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xsd::qif2::StatsNumericalBaseType (e, f | ::xml_schema::flags::base, c),
      unitName_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StatsUserDefinedUnitType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsNumericalBaseType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "unitName" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unitName_type > r (
            unitName_traits::create (i, f, this));

          this->unitName_.set (r);
          continue;
        }
      }

      if (!unitName_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "unitName",
          "");
      }
    }

    StatsUserDefinedUnitType* StatsUserDefinedUnitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsUserDefinedUnitType (*this, f, c);
    }

    StatsUserDefinedUnitType::
    ~StatsUserDefinedUnitType ()
    {
    }

    // StatsPassFailType
    //

    StatsPassFailType::
    StatsPassFailType ()
    : ::xsd::qif2::StatsBaseType (),
      FailurePercentage_ (::xml_schema::flags (), this),
      NumberFailures_ (::xml_schema::flags (), this)
    {
    }

    StatsPassFailType::
    StatsPassFailType (const StatsPassFailType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::StatsBaseType (x, f, c),
      FailurePercentage_ (x.FailurePercentage_, f, this),
      NumberFailures_ (x.NumberFailures_, f, this)
    {
    }

    StatsPassFailType::
    StatsPassFailType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::StatsBaseType (e, f | ::xml_schema::flags::base, c),
      FailurePercentage_ (f, this),
      NumberFailures_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatsPassFailType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::StatsBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // FailurePercentage
        //
        if (n.name () == "FailurePercentage" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->FailurePercentage_)
          {
            this->FailurePercentage_.set (FailurePercentage_traits::create (i, f, this));
            continue;
          }
        }

        // NumberFailures
        //
        if (n.name () == "NumberFailures" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NumberFailures_)
          {
            this->NumberFailures_.set (NumberFailures_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    StatsPassFailType* StatsPassFailType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatsPassFailType (*this, f, c);
    }

    StatsPassFailType::
    ~StatsPassFailType ()
    {
    }

    // GeometricCharacteristicStatsEvalType
    //

    GeometricCharacteristicStatsEvalType::
    GeometricCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this)
    {
    }

    GeometricCharacteristicStatsEvalType::
    GeometricCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this)
    {
    }

    GeometricCharacteristicStatsEvalType::
    GeometricCharacteristicStatsEvalType (const GeometricCharacteristicStatsEvalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this)
    {
    }

    GeometricCharacteristicStatsEvalType::
    GeometricCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void GeometricCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    GeometricCharacteristicStatsEvalType* GeometricCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometricCharacteristicStatsEvalType (*this, f, c);
    }

    GeometricCharacteristicStatsEvalType::
    ~GeometricCharacteristicStatsEvalType ()
    {
    }

    // CompositeSegmentStatsEvalBaseType
    //

    CompositeSegmentStatsEvalBaseType::
    CompositeSegmentStatsEvalBaseType ()
    : ::xml_schema::type (),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentStatsEvalBaseType::
    CompositeSegmentStatsEvalBaseType (const CompositeSegmentStatsEvalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this)
    {
    }

    CompositeSegmentStatsEvalBaseType::
    CompositeSegmentStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentStatsEvalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CompositeSegmentStatsEvalBaseType* CompositeSegmentStatsEvalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentStatsEvalBaseType (*this, f, c);
    }

    CompositeSegmentStatsEvalBaseType::
    ~CompositeSegmentStatsEvalBaseType ()
    {
    }

    // CompositeSegmentPositionStatsEvalType
    //

    CompositeSegmentPositionStatsEvalType::
    CompositeSegmentPositionStatsEvalType ()
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType ()
    {
    }

    CompositeSegmentPositionStatsEvalType::
    CompositeSegmentPositionStatsEvalType (const CompositeSegmentPositionStatsEvalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType (x, f, c)
    {
    }

    CompositeSegmentPositionStatsEvalType::
    CompositeSegmentPositionStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType (e, f, c)
    {
    }

    CompositeSegmentPositionStatsEvalType* CompositeSegmentPositionStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentPositionStatsEvalType (*this, f, c);
    }

    CompositeSegmentPositionStatsEvalType::
    ~CompositeSegmentPositionStatsEvalType ()
    {
    }

    // CompositeSegmentsPositionStatsEvalType
    //

    CompositeSegmentsPositionStatsEvalType::
    CompositeSegmentsPositionStatsEvalType (const SecondCompositeSegmentPositionStats_type& SecondCompositeSegmentPositionStats)
    : ::xml_schema::type (),
      SecondCompositeSegmentPositionStats_ (SecondCompositeSegmentPositionStats, ::xml_schema::flags (), this),
      ThirdCompositeSegmentPositionStats_ (::xml_schema::flags (), this),
      FourthCompositeSegmentPositionStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentsPositionStatsEvalType::
    CompositeSegmentsPositionStatsEvalType (::std::auto_ptr< SecondCompositeSegmentPositionStats_type >& SecondCompositeSegmentPositionStats)
    : ::xml_schema::type (),
      SecondCompositeSegmentPositionStats_ (SecondCompositeSegmentPositionStats, ::xml_schema::flags (), this),
      ThirdCompositeSegmentPositionStats_ (::xml_schema::flags (), this),
      FourthCompositeSegmentPositionStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentsPositionStatsEvalType::
    CompositeSegmentsPositionStatsEvalType (const CompositeSegmentsPositionStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SecondCompositeSegmentPositionStats_ (x.SecondCompositeSegmentPositionStats_, f, this),
      ThirdCompositeSegmentPositionStats_ (x.ThirdCompositeSegmentPositionStats_, f, this),
      FourthCompositeSegmentPositionStats_ (x.FourthCompositeSegmentPositionStats_, f, this)
    {
    }

    CompositeSegmentsPositionStatsEvalType::
    CompositeSegmentsPositionStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentPositionStats_ (f, this),
      ThirdCompositeSegmentPositionStats_ (f, this),
      FourthCompositeSegmentPositionStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentsPositionStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SecondCompositeSegmentPositionStats
        //
        if (n.name () == "SecondCompositeSegmentPositionStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentPositionStats_type > r (
            SecondCompositeSegmentPositionStats_traits::create (i, f, this));

          if (!SecondCompositeSegmentPositionStats_.present ())
          {
            this->SecondCompositeSegmentPositionStats_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentPositionStats
        //
        if (n.name () == "ThirdCompositeSegmentPositionStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentPositionStats_type > r (
            ThirdCompositeSegmentPositionStats_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentPositionStats_)
          {
            this->ThirdCompositeSegmentPositionStats_.set (r);
            continue;
          }
        }

        // FourthCompositeSegmentPositionStats
        //
        if (n.name () == "FourthCompositeSegmentPositionStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FourthCompositeSegmentPositionStats_type > r (
            FourthCompositeSegmentPositionStats_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentPositionStats_)
          {
            this->FourthCompositeSegmentPositionStats_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SecondCompositeSegmentPositionStats_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SecondCompositeSegmentPositionStats",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CompositeSegmentsPositionStatsEvalType* CompositeSegmentsPositionStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentsPositionStatsEvalType (*this, f, c);
    }

    CompositeSegmentsPositionStatsEvalType::
    ~CompositeSegmentsPositionStatsEvalType ()
    {
    }

    // CompositeSegmentProfileStatsEvalType
    //

    CompositeSegmentProfileStatsEvalType::
    CompositeSegmentProfileStatsEvalType ()
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType ()
    {
    }

    CompositeSegmentProfileStatsEvalType::
    CompositeSegmentProfileStatsEvalType (const CompositeSegmentProfileStatsEvalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType (x, f, c)
    {
    }

    CompositeSegmentProfileStatsEvalType::
    CompositeSegmentProfileStatsEvalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType (e, f, c)
    {
    }

    CompositeSegmentProfileStatsEvalType* CompositeSegmentProfileStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentProfileStatsEvalType (*this, f, c);
    }

    CompositeSegmentProfileStatsEvalType::
    ~CompositeSegmentProfileStatsEvalType ()
    {
    }

    // CompositeSegmentsProfileStatsEvalType
    //

    CompositeSegmentsProfileStatsEvalType::
    CompositeSegmentsProfileStatsEvalType (const SecondCompositeSegmentProfileStats_type& SecondCompositeSegmentProfileStats)
    : ::xml_schema::type (),
      SecondCompositeSegmentProfileStats_ (SecondCompositeSegmentProfileStats, ::xml_schema::flags (), this),
      ThirdCompositeSegmentProfileStats_ (::xml_schema::flags (), this),
      FourthCompositeSegmentProfileStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentsProfileStatsEvalType::
    CompositeSegmentsProfileStatsEvalType (::std::auto_ptr< SecondCompositeSegmentProfileStats_type >& SecondCompositeSegmentProfileStats)
    : ::xml_schema::type (),
      SecondCompositeSegmentProfileStats_ (SecondCompositeSegmentProfileStats, ::xml_schema::flags (), this),
      ThirdCompositeSegmentProfileStats_ (::xml_schema::flags (), this),
      FourthCompositeSegmentProfileStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentsProfileStatsEvalType::
    CompositeSegmentsProfileStatsEvalType (const CompositeSegmentsProfileStatsEvalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SecondCompositeSegmentProfileStats_ (x.SecondCompositeSegmentProfileStats_, f, this),
      ThirdCompositeSegmentProfileStats_ (x.ThirdCompositeSegmentProfileStats_, f, this),
      FourthCompositeSegmentProfileStats_ (x.FourthCompositeSegmentProfileStats_, f, this)
    {
    }

    CompositeSegmentsProfileStatsEvalType::
    CompositeSegmentsProfileStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentProfileStats_ (f, this),
      ThirdCompositeSegmentProfileStats_ (f, this),
      FourthCompositeSegmentProfileStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentsProfileStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SecondCompositeSegmentProfileStats
        //
        if (n.name () == "SecondCompositeSegmentProfileStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentProfileStats_type > r (
            SecondCompositeSegmentProfileStats_traits::create (i, f, this));

          if (!SecondCompositeSegmentProfileStats_.present ())
          {
            this->SecondCompositeSegmentProfileStats_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentProfileStats
        //
        if (n.name () == "ThirdCompositeSegmentProfileStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentProfileStats_type > r (
            ThirdCompositeSegmentProfileStats_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentProfileStats_)
          {
            this->ThirdCompositeSegmentProfileStats_.set (r);
            continue;
          }
        }

        // FourthCompositeSegmentProfileStats
        //
        if (n.name () == "FourthCompositeSegmentProfileStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FourthCompositeSegmentProfileStats_type > r (
            FourthCompositeSegmentProfileStats_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentProfileStats_)
          {
            this->FourthCompositeSegmentProfileStats_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SecondCompositeSegmentProfileStats_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SecondCompositeSegmentProfileStats",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CompositeSegmentsProfileStatsEvalType* CompositeSegmentsProfileStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentsProfileStatsEvalType (*this, f, c);
    }

    CompositeSegmentsProfileStatsEvalType::
    ~CompositeSegmentsProfileStatsEvalType ()
    {
    }

    // CompositeSegmentSymmetryStatsEvalType
    //

    CompositeSegmentSymmetryStatsEvalType::
    CompositeSegmentSymmetryStatsEvalType ()
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType ()
    {
    }

    CompositeSegmentSymmetryStatsEvalType::
    CompositeSegmentSymmetryStatsEvalType (const CompositeSegmentSymmetryStatsEvalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType (x, f, c)
    {
    }

    CompositeSegmentSymmetryStatsEvalType::
    CompositeSegmentSymmetryStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentStatsEvalBaseType (e, f, c)
    {
    }

    CompositeSegmentSymmetryStatsEvalType* CompositeSegmentSymmetryStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentSymmetryStatsEvalType (*this, f, c);
    }

    CompositeSegmentSymmetryStatsEvalType::
    ~CompositeSegmentSymmetryStatsEvalType ()
    {
    }

    // CompositeSegmentsSymmetryStatsEvalType
    //

    CompositeSegmentsSymmetryStatsEvalType::
    CompositeSegmentsSymmetryStatsEvalType (const SecondCompositeSegmentSymmetryStats_type& SecondCompositeSegmentSymmetryStats)
    : ::xml_schema::type (),
      SecondCompositeSegmentSymmetryStats_ (SecondCompositeSegmentSymmetryStats, ::xml_schema::flags (), this),
      ThirdCompositeSegmentSymmetryStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentsSymmetryStatsEvalType::
    CompositeSegmentsSymmetryStatsEvalType (::std::auto_ptr< SecondCompositeSegmentSymmetryStats_type >& SecondCompositeSegmentSymmetryStats)
    : ::xml_schema::type (),
      SecondCompositeSegmentSymmetryStats_ (SecondCompositeSegmentSymmetryStats, ::xml_schema::flags (), this),
      ThirdCompositeSegmentSymmetryStats_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentsSymmetryStatsEvalType::
    CompositeSegmentsSymmetryStatsEvalType (const CompositeSegmentsSymmetryStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SecondCompositeSegmentSymmetryStats_ (x.SecondCompositeSegmentSymmetryStats_, f, this),
      ThirdCompositeSegmentSymmetryStats_ (x.ThirdCompositeSegmentSymmetryStats_, f, this)
    {
    }

    CompositeSegmentsSymmetryStatsEvalType::
    CompositeSegmentsSymmetryStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentSymmetryStats_ (f, this),
      ThirdCompositeSegmentSymmetryStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentsSymmetryStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SecondCompositeSegmentSymmetryStats
        //
        if (n.name () == "SecondCompositeSegmentSymmetryStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentSymmetryStats_type > r (
            SecondCompositeSegmentSymmetryStats_traits::create (i, f, this));

          if (!SecondCompositeSegmentSymmetryStats_.present ())
          {
            this->SecondCompositeSegmentSymmetryStats_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentSymmetryStats
        //
        if (n.name () == "ThirdCompositeSegmentSymmetryStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentSymmetryStats_type > r (
            ThirdCompositeSegmentSymmetryStats_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentSymmetryStats_)
          {
            this->ThirdCompositeSegmentSymmetryStats_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SecondCompositeSegmentSymmetryStats_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SecondCompositeSegmentSymmetryStats",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CompositeSegmentsSymmetryStatsEvalType* CompositeSegmentsSymmetryStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentsSymmetryStatsEvalType (*this, f, c);
    }

    CompositeSegmentsSymmetryStatsEvalType::
    ~CompositeSegmentsSymmetryStatsEvalType ()
    {
    }

    // LinearCharacteristicStatsEvalType
    //

    LinearCharacteristicStatsEvalType::
    LinearCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    LinearCharacteristicStatsEvalType::
    LinearCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    LinearCharacteristicStatsEvalType::
    LinearCharacteristicStatsEvalType (const LinearCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    LinearCharacteristicStatsEvalType::
    LinearCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicStatsEvalType* LinearCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCharacteristicStatsEvalType (*this, f, c);
    }

    LinearCharacteristicStatsEvalType::
    ~LinearCharacteristicStatsEvalType ()
    {
    }

    // AngularCharacteristicStatsEvalType
    //

    AngularCharacteristicStatsEvalType::
    AngularCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    AngularCharacteristicStatsEvalType::
    AngularCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    AngularCharacteristicStatsEvalType::
    AngularCharacteristicStatsEvalType (const AngularCharacteristicStatsEvalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    AngularCharacteristicStatsEvalType::
    AngularCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicStatsEvalType* AngularCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCharacteristicStatsEvalType (*this, f, c);
    }

    AngularCharacteristicStatsEvalType::
    ~AngularCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedAttributeCharacteristicStatsEvalType
    //

    UserDefinedAttributeCharacteristicStatsEvalType::
    UserDefinedAttributeCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      AttributeStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAttributeCharacteristicStatsEvalType::
    UserDefinedAttributeCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      AttributeStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAttributeCharacteristicStatsEvalType::
    UserDefinedAttributeCharacteristicStatsEvalType (const UserDefinedAttributeCharacteristicStatsEvalType& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      AttributeStats_ (x.AttributeStats_, f, this)
    {
    }

    UserDefinedAttributeCharacteristicStatsEvalType::
    UserDefinedAttributeCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      AttributeStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedAttributeCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AttributeStats
        //
        if (n.name () == "AttributeStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AttributeStats_type > r (
            AttributeStats_traits::create (i, f, this));

          if (!this->AttributeStats_)
          {
            this->AttributeStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedAttributeCharacteristicStatsEvalType* UserDefinedAttributeCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicStatsEvalType::
    ~UserDefinedAttributeCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedLinearCharacteristicStatsEvalType
    //

    UserDefinedLinearCharacteristicStatsEvalType::
    UserDefinedLinearCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedLinearCharacteristicStatsEvalType::
    UserDefinedLinearCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedLinearCharacteristicStatsEvalType::
    UserDefinedLinearCharacteristicStatsEvalType (const UserDefinedLinearCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedLinearCharacteristicStatsEvalType::
    UserDefinedLinearCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedLinearCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedLinearCharacteristicStatsEvalType* UserDefinedLinearCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedLinearCharacteristicStatsEvalType::
    ~UserDefinedLinearCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedAngularCharacteristicStatsEvalType
    //

    UserDefinedAngularCharacteristicStatsEvalType::
    UserDefinedAngularCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAngularCharacteristicStatsEvalType::
    UserDefinedAngularCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAngularCharacteristicStatsEvalType::
    UserDefinedAngularCharacteristicStatsEvalType (const UserDefinedAngularCharacteristicStatsEvalType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedAngularCharacteristicStatsEvalType::
    UserDefinedAngularCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedAngularCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedAngularCharacteristicStatsEvalType* UserDefinedAngularCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedAngularCharacteristicStatsEvalType::
    ~UserDefinedAngularCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedAreaCharacteristicStatsEvalType
    //

    UserDefinedAreaCharacteristicStatsEvalType::
    UserDefinedAreaCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAreaCharacteristicStatsEvalType::
    UserDefinedAreaCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAreaCharacteristicStatsEvalType::
    UserDefinedAreaCharacteristicStatsEvalType (const UserDefinedAreaCharacteristicStatsEvalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedAreaCharacteristicStatsEvalType::
    UserDefinedAreaCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedAreaCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedAreaCharacteristicStatsEvalType* UserDefinedAreaCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedAreaCharacteristicStatsEvalType::
    ~UserDefinedAreaCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedForceCharacteristicStatsEvalType
    //

    UserDefinedForceCharacteristicStatsEvalType::
    UserDefinedForceCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedForceCharacteristicStatsEvalType::
    UserDefinedForceCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedForceCharacteristicStatsEvalType::
    UserDefinedForceCharacteristicStatsEvalType (const UserDefinedForceCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedForceCharacteristicStatsEvalType::
    UserDefinedForceCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedForceCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedForceCharacteristicStatsEvalType* UserDefinedForceCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedForceCharacteristicStatsEvalType::
    ~UserDefinedForceCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedMassCharacteristicStatsEvalType
    //

    UserDefinedMassCharacteristicStatsEvalType::
    UserDefinedMassCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedMassCharacteristicStatsEvalType::
    UserDefinedMassCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedMassCharacteristicStatsEvalType::
    UserDefinedMassCharacteristicStatsEvalType (const UserDefinedMassCharacteristicStatsEvalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedMassCharacteristicStatsEvalType::
    UserDefinedMassCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedMassCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedMassCharacteristicStatsEvalType* UserDefinedMassCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedMassCharacteristicStatsEvalType::
    ~UserDefinedMassCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedPressureCharacteristicStatsEvalType
    //

    UserDefinedPressureCharacteristicStatsEvalType::
    UserDefinedPressureCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedPressureCharacteristicStatsEvalType::
    UserDefinedPressureCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedPressureCharacteristicStatsEvalType::
    UserDefinedPressureCharacteristicStatsEvalType (const UserDefinedPressureCharacteristicStatsEvalType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedPressureCharacteristicStatsEvalType::
    UserDefinedPressureCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedPressureCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedPressureCharacteristicStatsEvalType* UserDefinedPressureCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedPressureCharacteristicStatsEvalType::
    ~UserDefinedPressureCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedSpeedCharacteristicStatsEvalType
    //

    UserDefinedSpeedCharacteristicStatsEvalType::
    UserDefinedSpeedCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedSpeedCharacteristicStatsEvalType::
    UserDefinedSpeedCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedSpeedCharacteristicStatsEvalType::
    UserDefinedSpeedCharacteristicStatsEvalType (const UserDefinedSpeedCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedSpeedCharacteristicStatsEvalType::
    UserDefinedSpeedCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedSpeedCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedSpeedCharacteristicStatsEvalType* UserDefinedSpeedCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicStatsEvalType::
    ~UserDefinedSpeedCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedTemperatureCharacteristicStatsEvalType
    //

    UserDefinedTemperatureCharacteristicStatsEvalType::
    UserDefinedTemperatureCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::
    UserDefinedTemperatureCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::
    UserDefinedTemperatureCharacteristicStatsEvalType (const UserDefinedTemperatureCharacteristicStatsEvalType& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::
    UserDefinedTemperatureCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedTemperatureCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedTemperatureCharacteristicStatsEvalType* UserDefinedTemperatureCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicStatsEvalType::
    ~UserDefinedTemperatureCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedTimeCharacteristicStatsEvalType
    //

    UserDefinedTimeCharacteristicStatsEvalType::
    UserDefinedTimeCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedTimeCharacteristicStatsEvalType::
    UserDefinedTimeCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedTimeCharacteristicStatsEvalType::
    UserDefinedTimeCharacteristicStatsEvalType (const UserDefinedTimeCharacteristicStatsEvalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedTimeCharacteristicStatsEvalType::
    UserDefinedTimeCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedTimeCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedTimeCharacteristicStatsEvalType* UserDefinedTimeCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedTimeCharacteristicStatsEvalType::
    ~UserDefinedTimeCharacteristicStatsEvalType ()
    {
    }

    // UserDefinedUnitCharacteristicStatsEvalType
    //

    UserDefinedUnitCharacteristicStatsEvalType::
    UserDefinedUnitCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedUnitCharacteristicStatsEvalType::
    UserDefinedUnitCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ValueStats_ (::xml_schema::flags (), this),
      MaxValueStats_ (::xml_schema::flags (), this),
      MinValueStats_ (::xml_schema::flags (), this),
      DeviationStats_ (::xml_schema::flags (), this),
      MaxDeviationStats_ (::xml_schema::flags (), this),
      MinDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedUnitCharacteristicStatsEvalType::
    UserDefinedUnitCharacteristicStatsEvalType (const UserDefinedUnitCharacteristicStatsEvalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ValueStats_ (x.ValueStats_, f, this),
      MaxValueStats_ (x.MaxValueStats_, f, this),
      MinValueStats_ (x.MinValueStats_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this),
      MaxDeviationStats_ (x.MaxDeviationStats_, f, this),
      MinDeviationStats_ (x.MinDeviationStats_, f, this)
    {
    }

    UserDefinedUnitCharacteristicStatsEvalType::
    UserDefinedUnitCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ValueStats_ (f, this),
      MaxValueStats_ (f, this),
      MinValueStats_ (f, this),
      DeviationStats_ (f, this),
      MaxDeviationStats_ (f, this),
      MinDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void UserDefinedUnitCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ValueStats
        //
        if (n.name () == "ValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ValueStats_type > r (
            ValueStats_traits::create (i, f, this));

          if (!this->ValueStats_)
          {
            this->ValueStats_.set (r);
            continue;
          }
        }

        // MaxValueStats
        //
        if (n.name () == "MaxValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValueStats_type > r (
            MaxValueStats_traits::create (i, f, this));

          if (!this->MaxValueStats_)
          {
            this->MaxValueStats_.set (r);
            continue;
          }
        }

        // MinValueStats
        //
        if (n.name () == "MinValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValueStats_type > r (
            MinValueStats_traits::create (i, f, this));

          if (!this->MinValueStats_)
          {
            this->MinValueStats_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!this->DeviationStats_)
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        // MaxDeviationStats
        //
        if (n.name () == "MaxDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxDeviationStats_type > r (
            MaxDeviationStats_traits::create (i, f, this));

          if (!this->MaxDeviationStats_)
          {
            this->MaxDeviationStats_.set (r);
            continue;
          }
        }

        // MinDeviationStats
        //
        if (n.name () == "MinDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinDeviationStats_type > r (
            MinDeviationStats_traits::create (i, f, this));

          if (!this->MinDeviationStats_)
          {
            this->MinDeviationStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedUnitCharacteristicStatsEvalType* UserDefinedUnitCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicStatsEvalType (*this, f, c);
    }

    UserDefinedUnitCharacteristicStatsEvalType::
    ~UserDefinedUnitCharacteristicStatsEvalType ()
    {
    }

    // SurfaceTextureCharacteristicStatsEvalType
    //

    SurfaceTextureCharacteristicStatsEvalType::
    SurfaceTextureCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      RoughnessAverageValueStats_ (::xml_schema::flags (), this)
    {
    }

    SurfaceTextureCharacteristicStatsEvalType::
    SurfaceTextureCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      RoughnessAverageValueStats_ (::xml_schema::flags (), this)
    {
    }

    SurfaceTextureCharacteristicStatsEvalType::
    SurfaceTextureCharacteristicStatsEvalType (const SurfaceTextureCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      RoughnessAverageValueStats_ (x.RoughnessAverageValueStats_, f, this)
    {
    }

    SurfaceTextureCharacteristicStatsEvalType::
    SurfaceTextureCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      RoughnessAverageValueStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SurfaceTextureCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // RoughnessAverageValueStats
        //
        if (n.name () == "RoughnessAverageValueStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RoughnessAverageValueStats_type > r (
            RoughnessAverageValueStats_traits::create (i, f, this));

          if (!this->RoughnessAverageValueStats_)
          {
            this->RoughnessAverageValueStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SurfaceTextureCharacteristicStatsEvalType* SurfaceTextureCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicStatsEvalType (*this, f, c);
    }

    SurfaceTextureCharacteristicStatsEvalType::
    ~SurfaceTextureCharacteristicStatsEvalType ()
    {
    }

    // OrientationCharacteristicStatsEvalType
    //

    OrientationCharacteristicStatsEvalType::
    OrientationCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      DatumsOkStats_ (::xml_schema::flags (), this),
      BonusStats_ (::xml_schema::flags (), this),
      ReferenceLengthStats_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicStatsEvalType::
    OrientationCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      DatumsOkStats_ (::xml_schema::flags (), this),
      BonusStats_ (::xml_schema::flags (), this),
      ReferenceLengthStats_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicStatsEvalType::
    OrientationCharacteristicStatsEvalType (const OrientationCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this),
      DatumsOkStats_ (x.DatumsOkStats_, f, this),
      BonusStats_ (x.BonusStats_, f, this),
      ReferenceLengthStats_ (x.ReferenceLengthStats_, f, this)
    {
    }

    OrientationCharacteristicStatsEvalType::
    OrientationCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this),
      DatumsOkStats_ (f, this),
      BonusStats_ (f, this),
      ReferenceLengthStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void OrientationCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        // DatumsOkStats
        //
        if (n.name () == "DatumsOkStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumsOkStats_type > r (
            DatumsOkStats_traits::create (i, f, this));

          if (!this->DatumsOkStats_)
          {
            this->DatumsOkStats_.set (r);
            continue;
          }
        }

        // BonusStats
        //
        if (n.name () == "BonusStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< BonusStats_type > r (
            BonusStats_traits::create (i, f, this));

          if (!this->BonusStats_)
          {
            this->BonusStats_.set (r);
            continue;
          }
        }

        // ReferenceLengthStats
        //
        if (n.name () == "ReferenceLengthStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferenceLengthStats_type > r (
            ReferenceLengthStats_traits::create (i, f, this));

          if (!this->ReferenceLengthStats_)
          {
            this->ReferenceLengthStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OrientationCharacteristicStatsEvalType* OrientationCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationCharacteristicStatsEvalType (*this, f, c);
    }

    OrientationCharacteristicStatsEvalType::
    ~OrientationCharacteristicStatsEvalType ()
    {
    }

    // AngularityCharacteristicStatsEvalType
    //

    AngularityCharacteristicStatsEvalType::
    AngularityCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (Status)
    {
    }

    AngularityCharacteristicStatsEvalType::
    AngularityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (Status)
    {
    }

    AngularityCharacteristicStatsEvalType::
    AngularityCharacteristicStatsEvalType (const AngularityCharacteristicStatsEvalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (x, f, c)
    {
    }

    AngularityCharacteristicStatsEvalType::
    AngularityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (e, f, c)
    {
    }

    AngularityCharacteristicStatsEvalType* AngularityCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicStatsEvalType (*this, f, c);
    }

    AngularityCharacteristicStatsEvalType::
    ~AngularityCharacteristicStatsEvalType ()
    {
    }

    // PerpendicularityCharacteristicStatsEvalType
    //

    PerpendicularityCharacteristicStatsEvalType::
    PerpendicularityCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (Status)
    {
    }

    PerpendicularityCharacteristicStatsEvalType::
    PerpendicularityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (Status)
    {
    }

    PerpendicularityCharacteristicStatsEvalType::
    PerpendicularityCharacteristicStatsEvalType (const PerpendicularityCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (x, f, c)
    {
    }

    PerpendicularityCharacteristicStatsEvalType::
    PerpendicularityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (e, f, c)
    {
    }

    PerpendicularityCharacteristicStatsEvalType* PerpendicularityCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicStatsEvalType (*this, f, c);
    }

    PerpendicularityCharacteristicStatsEvalType::
    ~PerpendicularityCharacteristicStatsEvalType ()
    {
    }

    // ParallelismCharacteristicStatsEvalType
    //

    ParallelismCharacteristicStatsEvalType::
    ParallelismCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (Status)
    {
    }

    ParallelismCharacteristicStatsEvalType::
    ParallelismCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (Status)
    {
    }

    ParallelismCharacteristicStatsEvalType::
    ParallelismCharacteristicStatsEvalType (const ParallelismCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (x, f, c)
    {
    }

    ParallelismCharacteristicStatsEvalType::
    ParallelismCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicStatsEvalType (e, f, c)
    {
    }

    ParallelismCharacteristicStatsEvalType* ParallelismCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicStatsEvalType (*this, f, c);
    }

    ParallelismCharacteristicStatsEvalType::
    ~ParallelismCharacteristicStatsEvalType ()
    {
    }

    // FormCharacteristicStatsEvalBaseType
    //

    FormCharacteristicStatsEvalBaseType::
    FormCharacteristicStatsEvalBaseType (const Status_type& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this)
    {
    }

    FormCharacteristicStatsEvalBaseType::
    FormCharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this)
    {
    }

    FormCharacteristicStatsEvalBaseType::
    FormCharacteristicStatsEvalBaseType (const FormCharacteristicStatsEvalBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this)
    {
    }

    FormCharacteristicStatsEvalBaseType::
    FormCharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void FormCharacteristicStatsEvalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        break;
      }
    }

    FormCharacteristicStatsEvalBaseType* FormCharacteristicStatsEvalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FormCharacteristicStatsEvalBaseType (*this, f, c);
    }

    FormCharacteristicStatsEvalBaseType::
    ~FormCharacteristicStatsEvalBaseType ()
    {
    }

    // StraightnessCharacteristicStatsEvalType
    //

    StraightnessCharacteristicStatsEvalType::
    StraightnessCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxStraightnessStats_ (::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicStatsEvalType::
    StraightnessCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxStraightnessStats_ (::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicStatsEvalType::
    StraightnessCharacteristicStatsEvalType (const StraightnessCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (x, f, c),
      MaxStraightnessStats_ (x.MaxStraightnessStats_, f, this)
    {
    }

    StraightnessCharacteristicStatsEvalType::
    StraightnessCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      MaxStraightnessStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxStraightnessStats
        //
        if (n.name () == "MaxStraightnessStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxStraightnessStats_type > r (
            MaxStraightnessStats_traits::create (i, f, this));

          if (!this->MaxStraightnessStats_)
          {
            this->MaxStraightnessStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StraightnessCharacteristicStatsEvalType* StraightnessCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicStatsEvalType (*this, f, c);
    }

    StraightnessCharacteristicStatsEvalType::
    ~StraightnessCharacteristicStatsEvalType ()
    {
    }

    // FlatnessCharacteristicStatsEvalType
    //

    FlatnessCharacteristicStatsEvalType::
    FlatnessCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxFlatnessStats_ (::xml_schema::flags (), this)
    {
    }

    FlatnessCharacteristicStatsEvalType::
    FlatnessCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxFlatnessStats_ (::xml_schema::flags (), this)
    {
    }

    FlatnessCharacteristicStatsEvalType::
    FlatnessCharacteristicStatsEvalType (const FlatnessCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (x, f, c),
      MaxFlatnessStats_ (x.MaxFlatnessStats_, f, this)
    {
    }

    FlatnessCharacteristicStatsEvalType::
    FlatnessCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      MaxFlatnessStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void FlatnessCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxFlatnessStats
        //
        if (n.name () == "MaxFlatnessStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxFlatnessStats_type > r (
            MaxFlatnessStats_traits::create (i, f, this));

          if (!this->MaxFlatnessStats_)
          {
            this->MaxFlatnessStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    FlatnessCharacteristicStatsEvalType* FlatnessCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicStatsEvalType (*this, f, c);
    }

    FlatnessCharacteristicStatsEvalType::
    ~FlatnessCharacteristicStatsEvalType ()
    {
    }

    // CircularityCharacteristicStatsEvalType
    //

    CircularityCharacteristicStatsEvalType::
    CircularityCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxCircularityStats_ (::xml_schema::flags (), this)
    {
    }

    CircularityCharacteristicStatsEvalType::
    CircularityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxCircularityStats_ (::xml_schema::flags (), this)
    {
    }

    CircularityCharacteristicStatsEvalType::
    CircularityCharacteristicStatsEvalType (const CircularityCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (x, f, c),
      MaxCircularityStats_ (x.MaxCircularityStats_, f, this)
    {
    }

    CircularityCharacteristicStatsEvalType::
    CircularityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      MaxCircularityStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxCircularityStats
        //
        if (n.name () == "MaxCircularityStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxCircularityStats_type > r (
            MaxCircularityStats_traits::create (i, f, this));

          if (!this->MaxCircularityStats_)
          {
            this->MaxCircularityStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicStatsEvalType* CircularityCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicStatsEvalType (*this, f, c);
    }

    CircularityCharacteristicStatsEvalType::
    ~CircularityCharacteristicStatsEvalType ()
    {
    }

    // CylindricityCharacteristicStatsEvalType
    //

    CylindricityCharacteristicStatsEvalType::
    CylindricityCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxCylindricityStats_ (::xml_schema::flags (), this)
    {
    }

    CylindricityCharacteristicStatsEvalType::
    CylindricityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (Status),
      MaxCylindricityStats_ (::xml_schema::flags (), this)
    {
    }

    CylindricityCharacteristicStatsEvalType::
    CylindricityCharacteristicStatsEvalType (const CylindricityCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (x, f, c),
      MaxCylindricityStats_ (x.MaxCylindricityStats_, f, this)
    {
    }

    CylindricityCharacteristicStatsEvalType::
    CylindricityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      MaxCylindricityStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CylindricityCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxCylindricityStats
        //
        if (n.name () == "MaxCylindricityStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxCylindricityStats_type > r (
            MaxCylindricityStats_traits::create (i, f, this));

          if (!this->MaxCylindricityStats_)
          {
            this->MaxCylindricityStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CylindricityCharacteristicStatsEvalType* CylindricityCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicStatsEvalType (*this, f, c);
    }

    CylindricityCharacteristicStatsEvalType::
    ~CylindricityCharacteristicStatsEvalType ()
    {
    }

    // LocationCharacteristicStatsEvalType
    //

    LocationCharacteristicStatsEvalType::
    LocationCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      DatumsOkStats_ (::xml_schema::flags (), this)
    {
    }

    LocationCharacteristicStatsEvalType::
    LocationCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      DatumsOkStats_ (::xml_schema::flags (), this)
    {
    }

    LocationCharacteristicStatsEvalType::
    LocationCharacteristicStatsEvalType (const LocationCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (x, f, c),
      DatumsOkStats_ (x.DatumsOkStats_, f, this)
    {
    }

    LocationCharacteristicStatsEvalType::
    LocationCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      DatumsOkStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void LocationCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DatumsOkStats
        //
        if (n.name () == "DatumsOkStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumsOkStats_type > r (
            DatumsOkStats_traits::create (i, f, this));

          if (!this->DatumsOkStats_)
          {
            this->DatumsOkStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LocationCharacteristicStatsEvalType* LocationCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationCharacteristicStatsEvalType (*this, f, c);
    }

    LocationCharacteristicStatsEvalType::
    ~LocationCharacteristicStatsEvalType ()
    {
    }

    // PositionCharacteristicStatsEvalType
    //

    PositionCharacteristicStatsEvalType::
    PositionCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      CompositeSegmentsStats_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicStatsEvalType::
    PositionCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      CompositeSegmentsStats_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicStatsEvalType::
    PositionCharacteristicStatsEvalType (const PositionCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this),
      CompositeSegmentsStats_ (x.CompositeSegmentsStats_, f, this)
    {
    }

    PositionCharacteristicStatsEvalType::
    PositionCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this),
      CompositeSegmentsStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        // CompositeSegmentsStats
        //
        if (n.name () == "CompositeSegmentsStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CompositeSegmentsStats_type > r (
            CompositeSegmentsStats_traits::create (i, f, this));

          if (!this->CompositeSegmentsStats_)
          {
            this->CompositeSegmentsStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PositionCharacteristicStatsEvalType* PositionCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicStatsEvalType (*this, f, c);
    }

    PositionCharacteristicStatsEvalType::
    ~PositionCharacteristicStatsEvalType ()
    {
    }

    // AngularCoordinateCharacteristicStatsEvalType
    //

    AngularCoordinateCharacteristicStatsEvalType::
    AngularCoordinateCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngularCoordinateCharacteristicStatsEvalType::
    AngularCoordinateCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngularCoordinateCharacteristicStatsEvalType::
    AngularCoordinateCharacteristicStatsEvalType (const AngularCoordinateCharacteristicStatsEvalType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (x, f, c)
    {
    }

    AngularCoordinateCharacteristicStatsEvalType::
    AngularCoordinateCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (e, f, c)
    {
    }

    AngularCoordinateCharacteristicStatsEvalType* AngularCoordinateCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicStatsEvalType (*this, f, c);
    }

    AngularCoordinateCharacteristicStatsEvalType::
    ~AngularCoordinateCharacteristicStatsEvalType ()
    {
    }

    // AngleCharacteristicStatsEvalType
    //

    AngleCharacteristicStatsEvalType::
    AngleCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngleCharacteristicStatsEvalType::
    AngleCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngleCharacteristicStatsEvalType::
    AngleCharacteristicStatsEvalType (const AngleCharacteristicStatsEvalType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (x, f, c)
    {
    }

    AngleCharacteristicStatsEvalType::
    AngleCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (e, f, c)
    {
    }

    AngleCharacteristicStatsEvalType* AngleCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicStatsEvalType (*this, f, c);
    }

    AngleCharacteristicStatsEvalType::
    ~AngleCharacteristicStatsEvalType ()
    {
    }

    // AngleFromCharacteristicStatsEvalType
    //

    AngleFromCharacteristicStatsEvalType::
    AngleFromCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngleFromCharacteristicStatsEvalType::
    AngleFromCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngleFromCharacteristicStatsEvalType::
    AngleFromCharacteristicStatsEvalType (const AngleFromCharacteristicStatsEvalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (x, f, c)
    {
    }

    AngleFromCharacteristicStatsEvalType::
    AngleFromCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (e, f, c)
    {
    }

    AngleFromCharacteristicStatsEvalType* AngleFromCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicStatsEvalType (*this, f, c);
    }

    AngleFromCharacteristicStatsEvalType::
    ~AngleFromCharacteristicStatsEvalType ()
    {
    }

    // AngleBetweenCharacteristicStatsEvalType
    //

    AngleBetweenCharacteristicStatsEvalType::
    AngleBetweenCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngleBetweenCharacteristicStatsEvalType::
    AngleBetweenCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (Status)
    {
    }

    AngleBetweenCharacteristicStatsEvalType::
    AngleBetweenCharacteristicStatsEvalType (const AngleBetweenCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (x, f, c)
    {
    }

    AngleBetweenCharacteristicStatsEvalType::
    AngleBetweenCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicStatsEvalType (e, f, c)
    {
    }

    AngleBetweenCharacteristicStatsEvalType* AngleBetweenCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicStatsEvalType (*this, f, c);
    }

    AngleBetweenCharacteristicStatsEvalType::
    ~AngleBetweenCharacteristicStatsEvalType ()
    {
    }

    // LinearCoordinateCharacteristicStatsEvalType
    //

    LinearCoordinateCharacteristicStatsEvalType::
    LinearCoordinateCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    LinearCoordinateCharacteristicStatsEvalType::
    LinearCoordinateCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    LinearCoordinateCharacteristicStatsEvalType::
    LinearCoordinateCharacteristicStatsEvalType (const LinearCoordinateCharacteristicStatsEvalType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    LinearCoordinateCharacteristicStatsEvalType::
    LinearCoordinateCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    LinearCoordinateCharacteristicStatsEvalType* LinearCoordinateCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicStatsEvalType (*this, f, c);
    }

    LinearCoordinateCharacteristicStatsEvalType::
    ~LinearCoordinateCharacteristicStatsEvalType ()
    {
    }

    // CurveLengthCharacteristicStatsEvalType
    //

    CurveLengthCharacteristicStatsEvalType::
    CurveLengthCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    CurveLengthCharacteristicStatsEvalType::
    CurveLengthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    CurveLengthCharacteristicStatsEvalType::
    CurveLengthCharacteristicStatsEvalType (const CurveLengthCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    CurveLengthCharacteristicStatsEvalType::
    CurveLengthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    CurveLengthCharacteristicStatsEvalType* CurveLengthCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicStatsEvalType (*this, f, c);
    }

    CurveLengthCharacteristicStatsEvalType::
    ~CurveLengthCharacteristicStatsEvalType ()
    {
    }

    // DiameterCharacteristicStatsEvalType
    //

    DiameterCharacteristicStatsEvalType::
    DiameterCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DiameterCharacteristicStatsEvalType::
    DiameterCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DiameterCharacteristicStatsEvalType::
    DiameterCharacteristicStatsEvalType (const DiameterCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    DiameterCharacteristicStatsEvalType::
    DiameterCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    DiameterCharacteristicStatsEvalType* DiameterCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicStatsEvalType (*this, f, c);
    }

    DiameterCharacteristicStatsEvalType::
    ~DiameterCharacteristicStatsEvalType ()
    {
    }

    // LengthCharacteristicStatsEvalType
    //

    LengthCharacteristicStatsEvalType::
    LengthCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    LengthCharacteristicStatsEvalType::
    LengthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    LengthCharacteristicStatsEvalType::
    LengthCharacteristicStatsEvalType (const LengthCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    LengthCharacteristicStatsEvalType::
    LengthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    LengthCharacteristicStatsEvalType* LengthCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicStatsEvalType (*this, f, c);
    }

    LengthCharacteristicStatsEvalType::
    ~LengthCharacteristicStatsEvalType ()
    {
    }

    // WidthCharacteristicStatsEvalType
    //

    WidthCharacteristicStatsEvalType::
    WidthCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    WidthCharacteristicStatsEvalType::
    WidthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    WidthCharacteristicStatsEvalType::
    WidthCharacteristicStatsEvalType (const WidthCharacteristicStatsEvalType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    WidthCharacteristicStatsEvalType::
    WidthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    WidthCharacteristicStatsEvalType* WidthCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicStatsEvalType (*this, f, c);
    }

    WidthCharacteristicStatsEvalType::
    ~WidthCharacteristicStatsEvalType ()
    {
    }

    // HeightCharacteristicStatsEvalType
    //

    HeightCharacteristicStatsEvalType::
    HeightCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    HeightCharacteristicStatsEvalType::
    HeightCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    HeightCharacteristicStatsEvalType::
    HeightCharacteristicStatsEvalType (const HeightCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    HeightCharacteristicStatsEvalType::
    HeightCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    HeightCharacteristicStatsEvalType* HeightCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicStatsEvalType (*this, f, c);
    }

    HeightCharacteristicStatsEvalType::
    ~HeightCharacteristicStatsEvalType ()
    {
    }

    // DepthCharacteristicStatsEvalType
    //

    DepthCharacteristicStatsEvalType::
    DepthCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DepthCharacteristicStatsEvalType::
    DepthCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DepthCharacteristicStatsEvalType::
    DepthCharacteristicStatsEvalType (const DepthCharacteristicStatsEvalType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    DepthCharacteristicStatsEvalType::
    DepthCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    DepthCharacteristicStatsEvalType* DepthCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicStatsEvalType (*this, f, c);
    }

    DepthCharacteristicStatsEvalType::
    ~DepthCharacteristicStatsEvalType ()
    {
    }

    // ThicknessCharacteristicStatsEvalType
    //

    ThicknessCharacteristicStatsEvalType::
    ThicknessCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    ThicknessCharacteristicStatsEvalType::
    ThicknessCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    ThicknessCharacteristicStatsEvalType::
    ThicknessCharacteristicStatsEvalType (const ThicknessCharacteristicStatsEvalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    ThicknessCharacteristicStatsEvalType::
    ThicknessCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    ThicknessCharacteristicStatsEvalType* ThicknessCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicStatsEvalType (*this, f, c);
    }

    ThicknessCharacteristicStatsEvalType::
    ~ThicknessCharacteristicStatsEvalType ()
    {
    }

    // SquareCharacteristicStatsEvalType
    //

    SquareCharacteristicStatsEvalType::
    SquareCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    SquareCharacteristicStatsEvalType::
    SquareCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    SquareCharacteristicStatsEvalType::
    SquareCharacteristicStatsEvalType (const SquareCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    SquareCharacteristicStatsEvalType::
    SquareCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    SquareCharacteristicStatsEvalType* SquareCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicStatsEvalType (*this, f, c);
    }

    SquareCharacteristicStatsEvalType::
    ~SquareCharacteristicStatsEvalType ()
    {
    }

    // DistanceFromCharacteristicStatsEvalType
    //

    DistanceFromCharacteristicStatsEvalType::
    DistanceFromCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DistanceFromCharacteristicStatsEvalType::
    DistanceFromCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DistanceFromCharacteristicStatsEvalType::
    DistanceFromCharacteristicStatsEvalType (const DistanceFromCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    DistanceFromCharacteristicStatsEvalType::
    DistanceFromCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    DistanceFromCharacteristicStatsEvalType* DistanceFromCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicStatsEvalType (*this, f, c);
    }

    DistanceFromCharacteristicStatsEvalType::
    ~DistanceFromCharacteristicStatsEvalType ()
    {
    }

    // DistanceBetweenCharacteristicStatsEvalType
    //

    DistanceBetweenCharacteristicStatsEvalType::
    DistanceBetweenCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DistanceBetweenCharacteristicStatsEvalType::
    DistanceBetweenCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    DistanceBetweenCharacteristicStatsEvalType::
    DistanceBetweenCharacteristicStatsEvalType (const DistanceBetweenCharacteristicStatsEvalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    DistanceBetweenCharacteristicStatsEvalType::
    DistanceBetweenCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    DistanceBetweenCharacteristicStatsEvalType* DistanceBetweenCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicStatsEvalType (*this, f, c);
    }

    DistanceBetweenCharacteristicStatsEvalType::
    ~DistanceBetweenCharacteristicStatsEvalType ()
    {
    }

    // RadiusCharacteristicStatsEvalType
    //

    RadiusCharacteristicStatsEvalType::
    RadiusCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    RadiusCharacteristicStatsEvalType::
    RadiusCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    RadiusCharacteristicStatsEvalType::
    RadiusCharacteristicStatsEvalType (const RadiusCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    RadiusCharacteristicStatsEvalType::
    RadiusCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    RadiusCharacteristicStatsEvalType* RadiusCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicStatsEvalType (*this, f, c);
    }

    RadiusCharacteristicStatsEvalType::
    ~RadiusCharacteristicStatsEvalType ()
    {
    }

    // ChordCharacteristicStatsEvalType
    //

    ChordCharacteristicStatsEvalType::
    ChordCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    ChordCharacteristicStatsEvalType::
    ChordCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (Status)
    {
    }

    ChordCharacteristicStatsEvalType::
    ChordCharacteristicStatsEvalType (const ChordCharacteristicStatsEvalType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (x, f, c)
    {
    }

    ChordCharacteristicStatsEvalType::
    ChordCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicStatsEvalType (e, f, c)
    {
    }

    ChordCharacteristicStatsEvalType* ChordCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicStatsEvalType (*this, f, c);
    }

    ChordCharacteristicStatsEvalType::
    ~ChordCharacteristicStatsEvalType ()
    {
    }

    // RunoutCharacteristicStatsEvalBaseType
    //

    RunoutCharacteristicStatsEvalBaseType::
    RunoutCharacteristicStatsEvalBaseType (const Status_type& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      DatumsOkStats_ (::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicStatsEvalBaseType::
    RunoutCharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      DatumsOkStats_ (::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicStatsEvalBaseType::
    RunoutCharacteristicStatsEvalBaseType (const RunoutCharacteristicStatsEvalBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this),
      DatumsOkStats_ (x.DatumsOkStats_, f, this)
    {
    }

    RunoutCharacteristicStatsEvalBaseType::
    RunoutCharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this),
      DatumsOkStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void RunoutCharacteristicStatsEvalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        // DatumsOkStats
        //
        if (n.name () == "DatumsOkStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumsOkStats_type > r (
            DatumsOkStats_traits::create (i, f, this));

          if (!this->DatumsOkStats_)
          {
            this->DatumsOkStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    RunoutCharacteristicStatsEvalBaseType* RunoutCharacteristicStatsEvalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RunoutCharacteristicStatsEvalBaseType (*this, f, c);
    }

    RunoutCharacteristicStatsEvalBaseType::
    ~RunoutCharacteristicStatsEvalBaseType ()
    {
    }

    // CircularRunoutCharacteristicStatsEvalType
    //

    CircularRunoutCharacteristicStatsEvalType::
    CircularRunoutCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (Status)
    {
    }

    CircularRunoutCharacteristicStatsEvalType::
    CircularRunoutCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (Status)
    {
    }

    CircularRunoutCharacteristicStatsEvalType::
    CircularRunoutCharacteristicStatsEvalType (const CircularRunoutCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicStatsEvalType::
    CircularRunoutCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicStatsEvalType* CircularRunoutCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicStatsEvalType (*this, f, c);
    }

    CircularRunoutCharacteristicStatsEvalType::
    ~CircularRunoutCharacteristicStatsEvalType ()
    {
    }

    // TotalRunoutCharacteristicStatsEvalType
    //

    TotalRunoutCharacteristicStatsEvalType::
    TotalRunoutCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (Status)
    {
    }

    TotalRunoutCharacteristicStatsEvalType::
    TotalRunoutCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (Status)
    {
    }

    TotalRunoutCharacteristicStatsEvalType::
    TotalRunoutCharacteristicStatsEvalType (const TotalRunoutCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicStatsEvalType::
    TotalRunoutCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicStatsEvalBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicStatsEvalType* TotalRunoutCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicStatsEvalType (*this, f, c);
    }

    TotalRunoutCharacteristicStatsEvalType::
    ~TotalRunoutCharacteristicStatsEvalType ()
    {
    }

    // ConcentricityCharacteristicStatsEvalType
    //

    ConcentricityCharacteristicStatsEvalType::
    ConcentricityCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this)
    {
    }

    ConcentricityCharacteristicStatsEvalType::
    ConcentricityCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this)
    {
    }

    ConcentricityCharacteristicStatsEvalType::
    ConcentricityCharacteristicStatsEvalType (const ConcentricityCharacteristicStatsEvalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this)
    {
    }

    ConcentricityCharacteristicStatsEvalType::
    ConcentricityCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ConcentricityCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ConcentricityCharacteristicStatsEvalType* ConcentricityCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicStatsEvalType (*this, f, c);
    }

    ConcentricityCharacteristicStatsEvalType::
    ~ConcentricityCharacteristicStatsEvalType ()
    {
    }

    // SymmetryCharacteristicStatsEvalType
    //

    SymmetryCharacteristicStatsEvalType::
    SymmetryCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      CompositeSegmentsStats_ (::xml_schema::flags (), this)
    {
    }

    SymmetryCharacteristicStatsEvalType::
    SymmetryCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      CompositeSegmentsStats_ (::xml_schema::flags (), this)
    {
    }

    SymmetryCharacteristicStatsEvalType::
    SymmetryCharacteristicStatsEvalType (const SymmetryCharacteristicStatsEvalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this),
      CompositeSegmentsStats_ (x.CompositeSegmentsStats_, f, this)
    {
    }

    SymmetryCharacteristicStatsEvalType::
    SymmetryCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this),
      CompositeSegmentsStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SymmetryCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        // CompositeSegmentsStats
        //
        if (n.name () == "CompositeSegmentsStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CompositeSegmentsStats_type > r (
            CompositeSegmentsStats_traits::create (i, f, this));

          if (!this->CompositeSegmentsStats_)
          {
            this->CompositeSegmentsStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SymmetryCharacteristicStatsEvalType* SymmetryCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicStatsEvalType (*this, f, c);
    }

    SymmetryCharacteristicStatsEvalType::
    ~SymmetryCharacteristicStatsEvalType ()
    {
    }

    // PointDeviationStatsEvalType
    //

    PointDeviationStatsEvalType::
    PointDeviationStatsEvalType (const MeasurePointActualIds_type& MeasurePointActualIds,
                                 const DeviationStats_type& DeviationStats)
    : ::xml_schema::type (),
      MeasurePointActualIds_ (MeasurePointActualIds, ::xml_schema::flags (), this),
      DeviationStats_ (DeviationStats, ::xml_schema::flags (), this)
    {
    }

    PointDeviationStatsEvalType::
    PointDeviationStatsEvalType (::std::auto_ptr< MeasurePointActualIds_type >& MeasurePointActualIds,
                                 ::std::auto_ptr< DeviationStats_type >& DeviationStats)
    : ::xml_schema::type (),
      MeasurePointActualIds_ (MeasurePointActualIds, ::xml_schema::flags (), this),
      DeviationStats_ (DeviationStats, ::xml_schema::flags (), this)
    {
    }

    PointDeviationStatsEvalType::
    PointDeviationStatsEvalType (const PointDeviationStatsEvalType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MeasurePointActualIds_ (x.MeasurePointActualIds_, f, this),
      DeviationStats_ (x.DeviationStats_, f, this)
    {
    }

    PointDeviationStatsEvalType::
    PointDeviationStatsEvalType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MeasurePointActualIds_ (f, this),
      DeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PointDeviationStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurePointActualIds
        //
        if (n.name () == "MeasurePointActualIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurePointActualIds_type > r (
            MeasurePointActualIds_traits::create (i, f, this));

          if (!MeasurePointActualIds_.present ())
          {
            this->MeasurePointActualIds_.set (r);
            continue;
          }
        }

        // DeviationStats
        //
        if (n.name () == "DeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DeviationStats_type > r (
            DeviationStats_traits::create (i, f, this));

          if (!DeviationStats_.present ())
          {
            this->DeviationStats_.set (r);
            continue;
          }
        }

        break;
      }

      if (!MeasurePointActualIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MeasurePointActualIds",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DeviationStats_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DeviationStats",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PointDeviationStatsEvalType* PointDeviationStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDeviationStatsEvalType (*this, f, c);
    }

    PointDeviationStatsEvalType::
    ~PointDeviationStatsEvalType ()
    {
    }

    // PointDeviationsStatsEvalType
    //

    PointDeviationsStatsEvalType::
    PointDeviationsStatsEvalType ()
    : ::xml_schema::type (),
      PointDeviationStats_ (::xml_schema::flags (), this)
    {
    }

    PointDeviationsStatsEvalType::
    PointDeviationsStatsEvalType (const PointDeviationsStatsEvalType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      PointDeviationStats_ (x.PointDeviationStats_, f, this)
    {
    }

    PointDeviationsStatsEvalType::
    PointDeviationsStatsEvalType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      PointDeviationStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PointDeviationsStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PointDeviationStats
        //
        if (n.name () == "PointDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointDeviationStats_type > r (
            PointDeviationStats_traits::create (i, f, this));

          this->PointDeviationStats_.push_back (r);
          continue;
        }

        break;
      }
    }

    PointDeviationsStatsEvalType* PointDeviationsStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDeviationsStatsEvalType (*this, f, c);
    }

    PointDeviationsStatsEvalType::
    ~PointDeviationsStatsEvalType ()
    {
    }

    // ProfileCharacteristicStatsEvalBaseType
    //

    ProfileCharacteristicStatsEvalBaseType::
    ProfileCharacteristicStatsEvalBaseType (const Status_type& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      WorstPositiveDeviationStats_ (::xml_schema::flags (), this),
      WorstNegativeDeviationStats_ (::xml_schema::flags (), this),
      PointDeviationsStats_ (::xml_schema::flags (), this),
      DatumsOkStats_ (::xml_schema::flags (), this),
      CompositeSegmentsStats_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicStatsEvalBaseType::
    ProfileCharacteristicStatsEvalBaseType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (Status),
      CapabilityCalculationMethod_ (::xml_schema::flags (), this),
      WorstPositiveDeviationStats_ (::xml_schema::flags (), this),
      WorstNegativeDeviationStats_ (::xml_schema::flags (), this),
      PointDeviationsStats_ (::xml_schema::flags (), this),
      DatumsOkStats_ (::xml_schema::flags (), this),
      CompositeSegmentsStats_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicStatsEvalBaseType::
    ProfileCharacteristicStatsEvalBaseType (const ProfileCharacteristicStatsEvalBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (x, f, c),
      CapabilityCalculationMethod_ (x.CapabilityCalculationMethod_, f, this),
      WorstPositiveDeviationStats_ (x.WorstPositiveDeviationStats_, f, this),
      WorstNegativeDeviationStats_ (x.WorstNegativeDeviationStats_, f, this),
      PointDeviationsStats_ (x.PointDeviationsStats_, f, this),
      DatumsOkStats_ (x.DatumsOkStats_, f, this),
      CompositeSegmentsStats_ (x.CompositeSegmentsStats_, f, this)
    {
    }

    ProfileCharacteristicStatsEvalBaseType::
    ProfileCharacteristicStatsEvalBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicStatsEvalType (e, f | ::xml_schema::flags::base, c),
      CapabilityCalculationMethod_ (f, this),
      WorstPositiveDeviationStats_ (f, this),
      WorstNegativeDeviationStats_ (f, this),
      PointDeviationsStats_ (f, this),
      DatumsOkStats_ (f, this),
      CompositeSegmentsStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicStatsEvalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicStatsEvalType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CapabilityCalculationMethod
        //
        if (n.name () == "CapabilityCalculationMethod" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CapabilityCalculationMethod_type > r (
            CapabilityCalculationMethod_traits::create (i, f, this));

          if (!this->CapabilityCalculationMethod_)
          {
            this->CapabilityCalculationMethod_.set (r);
            continue;
          }
        }

        // WorstPositiveDeviationStats
        //
        if (n.name () == "WorstPositiveDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WorstPositiveDeviationStats_type > r (
            WorstPositiveDeviationStats_traits::create (i, f, this));

          if (!this->WorstPositiveDeviationStats_)
          {
            this->WorstPositiveDeviationStats_.set (r);
            continue;
          }
        }

        // WorstNegativeDeviationStats
        //
        if (n.name () == "WorstNegativeDeviationStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WorstNegativeDeviationStats_type > r (
            WorstNegativeDeviationStats_traits::create (i, f, this));

          if (!this->WorstNegativeDeviationStats_)
          {
            this->WorstNegativeDeviationStats_.set (r);
            continue;
          }
        }

        // PointDeviationsStats
        //
        if (n.name () == "PointDeviationsStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointDeviationsStats_type > r (
            PointDeviationsStats_traits::create (i, f, this));

          if (!this->PointDeviationsStats_)
          {
            this->PointDeviationsStats_.set (r);
            continue;
          }
        }

        // DatumsOkStats
        //
        if (n.name () == "DatumsOkStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumsOkStats_type > r (
            DatumsOkStats_traits::create (i, f, this));

          if (!this->DatumsOkStats_)
          {
            this->DatumsOkStats_.set (r);
            continue;
          }
        }

        // CompositeSegmentsStats
        //
        if (n.name () == "CompositeSegmentsStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CompositeSegmentsStats_type > r (
            CompositeSegmentsStats_traits::create (i, f, this));

          if (!this->CompositeSegmentsStats_)
          {
            this->CompositeSegmentsStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ProfileCharacteristicStatsEvalBaseType* ProfileCharacteristicStatsEvalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProfileCharacteristicStatsEvalBaseType (*this, f, c);
    }

    ProfileCharacteristicStatsEvalBaseType::
    ~ProfileCharacteristicStatsEvalBaseType ()
    {
    }

    // LineProfileCharacteristicStatsEvalType
    //

    LineProfileCharacteristicStatsEvalType::
    LineProfileCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    LineProfileCharacteristicStatsEvalType::
    LineProfileCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    LineProfileCharacteristicStatsEvalType::
    LineProfileCharacteristicStatsEvalType (const LineProfileCharacteristicStatsEvalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (x, f, c)
    {
    }

    LineProfileCharacteristicStatsEvalType::
    LineProfileCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (e, f, c)
    {
    }

    LineProfileCharacteristicStatsEvalType* LineProfileCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicStatsEvalType (*this, f, c);
    }

    LineProfileCharacteristicStatsEvalType::
    ~LineProfileCharacteristicStatsEvalType ()
    {
    }

    // PointProfileCharacteristicStatsEvalType
    //

    PointProfileCharacteristicStatsEvalType::
    PointProfileCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    PointProfileCharacteristicStatsEvalType::
    PointProfileCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    PointProfileCharacteristicStatsEvalType::
    PointProfileCharacteristicStatsEvalType (const PointProfileCharacteristicStatsEvalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicStatsEvalType::
    PointProfileCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicStatsEvalType* PointProfileCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicStatsEvalType (*this, f, c);
    }

    PointProfileCharacteristicStatsEvalType::
    ~PointProfileCharacteristicStatsEvalType ()
    {
    }

    // SurfaceProfileCharacteristicStatsEvalType
    //

    SurfaceProfileCharacteristicStatsEvalType::
    SurfaceProfileCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    SurfaceProfileCharacteristicStatsEvalType::
    SurfaceProfileCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    SurfaceProfileCharacteristicStatsEvalType::
    SurfaceProfileCharacteristicStatsEvalType (const SurfaceProfileCharacteristicStatsEvalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (x, f, c)
    {
    }

    SurfaceProfileCharacteristicStatsEvalType::
    SurfaceProfileCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (e, f, c)
    {
    }

    SurfaceProfileCharacteristicStatsEvalType* SurfaceProfileCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicStatsEvalType (*this, f, c);
    }

    SurfaceProfileCharacteristicStatsEvalType::
    ~SurfaceProfileCharacteristicStatsEvalType ()
    {
    }

    // SurfaceProfileNonUniformCharacteristicStatsEvalType
    //

    SurfaceProfileNonUniformCharacteristicStatsEvalType::
    SurfaceProfileNonUniformCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    SurfaceProfileNonUniformCharacteristicStatsEvalType::
    SurfaceProfileNonUniformCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (Status)
    {
    }

    SurfaceProfileNonUniformCharacteristicStatsEvalType::
    SurfaceProfileNonUniformCharacteristicStatsEvalType (const SurfaceProfileNonUniformCharacteristicStatsEvalType& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (x, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicStatsEvalType::
    SurfaceProfileNonUniformCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicStatsEvalBaseType (e, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicStatsEvalType* SurfaceProfileNonUniformCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicStatsEvalType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicStatsEvalType::
    ~SurfaceProfileNonUniformCharacteristicStatsEvalType ()
    {
    }

    // ThreadCharacteristicStatsEvalType
    //

    ThreadCharacteristicStatsEvalType::
    ThreadCharacteristicStatsEvalType (const Status_type& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ThreadStats_ (::xml_schema::flags (), this),
      PitchDiameterStats_ (::xml_schema::flags (), this),
      FunctionalSizeStats_ (::xml_schema::flags (), this)
    {
    }

    ThreadCharacteristicStatsEvalType::
    ThreadCharacteristicStatsEvalType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (Status),
      ThreadStats_ (::xml_schema::flags (), this),
      PitchDiameterStats_ (::xml_schema::flags (), this),
      FunctionalSizeStats_ (::xml_schema::flags (), this)
    {
    }

    ThreadCharacteristicStatsEvalType::
    ThreadCharacteristicStatsEvalType (const ThreadCharacteristicStatsEvalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (x, f, c),
      ThreadStats_ (x.ThreadStats_, f, this),
      PitchDiameterStats_ (x.PitchDiameterStats_, f, this),
      FunctionalSizeStats_ (x.FunctionalSizeStats_, f, this)
    {
    }

    ThreadCharacteristicStatsEvalType::
    ThreadCharacteristicStatsEvalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicStatsEvalBaseType (e, f | ::xml_schema::flags::base, c),
      ThreadStats_ (f, this),
      PitchDiameterStats_ (f, this),
      FunctionalSizeStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ThreadCharacteristicStatsEvalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicStatsEvalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ThreadStats
        //
        if (n.name () == "ThreadStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThreadStats_type > r (
            ThreadStats_traits::create (i, f, this));

          if (!this->ThreadStats_)
          {
            this->ThreadStats_.set (r);
            continue;
          }
        }

        // PitchDiameterStats
        //
        if (n.name () == "PitchDiameterStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PitchDiameterStats_type > r (
            PitchDiameterStats_traits::create (i, f, this));

          if (!this->PitchDiameterStats_)
          {
            this->PitchDiameterStats_.set (r);
            continue;
          }
        }

        // FunctionalSizeStats
        //
        if (n.name () == "FunctionalSizeStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FunctionalSizeStats_type > r (
            FunctionalSizeStats_traits::create (i, f, this));

          if (!this->FunctionalSizeStats_)
          {
            this->FunctionalSizeStats_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ThreadCharacteristicStatsEvalType* ThreadCharacteristicStatsEvalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicStatsEvalType (*this, f, c);
    }

    ThreadCharacteristicStatsEvalType::
    ~ThreadCharacteristicStatsEvalType ()
    {
    }

    // CharacteristicsStatsType
    //

    CharacteristicsStatsType::
    CharacteristicsStatsType ()
    : ::xml_schema::type (),
      CharacteristicStats_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicsStatsType::
    CharacteristicsStatsType (const CharacteristicsStatsType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicStats_ (x.CharacteristicStats_, f, this)
    {
    }

    CharacteristicsStatsType::
    CharacteristicsStatsType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicStats_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicsStatsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicStats
        //
        if (n.name () == "CharacteristicStats" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicStats_type > r (
            CharacteristicStats_traits::create (i, f, this));

          this->CharacteristicStats_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicsStatsType* CharacteristicsStatsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicsStatsType (*this, f, c);
    }

    CharacteristicsStatsType::
    ~CharacteristicsStatsType ()
    {
    }

    // AverageFeatureType
    //

    AverageFeatureType::
    AverageFeatureType (const FeatureActual_type& FeatureActual,
                        const ActualIds_type& ActualIds)
    : ::xml_schema::type (),
      FeatureActual_ (FeatureActual, ::xml_schema::flags (), this),
      ActualIds_ (ActualIds, ::xml_schema::flags (), this)
    {
    }

    AverageFeatureType::
    AverageFeatureType (::std::auto_ptr< FeatureActual_type >& FeatureActual,
                        ::std::auto_ptr< ActualIds_type >& ActualIds)
    : ::xml_schema::type (),
      FeatureActual_ (FeatureActual, ::xml_schema::flags (), this),
      ActualIds_ (ActualIds, ::xml_schema::flags (), this)
    {
    }

    AverageFeatureType::
    AverageFeatureType (const AverageFeatureType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FeatureActual_ (x.FeatureActual_, f, this),
      ActualIds_ (x.ActualIds_, f, this)
    {
    }

    AverageFeatureType::
    AverageFeatureType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FeatureActual_ (f, this),
      ActualIds_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void AverageFeatureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // FeatureActual
        //
        if (n.name () == "FeatureActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FeatureActual_type > r (
            FeatureActual_traits::create (i, f, this));

          if (!FeatureActual_.present ())
          {
            this->FeatureActual_.set (r);
            continue;
          }
        }

        // ActualIds
        //
        if (n.name () == "ActualIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualIds_type > r (
            ActualIds_traits::create (i, f, this));

          if (!ActualIds_.present ())
          {
            this->ActualIds_.set (r);
            continue;
          }
        }

        break;
      }

      if (!FeatureActual_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FeatureActual",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ActualIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ActualIds",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    AverageFeatureType* AverageFeatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AverageFeatureType (*this, f, c);
    }

    AverageFeatureType::
    ~AverageFeatureType ()
    {
    }

    // AverageFeaturesType
    //

    AverageFeaturesType::
    AverageFeaturesType ()
    : ::xml_schema::type (),
      AverageFeature_ (::xml_schema::flags (), this)
    {
    }

    AverageFeaturesType::
    AverageFeaturesType (const AverageFeaturesType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AverageFeature_ (x.AverageFeature_, f, this)
    {
    }

    AverageFeaturesType::
    AverageFeaturesType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AverageFeature_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void AverageFeaturesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AverageFeature
        //
        if (n.name () == "AverageFeature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AverageFeature_type > r (
            AverageFeature_traits::create (i, f, this));

          this->AverageFeature_.push_back (r);
          continue;
        }

        break;
      }
    }

    AverageFeaturesType* AverageFeaturesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AverageFeaturesType (*this, f, c);
    }

    AverageFeaturesType::
    ~AverageFeaturesType ()
    {
    }

    // SummaryStatisticsType
    //

    SummaryStatisticsType::
    SummaryStatisticsType (const SummaryType_type& SummaryType)
    : ::xml_schema::type (),
      SummaryType_ (SummaryType, ::xml_schema::flags (), this),
      Average_ (::xml_schema::flags (), this),
      Maximum_ (::xml_schema::flags (), this),
      Minimum_ (::xml_schema::flags (), this),
      Range_ (::xml_schema::flags (), this),
      StandardDeviation_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsType::
    SummaryStatisticsType (const SummaryStatisticsType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SummaryType_ (x.SummaryType_, f, this),
      Average_ (x.Average_, f, this),
      Maximum_ (x.Maximum_, f, this),
      Minimum_ (x.Minimum_, f, this),
      Range_ (x.Range_, f, this),
      StandardDeviation_ (x.StandardDeviation_, f, this)
    {
    }

    SummaryStatisticsType::
    SummaryStatisticsType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SummaryType_ (f, this),
      Average_ (f, this),
      Maximum_ (f, this),
      Minimum_ (f, this),
      Range_ (f, this),
      StandardDeviation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SummaryType
        //
        if (n.name () == "SummaryType" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SummaryType_type > r (
            SummaryType_traits::create (i, f, this));

          if (!SummaryType_.present ())
          {
            this->SummaryType_.set (r);
            continue;
          }
        }

        // Average
        //
        if (n.name () == "Average" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Average_type > r (
            Average_traits::create (i, f, this));

          if (!this->Average_)
          {
            this->Average_.set (r);
            continue;
          }
        }

        // Maximum
        //
        if (n.name () == "Maximum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Maximum_type > r (
            Maximum_traits::create (i, f, this));

          if (!this->Maximum_)
          {
            this->Maximum_.set (r);
            continue;
          }
        }

        // Minimum
        //
        if (n.name () == "Minimum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Minimum_type > r (
            Minimum_traits::create (i, f, this));

          if (!this->Minimum_)
          {
            this->Minimum_.set (r);
            continue;
          }
        }

        // Range
        //
        if (n.name () == "Range" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Range_type > r (
            Range_traits::create (i, f, this));

          if (!this->Range_)
          {
            this->Range_.set (r);
            continue;
          }
        }

        // StandardDeviation
        //
        if (n.name () == "StandardDeviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StandardDeviation_type > r (
            StandardDeviation_traits::create (i, f, this));

          if (!this->StandardDeviation_)
          {
            this->StandardDeviation_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SummaryType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SummaryType",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SummaryStatisticsType* SummaryStatisticsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsType (*this, f, c);
    }

    SummaryStatisticsType::
    ~SummaryStatisticsType ()
    {
    }

    // SummaryStatisticsLinearType
    //

    SummaryStatisticsLinearType::
    SummaryStatisticsLinearType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      linearUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsLinearType::
    SummaryStatisticsLinearType (const SummaryStatisticsLinearType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      linearUnit_ (x.linearUnit_, f, this)
    {
    }

    SummaryStatisticsLinearType::
    SummaryStatisticsLinearType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      linearUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsLinearType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "linearUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< linearUnit_type > r (
            linearUnit_traits::create (i, f, this));

          this->linearUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsLinearType* SummaryStatisticsLinearType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsLinearType (*this, f, c);
    }

    SummaryStatisticsLinearType::
    ~SummaryStatisticsLinearType ()
    {
    }

    // SummaryStatisticsAngularType
    //

    SummaryStatisticsAngularType::
    SummaryStatisticsAngularType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      angularUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsAngularType::
    SummaryStatisticsAngularType (const SummaryStatisticsAngularType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      angularUnit_ (x.angularUnit_, f, this)
    {
    }

    SummaryStatisticsAngularType::
    SummaryStatisticsAngularType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      angularUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsAngularType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "angularUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< angularUnit_type > r (
            angularUnit_traits::create (i, f, this));

          this->angularUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsAngularType* SummaryStatisticsAngularType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsAngularType (*this, f, c);
    }

    SummaryStatisticsAngularType::
    ~SummaryStatisticsAngularType ()
    {
    }

    // SummaryStatisticsAreaType
    //

    SummaryStatisticsAreaType::
    SummaryStatisticsAreaType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      areaUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsAreaType::
    SummaryStatisticsAreaType (const SummaryStatisticsAreaType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      areaUnit_ (x.areaUnit_, f, this)
    {
    }

    SummaryStatisticsAreaType::
    SummaryStatisticsAreaType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      areaUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsAreaType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "areaUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< areaUnit_type > r (
            areaUnit_traits::create (i, f, this));

          this->areaUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsAreaType* SummaryStatisticsAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsAreaType (*this, f, c);
    }

    SummaryStatisticsAreaType::
    ~SummaryStatisticsAreaType ()
    {
    }

    // SummaryStatisticsForceType
    //

    SummaryStatisticsForceType::
    SummaryStatisticsForceType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      forceUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsForceType::
    SummaryStatisticsForceType (const SummaryStatisticsForceType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      forceUnit_ (x.forceUnit_, f, this)
    {
    }

    SummaryStatisticsForceType::
    SummaryStatisticsForceType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      forceUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsForceType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "forceUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< forceUnit_type > r (
            forceUnit_traits::create (i, f, this));

          this->forceUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsForceType* SummaryStatisticsForceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsForceType (*this, f, c);
    }

    SummaryStatisticsForceType::
    ~SummaryStatisticsForceType ()
    {
    }

    // SummaryStatisticsMassType
    //

    SummaryStatisticsMassType::
    SummaryStatisticsMassType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      massUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsMassType::
    SummaryStatisticsMassType (const SummaryStatisticsMassType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      massUnit_ (x.massUnit_, f, this)
    {
    }

    SummaryStatisticsMassType::
    SummaryStatisticsMassType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      massUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsMassType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "massUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< massUnit_type > r (
            massUnit_traits::create (i, f, this));

          this->massUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsMassType* SummaryStatisticsMassType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsMassType (*this, f, c);
    }

    SummaryStatisticsMassType::
    ~SummaryStatisticsMassType ()
    {
    }

    // SummaryStatisticsPressureType
    //

    SummaryStatisticsPressureType::
    SummaryStatisticsPressureType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      pressureUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsPressureType::
    SummaryStatisticsPressureType (const SummaryStatisticsPressureType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      pressureUnit_ (x.pressureUnit_, f, this)
    {
    }

    SummaryStatisticsPressureType::
    SummaryStatisticsPressureType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      pressureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsPressureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "pressureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< pressureUnit_type > r (
            pressureUnit_traits::create (i, f, this));

          this->pressureUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsPressureType* SummaryStatisticsPressureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsPressureType (*this, f, c);
    }

    SummaryStatisticsPressureType::
    ~SummaryStatisticsPressureType ()
    {
    }

    // SummaryStatisticsSpeedType
    //

    SummaryStatisticsSpeedType::
    SummaryStatisticsSpeedType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      speedUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsSpeedType::
    SummaryStatisticsSpeedType (const SummaryStatisticsSpeedType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      speedUnit_ (x.speedUnit_, f, this)
    {
    }

    SummaryStatisticsSpeedType::
    SummaryStatisticsSpeedType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      speedUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsSpeedType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "speedUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< speedUnit_type > r (
            speedUnit_traits::create (i, f, this));

          this->speedUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsSpeedType* SummaryStatisticsSpeedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsSpeedType (*this, f, c);
    }

    SummaryStatisticsSpeedType::
    ~SummaryStatisticsSpeedType ()
    {
    }

    // SummaryStatisticsTemperatureType
    //

    SummaryStatisticsTemperatureType::
    SummaryStatisticsTemperatureType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      temperatureUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsTemperatureType::
    SummaryStatisticsTemperatureType (const SummaryStatisticsTemperatureType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      temperatureUnit_ (x.temperatureUnit_, f, this)
    {
    }

    SummaryStatisticsTemperatureType::
    SummaryStatisticsTemperatureType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      temperatureUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsTemperatureType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "temperatureUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< temperatureUnit_type > r (
            temperatureUnit_traits::create (i, f, this));

          this->temperatureUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsTemperatureType* SummaryStatisticsTemperatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsTemperatureType (*this, f, c);
    }

    SummaryStatisticsTemperatureType::
    ~SummaryStatisticsTemperatureType ()
    {
    }

    // SummaryStatisticsTimeType
    //

    SummaryStatisticsTimeType::
    SummaryStatisticsTimeType (const SummaryType_type& SummaryType)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      timeUnit_ (::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsTimeType::
    SummaryStatisticsTimeType (const SummaryStatisticsTimeType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      timeUnit_ (x.timeUnit_, f, this)
    {
    }

    SummaryStatisticsTimeType::
    SummaryStatisticsTimeType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      timeUnit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsTimeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "timeUnit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< timeUnit_type > r (
            timeUnit_traits::create (i, f, this));

          this->timeUnit_.set (r);
          continue;
        }
      }
    }

    SummaryStatisticsTimeType* SummaryStatisticsTimeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsTimeType (*this, f, c);
    }

    SummaryStatisticsTimeType::
    ~SummaryStatisticsTimeType ()
    {
    }

    // SummaryStatisticsUserDefinedUnitType
    //

    SummaryStatisticsUserDefinedUnitType::
    SummaryStatisticsUserDefinedUnitType (const SummaryType_type& SummaryType,
                                          const unitName_type& unitName)
    : ::xsd::qif2::SummaryStatisticsType (SummaryType),
      unitName_ (unitName, ::xml_schema::flags (), this)
    {
    }

    SummaryStatisticsUserDefinedUnitType::
    SummaryStatisticsUserDefinedUnitType (const SummaryStatisticsUserDefinedUnitType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (x, f, c),
      unitName_ (x.unitName_, f, this)
    {
    }

    SummaryStatisticsUserDefinedUnitType::
    SummaryStatisticsUserDefinedUnitType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::SummaryStatisticsType (e, f | ::xml_schema::flags::base, c),
      unitName_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SummaryStatisticsUserDefinedUnitType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SummaryStatisticsType::parse (p, f);

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "unitName" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< unitName_type > r (
            unitName_traits::create (i, f, this));

          this->unitName_.set (r);
          continue;
        }
      }

      if (!unitName_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "unitName",
          "");
      }
    }

    SummaryStatisticsUserDefinedUnitType* SummaryStatisticsUserDefinedUnitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SummaryStatisticsUserDefinedUnitType (*this, f, c);
    }

    SummaryStatisticsUserDefinedUnitType::
    ~SummaryStatisticsUserDefinedUnitType ()
    {
    }

    // AssignableCauseEnumType
    //

    AssignableCauseEnumType::
    AssignableCauseEnumType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_AssignableCauseEnumType_convert ();
    }

    AssignableCauseEnumType::
    AssignableCauseEnumType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_AssignableCauseEnumType_convert ();
    }

    AssignableCauseEnumType::
    AssignableCauseEnumType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_AssignableCauseEnumType_convert ();
    }

    AssignableCauseEnumType* AssignableCauseEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AssignableCauseEnumType (*this, f, c);
    }

    AssignableCauseEnumType::value AssignableCauseEnumType::
    _xsd_AssignableCauseEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AssignableCauseEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_AssignableCauseEnumType_indexes_,
                        _xsd_AssignableCauseEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_AssignableCauseEnumType_indexes_ + 5 || _xsd_AssignableCauseEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const AssignableCauseEnumType::
    _xsd_AssignableCauseEnumType_literals_[5] =
    {
      "POWER_FAILURE",
      "BROKEN_TOOL",
      "COMPUTER_CRASH",
      "WEATHER_EVENT",
      "OTHER"
    };

    const AssignableCauseEnumType::value AssignableCauseEnumType::
    _xsd_AssignableCauseEnumType_indexes_[5] =
    {
      ::xsd::qif2::AssignableCauseEnumType::BROKEN_TOOL,
      ::xsd::qif2::AssignableCauseEnumType::COMPUTER_CRASH,
      ::xsd::qif2::AssignableCauseEnumType::OTHER,
      ::xsd::qif2::AssignableCauseEnumType::POWER_FAILURE,
      ::xsd::qif2::AssignableCauseEnumType::WEATHER_EVENT
    };

    // AssignableCauseType
    //

    AssignableCauseType::
    AssignableCauseType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (::xml_schema::flags (), this),
      Description_ (::xml_schema::flags (), this),
      AssignableCauseEnum_ (::xml_schema::flags (), this),
      CorrectiveActionIds_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    AssignableCauseType::
    AssignableCauseType (const AssignableCauseType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Description_ (x.Description_, f, this),
      AssignableCauseEnum_ (x.AssignableCauseEnum_, f, this),
      CorrectiveActionIds_ (x.CorrectiveActionIds_, f, this),
      id_ (x.id_, f, this)
    {
    }

    AssignableCauseType::
    AssignableCauseType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (f, this),
      Description_ (f, this),
      AssignableCauseEnum_ (f, this),
      CorrectiveActionIds_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AssignableCauseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // AssignableCauseEnum
        //
        if (n.name () == "AssignableCauseEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AssignableCauseEnum_type > r (
            AssignableCauseEnum_traits::create (i, f, this));

          if (!this->AssignableCauseEnum_)
          {
            this->AssignableCauseEnum_.set (r);
            continue;
          }
        }

        // CorrectiveActionIds
        //
        if (n.name () == "CorrectiveActionIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveActionIds_type > r (
            CorrectiveActionIds_traits::create (i, f, this));

          if (!this->CorrectiveActionIds_)
          {
            this->CorrectiveActionIds_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    AssignableCauseType* AssignableCauseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AssignableCauseType (*this, f, c);
    }

    AssignableCauseType::
    ~AssignableCauseType ()
    {
    }

    // AssignableCausesType
    //

    AssignableCausesType::
    AssignableCausesType ()
    : ::xml_schema::type (),
      AssignableCause_ (::xml_schema::flags (), this)
    {
    }

    AssignableCausesType::
    AssignableCausesType (const AssignableCausesType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AssignableCause_ (x.AssignableCause_, f, this)
    {
    }

    AssignableCausesType::
    AssignableCausesType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AssignableCause_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void AssignableCausesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AssignableCause
        //
        if (n.name () == "AssignableCause" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AssignableCause_type > r (
            AssignableCause_traits::create (i, f, this));

          this->AssignableCause_.push_back (r);
          continue;
        }

        break;
      }
    }

    AssignableCausesType* AssignableCausesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AssignableCausesType (*this, f, c);
    }

    AssignableCausesType::
    ~AssignableCausesType ()
    {
    }

    // ActionToTakeEnumType
    //

    ActionToTakeEnumType::
    ActionToTakeEnumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ActionToTakeEnumType_convert ();
    }

    ActionToTakeEnumType::
    ActionToTakeEnumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ActionToTakeEnumType_convert ();
    }

    ActionToTakeEnumType::
    ActionToTakeEnumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ActionToTakeEnumType_convert ();
    }

    ActionToTakeEnumType* ActionToTakeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActionToTakeEnumType (*this, f, c);
    }

    ActionToTakeEnumType::value ActionToTakeEnumType::
    _xsd_ActionToTakeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActionToTakeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ActionToTakeEnumType_indexes_,
                        _xsd_ActionToTakeEnumType_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_ActionToTakeEnumType_indexes_ + 8 || _xsd_ActionToTakeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ActionToTakeEnumType::
    _xsd_ActionToTakeEnumType_literals_[8] =
    {
      "HALT_PRODUCTION",
      "CONTAINMENT",
      "NEW_MATERIAL_BATCH",
      "NEW_TOOLING",
      "INSPECT_100PC",
      "REBOOT",
      "RECALIBRATE",
      "OTHER"
    };

    const ActionToTakeEnumType::value ActionToTakeEnumType::
    _xsd_ActionToTakeEnumType_indexes_[8] =
    {
      ::xsd::qif2::ActionToTakeEnumType::CONTAINMENT,
      ::xsd::qif2::ActionToTakeEnumType::HALT_PRODUCTION,
      ::xsd::qif2::ActionToTakeEnumType::INSPECT_100PC,
      ::xsd::qif2::ActionToTakeEnumType::NEW_MATERIAL_BATCH,
      ::xsd::qif2::ActionToTakeEnumType::NEW_TOOLING,
      ::xsd::qif2::ActionToTakeEnumType::OTHER,
      ::xsd::qif2::ActionToTakeEnumType::REBOOT,
      ::xsd::qif2::ActionToTakeEnumType::RECALIBRATE
    };

    // CorrectiveActionType
    //

    CorrectiveActionType::
    CorrectiveActionType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (::xml_schema::flags (), this),
      ActionToTake_ (::xml_schema::flags (), this),
      ActionToTakeEnum_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    CorrectiveActionType::
    CorrectiveActionType (const CorrectiveActionType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      ActionToTake_ (x.ActionToTake_, f, this),
      ActionToTakeEnum_ (x.ActionToTakeEnum_, f, this),
      id_ (x.id_, f, this)
    {
    }

    CorrectiveActionType::
    CorrectiveActionType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (f, this),
      ActionToTake_ (f, this),
      ActionToTakeEnum_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CorrectiveActionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // ActionToTake
        //
        if (n.name () == "ActionToTake" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActionToTake_type > r (
            ActionToTake_traits::create (i, f, this));

          if (!this->ActionToTake_)
          {
            this->ActionToTake_.set (r);
            continue;
          }
        }

        // ActionToTakeEnum
        //
        if (n.name () == "ActionToTakeEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActionToTakeEnum_type > r (
            ActionToTakeEnum_traits::create (i, f, this));

          if (!this->ActionToTakeEnum_)
          {
            this->ActionToTakeEnum_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    CorrectiveActionType* CorrectiveActionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CorrectiveActionType (*this, f, c);
    }

    CorrectiveActionType::
    ~CorrectiveActionType ()
    {
    }

    // CorrectiveActionsType
    //

    CorrectiveActionsType::
    CorrectiveActionsType ()
    : ::xml_schema::type (),
      CorrectiveAction_ (::xml_schema::flags (), this)
    {
    }

    CorrectiveActionsType::
    CorrectiveActionsType (const CorrectiveActionsType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CorrectiveAction_ (x.CorrectiveAction_, f, this)
    {
    }

    CorrectiveActionsType::
    CorrectiveActionsType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CorrectiveAction_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CorrectiveActionsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CorrectiveAction
        //
        if (n.name () == "CorrectiveAction" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveAction_type > r (
            CorrectiveAction_traits::create (i, f, this));

          this->CorrectiveAction_.push_back (r);
          continue;
        }

        break;
      }
    }

    CorrectiveActionsType* CorrectiveActionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CorrectiveActionsType (*this, f, c);
    }

    CorrectiveActionsType::
    ~CorrectiveActionsType ()
    {
    }

    // StudyIssueType
    //

    StudyIssueType::
    StudyIssueType (const id_type& id)
    : ::xml_schema::type (),
      Traceability_ (::xml_schema::flags (), this),
      AssignableCauseIds_ (::xml_schema::flags (), this),
      CorrectiveActionIds_ (::xml_schema::flags (), this),
      Resolution_ (::xml_schema::flags (), this),
      CharacteristicIds_ (::xml_schema::flags (), this),
      SubgroupIds_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    StudyIssueType::
    StudyIssueType (const StudyIssueType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Traceability_ (x.Traceability_, f, this),
      AssignableCauseIds_ (x.AssignableCauseIds_, f, this),
      CorrectiveActionIds_ (x.CorrectiveActionIds_, f, this),
      Resolution_ (x.Resolution_, f, this),
      CharacteristicIds_ (x.CharacteristicIds_, f, this),
      SubgroupIds_ (x.SubgroupIds_, f, this),
      id_ (x.id_, f, this)
    {
    }

    StudyIssueType::
    StudyIssueType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Traceability_ (f, this),
      AssignableCauseIds_ (f, this),
      CorrectiveActionIds_ (f, this),
      Resolution_ (f, this),
      CharacteristicIds_ (f, this),
      SubgroupIds_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StudyIssueType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Traceability
        //
        if (n.name () == "Traceability" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Traceability_type > r (
            Traceability_traits::create (i, f, this));

          if (!this->Traceability_)
          {
            this->Traceability_.set (r);
            continue;
          }
        }

        // AssignableCauseIds
        //
        if (n.name () == "AssignableCauseIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AssignableCauseIds_type > r (
            AssignableCauseIds_traits::create (i, f, this));

          if (!this->AssignableCauseIds_)
          {
            this->AssignableCauseIds_.set (r);
            continue;
          }
        }

        // CorrectiveActionIds
        //
        if (n.name () == "CorrectiveActionIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CorrectiveActionIds_type > r (
            CorrectiveActionIds_traits::create (i, f, this));

          if (!this->CorrectiveActionIds_)
          {
            this->CorrectiveActionIds_.set (r);
            continue;
          }
        }

        // Resolution
        //
        if (n.name () == "Resolution" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Resolution_type > r (
            Resolution_traits::create (i, f, this));

          if (!this->Resolution_)
          {
            this->Resolution_.set (r);
            continue;
          }
        }

        // CharacteristicIds
        //
        if (n.name () == "CharacteristicIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicIds_type > r (
            CharacteristicIds_traits::create (i, f, this));

          if (!this->CharacteristicIds_)
          {
            this->CharacteristicIds_.set (r);
            continue;
          }
        }

        // SubgroupIds
        //
        if (n.name () == "SubgroupIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubgroupIds_type > r (
            SubgroupIds_traits::create (i, f, this));

          if (!this->SubgroupIds_)
          {
            this->SubgroupIds_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    StudyIssueType* StudyIssueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StudyIssueType (*this, f, c);
    }

    StudyIssueType::
    ~StudyIssueType ()
    {
    }

    // ControlIssueEnumType
    //

    ControlIssueEnumType::
    ControlIssueEnumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ControlIssueEnumType_convert ();
    }

    ControlIssueEnumType::
    ControlIssueEnumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ControlIssueEnumType_convert ();
    }

    ControlIssueEnumType::
    ControlIssueEnumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ControlIssueEnumType_convert ();
    }

    ControlIssueEnumType* ControlIssueEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ControlIssueEnumType (*this, f, c);
    }

    ControlIssueEnumType::value ControlIssueEnumType::
    _xsd_ControlIssueEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ControlIssueEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ControlIssueEnumType_indexes_,
                        _xsd_ControlIssueEnumType_indexes_ + 14,
                        *this,
                        c));

      if (i == _xsd_ControlIssueEnumType_indexes_ + 14 || _xsd_ControlIssueEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ControlIssueEnumType::
    _xsd_ControlIssueEnumType_literals_[14] =
    {
      "OOT",
      "CP",
      "CPK",
      "PP",
      "PPK",
      "OOC",
      "TRENDING",
      "SKEWED",
      "ONETHIRDGROUPED",
      "TWOTHIRDGROUPED",
      "OSCILLATING",
      "STRATIFIED",
      "OOCRNG",
      "UNDEFINED"
    };

    const ControlIssueEnumType::value ControlIssueEnumType::
    _xsd_ControlIssueEnumType_indexes_[14] =
    {
      ::xsd::qif2::ControlIssueEnumType::CP,
      ::xsd::qif2::ControlIssueEnumType::CPK,
      ::xsd::qif2::ControlIssueEnumType::ONETHIRDGROUPED,
      ::xsd::qif2::ControlIssueEnumType::OOC,
      ::xsd::qif2::ControlIssueEnumType::OOCRNG,
      ::xsd::qif2::ControlIssueEnumType::OOT,
      ::xsd::qif2::ControlIssueEnumType::OSCILLATING,
      ::xsd::qif2::ControlIssueEnumType::PP,
      ::xsd::qif2::ControlIssueEnumType::PPK,
      ::xsd::qif2::ControlIssueEnumType::SKEWED,
      ::xsd::qif2::ControlIssueEnumType::STRATIFIED,
      ::xsd::qif2::ControlIssueEnumType::TRENDING,
      ::xsd::qif2::ControlIssueEnumType::TWOTHIRDGROUPED,
      ::xsd::qif2::ControlIssueEnumType::UNDEFINED
    };

    // ControlIssueType
    //

    ControlIssueType::
    ControlIssueType ()
    : ::xml_schema::type (),
      ControlIssueEnum_ (::xml_schema::flags (), this),
      OtherControlIssue_ (::xml_schema::flags (), this)
    {
    }

    ControlIssueType::
    ControlIssueType (const ControlIssueType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ControlIssueEnum_ (x.ControlIssueEnum_, f, this),
      OtherControlIssue_ (x.OtherControlIssue_, f, this)
    {
    }

    ControlIssueType::
    ControlIssueType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ControlIssueEnum_ (f, this),
      OtherControlIssue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ControlIssueType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ControlIssueEnum
        //
        if (n.name () == "ControlIssueEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ControlIssueEnum_type > r (
            ControlIssueEnum_traits::create (i, f, this));

          if (!this->ControlIssueEnum_)
          {
            this->ControlIssueEnum_.set (r);
            continue;
          }
        }

        // OtherControlIssue
        //
        if (n.name () == "OtherControlIssue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherControlIssue_type > r (
            OtherControlIssue_traits::create (i, f, this));

          if (!this->OtherControlIssue_)
          {
            this->OtherControlIssue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ControlIssueType* ControlIssueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ControlIssueType (*this, f, c);
    }

    ControlIssueType::
    ~ControlIssueType ()
    {
    }

    // ControlIssueDetailsType
    //

    ControlIssueDetailsType::
    ControlIssueDetailsType (const ControlIssue_type& ControlIssue)
    : ::xml_schema::type (),
      ControlIssue_ (ControlIssue, ::xml_schema::flags (), this),
      ControlMethodId_ (::xml_schema::flags (), this),
      StudyIssueId_ (::xml_schema::flags (), this)
    {
    }

    ControlIssueDetailsType::
    ControlIssueDetailsType (::std::auto_ptr< ControlIssue_type >& ControlIssue)
    : ::xml_schema::type (),
      ControlIssue_ (ControlIssue, ::xml_schema::flags (), this),
      ControlMethodId_ (::xml_schema::flags (), this),
      StudyIssueId_ (::xml_schema::flags (), this)
    {
    }

    ControlIssueDetailsType::
    ControlIssueDetailsType (const ControlIssueDetailsType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ControlIssue_ (x.ControlIssue_, f, this),
      ControlMethodId_ (x.ControlMethodId_, f, this),
      StudyIssueId_ (x.StudyIssueId_, f, this)
    {
    }

    ControlIssueDetailsType::
    ControlIssueDetailsType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ControlIssue_ (f, this),
      ControlMethodId_ (f, this),
      StudyIssueId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ControlIssueDetailsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ControlIssue
        //
        if (n.name () == "ControlIssue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ControlIssue_type > r (
            ControlIssue_traits::create (i, f, this));

          if (!ControlIssue_.present ())
          {
            this->ControlIssue_.set (r);
            continue;
          }
        }

        // ControlMethodId
        //
        if (n.name () == "ControlMethodId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ControlMethodId_type > r (
            ControlMethodId_traits::create (i, f, this));

          if (!this->ControlMethodId_)
          {
            this->ControlMethodId_.set (r);
            continue;
          }
        }

        // StudyIssueId
        //
        if (n.name () == "StudyIssueId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StudyIssueId_type > r (
            StudyIssueId_traits::create (i, f, this));

          if (!this->StudyIssueId_)
          {
            this->StudyIssueId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ControlIssue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ControlIssue",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ControlIssueDetailsType* ControlIssueDetailsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ControlIssueDetailsType (*this, f, c);
    }

    ControlIssueDetailsType::
    ~ControlIssueDetailsType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
        ::xsd::qif2::CharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
        ::xsd::qif2::CharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
        ::xsd::qif2::CharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
        ::xsd::qif2::CharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
        ::xsd::qif2::CharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
        ::xsd::qif2::CharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
          ::xsd::qif2::CharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicStatsEvalBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType >
    CharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicStatsEvalBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicStatsEvalBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
          ::xsd::qif2::AngleBetweenCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleBetweenCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType >
    AngleBetweenCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleBetweenCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
          ::xsd::qif2::AngleCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType >
    AngleCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
          ::xsd::qif2::AngularCoordinateCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularCoordinateCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType >
    AngularCoordinateCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularCoordinateCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngleFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
          ::xsd::qif2::AngleFromCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleFromCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType >
    AngleFromCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleFromCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
          ::xsd::qif2::AngularCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType >
    AngularCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::AngularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
          ::xsd::qif2::AngularityCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType >
    AngularityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
        ::xsd::qif2::ChordCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
        ::xsd::qif2::ChordCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
        ::xsd::qif2::ChordCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
        ::xsd::qif2::ChordCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
        ::xsd::qif2::ChordCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
        ::xsd::qif2::ChordCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
          ::xsd::qif2::ChordCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ChordCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType >
    ChordCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ChordCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
          ::xsd::qif2::CircularityCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType >
    CircularityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
          ::xsd::qif2::CircularRunoutCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularRunoutCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType >
    CircularRunoutCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularRunoutCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::ConcentricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::ConcentricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::ConcentricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::ConcentricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::ConcentricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::ConcentricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
          ::xsd::qif2::ConcentricityCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConcentricityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType >
    ConcentricityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ConcentricityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::CurveLengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::CurveLengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::CurveLengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::CurveLengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::CurveLengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::CurveLengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
          ::xsd::qif2::CurveLengthCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CurveLengthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType >
    CurveLengthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CurveLengthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CylindricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CylindricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CylindricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CylindricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CylindricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
        ::xsd::qif2::CylindricityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
          ::xsd::qif2::CylindricityCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CylindricityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType >
    CylindricityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CylindricityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
        ::xsd::qif2::DepthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
        ::xsd::qif2::DepthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
        ::xsd::qif2::DepthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
        ::xsd::qif2::DepthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
        ::xsd::qif2::DepthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
        ::xsd::qif2::DepthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
          ::xsd::qif2::DepthCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DepthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType >
    DepthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DepthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
        ::xsd::qif2::DiameterCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
        ::xsd::qif2::DiameterCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
        ::xsd::qif2::DiameterCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
        ::xsd::qif2::DiameterCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
        ::xsd::qif2::DiameterCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
        ::xsd::qif2::DiameterCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
          ::xsd::qif2::DiameterCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DiameterCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType >
    DiameterCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DiameterCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
          ::xsd::qif2::DistanceBetweenCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceBetweenCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType >
    DistanceBetweenCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceBetweenCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
        ::xsd::qif2::DistanceFromCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
          ::xsd::qif2::DistanceFromCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceFromCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType >
    DistanceFromCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceFromCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::FlatnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::FlatnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::FlatnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::FlatnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::FlatnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::FlatnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
          ::xsd::qif2::FlatnessCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FlatnessCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType >
    FlatnessCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FlatnessCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
        ::xsd::qif2::GeometricCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
        ::xsd::qif2::GeometricCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
        ::xsd::qif2::GeometricCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GeometricCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GeometricCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GeometricCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GeometricCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GeometricCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GeometricCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
        ::xsd::qif2::GeometricCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
        ::xsd::qif2::GeometricCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
        ::xsd::qif2::GeometricCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
          ::xsd::qif2::GeometricCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GeometricCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::GeometricCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GeometricCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType >
    GeometricCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "GeometricCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::GeometricCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::GeometricCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GeometricCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
        ::xsd::qif2::HeightCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
        ::xsd::qif2::HeightCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
        ::xsd::qif2::HeightCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
        ::xsd::qif2::HeightCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
        ::xsd::qif2::HeightCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
        ::xsd::qif2::HeightCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
          ::xsd::qif2::HeightCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "HeightCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType >
    HeightCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "HeightCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::LengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::LengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::LengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::LengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::LengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
        ::xsd::qif2::LengthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
          ::xsd::qif2::LengthCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LengthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType >
    LengthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LengthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
          ::xsd::qif2::LinearCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LinearCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType >
    LinearCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LinearCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
          ::xsd::qif2::LinearCoordinateCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LinearCoordinateCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType >
    LinearCoordinateCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LinearCoordinateCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
        ::xsd::qif2::LocationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
        ::xsd::qif2::LocationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
        ::xsd::qif2::LocationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LocationCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LocationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LocationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LocationCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LocationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LocationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
        ::xsd::qif2::LocationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
        ::xsd::qif2::LocationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
        ::xsd::qif2::LocationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
          ::xsd::qif2::LocationCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LocationCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LocationCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LocationCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType >
    LocationCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LocationCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LocationCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LocationCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LocationCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::LineProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::LineProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::LineProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::LineProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::LineProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::LineProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
          ::xsd::qif2::LineProfileCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LineProfileCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType >
    LineProfileCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LineProfileCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
        ::xsd::qif2::OrientationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
        ::xsd::qif2::OrientationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
        ::xsd::qif2::OrientationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::OrientationCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::OrientationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::OrientationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::OrientationCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::OrientationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::OrientationCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
        ::xsd::qif2::OrientationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
        ::xsd::qif2::OrientationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
        ::xsd::qif2::OrientationCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
          ::xsd::qif2::OrientationCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "OrientationCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::OrientationCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OrientationCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType >
    OrientationCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "OrientationCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::OrientationCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::OrientationCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OrientationCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
        ::xsd::qif2::ParallelismCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
        ::xsd::qif2::ParallelismCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
        ::xsd::qif2::ParallelismCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
        ::xsd::qif2::ParallelismCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
        ::xsd::qif2::ParallelismCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
        ::xsd::qif2::ParallelismCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
          ::xsd::qif2::ParallelismCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ParallelismCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType >
    ParallelismCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ParallelismCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
          ::xsd::qif2::PerpendicularityCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PerpendicularityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType >
    PerpendicularityCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PerpendicularityCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::PointProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::PointProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::PointProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::PointProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::PointProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::PointProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
          ::xsd::qif2::PointProfileCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PointProfileCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType >
    PointProfileCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PointProfileCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
        ::xsd::qif2::PositionCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
        ::xsd::qif2::PositionCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
        ::xsd::qif2::PositionCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
        ::xsd::qif2::PositionCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
        ::xsd::qif2::PositionCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
        ::xsd::qif2::PositionCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
          ::xsd::qif2::PositionCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PositionCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType >
    PositionCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PositionCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
        ::xsd::qif2::RadiusCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
        ::xsd::qif2::RadiusCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
        ::xsd::qif2::RadiusCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
        ::xsd::qif2::RadiusCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
        ::xsd::qif2::RadiusCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
        ::xsd::qif2::RadiusCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
          ::xsd::qif2::RadiusCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RadiusCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType >
    RadiusCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "RadiusCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
        ::xsd::qif2::SquareCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
        ::xsd::qif2::SquareCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
        ::xsd::qif2::SquareCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
        ::xsd::qif2::SquareCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
        ::xsd::qif2::SquareCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
        ::xsd::qif2::SquareCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
          ::xsd::qif2::SquareCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SquareCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType >
    SquareCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SquareCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::StraightnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::StraightnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::StraightnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::StraightnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::StraightnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
        ::xsd::qif2::StraightnessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
          ::xsd::qif2::StraightnessCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "StraightnessCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType >
    StraightnessCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "StraightnessCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
          ::xsd::qif2::SurfaceProfileCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType >
    SurfaceProfileCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::std::string& u,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::std::string& u,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::std::string& u,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::InputSource& i,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::InputSource& i,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xercesc::InputSource& i,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (const ::xercesc::DOMDocument& d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
          ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileNonUniformCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType >
    SurfaceProfileNonUniformCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileNonUniformCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
          ::xsd::qif2::SurfaceTextureCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceTextureCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType >
    SurfaceTextureCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceTextureCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
        ::xsd::qif2::SymmetryCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
        ::xsd::qif2::SymmetryCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
        ::xsd::qif2::SymmetryCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
        ::xsd::qif2::SymmetryCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
        ::xsd::qif2::SymmetryCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
        ::xsd::qif2::SymmetryCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
          ::xsd::qif2::SymmetryCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SymmetryCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType >
    SymmetryCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SymmetryCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThicknessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThicknessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThicknessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThicknessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThicknessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThicknessCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
          ::xsd::qif2::ThicknessCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThicknessCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType >
    ThicknessCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThicknessCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThreadCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThreadCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThreadCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThreadCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThreadCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
        ::xsd::qif2::ThreadCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
          ::xsd::qif2::ThreadCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThreadCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType >
    ThreadCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThreadCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
          ::xsd::qif2::TotalRunoutCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "TotalRunoutCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType >
    TotalRunoutCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "TotalRunoutCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedAttributeCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAttributeCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType >
    UserDefinedAttributeCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAttributeCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedLinearCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedLinearCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType >
    UserDefinedLinearCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedLinearCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedAngularCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAngularCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType >
    UserDefinedAngularCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAngularCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedAreaCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAreaCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType >
    UserDefinedAreaCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAreaCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedForceCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedForceCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType >
    UserDefinedForceCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedForceCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedMassCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedMassCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType >
    UserDefinedMassCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedMassCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedPressureCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedPressureCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType >
    UserDefinedPressureCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedPressureCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedSpeedCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedSpeedCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType >
    UserDefinedSpeedCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedSpeedCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedTemperatureCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTemperatureCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType >
    UserDefinedTemperatureCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTemperatureCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedTimeCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTimeCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType >
    UserDefinedTimeCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTimeCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
          ::xsd::qif2::UserDefinedUnitCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedUnitCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType >
    UserDefinedUnitCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedUnitCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
        ::xsd::qif2::WidthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
        ::xsd::qif2::WidthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
        ::xsd::qif2::WidthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
        ::xsd::qif2::WidthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
        ::xsd::qif2::WidthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
        ::xsd::qif2::WidthCharacteristicStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
          ::xsd::qif2::WidthCharacteristicStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WidthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType >
    WidthCharacteristicStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "WidthCharacteristicStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicStatsEvalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicStatsEvalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
        ::xsd::qif2::CharacteristicsStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
        ::xsd::qif2::CharacteristicsStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
        ::xsd::qif2::CharacteristicsStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicsStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicsStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicsStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicsStats (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicsStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicsStats (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
        ::xsd::qif2::CharacteristicsStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
        ::xsd::qif2::CharacteristicsStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
        ::xsd::qif2::CharacteristicsStats (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
          ::xsd::qif2::CharacteristicsStats (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicsStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicsStatsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicsStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType >
    CharacteristicsStats (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicsStats" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicsStatsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicsStatsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicsStats",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
        ::xsd::qif2::AverageFeature (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
        ::xsd::qif2::AverageFeature (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
        ::xsd::qif2::AverageFeature (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AverageFeature (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AverageFeature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AverageFeature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AverageFeature (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AverageFeature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AverageFeature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
        ::xsd::qif2::AverageFeature (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
        ::xsd::qif2::AverageFeature (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
        ::xsd::qif2::AverageFeature (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
          ::xsd::qif2::AverageFeature (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AverageFeature" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AverageFeatureType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AverageFeature",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeatureType >
    AverageFeature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AverageFeature" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AverageFeatureType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AverageFeatureType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AverageFeature",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
        ::xsd::qif2::AverageFeatures (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
        ::xsd::qif2::AverageFeatures (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
        ::xsd::qif2::AverageFeatures (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AverageFeatures (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AverageFeatures (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AverageFeatures (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AverageFeatures (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AverageFeatures (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AverageFeatures (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
        ::xsd::qif2::AverageFeatures (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
        ::xsd::qif2::AverageFeatures (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
        ::xsd::qif2::AverageFeatures (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
          ::xsd::qif2::AverageFeatures (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AverageFeatures" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AverageFeaturesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AverageFeatures",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType >
    AverageFeatures (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AverageFeatures" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AverageFeaturesType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AverageFeaturesType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AverageFeatures",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

