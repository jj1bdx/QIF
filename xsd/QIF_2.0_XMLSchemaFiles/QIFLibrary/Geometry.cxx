// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Geometry.hxx"

namespace xsd
{
  namespace qif2
  {
    // GeometrySetType
    // 

    const GeometrySetType::PointSet_optional& GeometrySetType::
    PointSet () const
    {
      return this->PointSet_;
    }

    GeometrySetType::PointSet_optional& GeometrySetType::
    PointSet ()
    {
      return this->PointSet_;
    }

    void GeometrySetType::
    PointSet (const PointSet_type& x)
    {
      this->PointSet_.set (x);
    }

    void GeometrySetType::
    PointSet (const PointSet_optional& x)
    {
      this->PointSet_ = x;
    }

    void GeometrySetType::
    PointSet (::std::auto_ptr< PointSet_type > x)
    {
      this->PointSet_.set (x);
    }

    const GeometrySetType::Curve12Set_optional& GeometrySetType::
    Curve12Set () const
    {
      return this->Curve12Set_;
    }

    GeometrySetType::Curve12Set_optional& GeometrySetType::
    Curve12Set ()
    {
      return this->Curve12Set_;
    }

    void GeometrySetType::
    Curve12Set (const Curve12Set_type& x)
    {
      this->Curve12Set_.set (x);
    }

    void GeometrySetType::
    Curve12Set (const Curve12Set_optional& x)
    {
      this->Curve12Set_ = x;
    }

    void GeometrySetType::
    Curve12Set (::std::auto_ptr< Curve12Set_type > x)
    {
      this->Curve12Set_.set (x);
    }

    const GeometrySetType::Curve13Set_optional& GeometrySetType::
    Curve13Set () const
    {
      return this->Curve13Set_;
    }

    GeometrySetType::Curve13Set_optional& GeometrySetType::
    Curve13Set ()
    {
      return this->Curve13Set_;
    }

    void GeometrySetType::
    Curve13Set (const Curve13Set_type& x)
    {
      this->Curve13Set_.set (x);
    }

    void GeometrySetType::
    Curve13Set (const Curve13Set_optional& x)
    {
      this->Curve13Set_ = x;
    }

    void GeometrySetType::
    Curve13Set (::std::auto_ptr< Curve13Set_type > x)
    {
      this->Curve13Set_.set (x);
    }

    const GeometrySetType::SurfaceSet_optional& GeometrySetType::
    SurfaceSet () const
    {
      return this->SurfaceSet_;
    }

    GeometrySetType::SurfaceSet_optional& GeometrySetType::
    SurfaceSet ()
    {
      return this->SurfaceSet_;
    }

    void GeometrySetType::
    SurfaceSet (const SurfaceSet_type& x)
    {
      this->SurfaceSet_.set (x);
    }

    void GeometrySetType::
    SurfaceSet (const SurfaceSet_optional& x)
    {
      this->SurfaceSet_ = x;
    }

    void GeometrySetType::
    SurfaceSet (::std::auto_ptr< SurfaceSet_type > x)
    {
      this->SurfaceSet_.set (x);
    }

    const GeometrySetType::CurveMeshSet_optional& GeometrySetType::
    CurveMeshSet () const
    {
      return this->CurveMeshSet_;
    }

    GeometrySetType::CurveMeshSet_optional& GeometrySetType::
    CurveMeshSet ()
    {
      return this->CurveMeshSet_;
    }

    void GeometrySetType::
    CurveMeshSet (const CurveMeshSet_type& x)
    {
      this->CurveMeshSet_.set (x);
    }

    void GeometrySetType::
    CurveMeshSet (const CurveMeshSet_optional& x)
    {
      this->CurveMeshSet_ = x;
    }

    void GeometrySetType::
    CurveMeshSet (::std::auto_ptr< CurveMeshSet_type > x)
    {
      this->CurveMeshSet_.set (x);
    }

    const GeometrySetType::SurfaceMeshSet_optional& GeometrySetType::
    SurfaceMeshSet () const
    {
      return this->SurfaceMeshSet_;
    }

    GeometrySetType::SurfaceMeshSet_optional& GeometrySetType::
    SurfaceMeshSet ()
    {
      return this->SurfaceMeshSet_;
    }

    void GeometrySetType::
    SurfaceMeshSet (const SurfaceMeshSet_type& x)
    {
      this->SurfaceMeshSet_.set (x);
    }

    void GeometrySetType::
    SurfaceMeshSet (const SurfaceMeshSet_optional& x)
    {
      this->SurfaceMeshSet_ = x;
    }

    void GeometrySetType::
    SurfaceMeshSet (::std::auto_ptr< SurfaceMeshSet_type > x)
    {
      this->SurfaceMeshSet_.set (x);
    }


    // GeometryBaseType
    // 


    // PointSetType
    // 

    const PointSetType::Point_sequence& PointSetType::
    Point () const
    {
      return this->Point_;
    }

    PointSetType::Point_sequence& PointSetType::
    Point ()
    {
      return this->Point_;
    }

    void PointSetType::
    Point (const Point_sequence& s)
    {
      this->Point_ = s;
    }

    const PointSetType::N_type& PointSetType::
    N () const
    {
      return this->N_.get ();
    }

    PointSetType::N_type& PointSetType::
    N ()
    {
      return this->N_.get ();
    }

    void PointSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void PointSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // PointEntityType
    // 

    const PointEntityType::XYZ_type& PointEntityType::
    XYZ () const
    {
      return this->XYZ_.get ();
    }

    PointEntityType::XYZ_type& PointEntityType::
    XYZ ()
    {
      return this->XYZ_.get ();
    }

    void PointEntityType::
    XYZ (const XYZ_type& x)
    {
      this->XYZ_.set (x);
    }

    void PointEntityType::
    XYZ (::std::auto_ptr< XYZ_type > x)
    {
      this->XYZ_.set (x);
    }


    // Curve12SetType
    // 

    const Curve12SetType::Curve12_sequence& Curve12SetType::
    Curve12 () const
    {
      return this->Curve12_;
    }

    Curve12SetType::Curve12_sequence& Curve12SetType::
    Curve12 ()
    {
      return this->Curve12_;
    }

    void Curve12SetType::
    Curve12 (const Curve12_sequence& s)
    {
      this->Curve12_ = s;
    }

    const Curve12SetType::N_type& Curve12SetType::
    N () const
    {
      return this->N_.get ();
    }

    Curve12SetType::N_type& Curve12SetType::
    N ()
    {
      return this->N_.get ();
    }

    void Curve12SetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void Curve12SetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // Curve13SetType
    // 

    const Curve13SetType::Curve13_sequence& Curve13SetType::
    Curve13 () const
    {
      return this->Curve13_;
    }

    Curve13SetType::Curve13_sequence& Curve13SetType::
    Curve13 ()
    {
      return this->Curve13_;
    }

    void Curve13SetType::
    Curve13 (const Curve13_sequence& s)
    {
      this->Curve13_ = s;
    }

    const Curve13SetType::N_type& Curve13SetType::
    N () const
    {
      return this->N_.get ();
    }

    Curve13SetType::N_type& Curve13SetType::
    N ()
    {
      return this->N_.get ();
    }

    void Curve13SetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void Curve13SetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // Curve13CoreType
    // 

    const Curve13CoreType::Curve13Core_type& Curve13CoreType::
    Curve13Core () const
    {
      return this->Curve13Core_.get ();
    }

    Curve13CoreType::Curve13Core_type& Curve13CoreType::
    Curve13Core ()
    {
      return this->Curve13Core_.get ();
    }

    void Curve13CoreType::
    Curve13Core (const Curve13Core_type& x)
    {
      this->Curve13Core_.set (x);
    }

    void Curve13CoreType::
    Curve13Core (::std::auto_ptr< Curve13Core_type > x)
    {
      this->Curve13Core_.set (x);
    }


    // CurveCoreBaseType
    // 

    const CurveCoreBaseType::domain_type& CurveCoreBaseType::
    domain () const
    {
      return this->domain_.get ();
    }

    CurveCoreBaseType::domain_type& CurveCoreBaseType::
    domain ()
    {
      return this->domain_.get ();
    }

    void CurveCoreBaseType::
    domain (const domain_type& x)
    {
      this->domain_.set (x);
    }

    void CurveCoreBaseType::
    domain (::std::auto_ptr< domain_type > x)
    {
      this->domain_.set (x);
    }


    // Curve12BaseType
    // 


    // Curve13BaseType
    // 


    // Segment13CoreType
    // 

    const Segment13CoreType::StartPoint_type& Segment13CoreType::
    StartPoint () const
    {
      return this->StartPoint_.get ();
    }

    Segment13CoreType::StartPoint_type& Segment13CoreType::
    StartPoint ()
    {
      return this->StartPoint_.get ();
    }

    void Segment13CoreType::
    StartPoint (const StartPoint_type& x)
    {
      this->StartPoint_.set (x);
    }

    void Segment13CoreType::
    StartPoint (::std::auto_ptr< StartPoint_type > x)
    {
      this->StartPoint_.set (x);
    }

    const Segment13CoreType::EndPoint_type& Segment13CoreType::
    EndPoint () const
    {
      return this->EndPoint_.get ();
    }

    Segment13CoreType::EndPoint_type& Segment13CoreType::
    EndPoint ()
    {
      return this->EndPoint_.get ();
    }

    void Segment13CoreType::
    EndPoint (const EndPoint_type& x)
    {
      this->EndPoint_.set (x);
    }

    void Segment13CoreType::
    EndPoint (::std::auto_ptr< EndPoint_type > x)
    {
      this->EndPoint_.set (x);
    }


    // Segment12CoreType
    // 

    const Segment12CoreType::StartPoint_type& Segment12CoreType::
    StartPoint () const
    {
      return this->StartPoint_.get ();
    }

    Segment12CoreType::StartPoint_type& Segment12CoreType::
    StartPoint ()
    {
      return this->StartPoint_.get ();
    }

    void Segment12CoreType::
    StartPoint (const StartPoint_type& x)
    {
      this->StartPoint_.set (x);
    }

    void Segment12CoreType::
    StartPoint (::std::auto_ptr< StartPoint_type > x)
    {
      this->StartPoint_.set (x);
    }

    const Segment12CoreType::EndPoint_type& Segment12CoreType::
    EndPoint () const
    {
      return this->EndPoint_.get ();
    }

    Segment12CoreType::EndPoint_type& Segment12CoreType::
    EndPoint ()
    {
      return this->EndPoint_.get ();
    }

    void Segment12CoreType::
    EndPoint (const EndPoint_type& x)
    {
      this->EndPoint_.set (x);
    }

    void Segment12CoreType::
    EndPoint (::std::auto_ptr< EndPoint_type > x)
    {
      this->EndPoint_.set (x);
    }


    // Segment13Type
    // 

    const Segment13Type::Segment13Core_type& Segment13Type::
    Segment13Core () const
    {
      return this->Segment13Core_.get ();
    }

    Segment13Type::Segment13Core_type& Segment13Type::
    Segment13Core ()
    {
      return this->Segment13Core_.get ();
    }

    void Segment13Type::
    Segment13Core (const Segment13Core_type& x)
    {
      this->Segment13Core_.set (x);
    }

    void Segment13Type::
    Segment13Core (::std::auto_ptr< Segment13Core_type > x)
    {
      this->Segment13Core_.set (x);
    }

    const Segment13Type::Transform_optional& Segment13Type::
    Transform () const
    {
      return this->Transform_;
    }

    Segment13Type::Transform_optional& Segment13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Segment13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Segment13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Segment13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Segment12Type
    // 

    const Segment12Type::Segment12Core_type& Segment12Type::
    Segment12Core () const
    {
      return this->Segment12Core_.get ();
    }

    Segment12Type::Segment12Core_type& Segment12Type::
    Segment12Core ()
    {
      return this->Segment12Core_.get ();
    }

    void Segment12Type::
    Segment12Core (const Segment12Core_type& x)
    {
      this->Segment12Core_.set (x);
    }

    void Segment12Type::
    Segment12Core (::std::auto_ptr< Segment12Core_type > x)
    {
      this->Segment12Core_.set (x);
    }


    // ArcConicFormEnumType
    // 

    ArcConicFormEnumType::
    ArcConicFormEnumType (value v)
    : ::xml_schema::string (_xsd_ArcConicFormEnumType_literals_[v])
    {
    }

    ArcConicFormEnumType::
    ArcConicFormEnumType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    ArcConicFormEnumType::
    ArcConicFormEnumType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    ArcConicFormEnumType::
    ArcConicFormEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    ArcConicFormEnumType::
    ArcConicFormEnumType (const ArcConicFormEnumType& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    ArcConicFormEnumType& ArcConicFormEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_ArcConicFormEnumType_literals_[v]);

      return *this;
    }


    // ArcConic13CoreType
    // 

    const ArcConic13CoreType::A_type& ArcConic13CoreType::
    A () const
    {
      return this->A_.get ();
    }

    ArcConic13CoreType::A_type& ArcConic13CoreType::
    A ()
    {
      return this->A_.get ();
    }

    void ArcConic13CoreType::
    A (const A_type& x)
    {
      this->A_.set (x);
    }

    const ArcConic13CoreType::B_type& ArcConic13CoreType::
    B () const
    {
      return this->B_.get ();
    }

    ArcConic13CoreType::B_type& ArcConic13CoreType::
    B ()
    {
      return this->B_.get ();
    }

    void ArcConic13CoreType::
    B (const B_type& x)
    {
      this->B_.set (x);
    }

    const ArcConic13CoreType::Center_type& ArcConic13CoreType::
    Center () const
    {
      return this->Center_.get ();
    }

    ArcConic13CoreType::Center_type& ArcConic13CoreType::
    Center ()
    {
      return this->Center_.get ();
    }

    void ArcConic13CoreType::
    Center (const Center_type& x)
    {
      this->Center_.set (x);
    }

    void ArcConic13CoreType::
    Center (::std::auto_ptr< Center_type > x)
    {
      this->Center_.set (x);
    }

    const ArcConic13CoreType::DirBeg_type& ArcConic13CoreType::
    DirBeg () const
    {
      return this->DirBeg_.get ();
    }

    ArcConic13CoreType::DirBeg_type& ArcConic13CoreType::
    DirBeg ()
    {
      return this->DirBeg_.get ();
    }

    void ArcConic13CoreType::
    DirBeg (const DirBeg_type& x)
    {
      this->DirBeg_.set (x);
    }

    void ArcConic13CoreType::
    DirBeg (::std::auto_ptr< DirBeg_type > x)
    {
      this->DirBeg_.set (x);
    }

    const ArcConic13CoreType::Normal_type& ArcConic13CoreType::
    Normal () const
    {
      return this->Normal_.get ();
    }

    ArcConic13CoreType::Normal_type& ArcConic13CoreType::
    Normal ()
    {
      return this->Normal_.get ();
    }

    void ArcConic13CoreType::
    Normal (const Normal_type& x)
    {
      this->Normal_.set (x);
    }

    void ArcConic13CoreType::
    Normal (::std::auto_ptr< Normal_type > x)
    {
      this->Normal_.set (x);
    }

    const ArcConic13CoreType::form_type& ArcConic13CoreType::
    form () const
    {
      return this->form_.get ();
    }

    ArcConic13CoreType::form_type& ArcConic13CoreType::
    form ()
    {
      return this->form_.get ();
    }

    void ArcConic13CoreType::
    form (const form_type& x)
    {
      this->form_.set (x);
    }

    void ArcConic13CoreType::
    form (::std::auto_ptr< form_type > x)
    {
      this->form_.set (x);
    }


    // ArcConic12CoreType
    // 

    const ArcConic12CoreType::A_type& ArcConic12CoreType::
    A () const
    {
      return this->A_.get ();
    }

    ArcConic12CoreType::A_type& ArcConic12CoreType::
    A ()
    {
      return this->A_.get ();
    }

    void ArcConic12CoreType::
    A (const A_type& x)
    {
      this->A_.set (x);
    }

    const ArcConic12CoreType::B_type& ArcConic12CoreType::
    B () const
    {
      return this->B_.get ();
    }

    ArcConic12CoreType::B_type& ArcConic12CoreType::
    B ()
    {
      return this->B_.get ();
    }

    void ArcConic12CoreType::
    B (const B_type& x)
    {
      this->B_.set (x);
    }

    const ArcConic12CoreType::Center_type& ArcConic12CoreType::
    Center () const
    {
      return this->Center_.get ();
    }

    ArcConic12CoreType::Center_type& ArcConic12CoreType::
    Center ()
    {
      return this->Center_.get ();
    }

    void ArcConic12CoreType::
    Center (const Center_type& x)
    {
      this->Center_.set (x);
    }

    void ArcConic12CoreType::
    Center (::std::auto_ptr< Center_type > x)
    {
      this->Center_.set (x);
    }

    const ArcConic12CoreType::DirBeg_type& ArcConic12CoreType::
    DirBeg () const
    {
      return this->DirBeg_.get ();
    }

    ArcConic12CoreType::DirBeg_type& ArcConic12CoreType::
    DirBeg ()
    {
      return this->DirBeg_.get ();
    }

    void ArcConic12CoreType::
    DirBeg (const DirBeg_type& x)
    {
      this->DirBeg_.set (x);
    }

    void ArcConic12CoreType::
    DirBeg (::std::auto_ptr< DirBeg_type > x)
    {
      this->DirBeg_.set (x);
    }

    const ArcConic12CoreType::form_type& ArcConic12CoreType::
    form () const
    {
      return this->form_.get ();
    }

    ArcConic12CoreType::form_type& ArcConic12CoreType::
    form ()
    {
      return this->form_.get ();
    }

    void ArcConic12CoreType::
    form (const form_type& x)
    {
      this->form_.set (x);
    }

    void ArcConic12CoreType::
    form (::std::auto_ptr< form_type > x)
    {
      this->form_.set (x);
    }

    const ArcConic12CoreType::turned_type& ArcConic12CoreType::
    turned () const
    {
      return this->turned_.get ();
    }

    ArcConic12CoreType::turned_type& ArcConic12CoreType::
    turned ()
    {
      return this->turned_.get ();
    }

    void ArcConic12CoreType::
    turned (const turned_type& x)
    {
      this->turned_.set (x);
    }

    ArcConic12CoreType::turned_type ArcConic12CoreType::
    turned_default_value ()
    {
      return turned_type (false);
    }


    // ArcConic12Type
    // 

    const ArcConic12Type::ArcConic12Core_type& ArcConic12Type::
    ArcConic12Core () const
    {
      return this->ArcConic12Core_.get ();
    }

    ArcConic12Type::ArcConic12Core_type& ArcConic12Type::
    ArcConic12Core ()
    {
      return this->ArcConic12Core_.get ();
    }

    void ArcConic12Type::
    ArcConic12Core (const ArcConic12Core_type& x)
    {
      this->ArcConic12Core_.set (x);
    }

    void ArcConic12Type::
    ArcConic12Core (::std::auto_ptr< ArcConic12Core_type > x)
    {
      this->ArcConic12Core_.set (x);
    }


    // ArcConic13Type
    // 

    const ArcConic13Type::ArcConic13Core_type& ArcConic13Type::
    ArcConic13Core () const
    {
      return this->ArcConic13Core_.get ();
    }

    ArcConic13Type::ArcConic13Core_type& ArcConic13Type::
    ArcConic13Core ()
    {
      return this->ArcConic13Core_.get ();
    }

    void ArcConic13Type::
    ArcConic13Core (const ArcConic13Core_type& x)
    {
      this->ArcConic13Core_.set (x);
    }

    void ArcConic13Type::
    ArcConic13Core (::std::auto_ptr< ArcConic13Core_type > x)
    {
      this->ArcConic13Core_.set (x);
    }

    const ArcConic13Type::Transform_optional& ArcConic13Type::
    Transform () const
    {
      return this->Transform_;
    }

    ArcConic13Type::Transform_optional& ArcConic13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void ArcConic13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void ArcConic13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void ArcConic13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // ArcCircular13CoreType
    // 

    const ArcCircular13CoreType::Radius_type& ArcCircular13CoreType::
    Radius () const
    {
      return this->Radius_.get ();
    }

    ArcCircular13CoreType::Radius_type& ArcCircular13CoreType::
    Radius ()
    {
      return this->Radius_.get ();
    }

    void ArcCircular13CoreType::
    Radius (const Radius_type& x)
    {
      this->Radius_.set (x);
    }

    const ArcCircular13CoreType::Center_type& ArcCircular13CoreType::
    Center () const
    {
      return this->Center_.get ();
    }

    ArcCircular13CoreType::Center_type& ArcCircular13CoreType::
    Center ()
    {
      return this->Center_.get ();
    }

    void ArcCircular13CoreType::
    Center (const Center_type& x)
    {
      this->Center_.set (x);
    }

    void ArcCircular13CoreType::
    Center (::std::auto_ptr< Center_type > x)
    {
      this->Center_.set (x);
    }

    const ArcCircular13CoreType::DirBeg_type& ArcCircular13CoreType::
    DirBeg () const
    {
      return this->DirBeg_.get ();
    }

    ArcCircular13CoreType::DirBeg_type& ArcCircular13CoreType::
    DirBeg ()
    {
      return this->DirBeg_.get ();
    }

    void ArcCircular13CoreType::
    DirBeg (const DirBeg_type& x)
    {
      this->DirBeg_.set (x);
    }

    void ArcCircular13CoreType::
    DirBeg (::std::auto_ptr< DirBeg_type > x)
    {
      this->DirBeg_.set (x);
    }

    const ArcCircular13CoreType::Normal_type& ArcCircular13CoreType::
    Normal () const
    {
      return this->Normal_.get ();
    }

    ArcCircular13CoreType::Normal_type& ArcCircular13CoreType::
    Normal ()
    {
      return this->Normal_.get ();
    }

    void ArcCircular13CoreType::
    Normal (const Normal_type& x)
    {
      this->Normal_.set (x);
    }

    void ArcCircular13CoreType::
    Normal (::std::auto_ptr< Normal_type > x)
    {
      this->Normal_.set (x);
    }


    // ArcCircular12CoreType
    // 

    const ArcCircular12CoreType::Radius_type& ArcCircular12CoreType::
    Radius () const
    {
      return this->Radius_.get ();
    }

    ArcCircular12CoreType::Radius_type& ArcCircular12CoreType::
    Radius ()
    {
      return this->Radius_.get ();
    }

    void ArcCircular12CoreType::
    Radius (const Radius_type& x)
    {
      this->Radius_.set (x);
    }

    const ArcCircular12CoreType::Center_type& ArcCircular12CoreType::
    Center () const
    {
      return this->Center_.get ();
    }

    ArcCircular12CoreType::Center_type& ArcCircular12CoreType::
    Center ()
    {
      return this->Center_.get ();
    }

    void ArcCircular12CoreType::
    Center (const Center_type& x)
    {
      this->Center_.set (x);
    }

    void ArcCircular12CoreType::
    Center (::std::auto_ptr< Center_type > x)
    {
      this->Center_.set (x);
    }

    const ArcCircular12CoreType::DirBeg_type& ArcCircular12CoreType::
    DirBeg () const
    {
      return this->DirBeg_.get ();
    }

    ArcCircular12CoreType::DirBeg_type& ArcCircular12CoreType::
    DirBeg ()
    {
      return this->DirBeg_.get ();
    }

    void ArcCircular12CoreType::
    DirBeg (const DirBeg_type& x)
    {
      this->DirBeg_.set (x);
    }

    void ArcCircular12CoreType::
    DirBeg (::std::auto_ptr< DirBeg_type > x)
    {
      this->DirBeg_.set (x);
    }

    const ArcCircular12CoreType::turned_type& ArcCircular12CoreType::
    turned () const
    {
      return this->turned_.get ();
    }

    ArcCircular12CoreType::turned_type& ArcCircular12CoreType::
    turned ()
    {
      return this->turned_.get ();
    }

    void ArcCircular12CoreType::
    turned (const turned_type& x)
    {
      this->turned_.set (x);
    }

    ArcCircular12CoreType::turned_type ArcCircular12CoreType::
    turned_default_value ()
    {
      return turned_type (false);
    }


    // ArcCircular13Type
    // 

    const ArcCircular13Type::ArcCircular13Core_type& ArcCircular13Type::
    ArcCircular13Core () const
    {
      return this->ArcCircular13Core_.get ();
    }

    ArcCircular13Type::ArcCircular13Core_type& ArcCircular13Type::
    ArcCircular13Core ()
    {
      return this->ArcCircular13Core_.get ();
    }

    void ArcCircular13Type::
    ArcCircular13Core (const ArcCircular13Core_type& x)
    {
      this->ArcCircular13Core_.set (x);
    }

    void ArcCircular13Type::
    ArcCircular13Core (::std::auto_ptr< ArcCircular13Core_type > x)
    {
      this->ArcCircular13Core_.set (x);
    }

    const ArcCircular13Type::Transform_optional& ArcCircular13Type::
    Transform () const
    {
      return this->Transform_;
    }

    ArcCircular13Type::Transform_optional& ArcCircular13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void ArcCircular13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void ArcCircular13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void ArcCircular13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // ArcCircular12Type
    // 

    const ArcCircular12Type::ArcCircular12Core_type& ArcCircular12Type::
    ArcCircular12Core () const
    {
      return this->ArcCircular12Core_.get ();
    }

    ArcCircular12Type::ArcCircular12Core_type& ArcCircular12Type::
    ArcCircular12Core ()
    {
      return this->ArcCircular12Core_.get ();
    }

    void ArcCircular12Type::
    ArcCircular12Core (const ArcCircular12Core_type& x)
    {
      this->ArcCircular12Core_.set (x);
    }

    void ArcCircular12Type::
    ArcCircular12Core (::std::auto_ptr< ArcCircular12Core_type > x)
    {
      this->ArcCircular12Core_.set (x);
    }


    // Nurbs12CoreType
    // 

    const Nurbs12CoreType::Order_type& Nurbs12CoreType::
    Order () const
    {
      return this->Order_.get ();
    }

    Nurbs12CoreType::Order_type& Nurbs12CoreType::
    Order ()
    {
      return this->Order_.get ();
    }

    void Nurbs12CoreType::
    Order (const Order_type& x)
    {
      this->Order_.set (x);
    }

    void Nurbs12CoreType::
    Order (::std::auto_ptr< Order_type > x)
    {
      this->Order_.set (x);
    }

    const Nurbs12CoreType::Knots_type& Nurbs12CoreType::
    Knots () const
    {
      return this->Knots_.get ();
    }

    Nurbs12CoreType::Knots_type& Nurbs12CoreType::
    Knots ()
    {
      return this->Knots_.get ();
    }

    void Nurbs12CoreType::
    Knots (const Knots_type& x)
    {
      this->Knots_.set (x);
    }

    void Nurbs12CoreType::
    Knots (::std::auto_ptr< Knots_type > x)
    {
      this->Knots_.set (x);
    }

    const Nurbs12CoreType::CPs_optional& Nurbs12CoreType::
    CPs () const
    {
      return this->CPs_;
    }

    Nurbs12CoreType::CPs_optional& Nurbs12CoreType::
    CPs ()
    {
      return this->CPs_;
    }

    void Nurbs12CoreType::
    CPs (const CPs_type& x)
    {
      this->CPs_.set (x);
    }

    void Nurbs12CoreType::
    CPs (const CPs_optional& x)
    {
      this->CPs_ = x;
    }

    void Nurbs12CoreType::
    CPs (::std::auto_ptr< CPs_type > x)
    {
      this->CPs_.set (x);
    }

    const Nurbs12CoreType::CPsBinary_optional& Nurbs12CoreType::
    CPsBinary () const
    {
      return this->CPsBinary_;
    }

    Nurbs12CoreType::CPsBinary_optional& Nurbs12CoreType::
    CPsBinary ()
    {
      return this->CPsBinary_;
    }

    void Nurbs12CoreType::
    CPsBinary (const CPsBinary_type& x)
    {
      this->CPsBinary_.set (x);
    }

    void Nurbs12CoreType::
    CPsBinary (const CPsBinary_optional& x)
    {
      this->CPsBinary_ = x;
    }

    void Nurbs12CoreType::
    CPsBinary (::std::auto_ptr< CPsBinary_type > x)
    {
      this->CPsBinary_.set (x);
    }

    const Nurbs12CoreType::Weights_optional& Nurbs12CoreType::
    Weights () const
    {
      return this->Weights_;
    }

    Nurbs12CoreType::Weights_optional& Nurbs12CoreType::
    Weights ()
    {
      return this->Weights_;
    }

    void Nurbs12CoreType::
    Weights (const Weights_type& x)
    {
      this->Weights_.set (x);
    }

    void Nurbs12CoreType::
    Weights (const Weights_optional& x)
    {
      this->Weights_ = x;
    }

    void Nurbs12CoreType::
    Weights (::std::auto_ptr< Weights_type > x)
    {
      this->Weights_.set (x);
    }


    // Nurbs13CoreType
    // 

    const Nurbs13CoreType::Order_type& Nurbs13CoreType::
    Order () const
    {
      return this->Order_.get ();
    }

    Nurbs13CoreType::Order_type& Nurbs13CoreType::
    Order ()
    {
      return this->Order_.get ();
    }

    void Nurbs13CoreType::
    Order (const Order_type& x)
    {
      this->Order_.set (x);
    }

    void Nurbs13CoreType::
    Order (::std::auto_ptr< Order_type > x)
    {
      this->Order_.set (x);
    }

    const Nurbs13CoreType::Knots_type& Nurbs13CoreType::
    Knots () const
    {
      return this->Knots_.get ();
    }

    Nurbs13CoreType::Knots_type& Nurbs13CoreType::
    Knots ()
    {
      return this->Knots_.get ();
    }

    void Nurbs13CoreType::
    Knots (const Knots_type& x)
    {
      this->Knots_.set (x);
    }

    void Nurbs13CoreType::
    Knots (::std::auto_ptr< Knots_type > x)
    {
      this->Knots_.set (x);
    }

    const Nurbs13CoreType::CPs_optional& Nurbs13CoreType::
    CPs () const
    {
      return this->CPs_;
    }

    Nurbs13CoreType::CPs_optional& Nurbs13CoreType::
    CPs ()
    {
      return this->CPs_;
    }

    void Nurbs13CoreType::
    CPs (const CPs_type& x)
    {
      this->CPs_.set (x);
    }

    void Nurbs13CoreType::
    CPs (const CPs_optional& x)
    {
      this->CPs_ = x;
    }

    void Nurbs13CoreType::
    CPs (::std::auto_ptr< CPs_type > x)
    {
      this->CPs_.set (x);
    }

    const Nurbs13CoreType::CPsBinary_optional& Nurbs13CoreType::
    CPsBinary () const
    {
      return this->CPsBinary_;
    }

    Nurbs13CoreType::CPsBinary_optional& Nurbs13CoreType::
    CPsBinary ()
    {
      return this->CPsBinary_;
    }

    void Nurbs13CoreType::
    CPsBinary (const CPsBinary_type& x)
    {
      this->CPsBinary_.set (x);
    }

    void Nurbs13CoreType::
    CPsBinary (const CPsBinary_optional& x)
    {
      this->CPsBinary_ = x;
    }

    void Nurbs13CoreType::
    CPsBinary (::std::auto_ptr< CPsBinary_type > x)
    {
      this->CPsBinary_.set (x);
    }

    const Nurbs13CoreType::Weights_optional& Nurbs13CoreType::
    Weights () const
    {
      return this->Weights_;
    }

    Nurbs13CoreType::Weights_optional& Nurbs13CoreType::
    Weights ()
    {
      return this->Weights_;
    }

    void Nurbs13CoreType::
    Weights (const Weights_type& x)
    {
      this->Weights_.set (x);
    }

    void Nurbs13CoreType::
    Weights (const Weights_optional& x)
    {
      this->Weights_ = x;
    }

    void Nurbs13CoreType::
    Weights (::std::auto_ptr< Weights_type > x)
    {
      this->Weights_.set (x);
    }


    // Nurbs12Type
    // 

    const Nurbs12Type::Nurbs12Core_type& Nurbs12Type::
    Nurbs12Core () const
    {
      return this->Nurbs12Core_.get ();
    }

    Nurbs12Type::Nurbs12Core_type& Nurbs12Type::
    Nurbs12Core ()
    {
      return this->Nurbs12Core_.get ();
    }

    void Nurbs12Type::
    Nurbs12Core (const Nurbs12Core_type& x)
    {
      this->Nurbs12Core_.set (x);
    }

    void Nurbs12Type::
    Nurbs12Core (::std::auto_ptr< Nurbs12Core_type > x)
    {
      this->Nurbs12Core_.set (x);
    }


    // Nurbs13Type
    // 

    const Nurbs13Type::Nurbs13Core_type& Nurbs13Type::
    Nurbs13Core () const
    {
      return this->Nurbs13Core_.get ();
    }

    Nurbs13Type::Nurbs13Core_type& Nurbs13Type::
    Nurbs13Core ()
    {
      return this->Nurbs13Core_.get ();
    }

    void Nurbs13Type::
    Nurbs13Core (const Nurbs13Core_type& x)
    {
      this->Nurbs13Core_.set (x);
    }

    void Nurbs13Type::
    Nurbs13Core (::std::auto_ptr< Nurbs13Core_type > x)
    {
      this->Nurbs13Core_.set (x);
    }

    const Nurbs13Type::Transform_optional& Nurbs13Type::
    Transform () const
    {
      return this->Transform_;
    }

    Nurbs13Type::Transform_optional& Nurbs13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Nurbs13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Nurbs13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Nurbs13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Spline13CoreType
    // 

    const Spline13CoreType::Knots_type& Spline13CoreType::
    Knots () const
    {
      return this->Knots_.get ();
    }

    Spline13CoreType::Knots_type& Spline13CoreType::
    Knots ()
    {
      return this->Knots_.get ();
    }

    void Spline13CoreType::
    Knots (const Knots_type& x)
    {
      this->Knots_.set (x);
    }

    void Spline13CoreType::
    Knots (::std::auto_ptr< Knots_type > x)
    {
      this->Knots_.set (x);
    }

    const Spline13CoreType::Orders_type& Spline13CoreType::
    Orders () const
    {
      return this->Orders_.get ();
    }

    Spline13CoreType::Orders_type& Spline13CoreType::
    Orders ()
    {
      return this->Orders_.get ();
    }

    void Spline13CoreType::
    Orders (const Orders_type& x)
    {
      this->Orders_.set (x);
    }

    void Spline13CoreType::
    Orders (::std::auto_ptr< Orders_type > x)
    {
      this->Orders_.set (x);
    }

    const Spline13CoreType::Coefficients_type& Spline13CoreType::
    Coefficients () const
    {
      return this->Coefficients_.get ();
    }

    Spline13CoreType::Coefficients_type& Spline13CoreType::
    Coefficients ()
    {
      return this->Coefficients_.get ();
    }

    void Spline13CoreType::
    Coefficients (const Coefficients_type& x)
    {
      this->Coefficients_.set (x);
    }

    void Spline13CoreType::
    Coefficients (::std::auto_ptr< Coefficients_type > x)
    {
      this->Coefficients_.set (x);
    }

    const Spline13CoreType::normalized_type& Spline13CoreType::
    normalized () const
    {
      return this->normalized_.get ();
    }

    Spline13CoreType::normalized_type& Spline13CoreType::
    normalized ()
    {
      return this->normalized_.get ();
    }

    void Spline13CoreType::
    normalized (const normalized_type& x)
    {
      this->normalized_.set (x);
    }

    Spline13CoreType::normalized_type Spline13CoreType::
    normalized_default_value ()
    {
      return normalized_type (false);
    }


    // Spline12CoreType
    // 

    const Spline12CoreType::Knots_type& Spline12CoreType::
    Knots () const
    {
      return this->Knots_.get ();
    }

    Spline12CoreType::Knots_type& Spline12CoreType::
    Knots ()
    {
      return this->Knots_.get ();
    }

    void Spline12CoreType::
    Knots (const Knots_type& x)
    {
      this->Knots_.set (x);
    }

    void Spline12CoreType::
    Knots (::std::auto_ptr< Knots_type > x)
    {
      this->Knots_.set (x);
    }

    const Spline12CoreType::Orders_type& Spline12CoreType::
    Orders () const
    {
      return this->Orders_.get ();
    }

    Spline12CoreType::Orders_type& Spline12CoreType::
    Orders ()
    {
      return this->Orders_.get ();
    }

    void Spline12CoreType::
    Orders (const Orders_type& x)
    {
      this->Orders_.set (x);
    }

    void Spline12CoreType::
    Orders (::std::auto_ptr< Orders_type > x)
    {
      this->Orders_.set (x);
    }

    const Spline12CoreType::Coefficients_type& Spline12CoreType::
    Coefficients () const
    {
      return this->Coefficients_.get ();
    }

    Spline12CoreType::Coefficients_type& Spline12CoreType::
    Coefficients ()
    {
      return this->Coefficients_.get ();
    }

    void Spline12CoreType::
    Coefficients (const Coefficients_type& x)
    {
      this->Coefficients_.set (x);
    }

    void Spline12CoreType::
    Coefficients (::std::auto_ptr< Coefficients_type > x)
    {
      this->Coefficients_.set (x);
    }

    const Spline12CoreType::normalized_type& Spline12CoreType::
    normalized () const
    {
      return this->normalized_.get ();
    }

    Spline12CoreType::normalized_type& Spline12CoreType::
    normalized ()
    {
      return this->normalized_.get ();
    }

    void Spline12CoreType::
    normalized (const normalized_type& x)
    {
      this->normalized_.set (x);
    }

    Spline12CoreType::normalized_type Spline12CoreType::
    normalized_default_value ()
    {
      return normalized_type (false);
    }


    // Spline13Type
    // 

    const Spline13Type::Spline13Core_type& Spline13Type::
    Spline13Core () const
    {
      return this->Spline13Core_.get ();
    }

    Spline13Type::Spline13Core_type& Spline13Type::
    Spline13Core ()
    {
      return this->Spline13Core_.get ();
    }

    void Spline13Type::
    Spline13Core (const Spline13Core_type& x)
    {
      this->Spline13Core_.set (x);
    }

    void Spline13Type::
    Spline13Core (::std::auto_ptr< Spline13Core_type > x)
    {
      this->Spline13Core_.set (x);
    }

    const Spline13Type::Transform_optional& Spline13Type::
    Transform () const
    {
      return this->Transform_;
    }

    Spline13Type::Transform_optional& Spline13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Spline13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Spline13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Spline13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Spline12Type
    // 

    const Spline12Type::Spline12Core_type& Spline12Type::
    Spline12Core () const
    {
      return this->Spline12Core_.get ();
    }

    Spline12Type::Spline12Core_type& Spline12Type::
    Spline12Core ()
    {
      return this->Spline12Core_.get ();
    }

    void Spline12Type::
    Spline12Core (const Spline12Core_type& x)
    {
      this->Spline12Core_.set (x);
    }

    void Spline12Type::
    Spline12Core (::std::auto_ptr< Spline12Core_type > x)
    {
      this->Spline12Core_.set (x);
    }


    // Curve12OrientedType
    // 

    const Curve12OrientedType::Curve12Core_type& Curve12OrientedType::
    Curve12Core () const
    {
      return this->Curve12Core_.get ();
    }

    Curve12OrientedType::Curve12Core_type& Curve12OrientedType::
    Curve12Core ()
    {
      return this->Curve12Core_.get ();
    }

    void Curve12OrientedType::
    Curve12Core (const Curve12Core_type& x)
    {
      this->Curve12Core_.set (x);
    }

    void Curve12OrientedType::
    Curve12Core (::std::auto_ptr< Curve12Core_type > x)
    {
      this->Curve12Core_.set (x);
    }

    const Curve12OrientedType::turned_type& Curve12OrientedType::
    turned () const
    {
      return this->turned_.get ();
    }

    Curve12OrientedType::turned_type& Curve12OrientedType::
    turned ()
    {
      return this->turned_.get ();
    }

    void Curve12OrientedType::
    turned (const turned_type& x)
    {
      this->turned_.set (x);
    }

    Curve12OrientedType::turned_type Curve12OrientedType::
    turned_default_value ()
    {
      return turned_type (false);
    }


    // ArraySubCurve12Type
    // 

    const ArraySubCurve12Type::SubCurve_sequence& ArraySubCurve12Type::
    SubCurve () const
    {
      return this->SubCurve_;
    }

    ArraySubCurve12Type::SubCurve_sequence& ArraySubCurve12Type::
    SubCurve ()
    {
      return this->SubCurve_;
    }

    void ArraySubCurve12Type::
    SubCurve (const SubCurve_sequence& s)
    {
      this->SubCurve_ = s;
    }

    const ArraySubCurve12Type::N_type& ArraySubCurve12Type::
    N () const
    {
      return this->N_.get ();
    }

    ArraySubCurve12Type::N_type& ArraySubCurve12Type::
    N ()
    {
      return this->N_.get ();
    }

    void ArraySubCurve12Type::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void ArraySubCurve12Type::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // Aggregate12CoreType
    // 

    const Aggregate12CoreType::SubCurves_type& Aggregate12CoreType::
    SubCurves () const
    {
      return this->SubCurves_.get ();
    }

    Aggregate12CoreType::SubCurves_type& Aggregate12CoreType::
    SubCurves ()
    {
      return this->SubCurves_.get ();
    }

    void Aggregate12CoreType::
    SubCurves (const SubCurves_type& x)
    {
      this->SubCurves_.set (x);
    }

    void Aggregate12CoreType::
    SubCurves (::std::auto_ptr< SubCurves_type > x)
    {
      this->SubCurves_.set (x);
    }


    // Curve13OrientedType
    // 

    const Curve13OrientedType::Curve13Core_type& Curve13OrientedType::
    Curve13Core () const
    {
      return this->Curve13Core_.get ();
    }

    Curve13OrientedType::Curve13Core_type& Curve13OrientedType::
    Curve13Core ()
    {
      return this->Curve13Core_.get ();
    }

    void Curve13OrientedType::
    Curve13Core (const Curve13Core_type& x)
    {
      this->Curve13Core_.set (x);
    }

    void Curve13OrientedType::
    Curve13Core (::std::auto_ptr< Curve13Core_type > x)
    {
      this->Curve13Core_.set (x);
    }

    const Curve13OrientedType::turned_type& Curve13OrientedType::
    turned () const
    {
      return this->turned_.get ();
    }

    Curve13OrientedType::turned_type& Curve13OrientedType::
    turned ()
    {
      return this->turned_.get ();
    }

    void Curve13OrientedType::
    turned (const turned_type& x)
    {
      this->turned_.set (x);
    }

    Curve13OrientedType::turned_type Curve13OrientedType::
    turned_default_value ()
    {
      return turned_type (false);
    }


    // ArraySubCurve13Type
    // 

    const ArraySubCurve13Type::SubCurve_sequence& ArraySubCurve13Type::
    SubCurve () const
    {
      return this->SubCurve_;
    }

    ArraySubCurve13Type::SubCurve_sequence& ArraySubCurve13Type::
    SubCurve ()
    {
      return this->SubCurve_;
    }

    void ArraySubCurve13Type::
    SubCurve (const SubCurve_sequence& s)
    {
      this->SubCurve_ = s;
    }

    const ArraySubCurve13Type::N_type& ArraySubCurve13Type::
    N () const
    {
      return this->N_.get ();
    }

    ArraySubCurve13Type::N_type& ArraySubCurve13Type::
    N ()
    {
      return this->N_.get ();
    }

    void ArraySubCurve13Type::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void ArraySubCurve13Type::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // Aggregate13CoreType
    // 

    const Aggregate13CoreType::SubCurves_type& Aggregate13CoreType::
    SubCurves () const
    {
      return this->SubCurves_.get ();
    }

    Aggregate13CoreType::SubCurves_type& Aggregate13CoreType::
    SubCurves ()
    {
      return this->SubCurves_.get ();
    }

    void Aggregate13CoreType::
    SubCurves (const SubCurves_type& x)
    {
      this->SubCurves_.set (x);
    }

    void Aggregate13CoreType::
    SubCurves (::std::auto_ptr< SubCurves_type > x)
    {
      this->SubCurves_.set (x);
    }


    // Aggregate12Type
    // 

    const Aggregate12Type::Aggregate12Core_type& Aggregate12Type::
    Aggregate12Core () const
    {
      return this->Aggregate12Core_.get ();
    }

    Aggregate12Type::Aggregate12Core_type& Aggregate12Type::
    Aggregate12Core ()
    {
      return this->Aggregate12Core_.get ();
    }

    void Aggregate12Type::
    Aggregate12Core (const Aggregate12Core_type& x)
    {
      this->Aggregate12Core_.set (x);
    }

    void Aggregate12Type::
    Aggregate12Core (::std::auto_ptr< Aggregate12Core_type > x)
    {
      this->Aggregate12Core_.set (x);
    }


    // Aggregate13Type
    // 

    const Aggregate13Type::Aggregate13Core_type& Aggregate13Type::
    Aggregate13Core () const
    {
      return this->Aggregate13Core_.get ();
    }

    Aggregate13Type::Aggregate13Core_type& Aggregate13Type::
    Aggregate13Core ()
    {
      return this->Aggregate13Core_.get ();
    }

    void Aggregate13Type::
    Aggregate13Core (const Aggregate13Core_type& x)
    {
      this->Aggregate13Core_.set (x);
    }

    void Aggregate13Type::
    Aggregate13Core (::std::auto_ptr< Aggregate13Core_type > x)
    {
      this->Aggregate13Core_.set (x);
    }

    const Aggregate13Type::Transform_optional& Aggregate13Type::
    Transform () const
    {
      return this->Transform_;
    }

    Aggregate13Type::Transform_optional& Aggregate13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Aggregate13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Aggregate13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Aggregate13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Polyline13CoreType
    // 

    const Polyline13CoreType::Points_optional& Polyline13CoreType::
    Points () const
    {
      return this->Points_;
    }

    Polyline13CoreType::Points_optional& Polyline13CoreType::
    Points ()
    {
      return this->Points_;
    }

    void Polyline13CoreType::
    Points (const Points_type& x)
    {
      this->Points_.set (x);
    }

    void Polyline13CoreType::
    Points (const Points_optional& x)
    {
      this->Points_ = x;
    }

    void Polyline13CoreType::
    Points (::std::auto_ptr< Points_type > x)
    {
      this->Points_.set (x);
    }

    const Polyline13CoreType::PointsBinary_optional& Polyline13CoreType::
    PointsBinary () const
    {
      return this->PointsBinary_;
    }

    Polyline13CoreType::PointsBinary_optional& Polyline13CoreType::
    PointsBinary ()
    {
      return this->PointsBinary_;
    }

    void Polyline13CoreType::
    PointsBinary (const PointsBinary_type& x)
    {
      this->PointsBinary_.set (x);
    }

    void Polyline13CoreType::
    PointsBinary (const PointsBinary_optional& x)
    {
      this->PointsBinary_ = x;
    }

    void Polyline13CoreType::
    PointsBinary (::std::auto_ptr< PointsBinary_type > x)
    {
      this->PointsBinary_.set (x);
    }


    // Polyline12CoreType
    // 

    const Polyline12CoreType::Points_optional& Polyline12CoreType::
    Points () const
    {
      return this->Points_;
    }

    Polyline12CoreType::Points_optional& Polyline12CoreType::
    Points ()
    {
      return this->Points_;
    }

    void Polyline12CoreType::
    Points (const Points_type& x)
    {
      this->Points_.set (x);
    }

    void Polyline12CoreType::
    Points (const Points_optional& x)
    {
      this->Points_ = x;
    }

    void Polyline12CoreType::
    Points (::std::auto_ptr< Points_type > x)
    {
      this->Points_.set (x);
    }

    const Polyline12CoreType::PointsBinary_optional& Polyline12CoreType::
    PointsBinary () const
    {
      return this->PointsBinary_;
    }

    Polyline12CoreType::PointsBinary_optional& Polyline12CoreType::
    PointsBinary ()
    {
      return this->PointsBinary_;
    }

    void Polyline12CoreType::
    PointsBinary (const PointsBinary_type& x)
    {
      this->PointsBinary_.set (x);
    }

    void Polyline12CoreType::
    PointsBinary (const PointsBinary_optional& x)
    {
      this->PointsBinary_ = x;
    }

    void Polyline12CoreType::
    PointsBinary (::std::auto_ptr< PointsBinary_type > x)
    {
      this->PointsBinary_.set (x);
    }


    // Polyline13Type
    // 

    const Polyline13Type::Polyline13Core_type& Polyline13Type::
    Polyline13Core () const
    {
      return this->Polyline13Core_.get ();
    }

    Polyline13Type::Polyline13Core_type& Polyline13Type::
    Polyline13Core ()
    {
      return this->Polyline13Core_.get ();
    }

    void Polyline13Type::
    Polyline13Core (const Polyline13Core_type& x)
    {
      this->Polyline13Core_.set (x);
    }

    void Polyline13Type::
    Polyline13Core (::std::auto_ptr< Polyline13Core_type > x)
    {
      this->Polyline13Core_.set (x);
    }

    const Polyline13Type::Transform_optional& Polyline13Type::
    Transform () const
    {
      return this->Transform_;
    }

    Polyline13Type::Transform_optional& Polyline13Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Polyline13Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Polyline13Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Polyline13Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Polyline12Type
    // 

    const Polyline12Type::Polyline12Core_type& Polyline12Type::
    Polyline12Core () const
    {
      return this->Polyline12Core_.get ();
    }

    Polyline12Type::Polyline12Core_type& Polyline12Type::
    Polyline12Core ()
    {
      return this->Polyline12Core_.get ();
    }

    void Polyline12Type::
    Polyline12Core (const Polyline12Core_type& x)
    {
      this->Polyline12Core_.set (x);
    }

    void Polyline12Type::
    Polyline12Core (::std::auto_ptr< Polyline12Core_type > x)
    {
      this->Polyline12Core_.set (x);
    }


    // SurfaceBaseType
    // 


    // SurfaceSetType
    // 

    const SurfaceSetType::Surface_sequence& SurfaceSetType::
    Surface () const
    {
      return this->Surface_;
    }

    SurfaceSetType::Surface_sequence& SurfaceSetType::
    Surface ()
    {
      return this->Surface_;
    }

    void SurfaceSetType::
    Surface (const Surface_sequence& s)
    {
      this->Surface_ = s;
    }

    const SurfaceSetType::N_type& SurfaceSetType::
    N () const
    {
      return this->N_.get ();
    }

    SurfaceSetType::N_type& SurfaceSetType::
    N ()
    {
      return this->N_.get ();
    }

    void SurfaceSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void SurfaceSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // SurfaceCoreType
    // 

    const SurfaceCoreType::SurfaceCore_type& SurfaceCoreType::
    SurfaceCore () const
    {
      return this->SurfaceCore_.get ();
    }

    SurfaceCoreType::SurfaceCore_type& SurfaceCoreType::
    SurfaceCore ()
    {
      return this->SurfaceCore_.get ();
    }

    void SurfaceCoreType::
    SurfaceCore (const SurfaceCore_type& x)
    {
      this->SurfaceCore_.set (x);
    }

    void SurfaceCoreType::
    SurfaceCore (::std::auto_ptr< SurfaceCore_type > x)
    {
      this->SurfaceCore_.set (x);
    }


    // SurfaceCoreBaseType
    // 

    const SurfaceCoreBaseType::form_optional& SurfaceCoreBaseType::
    form () const
    {
      return this->form_;
    }

    SurfaceCoreBaseType::form_optional& SurfaceCoreBaseType::
    form ()
    {
      return this->form_;
    }

    void SurfaceCoreBaseType::
    form (const form_type& x)
    {
      this->form_.set (x);
    }

    void SurfaceCoreBaseType::
    form (const form_optional& x)
    {
      this->form_ = x;
    }

    void SurfaceCoreBaseType::
    form (::std::auto_ptr< form_type > x)
    {
      this->form_.set (x);
    }


    // Attr23CoreEnumType
    // 

    Attr23CoreEnumType::
    Attr23CoreEnumType (value v)
    : ::xml_schema::string (_xsd_Attr23CoreEnumType_literals_[v])
    {
    }

    Attr23CoreEnumType::
    Attr23CoreEnumType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    Attr23CoreEnumType::
    Attr23CoreEnumType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    Attr23CoreEnumType::
    Attr23CoreEnumType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    Attr23CoreEnumType::
    Attr23CoreEnumType (const Attr23CoreEnumType& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    Attr23CoreEnumType& Attr23CoreEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_Attr23CoreEnumType_literals_[v]);

      return *this;
    }


    // Nurbs23CoreType
    // 

    const Nurbs23CoreType::OrderU_type& Nurbs23CoreType::
    OrderU () const
    {
      return this->OrderU_.get ();
    }

    Nurbs23CoreType::OrderU_type& Nurbs23CoreType::
    OrderU ()
    {
      return this->OrderU_.get ();
    }

    void Nurbs23CoreType::
    OrderU (const OrderU_type& x)
    {
      this->OrderU_.set (x);
    }

    void Nurbs23CoreType::
    OrderU (::std::auto_ptr< OrderU_type > x)
    {
      this->OrderU_.set (x);
    }

    const Nurbs23CoreType::OrderV_type& Nurbs23CoreType::
    OrderV () const
    {
      return this->OrderV_.get ();
    }

    Nurbs23CoreType::OrderV_type& Nurbs23CoreType::
    OrderV ()
    {
      return this->OrderV_.get ();
    }

    void Nurbs23CoreType::
    OrderV (const OrderV_type& x)
    {
      this->OrderV_.set (x);
    }

    void Nurbs23CoreType::
    OrderV (::std::auto_ptr< OrderV_type > x)
    {
      this->OrderV_.set (x);
    }

    const Nurbs23CoreType::KnotsU_type& Nurbs23CoreType::
    KnotsU () const
    {
      return this->KnotsU_.get ();
    }

    Nurbs23CoreType::KnotsU_type& Nurbs23CoreType::
    KnotsU ()
    {
      return this->KnotsU_.get ();
    }

    void Nurbs23CoreType::
    KnotsU (const KnotsU_type& x)
    {
      this->KnotsU_.set (x);
    }

    void Nurbs23CoreType::
    KnotsU (::std::auto_ptr< KnotsU_type > x)
    {
      this->KnotsU_.set (x);
    }

    const Nurbs23CoreType::KnotsV_type& Nurbs23CoreType::
    KnotsV () const
    {
      return this->KnotsV_.get ();
    }

    Nurbs23CoreType::KnotsV_type& Nurbs23CoreType::
    KnotsV ()
    {
      return this->KnotsV_.get ();
    }

    void Nurbs23CoreType::
    KnotsV (const KnotsV_type& x)
    {
      this->KnotsV_.set (x);
    }

    void Nurbs23CoreType::
    KnotsV (::std::auto_ptr< KnotsV_type > x)
    {
      this->KnotsV_.set (x);
    }

    const Nurbs23CoreType::CPs_optional& Nurbs23CoreType::
    CPs () const
    {
      return this->CPs_;
    }

    Nurbs23CoreType::CPs_optional& Nurbs23CoreType::
    CPs ()
    {
      return this->CPs_;
    }

    void Nurbs23CoreType::
    CPs (const CPs_type& x)
    {
      this->CPs_.set (x);
    }

    void Nurbs23CoreType::
    CPs (const CPs_optional& x)
    {
      this->CPs_ = x;
    }

    void Nurbs23CoreType::
    CPs (::std::auto_ptr< CPs_type > x)
    {
      this->CPs_.set (x);
    }

    const Nurbs23CoreType::CPsBinary_optional& Nurbs23CoreType::
    CPsBinary () const
    {
      return this->CPsBinary_;
    }

    Nurbs23CoreType::CPsBinary_optional& Nurbs23CoreType::
    CPsBinary ()
    {
      return this->CPsBinary_;
    }

    void Nurbs23CoreType::
    CPsBinary (const CPsBinary_type& x)
    {
      this->CPsBinary_.set (x);
    }

    void Nurbs23CoreType::
    CPsBinary (const CPsBinary_optional& x)
    {
      this->CPsBinary_ = x;
    }

    void Nurbs23CoreType::
    CPsBinary (::std::auto_ptr< CPsBinary_type > x)
    {
      this->CPsBinary_.set (x);
    }

    const Nurbs23CoreType::Weights_optional& Nurbs23CoreType::
    Weights () const
    {
      return this->Weights_;
    }

    Nurbs23CoreType::Weights_optional& Nurbs23CoreType::
    Weights ()
    {
      return this->Weights_;
    }

    void Nurbs23CoreType::
    Weights (const Weights_type& x)
    {
      this->Weights_.set (x);
    }

    void Nurbs23CoreType::
    Weights (const Weights_optional& x)
    {
      this->Weights_ = x;
    }

    void Nurbs23CoreType::
    Weights (::std::auto_ptr< Weights_type > x)
    {
      this->Weights_.set (x);
    }


    // Nurbs23Type
    // 

    const Nurbs23Type::Nurbs23Core_type& Nurbs23Type::
    Nurbs23Core () const
    {
      return this->Nurbs23Core_.get ();
    }

    Nurbs23Type::Nurbs23Core_type& Nurbs23Type::
    Nurbs23Core ()
    {
      return this->Nurbs23Core_.get ();
    }

    void Nurbs23Type::
    Nurbs23Core (const Nurbs23Core_type& x)
    {
      this->Nurbs23Core_.set (x);
    }

    void Nurbs23Type::
    Nurbs23Core (::std::auto_ptr< Nurbs23Core_type > x)
    {
      this->Nurbs23Core_.set (x);
    }

    const Nurbs23Type::Transform_optional& Nurbs23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Nurbs23Type::Transform_optional& Nurbs23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Nurbs23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Nurbs23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Nurbs23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Spline23CoreType
    // 

    const Spline23CoreType::KnotsU_type& Spline23CoreType::
    KnotsU () const
    {
      return this->KnotsU_.get ();
    }

    Spline23CoreType::KnotsU_type& Spline23CoreType::
    KnotsU ()
    {
      return this->KnotsU_.get ();
    }

    void Spline23CoreType::
    KnotsU (const KnotsU_type& x)
    {
      this->KnotsU_.set (x);
    }

    void Spline23CoreType::
    KnotsU (::std::auto_ptr< KnotsU_type > x)
    {
      this->KnotsU_.set (x);
    }

    const Spline23CoreType::KnotsV_type& Spline23CoreType::
    KnotsV () const
    {
      return this->KnotsV_.get ();
    }

    Spline23CoreType::KnotsV_type& Spline23CoreType::
    KnotsV ()
    {
      return this->KnotsV_.get ();
    }

    void Spline23CoreType::
    KnotsV (const KnotsV_type& x)
    {
      this->KnotsV_.set (x);
    }

    void Spline23CoreType::
    KnotsV (::std::auto_ptr< KnotsV_type > x)
    {
      this->KnotsV_.set (x);
    }

    const Spline23CoreType::OrdersU_type& Spline23CoreType::
    OrdersU () const
    {
      return this->OrdersU_.get ();
    }

    Spline23CoreType::OrdersU_type& Spline23CoreType::
    OrdersU ()
    {
      return this->OrdersU_.get ();
    }

    void Spline23CoreType::
    OrdersU (const OrdersU_type& x)
    {
      this->OrdersU_.set (x);
    }

    void Spline23CoreType::
    OrdersU (::std::auto_ptr< OrdersU_type > x)
    {
      this->OrdersU_.set (x);
    }

    const Spline23CoreType::OrdersV_type& Spline23CoreType::
    OrdersV () const
    {
      return this->OrdersV_.get ();
    }

    Spline23CoreType::OrdersV_type& Spline23CoreType::
    OrdersV ()
    {
      return this->OrdersV_.get ();
    }

    void Spline23CoreType::
    OrdersV (const OrdersV_type& x)
    {
      this->OrdersV_.set (x);
    }

    void Spline23CoreType::
    OrdersV (::std::auto_ptr< OrdersV_type > x)
    {
      this->OrdersV_.set (x);
    }

    const Spline23CoreType::Coefficients_type& Spline23CoreType::
    Coefficients () const
    {
      return this->Coefficients_.get ();
    }

    Spline23CoreType::Coefficients_type& Spline23CoreType::
    Coefficients ()
    {
      return this->Coefficients_.get ();
    }

    void Spline23CoreType::
    Coefficients (const Coefficients_type& x)
    {
      this->Coefficients_.set (x);
    }

    void Spline23CoreType::
    Coefficients (::std::auto_ptr< Coefficients_type > x)
    {
      this->Coefficients_.set (x);
    }

    const Spline23CoreType::normalized_type& Spline23CoreType::
    normalized () const
    {
      return this->normalized_.get ();
    }

    Spline23CoreType::normalized_type& Spline23CoreType::
    normalized ()
    {
      return this->normalized_.get ();
    }

    void Spline23CoreType::
    normalized (const normalized_type& x)
    {
      this->normalized_.set (x);
    }

    Spline23CoreType::normalized_type Spline23CoreType::
    normalized_default_value ()
    {
      return normalized_type (false);
    }


    // Spline23Type
    // 

    const Spline23Type::Spline23Core_type& Spline23Type::
    Spline23Core () const
    {
      return this->Spline23Core_.get ();
    }

    Spline23Type::Spline23Core_type& Spline23Type::
    Spline23Core ()
    {
      return this->Spline23Core_.get ();
    }

    void Spline23Type::
    Spline23Core (const Spline23Core_type& x)
    {
      this->Spline23Core_.set (x);
    }

    void Spline23Type::
    Spline23Core (::std::auto_ptr< Spline23Core_type > x)
    {
      this->Spline23Core_.set (x);
    }

    const Spline23Type::Transform_optional& Spline23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Spline23Type::Transform_optional& Spline23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Spline23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Spline23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Spline23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Revolution23CoreType
    // 

    const Revolution23CoreType::Axis_type& Revolution23CoreType::
    Axis () const
    {
      return this->Axis_.get ();
    }

    Revolution23CoreType::Axis_type& Revolution23CoreType::
    Axis ()
    {
      return this->Axis_.get ();
    }

    void Revolution23CoreType::
    Axis (const Axis_type& x)
    {
      this->Axis_.set (x);
    }

    void Revolution23CoreType::
    Axis (::std::auto_ptr< Axis_type > x)
    {
      this->Axis_.set (x);
    }

    const Revolution23CoreType::Generatrix_type& Revolution23CoreType::
    Generatrix () const
    {
      return this->Generatrix_.get ();
    }

    Revolution23CoreType::Generatrix_type& Revolution23CoreType::
    Generatrix ()
    {
      return this->Generatrix_.get ();
    }

    void Revolution23CoreType::
    Generatrix (const Generatrix_type& x)
    {
      this->Generatrix_.set (x);
    }

    void Revolution23CoreType::
    Generatrix (::std::auto_ptr< Generatrix_type > x)
    {
      this->Generatrix_.set (x);
    }

    const Revolution23CoreType::angle_type& Revolution23CoreType::
    angle () const
    {
      return this->angle_.get ();
    }

    Revolution23CoreType::angle_type& Revolution23CoreType::
    angle ()
    {
      return this->angle_.get ();
    }

    void Revolution23CoreType::
    angle (const angle_type& x)
    {
      this->angle_.set (x);
    }

    void Revolution23CoreType::
    angle (::std::auto_ptr< angle_type > x)
    {
      this->angle_.set (x);
    }


    // Revolution23Type
    // 

    const Revolution23Type::Revolution23Core_type& Revolution23Type::
    Revolution23Core () const
    {
      return this->Revolution23Core_.get ();
    }

    Revolution23Type::Revolution23Core_type& Revolution23Type::
    Revolution23Core ()
    {
      return this->Revolution23Core_.get ();
    }

    void Revolution23Type::
    Revolution23Core (const Revolution23Core_type& x)
    {
      this->Revolution23Core_.set (x);
    }

    void Revolution23Type::
    Revolution23Core (::std::auto_ptr< Revolution23Core_type > x)
    {
      this->Revolution23Core_.set (x);
    }

    const Revolution23Type::Transform_optional& Revolution23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Revolution23Type::Transform_optional& Revolution23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Revolution23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Revolution23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Revolution23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Extrude23CoreType
    // 

    const Extrude23CoreType::TerminationPoint_type& Extrude23CoreType::
    TerminationPoint () const
    {
      return this->TerminationPoint_.get ();
    }

    Extrude23CoreType::TerminationPoint_type& Extrude23CoreType::
    TerminationPoint ()
    {
      return this->TerminationPoint_.get ();
    }

    void Extrude23CoreType::
    TerminationPoint (const TerminationPoint_type& x)
    {
      this->TerminationPoint_.set (x);
    }

    void Extrude23CoreType::
    TerminationPoint (::std::auto_ptr< TerminationPoint_type > x)
    {
      this->TerminationPoint_.set (x);
    }

    const Extrude23CoreType::Curve_type& Extrude23CoreType::
    Curve () const
    {
      return this->Curve_.get ();
    }

    Extrude23CoreType::Curve_type& Extrude23CoreType::
    Curve ()
    {
      return this->Curve_.get ();
    }

    void Extrude23CoreType::
    Curve (const Curve_type& x)
    {
      this->Curve_.set (x);
    }

    void Extrude23CoreType::
    Curve (::std::auto_ptr< Curve_type > x)
    {
      this->Curve_.set (x);
    }


    // Extrude23Type
    // 

    const Extrude23Type::Extrude23Core_type& Extrude23Type::
    Extrude23Core () const
    {
      return this->Extrude23Core_.get ();
    }

    Extrude23Type::Extrude23Core_type& Extrude23Type::
    Extrude23Core ()
    {
      return this->Extrude23Core_.get ();
    }

    void Extrude23Type::
    Extrude23Core (const Extrude23Core_type& x)
    {
      this->Extrude23Core_.set (x);
    }

    void Extrude23Type::
    Extrude23Core (::std::auto_ptr< Extrude23Core_type > x)
    {
      this->Extrude23Core_.set (x);
    }

    const Extrude23Type::Transform_optional& Extrude23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Extrude23Type::Transform_optional& Extrude23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Extrude23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Extrude23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Extrude23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Ruled23CoreType
    // 

    const Ruled23CoreType::Curve_sequence& Ruled23CoreType::
    Curve () const
    {
      return this->Curve_;
    }

    Ruled23CoreType::Curve_sequence& Ruled23CoreType::
    Curve ()
    {
      return this->Curve_;
    }

    void Ruled23CoreType::
    Curve (const Curve_sequence& s)
    {
      this->Curve_ = s;
    }

    const Ruled23CoreType::turnedSecondCurve_type& Ruled23CoreType::
    turnedSecondCurve () const
    {
      return this->turnedSecondCurve_.get ();
    }

    Ruled23CoreType::turnedSecondCurve_type& Ruled23CoreType::
    turnedSecondCurve ()
    {
      return this->turnedSecondCurve_.get ();
    }

    void Ruled23CoreType::
    turnedSecondCurve (const turnedSecondCurve_type& x)
    {
      this->turnedSecondCurve_.set (x);
    }

    Ruled23CoreType::turnedSecondCurve_type Ruled23CoreType::
    turnedSecondCurve_default_value ()
    {
      return turnedSecondCurve_type (false);
    }


    // Ruled23Type
    // 

    const Ruled23Type::Ruled23Core_type& Ruled23Type::
    Ruled23Core () const
    {
      return this->Ruled23Core_.get ();
    }

    Ruled23Type::Ruled23Core_type& Ruled23Type::
    Ruled23Core ()
    {
      return this->Ruled23Core_.get ();
    }

    void Ruled23Type::
    Ruled23Core (const Ruled23Core_type& x)
    {
      this->Ruled23Core_.set (x);
    }

    void Ruled23Type::
    Ruled23Core (::std::auto_ptr< Ruled23Core_type > x)
    {
      this->Ruled23Core_.set (x);
    }

    const Ruled23Type::Transform_optional& Ruled23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Ruled23Type::Transform_optional& Ruled23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Ruled23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Ruled23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Ruled23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Offset23CoreType
    // 

    const Offset23CoreType::Distance_type& Offset23CoreType::
    Distance () const
    {
      return this->Distance_.get ();
    }

    Offset23CoreType::Distance_type& Offset23CoreType::
    Distance ()
    {
      return this->Distance_.get ();
    }

    void Offset23CoreType::
    Distance (const Distance_type& x)
    {
      this->Distance_.set (x);
    }

    const Offset23CoreType::Surface_type& Offset23CoreType::
    Surface () const
    {
      return this->Surface_.get ();
    }

    Offset23CoreType::Surface_type& Offset23CoreType::
    Surface ()
    {
      return this->Surface_.get ();
    }

    void Offset23CoreType::
    Surface (const Surface_type& x)
    {
      this->Surface_.set (x);
    }

    void Offset23CoreType::
    Surface (::std::auto_ptr< Surface_type > x)
    {
      this->Surface_.set (x);
    }


    // Offset23Type
    // 

    const Offset23Type::Offset23Core_type& Offset23Type::
    Offset23Core () const
    {
      return this->Offset23Core_.get ();
    }

    Offset23Type::Offset23Core_type& Offset23Type::
    Offset23Core ()
    {
      return this->Offset23Core_.get ();
    }

    void Offset23Type::
    Offset23Core (const Offset23Core_type& x)
    {
      this->Offset23Core_.set (x);
    }

    void Offset23Type::
    Offset23Core (::std::auto_ptr< Offset23Core_type > x)
    {
      this->Offset23Core_.set (x);
    }

    const Offset23Type::Transform_optional& Offset23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Offset23Type::Transform_optional& Offset23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Offset23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Offset23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Offset23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Plane23CoreType
    // 

    const Plane23CoreType::Origin_type& Plane23CoreType::
    Origin () const
    {
      return this->Origin_.get ();
    }

    Plane23CoreType::Origin_type& Plane23CoreType::
    Origin ()
    {
      return this->Origin_.get ();
    }

    void Plane23CoreType::
    Origin (const Origin_type& x)
    {
      this->Origin_.set (x);
    }

    void Plane23CoreType::
    Origin (::std::auto_ptr< Origin_type > x)
    {
      this->Origin_.set (x);
    }

    const Plane23CoreType::DirU_type& Plane23CoreType::
    DirU () const
    {
      return this->DirU_.get ();
    }

    Plane23CoreType::DirU_type& Plane23CoreType::
    DirU ()
    {
      return this->DirU_.get ();
    }

    void Plane23CoreType::
    DirU (const DirU_type& x)
    {
      this->DirU_.set (x);
    }

    void Plane23CoreType::
    DirU (::std::auto_ptr< DirU_type > x)
    {
      this->DirU_.set (x);
    }

    const Plane23CoreType::DirV_type& Plane23CoreType::
    DirV () const
    {
      return this->DirV_.get ();
    }

    Plane23CoreType::DirV_type& Plane23CoreType::
    DirV ()
    {
      return this->DirV_.get ();
    }

    void Plane23CoreType::
    DirV (const DirV_type& x)
    {
      this->DirV_.set (x);
    }

    void Plane23CoreType::
    DirV (::std::auto_ptr< DirV_type > x)
    {
      this->DirV_.set (x);
    }

    const Plane23CoreType::domainU_type& Plane23CoreType::
    domainU () const
    {
      return this->domainU_.get ();
    }

    Plane23CoreType::domainU_type& Plane23CoreType::
    domainU ()
    {
      return this->domainU_.get ();
    }

    void Plane23CoreType::
    domainU (const domainU_type& x)
    {
      this->domainU_.set (x);
    }

    void Plane23CoreType::
    domainU (::std::auto_ptr< domainU_type > x)
    {
      this->domainU_.set (x);
    }

    const Plane23CoreType::domainV_type& Plane23CoreType::
    domainV () const
    {
      return this->domainV_.get ();
    }

    Plane23CoreType::domainV_type& Plane23CoreType::
    domainV ()
    {
      return this->domainV_.get ();
    }

    void Plane23CoreType::
    domainV (const domainV_type& x)
    {
      this->domainV_.set (x);
    }

    void Plane23CoreType::
    domainV (::std::auto_ptr< domainV_type > x)
    {
      this->domainV_.set (x);
    }


    // Plane23Type
    // 

    const Plane23Type::Plane23Core_type& Plane23Type::
    Plane23Core () const
    {
      return this->Plane23Core_.get ();
    }

    Plane23Type::Plane23Core_type& Plane23Type::
    Plane23Core ()
    {
      return this->Plane23Core_.get ();
    }

    void Plane23Type::
    Plane23Core (const Plane23Core_type& x)
    {
      this->Plane23Core_.set (x);
    }

    void Plane23Type::
    Plane23Core (::std::auto_ptr< Plane23Core_type > x)
    {
      this->Plane23Core_.set (x);
    }

    const Plane23Type::Transform_optional& Plane23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Plane23Type::Transform_optional& Plane23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Plane23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Plane23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Plane23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Cone23CoreType
    // 

    const Cone23CoreType::DiameterBottom_type& Cone23CoreType::
    DiameterBottom () const
    {
      return this->DiameterBottom_.get ();
    }

    Cone23CoreType::DiameterBottom_type& Cone23CoreType::
    DiameterBottom ()
    {
      return this->DiameterBottom_.get ();
    }

    void Cone23CoreType::
    DiameterBottom (const DiameterBottom_type& x)
    {
      this->DiameterBottom_.set (x);
    }

    const Cone23CoreType::DiameterTop_type& Cone23CoreType::
    DiameterTop () const
    {
      return this->DiameterTop_.get ();
    }

    Cone23CoreType::DiameterTop_type& Cone23CoreType::
    DiameterTop ()
    {
      return this->DiameterTop_.get ();
    }

    void Cone23CoreType::
    DiameterTop (const DiameterTop_type& x)
    {
      this->DiameterTop_.set (x);
    }

    const Cone23CoreType::Length_type& Cone23CoreType::
    Length () const
    {
      return this->Length_.get ();
    }

    Cone23CoreType::Length_type& Cone23CoreType::
    Length ()
    {
      return this->Length_.get ();
    }

    void Cone23CoreType::
    Length (const Length_type& x)
    {
      this->Length_.set (x);
    }

    const Cone23CoreType::Axis_type& Cone23CoreType::
    Axis () const
    {
      return this->Axis_.get ();
    }

    Cone23CoreType::Axis_type& Cone23CoreType::
    Axis ()
    {
      return this->Axis_.get ();
    }

    void Cone23CoreType::
    Axis (const Axis_type& x)
    {
      this->Axis_.set (x);
    }

    void Cone23CoreType::
    Axis (::std::auto_ptr< Axis_type > x)
    {
      this->Axis_.set (x);
    }

    const Cone23CoreType::Sweep_type& Cone23CoreType::
    Sweep () const
    {
      return this->Sweep_.get ();
    }

    Cone23CoreType::Sweep_type& Cone23CoreType::
    Sweep ()
    {
      return this->Sweep_.get ();
    }

    void Cone23CoreType::
    Sweep (const Sweep_type& x)
    {
      this->Sweep_.set (x);
    }

    void Cone23CoreType::
    Sweep (::std::auto_ptr< Sweep_type > x)
    {
      this->Sweep_.set (x);
    }

    const Cone23CoreType::turnedV_type& Cone23CoreType::
    turnedV () const
    {
      return this->turnedV_.get ();
    }

    Cone23CoreType::turnedV_type& Cone23CoreType::
    turnedV ()
    {
      return this->turnedV_.get ();
    }

    void Cone23CoreType::
    turnedV (const turnedV_type& x)
    {
      this->turnedV_.set (x);
    }

    Cone23CoreType::turnedV_type Cone23CoreType::
    turnedV_default_value ()
    {
      return turnedV_type (false);
    }

    const Cone23CoreType::scaleU_type& Cone23CoreType::
    scaleU () const
    {
      return this->scaleU_.get ();
    }

    Cone23CoreType::scaleU_type& Cone23CoreType::
    scaleU ()
    {
      return this->scaleU_.get ();
    }

    void Cone23CoreType::
    scaleU (const scaleU_type& x)
    {
      this->scaleU_.set (x);
    }

    void Cone23CoreType::
    scaleU (::std::auto_ptr< scaleU_type > x)
    {
      this->scaleU_.set (x);
    }

    Cone23CoreType::scaleU_type Cone23CoreType::
    scaleU_default_value ()
    {
      return scaleU_type (1.0);
    }

    const Cone23CoreType::scaleV_type& Cone23CoreType::
    scaleV () const
    {
      return this->scaleV_.get ();
    }

    Cone23CoreType::scaleV_type& Cone23CoreType::
    scaleV ()
    {
      return this->scaleV_.get ();
    }

    void Cone23CoreType::
    scaleV (const scaleV_type& x)
    {
      this->scaleV_.set (x);
    }

    void Cone23CoreType::
    scaleV (::std::auto_ptr< scaleV_type > x)
    {
      this->scaleV_.set (x);
    }

    Cone23CoreType::scaleV_type Cone23CoreType::
    scaleV_default_value ()
    {
      return scaleV_type (1.0);
    }


    // Cone23Type
    // 

    const Cone23Type::Cone23Core_type& Cone23Type::
    Cone23Core () const
    {
      return this->Cone23Core_.get ();
    }

    Cone23Type::Cone23Core_type& Cone23Type::
    Cone23Core ()
    {
      return this->Cone23Core_.get ();
    }

    void Cone23Type::
    Cone23Core (const Cone23Core_type& x)
    {
      this->Cone23Core_.set (x);
    }

    void Cone23Type::
    Cone23Core (::std::auto_ptr< Cone23Core_type > x)
    {
      this->Cone23Core_.set (x);
    }

    const Cone23Type::Transform_optional& Cone23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Cone23Type::Transform_optional& Cone23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Cone23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Cone23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Cone23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Cylinder23CoreType
    // 

    const Cylinder23CoreType::Diameter_type& Cylinder23CoreType::
    Diameter () const
    {
      return this->Diameter_.get ();
    }

    Cylinder23CoreType::Diameter_type& Cylinder23CoreType::
    Diameter ()
    {
      return this->Diameter_.get ();
    }

    void Cylinder23CoreType::
    Diameter (const Diameter_type& x)
    {
      this->Diameter_.set (x);
    }

    const Cylinder23CoreType::Length_type& Cylinder23CoreType::
    Length () const
    {
      return this->Length_.get ();
    }

    Cylinder23CoreType::Length_type& Cylinder23CoreType::
    Length ()
    {
      return this->Length_.get ();
    }

    void Cylinder23CoreType::
    Length (const Length_type& x)
    {
      this->Length_.set (x);
    }

    const Cylinder23CoreType::Axis_type& Cylinder23CoreType::
    Axis () const
    {
      return this->Axis_.get ();
    }

    Cylinder23CoreType::Axis_type& Cylinder23CoreType::
    Axis ()
    {
      return this->Axis_.get ();
    }

    void Cylinder23CoreType::
    Axis (const Axis_type& x)
    {
      this->Axis_.set (x);
    }

    void Cylinder23CoreType::
    Axis (::std::auto_ptr< Axis_type > x)
    {
      this->Axis_.set (x);
    }

    const Cylinder23CoreType::Sweep_type& Cylinder23CoreType::
    Sweep () const
    {
      return this->Sweep_.get ();
    }

    Cylinder23CoreType::Sweep_type& Cylinder23CoreType::
    Sweep ()
    {
      return this->Sweep_.get ();
    }

    void Cylinder23CoreType::
    Sweep (const Sweep_type& x)
    {
      this->Sweep_.set (x);
    }

    void Cylinder23CoreType::
    Sweep (::std::auto_ptr< Sweep_type > x)
    {
      this->Sweep_.set (x);
    }

    const Cylinder23CoreType::turnedV_type& Cylinder23CoreType::
    turnedV () const
    {
      return this->turnedV_.get ();
    }

    Cylinder23CoreType::turnedV_type& Cylinder23CoreType::
    turnedV ()
    {
      return this->turnedV_.get ();
    }

    void Cylinder23CoreType::
    turnedV (const turnedV_type& x)
    {
      this->turnedV_.set (x);
    }

    Cylinder23CoreType::turnedV_type Cylinder23CoreType::
    turnedV_default_value ()
    {
      return turnedV_type (false);
    }

    const Cylinder23CoreType::scaleU_type& Cylinder23CoreType::
    scaleU () const
    {
      return this->scaleU_.get ();
    }

    Cylinder23CoreType::scaleU_type& Cylinder23CoreType::
    scaleU ()
    {
      return this->scaleU_.get ();
    }

    void Cylinder23CoreType::
    scaleU (const scaleU_type& x)
    {
      this->scaleU_.set (x);
    }

    void Cylinder23CoreType::
    scaleU (::std::auto_ptr< scaleU_type > x)
    {
      this->scaleU_.set (x);
    }

    Cylinder23CoreType::scaleU_type Cylinder23CoreType::
    scaleU_default_value ()
    {
      return scaleU_type (1.0);
    }

    const Cylinder23CoreType::scaleV_type& Cylinder23CoreType::
    scaleV () const
    {
      return this->scaleV_.get ();
    }

    Cylinder23CoreType::scaleV_type& Cylinder23CoreType::
    scaleV ()
    {
      return this->scaleV_.get ();
    }

    void Cylinder23CoreType::
    scaleV (const scaleV_type& x)
    {
      this->scaleV_.set (x);
    }

    void Cylinder23CoreType::
    scaleV (::std::auto_ptr< scaleV_type > x)
    {
      this->scaleV_.set (x);
    }

    Cylinder23CoreType::scaleV_type Cylinder23CoreType::
    scaleV_default_value ()
    {
      return scaleV_type (1.0);
    }


    // Cylinder23Type
    // 

    const Cylinder23Type::Cylinder23Core_type& Cylinder23Type::
    Cylinder23Core () const
    {
      return this->Cylinder23Core_.get ();
    }

    Cylinder23Type::Cylinder23Core_type& Cylinder23Type::
    Cylinder23Core ()
    {
      return this->Cylinder23Core_.get ();
    }

    void Cylinder23Type::
    Cylinder23Core (const Cylinder23Core_type& x)
    {
      this->Cylinder23Core_.set (x);
    }

    void Cylinder23Type::
    Cylinder23Core (::std::auto_ptr< Cylinder23Core_type > x)
    {
      this->Cylinder23Core_.set (x);
    }

    const Cylinder23Type::Transform_optional& Cylinder23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Cylinder23Type::Transform_optional& Cylinder23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Cylinder23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Cylinder23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Cylinder23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Sphere23CoreType
    // 

    const Sphere23CoreType::Diameter_type& Sphere23CoreType::
    Diameter () const
    {
      return this->Diameter_.get ();
    }

    Sphere23CoreType::Diameter_type& Sphere23CoreType::
    Diameter ()
    {
      return this->Diameter_.get ();
    }

    void Sphere23CoreType::
    Diameter (const Diameter_type& x)
    {
      this->Diameter_.set (x);
    }

    const Sphere23CoreType::Location_type& Sphere23CoreType::
    Location () const
    {
      return this->Location_.get ();
    }

    Sphere23CoreType::Location_type& Sphere23CoreType::
    Location ()
    {
      return this->Location_.get ();
    }

    void Sphere23CoreType::
    Location (const Location_type& x)
    {
      this->Location_.set (x);
    }

    void Sphere23CoreType::
    Location (::std::auto_ptr< Location_type > x)
    {
      this->Location_.set (x);
    }

    const Sphere23CoreType::LatitudeLongitudeSweep_type& Sphere23CoreType::
    LatitudeLongitudeSweep () const
    {
      return this->LatitudeLongitudeSweep_.get ();
    }

    Sphere23CoreType::LatitudeLongitudeSweep_type& Sphere23CoreType::
    LatitudeLongitudeSweep ()
    {
      return this->LatitudeLongitudeSweep_.get ();
    }

    void Sphere23CoreType::
    LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x)
    {
      this->LatitudeLongitudeSweep_.set (x);
    }

    void Sphere23CoreType::
    LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > x)
    {
      this->LatitudeLongitudeSweep_.set (x);
    }

    const Sphere23CoreType::turnedV_type& Sphere23CoreType::
    turnedV () const
    {
      return this->turnedV_.get ();
    }

    Sphere23CoreType::turnedV_type& Sphere23CoreType::
    turnedV ()
    {
      return this->turnedV_.get ();
    }

    void Sphere23CoreType::
    turnedV (const turnedV_type& x)
    {
      this->turnedV_.set (x);
    }

    Sphere23CoreType::turnedV_type Sphere23CoreType::
    turnedV_default_value ()
    {
      return turnedV_type (false);
    }

    const Sphere23CoreType::scaleU_type& Sphere23CoreType::
    scaleU () const
    {
      return this->scaleU_.get ();
    }

    Sphere23CoreType::scaleU_type& Sphere23CoreType::
    scaleU ()
    {
      return this->scaleU_.get ();
    }

    void Sphere23CoreType::
    scaleU (const scaleU_type& x)
    {
      this->scaleU_.set (x);
    }

    void Sphere23CoreType::
    scaleU (::std::auto_ptr< scaleU_type > x)
    {
      this->scaleU_.set (x);
    }

    Sphere23CoreType::scaleU_type Sphere23CoreType::
    scaleU_default_value ()
    {
      return scaleU_type (1.0);
    }

    const Sphere23CoreType::scaleV_type& Sphere23CoreType::
    scaleV () const
    {
      return this->scaleV_.get ();
    }

    Sphere23CoreType::scaleV_type& Sphere23CoreType::
    scaleV ()
    {
      return this->scaleV_.get ();
    }

    void Sphere23CoreType::
    scaleV (const scaleV_type& x)
    {
      this->scaleV_.set (x);
    }

    void Sphere23CoreType::
    scaleV (::std::auto_ptr< scaleV_type > x)
    {
      this->scaleV_.set (x);
    }

    Sphere23CoreType::scaleV_type Sphere23CoreType::
    scaleV_default_value ()
    {
      return scaleV_type (1.0);
    }


    // Sphere23Type
    // 

    const Sphere23Type::Sphere23Core_type& Sphere23Type::
    Sphere23Core () const
    {
      return this->Sphere23Core_.get ();
    }

    Sphere23Type::Sphere23Core_type& Sphere23Type::
    Sphere23Core ()
    {
      return this->Sphere23Core_.get ();
    }

    void Sphere23Type::
    Sphere23Core (const Sphere23Core_type& x)
    {
      this->Sphere23Core_.set (x);
    }

    void Sphere23Type::
    Sphere23Core (::std::auto_ptr< Sphere23Core_type > x)
    {
      this->Sphere23Core_.set (x);
    }

    const Sphere23Type::Transform_optional& Sphere23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Sphere23Type::Transform_optional& Sphere23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Sphere23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Sphere23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Sphere23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // Torus23CoreType
    // 

    const Torus23CoreType::DiameterMinor_type& Torus23CoreType::
    DiameterMinor () const
    {
      return this->DiameterMinor_.get ();
    }

    Torus23CoreType::DiameterMinor_type& Torus23CoreType::
    DiameterMinor ()
    {
      return this->DiameterMinor_.get ();
    }

    void Torus23CoreType::
    DiameterMinor (const DiameterMinor_type& x)
    {
      this->DiameterMinor_.set (x);
    }

    const Torus23CoreType::DiameterMajor_type& Torus23CoreType::
    DiameterMajor () const
    {
      return this->DiameterMajor_.get ();
    }

    Torus23CoreType::DiameterMajor_type& Torus23CoreType::
    DiameterMajor ()
    {
      return this->DiameterMajor_.get ();
    }

    void Torus23CoreType::
    DiameterMajor (const DiameterMajor_type& x)
    {
      this->DiameterMajor_.set (x);
    }

    const Torus23CoreType::Axis_type& Torus23CoreType::
    Axis () const
    {
      return this->Axis_.get ();
    }

    Torus23CoreType::Axis_type& Torus23CoreType::
    Axis ()
    {
      return this->Axis_.get ();
    }

    void Torus23CoreType::
    Axis (const Axis_type& x)
    {
      this->Axis_.set (x);
    }

    void Torus23CoreType::
    Axis (::std::auto_ptr< Axis_type > x)
    {
      this->Axis_.set (x);
    }

    const Torus23CoreType::LatitudeLongitudeSweep_type& Torus23CoreType::
    LatitudeLongitudeSweep () const
    {
      return this->LatitudeLongitudeSweep_.get ();
    }

    Torus23CoreType::LatitudeLongitudeSweep_type& Torus23CoreType::
    LatitudeLongitudeSweep ()
    {
      return this->LatitudeLongitudeSweep_.get ();
    }

    void Torus23CoreType::
    LatitudeLongitudeSweep (const LatitudeLongitudeSweep_type& x)
    {
      this->LatitudeLongitudeSweep_.set (x);
    }

    void Torus23CoreType::
    LatitudeLongitudeSweep (::std::auto_ptr< LatitudeLongitudeSweep_type > x)
    {
      this->LatitudeLongitudeSweep_.set (x);
    }

    const Torus23CoreType::turnedV_type& Torus23CoreType::
    turnedV () const
    {
      return this->turnedV_.get ();
    }

    Torus23CoreType::turnedV_type& Torus23CoreType::
    turnedV ()
    {
      return this->turnedV_.get ();
    }

    void Torus23CoreType::
    turnedV (const turnedV_type& x)
    {
      this->turnedV_.set (x);
    }

    Torus23CoreType::turnedV_type Torus23CoreType::
    turnedV_default_value ()
    {
      return turnedV_type (false);
    }

    const Torus23CoreType::offsetV_type& Torus23CoreType::
    offsetV () const
    {
      return this->offsetV_.get ();
    }

    Torus23CoreType::offsetV_type& Torus23CoreType::
    offsetV ()
    {
      return this->offsetV_.get ();
    }

    void Torus23CoreType::
    offsetV (const offsetV_type& x)
    {
      this->offsetV_.set (x);
    }

    Torus23CoreType::offsetV_type Torus23CoreType::
    offsetV_default_value ()
    {
      return offsetV_type (.0);
    }

    const Torus23CoreType::scaleU_type& Torus23CoreType::
    scaleU () const
    {
      return this->scaleU_.get ();
    }

    Torus23CoreType::scaleU_type& Torus23CoreType::
    scaleU ()
    {
      return this->scaleU_.get ();
    }

    void Torus23CoreType::
    scaleU (const scaleU_type& x)
    {
      this->scaleU_.set (x);
    }

    void Torus23CoreType::
    scaleU (::std::auto_ptr< scaleU_type > x)
    {
      this->scaleU_.set (x);
    }

    Torus23CoreType::scaleU_type Torus23CoreType::
    scaleU_default_value ()
    {
      return scaleU_type (1.0);
    }

    const Torus23CoreType::scaleV_type& Torus23CoreType::
    scaleV () const
    {
      return this->scaleV_.get ();
    }

    Torus23CoreType::scaleV_type& Torus23CoreType::
    scaleV ()
    {
      return this->scaleV_.get ();
    }

    void Torus23CoreType::
    scaleV (const scaleV_type& x)
    {
      this->scaleV_.set (x);
    }

    void Torus23CoreType::
    scaleV (::std::auto_ptr< scaleV_type > x)
    {
      this->scaleV_.set (x);
    }

    Torus23CoreType::scaleV_type Torus23CoreType::
    scaleV_default_value ()
    {
      return scaleV_type (1.0);
    }


    // Torus23Type
    // 

    const Torus23Type::Torus23Core_type& Torus23Type::
    Torus23Core () const
    {
      return this->Torus23Core_.get ();
    }

    Torus23Type::Torus23Core_type& Torus23Type::
    Torus23Core ()
    {
      return this->Torus23Core_.get ();
    }

    void Torus23Type::
    Torus23Core (const Torus23Core_type& x)
    {
      this->Torus23Core_.set (x);
    }

    void Torus23Type::
    Torus23Core (::std::auto_ptr< Torus23Core_type > x)
    {
      this->Torus23Core_.set (x);
    }

    const Torus23Type::Transform_optional& Torus23Type::
    Transform () const
    {
      return this->Transform_;
    }

    Torus23Type::Transform_optional& Torus23Type::
    Transform ()
    {
      return this->Transform_;
    }

    void Torus23Type::
    Transform (const Transform_type& x)
    {
      this->Transform_.set (x);
    }

    void Torus23Type::
    Transform (const Transform_optional& x)
    {
      this->Transform_ = x;
    }

    void Torus23Type::
    Transform (::std::auto_ptr< Transform_type > x)
    {
      this->Transform_.set (x);
    }


    // CurveMeshSetType
    // 

    const CurveMeshSetType::PathTriangulation_sequence& CurveMeshSetType::
    PathTriangulation () const
    {
      return this->PathTriangulation_;
    }

    CurveMeshSetType::PathTriangulation_sequence& CurveMeshSetType::
    PathTriangulation ()
    {
      return this->PathTriangulation_;
    }

    void CurveMeshSetType::
    PathTriangulation (const PathTriangulation_sequence& s)
    {
      this->PathTriangulation_ = s;
    }

    const CurveMeshSetType::N_type& CurveMeshSetType::
    N () const
    {
      return this->N_.get ();
    }

    CurveMeshSetType::N_type& CurveMeshSetType::
    N ()
    {
      return this->N_.get ();
    }

    void CurveMeshSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void CurveMeshSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // PathTriangulationCoreType
    // 

    const PathTriangulationCoreType::Edges_optional& PathTriangulationCoreType::
    Edges () const
    {
      return this->Edges_;
    }

    PathTriangulationCoreType::Edges_optional& PathTriangulationCoreType::
    Edges ()
    {
      return this->Edges_;
    }

    void PathTriangulationCoreType::
    Edges (const Edges_type& x)
    {
      this->Edges_.set (x);
    }

    void PathTriangulationCoreType::
    Edges (const Edges_optional& x)
    {
      this->Edges_ = x;
    }

    void PathTriangulationCoreType::
    Edges (::std::auto_ptr< Edges_type > x)
    {
      this->Edges_.set (x);
    }

    const PathTriangulationCoreType::EdgesBinary_optional& PathTriangulationCoreType::
    EdgesBinary () const
    {
      return this->EdgesBinary_;
    }

    PathTriangulationCoreType::EdgesBinary_optional& PathTriangulationCoreType::
    EdgesBinary ()
    {
      return this->EdgesBinary_;
    }

    void PathTriangulationCoreType::
    EdgesBinary (const EdgesBinary_type& x)
    {
      this->EdgesBinary_.set (x);
    }

    void PathTriangulationCoreType::
    EdgesBinary (const EdgesBinary_optional& x)
    {
      this->EdgesBinary_ = x;
    }

    void PathTriangulationCoreType::
    EdgesBinary (::std::auto_ptr< EdgesBinary_type > x)
    {
      this->EdgesBinary_.set (x);
    }


    // PathTriangulationType
    // 

    const PathTriangulationType::PathTriangulationCore_type& PathTriangulationType::
    PathTriangulationCore () const
    {
      return this->PathTriangulationCore_.get ();
    }

    PathTriangulationType::PathTriangulationCore_type& PathTriangulationType::
    PathTriangulationCore ()
    {
      return this->PathTriangulationCore_.get ();
    }

    void PathTriangulationType::
    PathTriangulationCore (const PathTriangulationCore_type& x)
    {
      this->PathTriangulationCore_.set (x);
    }

    void PathTriangulationType::
    PathTriangulationCore (::std::auto_ptr< PathTriangulationCore_type > x)
    {
      this->PathTriangulationCore_.set (x);
    }

    const PathTriangulationType::MeshTriangle_type& PathTriangulationType::
    MeshTriangle () const
    {
      return this->MeshTriangle_.get ();
    }

    PathTriangulationType::MeshTriangle_type& PathTriangulationType::
    MeshTriangle ()
    {
      return this->MeshTriangle_.get ();
    }

    void PathTriangulationType::
    MeshTriangle (const MeshTriangle_type& x)
    {
      this->MeshTriangle_.set (x);
    }

    void PathTriangulationType::
    MeshTriangle (::std::auto_ptr< MeshTriangle_type > x)
    {
      this->MeshTriangle_.set (x);
    }


    // SurfaceMeshSetType
    // 

    const SurfaceMeshSetType::MeshTriangle_sequence& SurfaceMeshSetType::
    MeshTriangle () const
    {
      return this->MeshTriangle_;
    }

    SurfaceMeshSetType::MeshTriangle_sequence& SurfaceMeshSetType::
    MeshTriangle ()
    {
      return this->MeshTriangle_;
    }

    void SurfaceMeshSetType::
    MeshTriangle (const MeshTriangle_sequence& s)
    {
      this->MeshTriangle_ = s;
    }

    const SurfaceMeshSetType::N_type& SurfaceMeshSetType::
    N () const
    {
      return this->N_.get ();
    }

    SurfaceMeshSetType::N_type& SurfaceMeshSetType::
    N ()
    {
      return this->N_.get ();
    }

    void SurfaceMeshSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void SurfaceMeshSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // MeshTriangleCoreType
    // 

    const MeshTriangleCoreType::Triangles_optional& MeshTriangleCoreType::
    Triangles () const
    {
      return this->Triangles_;
    }

    MeshTriangleCoreType::Triangles_optional& MeshTriangleCoreType::
    Triangles ()
    {
      return this->Triangles_;
    }

    void MeshTriangleCoreType::
    Triangles (const Triangles_type& x)
    {
      this->Triangles_.set (x);
    }

    void MeshTriangleCoreType::
    Triangles (const Triangles_optional& x)
    {
      this->Triangles_ = x;
    }

    void MeshTriangleCoreType::
    Triangles (::std::auto_ptr< Triangles_type > x)
    {
      this->Triangles_.set (x);
    }

    const MeshTriangleCoreType::TrianglesBinary_optional& MeshTriangleCoreType::
    TrianglesBinary () const
    {
      return this->TrianglesBinary_;
    }

    MeshTriangleCoreType::TrianglesBinary_optional& MeshTriangleCoreType::
    TrianglesBinary ()
    {
      return this->TrianglesBinary_;
    }

    void MeshTriangleCoreType::
    TrianglesBinary (const TrianglesBinary_type& x)
    {
      this->TrianglesBinary_.set (x);
    }

    void MeshTriangleCoreType::
    TrianglesBinary (const TrianglesBinary_optional& x)
    {
      this->TrianglesBinary_ = x;
    }

    void MeshTriangleCoreType::
    TrianglesBinary (::std::auto_ptr< TrianglesBinary_type > x)
    {
      this->TrianglesBinary_.set (x);
    }

    const MeshTriangleCoreType::Neighbours_optional& MeshTriangleCoreType::
    Neighbours () const
    {
      return this->Neighbours_;
    }

    MeshTriangleCoreType::Neighbours_optional& MeshTriangleCoreType::
    Neighbours ()
    {
      return this->Neighbours_;
    }

    void MeshTriangleCoreType::
    Neighbours (const Neighbours_type& x)
    {
      this->Neighbours_.set (x);
    }

    void MeshTriangleCoreType::
    Neighbours (const Neighbours_optional& x)
    {
      this->Neighbours_ = x;
    }

    void MeshTriangleCoreType::
    Neighbours (::std::auto_ptr< Neighbours_type > x)
    {
      this->Neighbours_.set (x);
    }

    const MeshTriangleCoreType::NeighboursBinary_optional& MeshTriangleCoreType::
    NeighboursBinary () const
    {
      return this->NeighboursBinary_;
    }

    MeshTriangleCoreType::NeighboursBinary_optional& MeshTriangleCoreType::
    NeighboursBinary ()
    {
      return this->NeighboursBinary_;
    }

    void MeshTriangleCoreType::
    NeighboursBinary (const NeighboursBinary_type& x)
    {
      this->NeighboursBinary_.set (x);
    }

    void MeshTriangleCoreType::
    NeighboursBinary (const NeighboursBinary_optional& x)
    {
      this->NeighboursBinary_ = x;
    }

    void MeshTriangleCoreType::
    NeighboursBinary (::std::auto_ptr< NeighboursBinary_type > x)
    {
      this->NeighboursBinary_.set (x);
    }

    const MeshTriangleCoreType::Vertices_optional& MeshTriangleCoreType::
    Vertices () const
    {
      return this->Vertices_;
    }

    MeshTriangleCoreType::Vertices_optional& MeshTriangleCoreType::
    Vertices ()
    {
      return this->Vertices_;
    }

    void MeshTriangleCoreType::
    Vertices (const Vertices_type& x)
    {
      this->Vertices_.set (x);
    }

    void MeshTriangleCoreType::
    Vertices (const Vertices_optional& x)
    {
      this->Vertices_ = x;
    }

    void MeshTriangleCoreType::
    Vertices (::std::auto_ptr< Vertices_type > x)
    {
      this->Vertices_.set (x);
    }

    const MeshTriangleCoreType::VerticesBinary_optional& MeshTriangleCoreType::
    VerticesBinary () const
    {
      return this->VerticesBinary_;
    }

    MeshTriangleCoreType::VerticesBinary_optional& MeshTriangleCoreType::
    VerticesBinary ()
    {
      return this->VerticesBinary_;
    }

    void MeshTriangleCoreType::
    VerticesBinary (const VerticesBinary_type& x)
    {
      this->VerticesBinary_.set (x);
    }

    void MeshTriangleCoreType::
    VerticesBinary (const VerticesBinary_optional& x)
    {
      this->VerticesBinary_ = x;
    }

    void MeshTriangleCoreType::
    VerticesBinary (::std::auto_ptr< VerticesBinary_type > x)
    {
      this->VerticesBinary_.set (x);
    }

    const MeshTriangleCoreType::Normals_optional& MeshTriangleCoreType::
    Normals () const
    {
      return this->Normals_;
    }

    MeshTriangleCoreType::Normals_optional& MeshTriangleCoreType::
    Normals ()
    {
      return this->Normals_;
    }

    void MeshTriangleCoreType::
    Normals (const Normals_type& x)
    {
      this->Normals_.set (x);
    }

    void MeshTriangleCoreType::
    Normals (const Normals_optional& x)
    {
      this->Normals_ = x;
    }

    void MeshTriangleCoreType::
    Normals (::std::auto_ptr< Normals_type > x)
    {
      this->Normals_.set (x);
    }

    const MeshTriangleCoreType::NormalsBinary_optional& MeshTriangleCoreType::
    NormalsBinary () const
    {
      return this->NormalsBinary_;
    }

    MeshTriangleCoreType::NormalsBinary_optional& MeshTriangleCoreType::
    NormalsBinary ()
    {
      return this->NormalsBinary_;
    }

    void MeshTriangleCoreType::
    NormalsBinary (const NormalsBinary_type& x)
    {
      this->NormalsBinary_.set (x);
    }

    void MeshTriangleCoreType::
    NormalsBinary (const NormalsBinary_optional& x)
    {
      this->NormalsBinary_ = x;
    }

    void MeshTriangleCoreType::
    NormalsBinary (::std::auto_ptr< NormalsBinary_type > x)
    {
      this->NormalsBinary_.set (x);
    }


    // MeshTriangleType
    // 

    const MeshTriangleType::MeshTriangleCore_type& MeshTriangleType::
    MeshTriangleCore () const
    {
      return this->MeshTriangleCore_.get ();
    }

    MeshTriangleType::MeshTriangleCore_type& MeshTriangleType::
    MeshTriangleCore ()
    {
      return this->MeshTriangleCore_.get ();
    }

    void MeshTriangleType::
    MeshTriangleCore (const MeshTriangleCore_type& x)
    {
      this->MeshTriangleCore_.set (x);
    }

    void MeshTriangleType::
    MeshTriangleCore (::std::auto_ptr< MeshTriangleCore_type > x)
    {
      this->MeshTriangleCore_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xsd
{
  namespace qif2
  {
    // GeometrySetType
    //

    GeometrySetType::
    GeometrySetType ()
    : ::xml_schema::type (),
      PointSet_ (::xml_schema::flags (), this),
      Curve12Set_ (::xml_schema::flags (), this),
      Curve13Set_ (::xml_schema::flags (), this),
      SurfaceSet_ (::xml_schema::flags (), this),
      CurveMeshSet_ (::xml_schema::flags (), this),
      SurfaceMeshSet_ (::xml_schema::flags (), this)
    {
    }

    GeometrySetType::
    GeometrySetType (const GeometrySetType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      PointSet_ (x.PointSet_, f, this),
      Curve12Set_ (x.Curve12Set_, f, this),
      Curve13Set_ (x.Curve13Set_, f, this),
      SurfaceSet_ (x.SurfaceSet_, f, this),
      CurveMeshSet_ (x.CurveMeshSet_, f, this),
      SurfaceMeshSet_ (x.SurfaceMeshSet_, f, this)
    {
    }

    GeometrySetType::
    GeometrySetType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      PointSet_ (f, this),
      Curve12Set_ (f, this),
      Curve13Set_ (f, this),
      SurfaceSet_ (f, this),
      CurveMeshSet_ (f, this),
      SurfaceMeshSet_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void GeometrySetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PointSet
        //
        if (n.name () == "PointSet" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointSet_type > r (
            PointSet_traits::create (i, f, this));

          if (!this->PointSet_)
          {
            this->PointSet_.set (r);
            continue;
          }
        }

        // Curve12Set
        //
        if (n.name () == "Curve12Set" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve12Set_type > r (
            Curve12Set_traits::create (i, f, this));

          if (!this->Curve12Set_)
          {
            this->Curve12Set_.set (r);
            continue;
          }
        }

        // Curve13Set
        //
        if (n.name () == "Curve13Set" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve13Set_type > r (
            Curve13Set_traits::create (i, f, this));

          if (!this->Curve13Set_)
          {
            this->Curve13Set_.set (r);
            continue;
          }
        }

        // SurfaceSet
        //
        if (n.name () == "SurfaceSet" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SurfaceSet_type > r (
            SurfaceSet_traits::create (i, f, this));

          if (!this->SurfaceSet_)
          {
            this->SurfaceSet_.set (r);
            continue;
          }
        }

        // CurveMeshSet
        //
        if (n.name () == "CurveMeshSet" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CurveMeshSet_type > r (
            CurveMeshSet_traits::create (i, f, this));

          if (!this->CurveMeshSet_)
          {
            this->CurveMeshSet_.set (r);
            continue;
          }
        }

        // SurfaceMeshSet
        //
        if (n.name () == "SurfaceMeshSet" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SurfaceMeshSet_type > r (
            SurfaceMeshSet_traits::create (i, f, this));

          if (!this->SurfaceMeshSet_)
          {
            this->SurfaceMeshSet_.set (r);
            continue;
          }
        }

        break;
      }
    }

    GeometrySetType* GeometrySetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometrySetType (*this, f, c);
    }

    GeometrySetType::
    ~GeometrySetType ()
    {
    }

    // GeometryBaseType
    //

    GeometryBaseType::
    GeometryBaseType (const id_type& id)
    : ::xsd::qif2::NodeWithIdBaseType (id)
    {
    }

    GeometryBaseType::
    GeometryBaseType (const GeometryBaseType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::NodeWithIdBaseType (x, f, c)
    {
    }

    GeometryBaseType::
    GeometryBaseType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::NodeWithIdBaseType (e, f, c)
    {
    }

    GeometryBaseType* GeometryBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometryBaseType (*this, f, c);
    }

    GeometryBaseType::
    ~GeometryBaseType ()
    {
    }

    // PointSetType
    //

    PointSetType::
    PointSetType (const N_type& N)
    : ::xml_schema::type (),
      Point_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    PointSetType::
    PointSetType (const PointSetType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Point_ (x.Point_, f, this),
      N_ (x.N_, f, this)
    {
    }

    PointSetType::
    PointSetType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Point_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PointSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Point
        //
        if (n.name () == "Point" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Point_type > r (
            Point_traits::create (i, f, this));

          this->Point_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    PointSetType* PointSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointSetType (*this, f, c);
    }

    PointSetType::
    ~PointSetType ()
    {
    }

    // PointEntityType
    //

    PointEntityType::
    PointEntityType (const id_type& id,
                     const XYZ_type& XYZ)
    : ::xsd::qif2::GeometryBaseType (id),
      XYZ_ (XYZ, ::xml_schema::flags (), this)
    {
    }

    PointEntityType::
    PointEntityType (const PointEntityType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (x, f, c),
      XYZ_ (x.XYZ_, f, this)
    {
    }

    PointEntityType::
    PointEntityType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (e, f | ::xml_schema::flags::base, c),
      XYZ_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PointEntityType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometryBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // XYZ
        //
        if (n.name () == "XYZ" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< XYZ_type > r (
            XYZ_traits::create (i, f, this));

          if (!XYZ_.present ())
          {
            this->XYZ_.set (r);
            continue;
          }
        }

        break;
      }

      if (!XYZ_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "XYZ",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PointEntityType* PointEntityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointEntityType (*this, f, c);
    }

    PointEntityType::
    ~PointEntityType ()
    {
    }

    // Curve12SetType
    //

    Curve12SetType::
    Curve12SetType (const N_type& N)
    : ::xml_schema::type (),
      Curve12_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    Curve12SetType::
    Curve12SetType (const Curve12SetType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Curve12_ (x.Curve12_, f, this),
      N_ (x.N_, f, this)
    {
    }

    Curve12SetType::
    Curve12SetType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Curve12_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Curve12SetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Curve12
        //
        if (n.name () == "Curve12" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve12_type > r (
            Curve12_traits::create (i, f, this));

          this->Curve12_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    Curve12SetType* Curve12SetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve12SetType (*this, f, c);
    }

    Curve12SetType::
    ~Curve12SetType ()
    {
    }

    // Curve13SetType
    //

    Curve13SetType::
    Curve13SetType (const N_type& N)
    : ::xml_schema::type (),
      Curve13_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    Curve13SetType::
    Curve13SetType (const Curve13SetType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Curve13_ (x.Curve13_, f, this),
      N_ (x.N_, f, this)
    {
    }

    Curve13SetType::
    Curve13SetType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Curve13_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Curve13SetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Curve13
        //
        if (n.name () == "Curve13" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve13_type > r (
            Curve13_traits::create (i, f, this));

          this->Curve13_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    Curve13SetType* Curve13SetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve13SetType (*this, f, c);
    }

    Curve13SetType::
    ~Curve13SetType ()
    {
    }

    // Curve13CoreType
    //

    Curve13CoreType::
    Curve13CoreType (const Curve13Core_type& Curve13Core)
    : ::xml_schema::type (),
      Curve13Core_ (Curve13Core, ::xml_schema::flags (), this)
    {
    }

    Curve13CoreType::
    Curve13CoreType (::std::auto_ptr< Curve13Core_type >& Curve13Core)
    : ::xml_schema::type (),
      Curve13Core_ (Curve13Core, ::xml_schema::flags (), this)
    {
    }

    Curve13CoreType::
    Curve13CoreType (const Curve13CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Curve13Core_ (x.Curve13Core_, f, this)
    {
    }

    Curve13CoreType::
    Curve13CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Curve13Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void Curve13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Curve13Core
        //
        if (n.name () == "Curve13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve13Core_type > r (
            Curve13Core_traits::create (i, f, this));

          if (!Curve13Core_.present ())
          {
            this->Curve13Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Curve13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Curve13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Curve13CoreType* Curve13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve13CoreType (*this, f, c);
    }

    Curve13CoreType::
    ~Curve13CoreType ()
    {
    }

    // CurveCoreBaseType
    //

    CurveCoreBaseType::
    CurveCoreBaseType (const domain_type& domain)
    : ::xml_schema::type (),
      domain_ (domain, ::xml_schema::flags (), this)
    {
    }

    CurveCoreBaseType::
    CurveCoreBaseType (const CurveCoreBaseType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      domain_ (x.domain_, f, this)
    {
    }

    CurveCoreBaseType::
    CurveCoreBaseType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      domain_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void CurveCoreBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "domain" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< domain_type > r (
            domain_traits::create (i, f, this));

          this->domain_.set (r);
          continue;
        }
      }

      if (!domain_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "domain",
          "");
      }
    }

    CurveCoreBaseType* CurveCoreBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveCoreBaseType (*this, f, c);
    }

    CurveCoreBaseType::
    ~CurveCoreBaseType ()
    {
    }

    // Curve12BaseType
    //

    Curve12BaseType::
    Curve12BaseType (const id_type& id)
    : ::xsd::qif2::GeometryBaseType (id)
    {
    }

    Curve12BaseType::
    Curve12BaseType (const Curve12BaseType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (x, f, c)
    {
    }

    Curve12BaseType::
    Curve12BaseType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (e, f, c)
    {
    }

    Curve12BaseType* Curve12BaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve12BaseType (*this, f, c);
    }

    Curve12BaseType::
    ~Curve12BaseType ()
    {
    }

    // Curve13BaseType
    //

    Curve13BaseType::
    Curve13BaseType (const id_type& id)
    : ::xsd::qif2::GeometryBaseType (id)
    {
    }

    Curve13BaseType::
    Curve13BaseType (const Curve13BaseType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (x, f, c)
    {
    }

    Curve13BaseType::
    Curve13BaseType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (e, f, c)
    {
    }

    Curve13BaseType* Curve13BaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve13BaseType (*this, f, c);
    }

    Curve13BaseType::
    ~Curve13BaseType ()
    {
    }

    // Segment13CoreType
    //

    Segment13CoreType::
    Segment13CoreType (const domain_type& domain,
                       const StartPoint_type& StartPoint,
                       const EndPoint_type& EndPoint)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      StartPoint_ (StartPoint, ::xml_schema::flags (), this),
      EndPoint_ (EndPoint, ::xml_schema::flags (), this)
    {
    }

    Segment13CoreType::
    Segment13CoreType (const Segment13CoreType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      StartPoint_ (x.StartPoint_, f, this),
      EndPoint_ (x.EndPoint_, f, this)
    {
    }

    Segment13CoreType::
    Segment13CoreType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      StartPoint_ (f, this),
      EndPoint_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Segment13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StartPoint
        //
        if (n.name () == "StartPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StartPoint_type > r (
            StartPoint_traits::create (i, f, this));

          if (!StartPoint_.present ())
          {
            this->StartPoint_.set (r);
            continue;
          }
        }

        // EndPoint
        //
        if (n.name () == "EndPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EndPoint_type > r (
            EndPoint_traits::create (i, f, this));

          if (!EndPoint_.present ())
          {
            this->EndPoint_.set (r);
            continue;
          }
        }

        break;
      }

      if (!StartPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "StartPoint",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!EndPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "EndPoint",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Segment13CoreType* Segment13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Segment13CoreType (*this, f, c);
    }

    Segment13CoreType::
    ~Segment13CoreType ()
    {
    }

    // Segment12CoreType
    //

    Segment12CoreType::
    Segment12CoreType (const domain_type& domain,
                       const StartPoint_type& StartPoint,
                       const EndPoint_type& EndPoint)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      StartPoint_ (StartPoint, ::xml_schema::flags (), this),
      EndPoint_ (EndPoint, ::xml_schema::flags (), this)
    {
    }

    Segment12CoreType::
    Segment12CoreType (const Segment12CoreType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      StartPoint_ (x.StartPoint_, f, this),
      EndPoint_ (x.EndPoint_, f, this)
    {
    }

    Segment12CoreType::
    Segment12CoreType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      StartPoint_ (f, this),
      EndPoint_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Segment12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StartPoint
        //
        if (n.name () == "StartPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StartPoint_type > r (
            StartPoint_traits::create (i, f, this));

          if (!StartPoint_.present ())
          {
            this->StartPoint_.set (r);
            continue;
          }
        }

        // EndPoint
        //
        if (n.name () == "EndPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EndPoint_type > r (
            EndPoint_traits::create (i, f, this));

          if (!EndPoint_.present ())
          {
            this->EndPoint_.set (r);
            continue;
          }
        }

        break;
      }

      if (!StartPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "StartPoint",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!EndPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "EndPoint",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Segment12CoreType* Segment12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Segment12CoreType (*this, f, c);
    }

    Segment12CoreType::
    ~Segment12CoreType ()
    {
    }

    // Segment13Type
    //

    Segment13Type::
    Segment13Type (const id_type& id,
                   const Segment13Core_type& Segment13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Segment13Core_ (Segment13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Segment13Type::
    Segment13Type (const id_type& id,
                   ::std::auto_ptr< Segment13Core_type >& Segment13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Segment13Core_ (Segment13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Segment13Type::
    Segment13Type (const Segment13Type& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      Segment13Core_ (x.Segment13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Segment13Type::
    Segment13Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      Segment13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Segment13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Segment13Core
        //
        if (n.name () == "Segment13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Segment13Core_type > r (
            Segment13Core_traits::create (i, f, this));

          if (!Segment13Core_.present ())
          {
            this->Segment13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Segment13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Segment13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Segment13Type* Segment13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Segment13Type (*this, f, c);
    }

    Segment13Type::
    ~Segment13Type ()
    {
    }

    // Segment12Type
    //

    Segment12Type::
    Segment12Type (const id_type& id,
                   const Segment12Core_type& Segment12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Segment12Core_ (Segment12Core, ::xml_schema::flags (), this)
    {
    }

    Segment12Type::
    Segment12Type (const id_type& id,
                   ::std::auto_ptr< Segment12Core_type >& Segment12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Segment12Core_ (Segment12Core, ::xml_schema::flags (), this)
    {
    }

    Segment12Type::
    Segment12Type (const Segment12Type& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      Segment12Core_ (x.Segment12Core_, f, this)
    {
    }

    Segment12Type::
    Segment12Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      Segment12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Segment12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Segment12Core
        //
        if (n.name () == "Segment12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Segment12Core_type > r (
            Segment12Core_traits::create (i, f, this));

          if (!Segment12Core_.present ())
          {
            this->Segment12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Segment12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Segment12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Segment12Type* Segment12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Segment12Type (*this, f, c);
    }

    Segment12Type::
    ~Segment12Type ()
    {
    }

    // ArcConicFormEnumType
    //

    ArcConicFormEnumType::
    ArcConicFormEnumType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_ArcConicFormEnumType_convert ();
    }

    ArcConicFormEnumType::
    ArcConicFormEnumType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_ArcConicFormEnumType_convert ();
    }

    ArcConicFormEnumType::
    ArcConicFormEnumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_ArcConicFormEnumType_convert ();
    }

    ArcConicFormEnumType* ArcConicFormEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcConicFormEnumType (*this, f, c);
    }

    ArcConicFormEnumType::value ArcConicFormEnumType::
    _xsd_ArcConicFormEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ArcConicFormEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ArcConicFormEnumType_indexes_,
                        _xsd_ArcConicFormEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_ArcConicFormEnumType_indexes_ + 3 || _xsd_ArcConicFormEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ArcConicFormEnumType::
    _xsd_ArcConicFormEnumType_literals_[3] =
    {
      "PARABOLA",
      "ELLIPSE",
      "HYPERBOLA"
    };

    const ArcConicFormEnumType::value ArcConicFormEnumType::
    _xsd_ArcConicFormEnumType_indexes_[3] =
    {
      ::xsd::qif2::ArcConicFormEnumType::ELLIPSE,
      ::xsd::qif2::ArcConicFormEnumType::HYPERBOLA,
      ::xsd::qif2::ArcConicFormEnumType::PARABOLA
    };

    // ArcConic13CoreType
    //

    ArcConic13CoreType::
    ArcConic13CoreType (const domain_type& domain,
                        const A_type& A,
                        const B_type& B,
                        const Center_type& Center,
                        const DirBeg_type& DirBeg,
                        const Normal_type& Normal,
                        const form_type& form)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      A_ (A, ::xml_schema::flags (), this),
      B_ (B, ::xml_schema::flags (), this),
      Center_ (Center, ::xml_schema::flags (), this),
      DirBeg_ (DirBeg, ::xml_schema::flags (), this),
      Normal_ (Normal, ::xml_schema::flags (), this),
      form_ (form, ::xml_schema::flags (), this)
    {
    }

    ArcConic13CoreType::
    ArcConic13CoreType (const ArcConic13CoreType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      A_ (x.A_, f, this),
      B_ (x.B_, f, this),
      Center_ (x.Center_, f, this),
      DirBeg_ (x.DirBeg_, f, this),
      Normal_ (x.Normal_, f, this),
      form_ (x.form_, f, this)
    {
    }

    ArcConic13CoreType::
    ArcConic13CoreType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      A_ (f, this),
      B_ (f, this),
      Center_ (f, this),
      DirBeg_ (f, this),
      Normal_ (f, this),
      form_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcConic13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // A
        //
        if (n.name () == "A" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!A_.present ())
          {
            this->A_.set (A_traits::create (i, f, this));
            continue;
          }
        }

        // B
        //
        if (n.name () == "B" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!B_.present ())
          {
            this->B_.set (B_traits::create (i, f, this));
            continue;
          }
        }

        // Center
        //
        if (n.name () == "Center" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Center_type > r (
            Center_traits::create (i, f, this));

          if (!Center_.present ())
          {
            this->Center_.set (r);
            continue;
          }
        }

        // DirBeg
        //
        if (n.name () == "DirBeg" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirBeg_type > r (
            DirBeg_traits::create (i, f, this));

          if (!DirBeg_.present ())
          {
            this->DirBeg_.set (r);
            continue;
          }
        }

        // Normal
        //
        if (n.name () == "Normal" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Normal_type > r (
            Normal_traits::create (i, f, this));

          if (!Normal_.present ())
          {
            this->Normal_.set (r);
            continue;
          }
        }

        break;
      }

      if (!A_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "A",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!B_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "B",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Center_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Center",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DirBeg_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DirBeg",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Normal_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Normal",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "form" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< form_type > r (
            form_traits::create (i, f, this));

          this->form_.set (r);
          continue;
        }
      }

      if (!form_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "form",
          "");
      }
    }

    ArcConic13CoreType* ArcConic13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcConic13CoreType (*this, f, c);
    }

    ArcConic13CoreType::
    ~ArcConic13CoreType ()
    {
    }

    // ArcConic12CoreType
    //

    ArcConic12CoreType::
    ArcConic12CoreType (const domain_type& domain,
                        const A_type& A,
                        const B_type& B,
                        const Center_type& Center,
                        const DirBeg_type& DirBeg,
                        const form_type& form)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      A_ (A, ::xml_schema::flags (), this),
      B_ (B, ::xml_schema::flags (), this),
      Center_ (Center, ::xml_schema::flags (), this),
      DirBeg_ (DirBeg, ::xml_schema::flags (), this),
      form_ (form, ::xml_schema::flags (), this),
      turned_ (turned_default_value (), ::xml_schema::flags (), this)
    {
    }

    ArcConic12CoreType::
    ArcConic12CoreType (const ArcConic12CoreType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      A_ (x.A_, f, this),
      B_ (x.B_, f, this),
      Center_ (x.Center_, f, this),
      DirBeg_ (x.DirBeg_, f, this),
      form_ (x.form_, f, this),
      turned_ (x.turned_, f, this)
    {
    }

    ArcConic12CoreType::
    ArcConic12CoreType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      A_ (f, this),
      B_ (f, this),
      Center_ (f, this),
      DirBeg_ (f, this),
      form_ (f, this),
      turned_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcConic12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // A
        //
        if (n.name () == "A" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!A_.present ())
          {
            this->A_.set (A_traits::create (i, f, this));
            continue;
          }
        }

        // B
        //
        if (n.name () == "B" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!B_.present ())
          {
            this->B_.set (B_traits::create (i, f, this));
            continue;
          }
        }

        // Center
        //
        if (n.name () == "Center" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Center_type > r (
            Center_traits::create (i, f, this));

          if (!Center_.present ())
          {
            this->Center_.set (r);
            continue;
          }
        }

        // DirBeg
        //
        if (n.name () == "DirBeg" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirBeg_type > r (
            DirBeg_traits::create (i, f, this));

          if (!DirBeg_.present ())
          {
            this->DirBeg_.set (r);
            continue;
          }
        }

        break;
      }

      if (!A_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "A",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!B_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "B",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Center_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Center",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DirBeg_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DirBeg",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "form" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< form_type > r (
            form_traits::create (i, f, this));

          this->form_.set (r);
          continue;
        }

        if (n.name () == "turned" && n.namespace_ ().empty ())
        {
          this->turned_.set (turned_traits::create (i, f, this));
          continue;
        }
      }

      if (!form_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "form",
          "");
      }

      if (!turned_.present ())
      {
        this->turned_.set (turned_default_value ());
      }
    }

    ArcConic12CoreType* ArcConic12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcConic12CoreType (*this, f, c);
    }

    ArcConic12CoreType::
    ~ArcConic12CoreType ()
    {
    }

    // ArcConic12Type
    //

    ArcConic12Type::
    ArcConic12Type (const id_type& id,
                    const ArcConic12Core_type& ArcConic12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      ArcConic12Core_ (ArcConic12Core, ::xml_schema::flags (), this)
    {
    }

    ArcConic12Type::
    ArcConic12Type (const id_type& id,
                    ::std::auto_ptr< ArcConic12Core_type >& ArcConic12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      ArcConic12Core_ (ArcConic12Core, ::xml_schema::flags (), this)
    {
    }

    ArcConic12Type::
    ArcConic12Type (const ArcConic12Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      ArcConic12Core_ (x.ArcConic12Core_, f, this)
    {
    }

    ArcConic12Type::
    ArcConic12Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      ArcConic12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcConic12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ArcConic12Core
        //
        if (n.name () == "ArcConic12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ArcConic12Core_type > r (
            ArcConic12Core_traits::create (i, f, this));

          if (!ArcConic12Core_.present ())
          {
            this->ArcConic12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ArcConic12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ArcConic12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArcConic12Type* ArcConic12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcConic12Type (*this, f, c);
    }

    ArcConic12Type::
    ~ArcConic12Type ()
    {
    }

    // ArcConic13Type
    //

    ArcConic13Type::
    ArcConic13Type (const id_type& id,
                    const ArcConic13Core_type& ArcConic13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      ArcConic13Core_ (ArcConic13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    ArcConic13Type::
    ArcConic13Type (const id_type& id,
                    ::std::auto_ptr< ArcConic13Core_type >& ArcConic13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      ArcConic13Core_ (ArcConic13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    ArcConic13Type::
    ArcConic13Type (const ArcConic13Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      ArcConic13Core_ (x.ArcConic13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    ArcConic13Type::
    ArcConic13Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      ArcConic13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcConic13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ArcConic13Core
        //
        if (n.name () == "ArcConic13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ArcConic13Core_type > r (
            ArcConic13Core_traits::create (i, f, this));

          if (!ArcConic13Core_.present ())
          {
            this->ArcConic13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ArcConic13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ArcConic13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArcConic13Type* ArcConic13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcConic13Type (*this, f, c);
    }

    ArcConic13Type::
    ~ArcConic13Type ()
    {
    }

    // ArcCircular13CoreType
    //

    ArcCircular13CoreType::
    ArcCircular13CoreType (const domain_type& domain,
                           const Radius_type& Radius,
                           const Center_type& Center,
                           const DirBeg_type& DirBeg,
                           const Normal_type& Normal)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Radius_ (Radius, ::xml_schema::flags (), this),
      Center_ (Center, ::xml_schema::flags (), this),
      DirBeg_ (DirBeg, ::xml_schema::flags (), this),
      Normal_ (Normal, ::xml_schema::flags (), this)
    {
    }

    ArcCircular13CoreType::
    ArcCircular13CoreType (const ArcCircular13CoreType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Radius_ (x.Radius_, f, this),
      Center_ (x.Center_, f, this),
      DirBeg_ (x.DirBeg_, f, this),
      Normal_ (x.Normal_, f, this)
    {
    }

    ArcCircular13CoreType::
    ArcCircular13CoreType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Radius_ (f, this),
      Center_ (f, this),
      DirBeg_ (f, this),
      Normal_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcCircular13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Radius
        //
        if (n.name () == "Radius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Radius_.present ())
          {
            this->Radius_.set (Radius_traits::create (i, f, this));
            continue;
          }
        }

        // Center
        //
        if (n.name () == "Center" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Center_type > r (
            Center_traits::create (i, f, this));

          if (!Center_.present ())
          {
            this->Center_.set (r);
            continue;
          }
        }

        // DirBeg
        //
        if (n.name () == "DirBeg" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirBeg_type > r (
            DirBeg_traits::create (i, f, this));

          if (!DirBeg_.present ())
          {
            this->DirBeg_.set (r);
            continue;
          }
        }

        // Normal
        //
        if (n.name () == "Normal" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Normal_type > r (
            Normal_traits::create (i, f, this));

          if (!Normal_.present ())
          {
            this->Normal_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Radius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Radius",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Center_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Center",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DirBeg_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DirBeg",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Normal_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Normal",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArcCircular13CoreType* ArcCircular13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcCircular13CoreType (*this, f, c);
    }

    ArcCircular13CoreType::
    ~ArcCircular13CoreType ()
    {
    }

    // ArcCircular12CoreType
    //

    ArcCircular12CoreType::
    ArcCircular12CoreType (const domain_type& domain,
                           const Radius_type& Radius,
                           const Center_type& Center,
                           const DirBeg_type& DirBeg)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Radius_ (Radius, ::xml_schema::flags (), this),
      Center_ (Center, ::xml_schema::flags (), this),
      DirBeg_ (DirBeg, ::xml_schema::flags (), this),
      turned_ (turned_default_value (), ::xml_schema::flags (), this)
    {
    }

    ArcCircular12CoreType::
    ArcCircular12CoreType (const ArcCircular12CoreType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Radius_ (x.Radius_, f, this),
      Center_ (x.Center_, f, this),
      DirBeg_ (x.DirBeg_, f, this),
      turned_ (x.turned_, f, this)
    {
    }

    ArcCircular12CoreType::
    ArcCircular12CoreType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Radius_ (f, this),
      Center_ (f, this),
      DirBeg_ (f, this),
      turned_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcCircular12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Radius
        //
        if (n.name () == "Radius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Radius_.present ())
          {
            this->Radius_.set (Radius_traits::create (i, f, this));
            continue;
          }
        }

        // Center
        //
        if (n.name () == "Center" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Center_type > r (
            Center_traits::create (i, f, this));

          if (!Center_.present ())
          {
            this->Center_.set (r);
            continue;
          }
        }

        // DirBeg
        //
        if (n.name () == "DirBeg" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirBeg_type > r (
            DirBeg_traits::create (i, f, this));

          if (!DirBeg_.present ())
          {
            this->DirBeg_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Radius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Radius",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Center_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Center",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DirBeg_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DirBeg",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turned" && n.namespace_ ().empty ())
        {
          this->turned_.set (turned_traits::create (i, f, this));
          continue;
        }
      }

      if (!turned_.present ())
      {
        this->turned_.set (turned_default_value ());
      }
    }

    ArcCircular12CoreType* ArcCircular12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcCircular12CoreType (*this, f, c);
    }

    ArcCircular12CoreType::
    ~ArcCircular12CoreType ()
    {
    }

    // ArcCircular13Type
    //

    ArcCircular13Type::
    ArcCircular13Type (const id_type& id,
                       const ArcCircular13Core_type& ArcCircular13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      ArcCircular13Core_ (ArcCircular13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    ArcCircular13Type::
    ArcCircular13Type (const id_type& id,
                       ::std::auto_ptr< ArcCircular13Core_type >& ArcCircular13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      ArcCircular13Core_ (ArcCircular13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    ArcCircular13Type::
    ArcCircular13Type (const ArcCircular13Type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      ArcCircular13Core_ (x.ArcCircular13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    ArcCircular13Type::
    ArcCircular13Type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      ArcCircular13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcCircular13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ArcCircular13Core
        //
        if (n.name () == "ArcCircular13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ArcCircular13Core_type > r (
            ArcCircular13Core_traits::create (i, f, this));

          if (!ArcCircular13Core_.present ())
          {
            this->ArcCircular13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ArcCircular13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ArcCircular13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArcCircular13Type* ArcCircular13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcCircular13Type (*this, f, c);
    }

    ArcCircular13Type::
    ~ArcCircular13Type ()
    {
    }

    // ArcCircular12Type
    //

    ArcCircular12Type::
    ArcCircular12Type (const id_type& id,
                       const ArcCircular12Core_type& ArcCircular12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      ArcCircular12Core_ (ArcCircular12Core, ::xml_schema::flags (), this)
    {
    }

    ArcCircular12Type::
    ArcCircular12Type (const id_type& id,
                       ::std::auto_ptr< ArcCircular12Core_type >& ArcCircular12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      ArcCircular12Core_ (ArcCircular12Core, ::xml_schema::flags (), this)
    {
    }

    ArcCircular12Type::
    ArcCircular12Type (const ArcCircular12Type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      ArcCircular12Core_ (x.ArcCircular12Core_, f, this)
    {
    }

    ArcCircular12Type::
    ArcCircular12Type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      ArcCircular12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArcCircular12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ArcCircular12Core
        //
        if (n.name () == "ArcCircular12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ArcCircular12Core_type > r (
            ArcCircular12Core_traits::create (i, f, this));

          if (!ArcCircular12Core_.present ())
          {
            this->ArcCircular12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ArcCircular12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ArcCircular12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArcCircular12Type* ArcCircular12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArcCircular12Type (*this, f, c);
    }

    ArcCircular12Type::
    ~ArcCircular12Type ()
    {
    }

    // Nurbs12CoreType
    //

    Nurbs12CoreType::
    Nurbs12CoreType (const domain_type& domain,
                     const Order_type& Order,
                     const Knots_type& Knots)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Order_ (Order, ::xml_schema::flags (), this),
      Knots_ (Knots, ::xml_schema::flags (), this),
      CPs_ (::xml_schema::flags (), this),
      CPsBinary_ (::xml_schema::flags (), this),
      Weights_ (::xml_schema::flags (), this)
    {
    }

    Nurbs12CoreType::
    Nurbs12CoreType (const domain_type& domain,
                     const Order_type& Order,
                     ::std::auto_ptr< Knots_type >& Knots)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Order_ (Order, ::xml_schema::flags (), this),
      Knots_ (Knots, ::xml_schema::flags (), this),
      CPs_ (::xml_schema::flags (), this),
      CPsBinary_ (::xml_schema::flags (), this),
      Weights_ (::xml_schema::flags (), this)
    {
    }

    Nurbs12CoreType::
    Nurbs12CoreType (const Nurbs12CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Order_ (x.Order_, f, this),
      Knots_ (x.Knots_, f, this),
      CPs_ (x.CPs_, f, this),
      CPsBinary_ (x.CPsBinary_, f, this),
      Weights_ (x.Weights_, f, this)
    {
    }

    Nurbs12CoreType::
    Nurbs12CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Order_ (f, this),
      Knots_ (f, this),
      CPs_ (f, this),
      CPsBinary_ (f, this),
      Weights_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Nurbs12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Order
        //
        if (n.name () == "Order" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Order_type > r (
            Order_traits::create (i, f, this));

          if (!Order_.present ())
          {
            this->Order_.set (r);
            continue;
          }
        }

        // Knots
        //
        if (n.name () == "Knots" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Knots_type > r (
            Knots_traits::create (i, f, this));

          if (!Knots_.present ())
          {
            this->Knots_.set (r);
            continue;
          }
        }

        // CPs
        //
        if (n.name () == "CPs" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CPs_type > r (
            CPs_traits::create (i, f, this));

          if (!this->CPs_)
          {
            this->CPs_.set (r);
            continue;
          }
        }

        // CPsBinary
        //
        if (n.name () == "CPsBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CPsBinary_type > r (
            CPsBinary_traits::create (i, f, this));

          if (!this->CPsBinary_)
          {
            this->CPsBinary_.set (r);
            continue;
          }
        }

        // Weights
        //
        if (n.name () == "Weights" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Weights_type > r (
            Weights_traits::create (i, f, this));

          if (!this->Weights_)
          {
            this->Weights_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Order_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Order",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Knots_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Knots",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Nurbs12CoreType* Nurbs12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Nurbs12CoreType (*this, f, c);
    }

    Nurbs12CoreType::
    ~Nurbs12CoreType ()
    {
    }

    // Nurbs13CoreType
    //

    Nurbs13CoreType::
    Nurbs13CoreType (const domain_type& domain,
                     const Order_type& Order,
                     const Knots_type& Knots)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Order_ (Order, ::xml_schema::flags (), this),
      Knots_ (Knots, ::xml_schema::flags (), this),
      CPs_ (::xml_schema::flags (), this),
      CPsBinary_ (::xml_schema::flags (), this),
      Weights_ (::xml_schema::flags (), this)
    {
    }

    Nurbs13CoreType::
    Nurbs13CoreType (const domain_type& domain,
                     const Order_type& Order,
                     ::std::auto_ptr< Knots_type >& Knots)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Order_ (Order, ::xml_schema::flags (), this),
      Knots_ (Knots, ::xml_schema::flags (), this),
      CPs_ (::xml_schema::flags (), this),
      CPsBinary_ (::xml_schema::flags (), this),
      Weights_ (::xml_schema::flags (), this)
    {
    }

    Nurbs13CoreType::
    Nurbs13CoreType (const Nurbs13CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Order_ (x.Order_, f, this),
      Knots_ (x.Knots_, f, this),
      CPs_ (x.CPs_, f, this),
      CPsBinary_ (x.CPsBinary_, f, this),
      Weights_ (x.Weights_, f, this)
    {
    }

    Nurbs13CoreType::
    Nurbs13CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Order_ (f, this),
      Knots_ (f, this),
      CPs_ (f, this),
      CPsBinary_ (f, this),
      Weights_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Nurbs13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Order
        //
        if (n.name () == "Order" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Order_type > r (
            Order_traits::create (i, f, this));

          if (!Order_.present ())
          {
            this->Order_.set (r);
            continue;
          }
        }

        // Knots
        //
        if (n.name () == "Knots" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Knots_type > r (
            Knots_traits::create (i, f, this));

          if (!Knots_.present ())
          {
            this->Knots_.set (r);
            continue;
          }
        }

        // CPs
        //
        if (n.name () == "CPs" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CPs_type > r (
            CPs_traits::create (i, f, this));

          if (!this->CPs_)
          {
            this->CPs_.set (r);
            continue;
          }
        }

        // CPsBinary
        //
        if (n.name () == "CPsBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CPsBinary_type > r (
            CPsBinary_traits::create (i, f, this));

          if (!this->CPsBinary_)
          {
            this->CPsBinary_.set (r);
            continue;
          }
        }

        // Weights
        //
        if (n.name () == "Weights" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Weights_type > r (
            Weights_traits::create (i, f, this));

          if (!this->Weights_)
          {
            this->Weights_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Order_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Order",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Knots_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Knots",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Nurbs13CoreType* Nurbs13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Nurbs13CoreType (*this, f, c);
    }

    Nurbs13CoreType::
    ~Nurbs13CoreType ()
    {
    }

    // Nurbs12Type
    //

    Nurbs12Type::
    Nurbs12Type (const id_type& id,
                 const Nurbs12Core_type& Nurbs12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Nurbs12Core_ (Nurbs12Core, ::xml_schema::flags (), this)
    {
    }

    Nurbs12Type::
    Nurbs12Type (const id_type& id,
                 ::std::auto_ptr< Nurbs12Core_type >& Nurbs12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Nurbs12Core_ (Nurbs12Core, ::xml_schema::flags (), this)
    {
    }

    Nurbs12Type::
    Nurbs12Type (const Nurbs12Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      Nurbs12Core_ (x.Nurbs12Core_, f, this)
    {
    }

    Nurbs12Type::
    Nurbs12Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      Nurbs12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Nurbs12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Nurbs12Core
        //
        if (n.name () == "Nurbs12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Nurbs12Core_type > r (
            Nurbs12Core_traits::create (i, f, this));

          if (!Nurbs12Core_.present ())
          {
            this->Nurbs12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Nurbs12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Nurbs12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Nurbs12Type* Nurbs12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Nurbs12Type (*this, f, c);
    }

    Nurbs12Type::
    ~Nurbs12Type ()
    {
    }

    // Nurbs13Type
    //

    Nurbs13Type::
    Nurbs13Type (const id_type& id,
                 const Nurbs13Core_type& Nurbs13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Nurbs13Core_ (Nurbs13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Nurbs13Type::
    Nurbs13Type (const id_type& id,
                 ::std::auto_ptr< Nurbs13Core_type >& Nurbs13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Nurbs13Core_ (Nurbs13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Nurbs13Type::
    Nurbs13Type (const Nurbs13Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      Nurbs13Core_ (x.Nurbs13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Nurbs13Type::
    Nurbs13Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      Nurbs13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Nurbs13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Nurbs13Core
        //
        if (n.name () == "Nurbs13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Nurbs13Core_type > r (
            Nurbs13Core_traits::create (i, f, this));

          if (!Nurbs13Core_.present ())
          {
            this->Nurbs13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Nurbs13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Nurbs13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Nurbs13Type* Nurbs13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Nurbs13Type (*this, f, c);
    }

    Nurbs13Type::
    ~Nurbs13Type ()
    {
    }

    // Spline13CoreType
    //

    Spline13CoreType::
    Spline13CoreType (const domain_type& domain,
                      const Knots_type& Knots,
                      const Orders_type& Orders,
                      const Coefficients_type& Coefficients)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Knots_ (Knots, ::xml_schema::flags (), this),
      Orders_ (Orders, ::xml_schema::flags (), this),
      Coefficients_ (Coefficients, ::xml_schema::flags (), this),
      normalized_ (normalized_default_value (), ::xml_schema::flags (), this)
    {
    }

    Spline13CoreType::
    Spline13CoreType (const domain_type& domain,
                      ::std::auto_ptr< Knots_type >& Knots,
                      ::std::auto_ptr< Orders_type >& Orders,
                      ::std::auto_ptr< Coefficients_type >& Coefficients)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Knots_ (Knots, ::xml_schema::flags (), this),
      Orders_ (Orders, ::xml_schema::flags (), this),
      Coefficients_ (Coefficients, ::xml_schema::flags (), this),
      normalized_ (normalized_default_value (), ::xml_schema::flags (), this)
    {
    }

    Spline13CoreType::
    Spline13CoreType (const Spline13CoreType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Knots_ (x.Knots_, f, this),
      Orders_ (x.Orders_, f, this),
      Coefficients_ (x.Coefficients_, f, this),
      normalized_ (x.normalized_, f, this)
    {
    }

    Spline13CoreType::
    Spline13CoreType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Knots_ (f, this),
      Orders_ (f, this),
      Coefficients_ (f, this),
      normalized_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Spline13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Knots
        //
        if (n.name () == "Knots" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Knots_type > r (
            Knots_traits::create (i, f, this));

          if (!Knots_.present ())
          {
            this->Knots_.set (r);
            continue;
          }
        }

        // Orders
        //
        if (n.name () == "Orders" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Orders_type > r (
            Orders_traits::create (i, f, this));

          if (!Orders_.present ())
          {
            this->Orders_.set (r);
            continue;
          }
        }

        // Coefficients
        //
        if (n.name () == "Coefficients" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Coefficients_type > r (
            Coefficients_traits::create (i, f, this));

          if (!Coefficients_.present ())
          {
            this->Coefficients_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Knots_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Knots",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Orders_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Orders",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Coefficients_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Coefficients",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "normalized" && n.namespace_ ().empty ())
        {
          this->normalized_.set (normalized_traits::create (i, f, this));
          continue;
        }
      }

      if (!normalized_.present ())
      {
        this->normalized_.set (normalized_default_value ());
      }
    }

    Spline13CoreType* Spline13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Spline13CoreType (*this, f, c);
    }

    Spline13CoreType::
    ~Spline13CoreType ()
    {
    }

    // Spline12CoreType
    //

    Spline12CoreType::
    Spline12CoreType (const domain_type& domain,
                      const Knots_type& Knots,
                      const Orders_type& Orders,
                      const Coefficients_type& Coefficients)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Knots_ (Knots, ::xml_schema::flags (), this),
      Orders_ (Orders, ::xml_schema::flags (), this),
      Coefficients_ (Coefficients, ::xml_schema::flags (), this),
      normalized_ (normalized_default_value (), ::xml_schema::flags (), this)
    {
    }

    Spline12CoreType::
    Spline12CoreType (const domain_type& domain,
                      ::std::auto_ptr< Knots_type >& Knots,
                      ::std::auto_ptr< Orders_type >& Orders,
                      ::std::auto_ptr< Coefficients_type >& Coefficients)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Knots_ (Knots, ::xml_schema::flags (), this),
      Orders_ (Orders, ::xml_schema::flags (), this),
      Coefficients_ (Coefficients, ::xml_schema::flags (), this),
      normalized_ (normalized_default_value (), ::xml_schema::flags (), this)
    {
    }

    Spline12CoreType::
    Spline12CoreType (const Spline12CoreType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Knots_ (x.Knots_, f, this),
      Orders_ (x.Orders_, f, this),
      Coefficients_ (x.Coefficients_, f, this),
      normalized_ (x.normalized_, f, this)
    {
    }

    Spline12CoreType::
    Spline12CoreType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Knots_ (f, this),
      Orders_ (f, this),
      Coefficients_ (f, this),
      normalized_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Spline12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Knots
        //
        if (n.name () == "Knots" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Knots_type > r (
            Knots_traits::create (i, f, this));

          if (!Knots_.present ())
          {
            this->Knots_.set (r);
            continue;
          }
        }

        // Orders
        //
        if (n.name () == "Orders" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Orders_type > r (
            Orders_traits::create (i, f, this));

          if (!Orders_.present ())
          {
            this->Orders_.set (r);
            continue;
          }
        }

        // Coefficients
        //
        if (n.name () == "Coefficients" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Coefficients_type > r (
            Coefficients_traits::create (i, f, this));

          if (!Coefficients_.present ())
          {
            this->Coefficients_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Knots_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Knots",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Orders_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Orders",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Coefficients_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Coefficients",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "normalized" && n.namespace_ ().empty ())
        {
          this->normalized_.set (normalized_traits::create (i, f, this));
          continue;
        }
      }

      if (!normalized_.present ())
      {
        this->normalized_.set (normalized_default_value ());
      }
    }

    Spline12CoreType* Spline12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Spline12CoreType (*this, f, c);
    }

    Spline12CoreType::
    ~Spline12CoreType ()
    {
    }

    // Spline13Type
    //

    Spline13Type::
    Spline13Type (const id_type& id,
                  const Spline13Core_type& Spline13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Spline13Core_ (Spline13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Spline13Type::
    Spline13Type (const id_type& id,
                  ::std::auto_ptr< Spline13Core_type >& Spline13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Spline13Core_ (Spline13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Spline13Type::
    Spline13Type (const Spline13Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      Spline13Core_ (x.Spline13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Spline13Type::
    Spline13Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      Spline13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Spline13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Spline13Core
        //
        if (n.name () == "Spline13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Spline13Core_type > r (
            Spline13Core_traits::create (i, f, this));

          if (!Spline13Core_.present ())
          {
            this->Spline13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Spline13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Spline13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Spline13Type* Spline13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Spline13Type (*this, f, c);
    }

    Spline13Type::
    ~Spline13Type ()
    {
    }

    // Spline12Type
    //

    Spline12Type::
    Spline12Type (const id_type& id,
                  const Spline12Core_type& Spline12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Spline12Core_ (Spline12Core, ::xml_schema::flags (), this)
    {
    }

    Spline12Type::
    Spline12Type (const id_type& id,
                  ::std::auto_ptr< Spline12Core_type >& Spline12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Spline12Core_ (Spline12Core, ::xml_schema::flags (), this)
    {
    }

    Spline12Type::
    Spline12Type (const Spline12Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      Spline12Core_ (x.Spline12Core_, f, this)
    {
    }

    Spline12Type::
    Spline12Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      Spline12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Spline12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Spline12Core
        //
        if (n.name () == "Spline12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Spline12Core_type > r (
            Spline12Core_traits::create (i, f, this));

          if (!Spline12Core_.present ())
          {
            this->Spline12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Spline12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Spline12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Spline12Type* Spline12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Spline12Type (*this, f, c);
    }

    Spline12Type::
    ~Spline12Type ()
    {
    }

    // Curve12OrientedType
    //

    Curve12OrientedType::
    Curve12OrientedType (const Curve12Core_type& Curve12Core)
    : ::xml_schema::type (),
      Curve12Core_ (Curve12Core, ::xml_schema::flags (), this),
      turned_ (turned_default_value (), ::xml_schema::flags (), this)
    {
    }

    Curve12OrientedType::
    Curve12OrientedType (::std::auto_ptr< Curve12Core_type >& Curve12Core)
    : ::xml_schema::type (),
      Curve12Core_ (Curve12Core, ::xml_schema::flags (), this),
      turned_ (turned_default_value (), ::xml_schema::flags (), this)
    {
    }

    Curve12OrientedType::
    Curve12OrientedType (const Curve12OrientedType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Curve12Core_ (x.Curve12Core_, f, this),
      turned_ (x.turned_, f, this)
    {
    }

    Curve12OrientedType::
    Curve12OrientedType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Curve12Core_ (f, this),
      turned_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Curve12OrientedType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Curve12Core
        //
        if (n.name () == "Curve12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve12Core_type > r (
            Curve12Core_traits::create (i, f, this));

          if (!Curve12Core_.present ())
          {
            this->Curve12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Curve12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Curve12Core",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turned" && n.namespace_ ().empty ())
        {
          this->turned_.set (turned_traits::create (i, f, this));
          continue;
        }
      }

      if (!turned_.present ())
      {
        this->turned_.set (turned_default_value ());
      }
    }

    Curve12OrientedType* Curve12OrientedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve12OrientedType (*this, f, c);
    }

    Curve12OrientedType::
    ~Curve12OrientedType ()
    {
    }

    // ArraySubCurve12Type
    //

    ArraySubCurve12Type::
    ArraySubCurve12Type (const N_type& N)
    : ::xml_schema::type (),
      SubCurve_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    ArraySubCurve12Type::
    ArraySubCurve12Type (const ArraySubCurve12Type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SubCurve_ (x.SubCurve_, f, this),
      N_ (x.N_, f, this)
    {
    }

    ArraySubCurve12Type::
    ArraySubCurve12Type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SubCurve_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArraySubCurve12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SubCurve
        //
        if (n.name () == "SubCurve" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubCurve_type > r (
            SubCurve_traits::create (i, f, this));

          this->SubCurve_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    ArraySubCurve12Type* ArraySubCurve12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArraySubCurve12Type (*this, f, c);
    }

    ArraySubCurve12Type::
    ~ArraySubCurve12Type ()
    {
    }

    // Aggregate12CoreType
    //

    Aggregate12CoreType::
    Aggregate12CoreType (const domain_type& domain,
                         const SubCurves_type& SubCurves)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      SubCurves_ (SubCurves, ::xml_schema::flags (), this)
    {
    }

    Aggregate12CoreType::
    Aggregate12CoreType (const domain_type& domain,
                         ::std::auto_ptr< SubCurves_type >& SubCurves)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      SubCurves_ (SubCurves, ::xml_schema::flags (), this)
    {
    }

    Aggregate12CoreType::
    Aggregate12CoreType (const Aggregate12CoreType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      SubCurves_ (x.SubCurves_, f, this)
    {
    }

    Aggregate12CoreType::
    Aggregate12CoreType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      SubCurves_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Aggregate12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SubCurves
        //
        if (n.name () == "SubCurves" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubCurves_type > r (
            SubCurves_traits::create (i, f, this));

          if (!SubCurves_.present ())
          {
            this->SubCurves_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SubCurves_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SubCurves",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Aggregate12CoreType* Aggregate12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Aggregate12CoreType (*this, f, c);
    }

    Aggregate12CoreType::
    ~Aggregate12CoreType ()
    {
    }

    // Curve13OrientedType
    //

    Curve13OrientedType::
    Curve13OrientedType (const Curve13Core_type& Curve13Core)
    : ::xml_schema::type (),
      Curve13Core_ (Curve13Core, ::xml_schema::flags (), this),
      turned_ (turned_default_value (), ::xml_schema::flags (), this)
    {
    }

    Curve13OrientedType::
    Curve13OrientedType (::std::auto_ptr< Curve13Core_type >& Curve13Core)
    : ::xml_schema::type (),
      Curve13Core_ (Curve13Core, ::xml_schema::flags (), this),
      turned_ (turned_default_value (), ::xml_schema::flags (), this)
    {
    }

    Curve13OrientedType::
    Curve13OrientedType (const Curve13OrientedType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Curve13Core_ (x.Curve13Core_, f, this),
      turned_ (x.turned_, f, this)
    {
    }

    Curve13OrientedType::
    Curve13OrientedType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Curve13Core_ (f, this),
      turned_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Curve13OrientedType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Curve13Core
        //
        if (n.name () == "Curve13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve13Core_type > r (
            Curve13Core_traits::create (i, f, this));

          if (!Curve13Core_.present ())
          {
            this->Curve13Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Curve13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Curve13Core",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turned" && n.namespace_ ().empty ())
        {
          this->turned_.set (turned_traits::create (i, f, this));
          continue;
        }
      }

      if (!turned_.present ())
      {
        this->turned_.set (turned_default_value ());
      }
    }

    Curve13OrientedType* Curve13OrientedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Curve13OrientedType (*this, f, c);
    }

    Curve13OrientedType::
    ~Curve13OrientedType ()
    {
    }

    // ArraySubCurve13Type
    //

    ArraySubCurve13Type::
    ArraySubCurve13Type (const N_type& N)
    : ::xml_schema::type (),
      SubCurve_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    ArraySubCurve13Type::
    ArraySubCurve13Type (const ArraySubCurve13Type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SubCurve_ (x.SubCurve_, f, this),
      N_ (x.N_, f, this)
    {
    }

    ArraySubCurve13Type::
    ArraySubCurve13Type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SubCurve_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ArraySubCurve13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SubCurve
        //
        if (n.name () == "SubCurve" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubCurve_type > r (
            SubCurve_traits::create (i, f, this));

          this->SubCurve_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    ArraySubCurve13Type* ArraySubCurve13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArraySubCurve13Type (*this, f, c);
    }

    ArraySubCurve13Type::
    ~ArraySubCurve13Type ()
    {
    }

    // Aggregate13CoreType
    //

    Aggregate13CoreType::
    Aggregate13CoreType (const domain_type& domain,
                         const SubCurves_type& SubCurves)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      SubCurves_ (SubCurves, ::xml_schema::flags (), this)
    {
    }

    Aggregate13CoreType::
    Aggregate13CoreType (const domain_type& domain,
                         ::std::auto_ptr< SubCurves_type >& SubCurves)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      SubCurves_ (SubCurves, ::xml_schema::flags (), this)
    {
    }

    Aggregate13CoreType::
    Aggregate13CoreType (const Aggregate13CoreType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      SubCurves_ (x.SubCurves_, f, this)
    {
    }

    Aggregate13CoreType::
    Aggregate13CoreType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      SubCurves_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Aggregate13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SubCurves
        //
        if (n.name () == "SubCurves" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SubCurves_type > r (
            SubCurves_traits::create (i, f, this));

          if (!SubCurves_.present ())
          {
            this->SubCurves_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SubCurves_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SubCurves",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Aggregate13CoreType* Aggregate13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Aggregate13CoreType (*this, f, c);
    }

    Aggregate13CoreType::
    ~Aggregate13CoreType ()
    {
    }

    // Aggregate12Type
    //

    Aggregate12Type::
    Aggregate12Type (const id_type& id,
                     const Aggregate12Core_type& Aggregate12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Aggregate12Core_ (Aggregate12Core, ::xml_schema::flags (), this)
    {
    }

    Aggregate12Type::
    Aggregate12Type (const id_type& id,
                     ::std::auto_ptr< Aggregate12Core_type >& Aggregate12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Aggregate12Core_ (Aggregate12Core, ::xml_schema::flags (), this)
    {
    }

    Aggregate12Type::
    Aggregate12Type (const Aggregate12Type& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      Aggregate12Core_ (x.Aggregate12Core_, f, this)
    {
    }

    Aggregate12Type::
    Aggregate12Type (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      Aggregate12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Aggregate12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Aggregate12Core
        //
        if (n.name () == "Aggregate12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Aggregate12Core_type > r (
            Aggregate12Core_traits::create (i, f, this));

          if (!Aggregate12Core_.present ())
          {
            this->Aggregate12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Aggregate12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Aggregate12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Aggregate12Type* Aggregate12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Aggregate12Type (*this, f, c);
    }

    Aggregate12Type::
    ~Aggregate12Type ()
    {
    }

    // Aggregate13Type
    //

    Aggregate13Type::
    Aggregate13Type (const id_type& id,
                     const Aggregate13Core_type& Aggregate13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Aggregate13Core_ (Aggregate13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Aggregate13Type::
    Aggregate13Type (const id_type& id,
                     ::std::auto_ptr< Aggregate13Core_type >& Aggregate13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Aggregate13Core_ (Aggregate13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Aggregate13Type::
    Aggregate13Type (const Aggregate13Type& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      Aggregate13Core_ (x.Aggregate13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Aggregate13Type::
    Aggregate13Type (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      Aggregate13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Aggregate13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Aggregate13Core
        //
        if (n.name () == "Aggregate13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Aggregate13Core_type > r (
            Aggregate13Core_traits::create (i, f, this));

          if (!Aggregate13Core_.present ())
          {
            this->Aggregate13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Aggregate13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Aggregate13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Aggregate13Type* Aggregate13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Aggregate13Type (*this, f, c);
    }

    Aggregate13Type::
    ~Aggregate13Type ()
    {
    }

    // Polyline13CoreType
    //

    Polyline13CoreType::
    Polyline13CoreType (const domain_type& domain)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Points_ (::xml_schema::flags (), this),
      PointsBinary_ (::xml_schema::flags (), this)
    {
    }

    Polyline13CoreType::
    Polyline13CoreType (const Polyline13CoreType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Points_ (x.Points_, f, this),
      PointsBinary_ (x.PointsBinary_, f, this)
    {
    }

    Polyline13CoreType::
    Polyline13CoreType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Points_ (f, this),
      PointsBinary_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Polyline13CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Points
        //
        if (n.name () == "Points" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Points_type > r (
            Points_traits::create (i, f, this));

          if (!this->Points_)
          {
            this->Points_.set (r);
            continue;
          }
        }

        // PointsBinary
        //
        if (n.name () == "PointsBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointsBinary_type > r (
            PointsBinary_traits::create (i, f, this));

          if (!this->PointsBinary_)
          {
            this->PointsBinary_.set (r);
            continue;
          }
        }

        break;
      }
    }

    Polyline13CoreType* Polyline13CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Polyline13CoreType (*this, f, c);
    }

    Polyline13CoreType::
    ~Polyline13CoreType ()
    {
    }

    // Polyline12CoreType
    //

    Polyline12CoreType::
    Polyline12CoreType (const domain_type& domain)
    : ::xsd::qif2::CurveCoreBaseType (domain),
      Points_ (::xml_schema::flags (), this),
      PointsBinary_ (::xml_schema::flags (), this)
    {
    }

    Polyline12CoreType::
    Polyline12CoreType (const Polyline12CoreType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (x, f, c),
      Points_ (x.Points_, f, this),
      PointsBinary_ (x.PointsBinary_, f, this)
    {
    }

    Polyline12CoreType::
    Polyline12CoreType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::CurveCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Points_ (f, this),
      PointsBinary_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Polyline12CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CurveCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Points
        //
        if (n.name () == "Points" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Points_type > r (
            Points_traits::create (i, f, this));

          if (!this->Points_)
          {
            this->Points_.set (r);
            continue;
          }
        }

        // PointsBinary
        //
        if (n.name () == "PointsBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointsBinary_type > r (
            PointsBinary_traits::create (i, f, this));

          if (!this->PointsBinary_)
          {
            this->PointsBinary_.set (r);
            continue;
          }
        }

        break;
      }
    }

    Polyline12CoreType* Polyline12CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Polyline12CoreType (*this, f, c);
    }

    Polyline12CoreType::
    ~Polyline12CoreType ()
    {
    }

    // Polyline13Type
    //

    Polyline13Type::
    Polyline13Type (const id_type& id,
                    const Polyline13Core_type& Polyline13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Polyline13Core_ (Polyline13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Polyline13Type::
    Polyline13Type (const id_type& id,
                    ::std::auto_ptr< Polyline13Core_type >& Polyline13Core)
    : ::xsd::qif2::Curve13BaseType (id),
      Polyline13Core_ (Polyline13Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Polyline13Type::
    Polyline13Type (const Polyline13Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (x, f, c),
      Polyline13Core_ (x.Polyline13Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Polyline13Type::
    Polyline13Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve13BaseType (e, f | ::xml_schema::flags::base, c),
      Polyline13Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Polyline13Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve13BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Polyline13Core
        //
        if (n.name () == "Polyline13Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Polyline13Core_type > r (
            Polyline13Core_traits::create (i, f, this));

          if (!Polyline13Core_.present ())
          {
            this->Polyline13Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Polyline13Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Polyline13Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Polyline13Type* Polyline13Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Polyline13Type (*this, f, c);
    }

    Polyline13Type::
    ~Polyline13Type ()
    {
    }

    // Polyline12Type
    //

    Polyline12Type::
    Polyline12Type (const id_type& id,
                    const Polyline12Core_type& Polyline12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Polyline12Core_ (Polyline12Core, ::xml_schema::flags (), this)
    {
    }

    Polyline12Type::
    Polyline12Type (const id_type& id,
                    ::std::auto_ptr< Polyline12Core_type >& Polyline12Core)
    : ::xsd::qif2::Curve12BaseType (id),
      Polyline12Core_ (Polyline12Core, ::xml_schema::flags (), this)
    {
    }

    Polyline12Type::
    Polyline12Type (const Polyline12Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (x, f, c),
      Polyline12Core_ (x.Polyline12Core_, f, this)
    {
    }

    Polyline12Type::
    Polyline12Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::Curve12BaseType (e, f | ::xml_schema::flags::base, c),
      Polyline12Core_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Polyline12Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::Curve12BaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Polyline12Core
        //
        if (n.name () == "Polyline12Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Polyline12Core_type > r (
            Polyline12Core_traits::create (i, f, this));

          if (!Polyline12Core_.present ())
          {
            this->Polyline12Core_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Polyline12Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Polyline12Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Polyline12Type* Polyline12Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Polyline12Type (*this, f, c);
    }

    Polyline12Type::
    ~Polyline12Type ()
    {
    }

    // SurfaceBaseType
    //

    SurfaceBaseType::
    SurfaceBaseType (const id_type& id)
    : ::xsd::qif2::GeometryBaseType (id)
    {
    }

    SurfaceBaseType::
    SurfaceBaseType (const SurfaceBaseType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (x, f, c)
    {
    }

    SurfaceBaseType::
    SurfaceBaseType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (e, f, c)
    {
    }

    SurfaceBaseType* SurfaceBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceBaseType (*this, f, c);
    }

    SurfaceBaseType::
    ~SurfaceBaseType ()
    {
    }

    // SurfaceSetType
    //

    SurfaceSetType::
    SurfaceSetType (const N_type& N)
    : ::xml_schema::type (),
      Surface_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    SurfaceSetType::
    SurfaceSetType (const SurfaceSetType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Surface_ (x.Surface_, f, this),
      N_ (x.N_, f, this)
    {
    }

    SurfaceSetType::
    SurfaceSetType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Surface_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Surface
        //
        if (n.name () == "Surface" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Surface_type > r (
            Surface_traits::create (i, f, this));

          this->Surface_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    SurfaceSetType* SurfaceSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceSetType (*this, f, c);
    }

    SurfaceSetType::
    ~SurfaceSetType ()
    {
    }

    // SurfaceCoreType
    //

    SurfaceCoreType::
    SurfaceCoreType (const SurfaceCore_type& SurfaceCore)
    : ::xml_schema::type (),
      SurfaceCore_ (SurfaceCore, ::xml_schema::flags (), this)
    {
    }

    SurfaceCoreType::
    SurfaceCoreType (::std::auto_ptr< SurfaceCore_type >& SurfaceCore)
    : ::xml_schema::type (),
      SurfaceCore_ (SurfaceCore, ::xml_schema::flags (), this)
    {
    }

    SurfaceCoreType::
    SurfaceCoreType (const SurfaceCoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SurfaceCore_ (x.SurfaceCore_, f, this)
    {
    }

    SurfaceCoreType::
    SurfaceCoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SurfaceCore_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SurfaceCoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SurfaceCore
        //
        if (n.name () == "SurfaceCore" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SurfaceCore_type > r (
            SurfaceCore_traits::create (i, f, this));

          if (!SurfaceCore_.present ())
          {
            this->SurfaceCore_.set (r);
            continue;
          }
        }

        break;
      }

      if (!SurfaceCore_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SurfaceCore",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SurfaceCoreType* SurfaceCoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceCoreType (*this, f, c);
    }

    SurfaceCoreType::
    ~SurfaceCoreType ()
    {
    }

    // SurfaceCoreBaseType
    //

    SurfaceCoreBaseType::
    SurfaceCoreBaseType ()
    : ::xml_schema::type (),
      form_ (::xml_schema::flags (), this)
    {
    }

    SurfaceCoreBaseType::
    SurfaceCoreBaseType (const SurfaceCoreBaseType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      form_ (x.form_, f, this)
    {
    }

    SurfaceCoreBaseType::
    SurfaceCoreBaseType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      form_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void SurfaceCoreBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "form" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< form_type > r (
            form_traits::create (i, f, this));

          this->form_.set (r);
          continue;
        }
      }
    }

    SurfaceCoreBaseType* SurfaceCoreBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceCoreBaseType (*this, f, c);
    }

    SurfaceCoreBaseType::
    ~SurfaceCoreBaseType ()
    {
    }

    // Attr23CoreEnumType
    //

    Attr23CoreEnumType::
    Attr23CoreEnumType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_Attr23CoreEnumType_convert ();
    }

    Attr23CoreEnumType::
    Attr23CoreEnumType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_Attr23CoreEnumType_convert ();
    }

    Attr23CoreEnumType::
    Attr23CoreEnumType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_Attr23CoreEnumType_convert ();
    }

    Attr23CoreEnumType* Attr23CoreEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Attr23CoreEnumType (*this, f, c);
    }

    Attr23CoreEnumType::value Attr23CoreEnumType::
    _xsd_Attr23CoreEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Attr23CoreEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_Attr23CoreEnumType_indexes_,
                        _xsd_Attr23CoreEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_Attr23CoreEnumType_indexes_ + 6 || _xsd_Attr23CoreEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const Attr23CoreEnumType::
    _xsd_Attr23CoreEnumType_literals_[6] =
    {
      "FREEFORM",
      "CYLINDER",
      "CONE",
      "TORUS",
      "SPHERE",
      "PLANE"
    };

    const Attr23CoreEnumType::value Attr23CoreEnumType::
    _xsd_Attr23CoreEnumType_indexes_[6] =
    {
      ::xsd::qif2::Attr23CoreEnumType::CONE,
      ::xsd::qif2::Attr23CoreEnumType::CYLINDER,
      ::xsd::qif2::Attr23CoreEnumType::FREEFORM,
      ::xsd::qif2::Attr23CoreEnumType::PLANE,
      ::xsd::qif2::Attr23CoreEnumType::SPHERE,
      ::xsd::qif2::Attr23CoreEnumType::TORUS
    };

    // Nurbs23CoreType
    //

    Nurbs23CoreType::
    Nurbs23CoreType (const OrderU_type& OrderU,
                     const OrderV_type& OrderV,
                     const KnotsU_type& KnotsU,
                     const KnotsV_type& KnotsV)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      OrderU_ (OrderU, ::xml_schema::flags (), this),
      OrderV_ (OrderV, ::xml_schema::flags (), this),
      KnotsU_ (KnotsU, ::xml_schema::flags (), this),
      KnotsV_ (KnotsV, ::xml_schema::flags (), this),
      CPs_ (::xml_schema::flags (), this),
      CPsBinary_ (::xml_schema::flags (), this),
      Weights_ (::xml_schema::flags (), this)
    {
    }

    Nurbs23CoreType::
    Nurbs23CoreType (const OrderU_type& OrderU,
                     const OrderV_type& OrderV,
                     ::std::auto_ptr< KnotsU_type >& KnotsU,
                     ::std::auto_ptr< KnotsV_type >& KnotsV)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      OrderU_ (OrderU, ::xml_schema::flags (), this),
      OrderV_ (OrderV, ::xml_schema::flags (), this),
      KnotsU_ (KnotsU, ::xml_schema::flags (), this),
      KnotsV_ (KnotsV, ::xml_schema::flags (), this),
      CPs_ (::xml_schema::flags (), this),
      CPsBinary_ (::xml_schema::flags (), this),
      Weights_ (::xml_schema::flags (), this)
    {
    }

    Nurbs23CoreType::
    Nurbs23CoreType (const Nurbs23CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      OrderU_ (x.OrderU_, f, this),
      OrderV_ (x.OrderV_, f, this),
      KnotsU_ (x.KnotsU_, f, this),
      KnotsV_ (x.KnotsV_, f, this),
      CPs_ (x.CPs_, f, this),
      CPsBinary_ (x.CPsBinary_, f, this),
      Weights_ (x.Weights_, f, this)
    {
    }

    Nurbs23CoreType::
    Nurbs23CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      OrderU_ (f, this),
      OrderV_ (f, this),
      KnotsU_ (f, this),
      KnotsV_ (f, this),
      CPs_ (f, this),
      CPsBinary_ (f, this),
      Weights_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Nurbs23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // OrderU
        //
        if (n.name () == "OrderU" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrderU_type > r (
            OrderU_traits::create (i, f, this));

          if (!OrderU_.present ())
          {
            this->OrderU_.set (r);
            continue;
          }
        }

        // OrderV
        //
        if (n.name () == "OrderV" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrderV_type > r (
            OrderV_traits::create (i, f, this));

          if (!OrderV_.present ())
          {
            this->OrderV_.set (r);
            continue;
          }
        }

        // KnotsU
        //
        if (n.name () == "KnotsU" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KnotsU_type > r (
            KnotsU_traits::create (i, f, this));

          if (!KnotsU_.present ())
          {
            this->KnotsU_.set (r);
            continue;
          }
        }

        // KnotsV
        //
        if (n.name () == "KnotsV" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KnotsV_type > r (
            KnotsV_traits::create (i, f, this));

          if (!KnotsV_.present ())
          {
            this->KnotsV_.set (r);
            continue;
          }
        }

        // CPs
        //
        if (n.name () == "CPs" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CPs_type > r (
            CPs_traits::create (i, f, this));

          if (!this->CPs_)
          {
            this->CPs_.set (r);
            continue;
          }
        }

        // CPsBinary
        //
        if (n.name () == "CPsBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CPsBinary_type > r (
            CPsBinary_traits::create (i, f, this));

          if (!this->CPsBinary_)
          {
            this->CPsBinary_.set (r);
            continue;
          }
        }

        // Weights
        //
        if (n.name () == "Weights" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Weights_type > r (
            Weights_traits::create (i, f, this));

          if (!this->Weights_)
          {
            this->Weights_.set (r);
            continue;
          }
        }

        break;
      }

      if (!OrderU_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "OrderU",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!OrderV_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "OrderV",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!KnotsU_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "KnotsU",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!KnotsV_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "KnotsV",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Nurbs23CoreType* Nurbs23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Nurbs23CoreType (*this, f, c);
    }

    Nurbs23CoreType::
    ~Nurbs23CoreType ()
    {
    }

    // Nurbs23Type
    //

    Nurbs23Type::
    Nurbs23Type (const id_type& id,
                 const Nurbs23Core_type& Nurbs23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Nurbs23Core_ (Nurbs23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Nurbs23Type::
    Nurbs23Type (const id_type& id,
                 ::std::auto_ptr< Nurbs23Core_type >& Nurbs23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Nurbs23Core_ (Nurbs23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Nurbs23Type::
    Nurbs23Type (const Nurbs23Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Nurbs23Core_ (x.Nurbs23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Nurbs23Type::
    Nurbs23Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Nurbs23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Nurbs23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Nurbs23Core
        //
        if (n.name () == "Nurbs23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Nurbs23Core_type > r (
            Nurbs23Core_traits::create (i, f, this));

          if (!Nurbs23Core_.present ())
          {
            this->Nurbs23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Nurbs23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Nurbs23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Nurbs23Type* Nurbs23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Nurbs23Type (*this, f, c);
    }

    Nurbs23Type::
    ~Nurbs23Type ()
    {
    }

    // Spline23CoreType
    //

    Spline23CoreType::
    Spline23CoreType (const KnotsU_type& KnotsU,
                      const KnotsV_type& KnotsV,
                      const OrdersU_type& OrdersU,
                      const OrdersV_type& OrdersV,
                      const Coefficients_type& Coefficients)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      KnotsU_ (KnotsU, ::xml_schema::flags (), this),
      KnotsV_ (KnotsV, ::xml_schema::flags (), this),
      OrdersU_ (OrdersU, ::xml_schema::flags (), this),
      OrdersV_ (OrdersV, ::xml_schema::flags (), this),
      Coefficients_ (Coefficients, ::xml_schema::flags (), this),
      normalized_ (normalized_default_value (), ::xml_schema::flags (), this)
    {
    }

    Spline23CoreType::
    Spline23CoreType (::std::auto_ptr< KnotsU_type >& KnotsU,
                      ::std::auto_ptr< KnotsV_type >& KnotsV,
                      ::std::auto_ptr< OrdersU_type >& OrdersU,
                      ::std::auto_ptr< OrdersV_type >& OrdersV,
                      ::std::auto_ptr< Coefficients_type >& Coefficients)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      KnotsU_ (KnotsU, ::xml_schema::flags (), this),
      KnotsV_ (KnotsV, ::xml_schema::flags (), this),
      OrdersU_ (OrdersU, ::xml_schema::flags (), this),
      OrdersV_ (OrdersV, ::xml_schema::flags (), this),
      Coefficients_ (Coefficients, ::xml_schema::flags (), this),
      normalized_ (normalized_default_value (), ::xml_schema::flags (), this)
    {
    }

    Spline23CoreType::
    Spline23CoreType (const Spline23CoreType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      KnotsU_ (x.KnotsU_, f, this),
      KnotsV_ (x.KnotsV_, f, this),
      OrdersU_ (x.OrdersU_, f, this),
      OrdersV_ (x.OrdersV_, f, this),
      Coefficients_ (x.Coefficients_, f, this),
      normalized_ (x.normalized_, f, this)
    {
    }

    Spline23CoreType::
    Spline23CoreType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      KnotsU_ (f, this),
      KnotsV_ (f, this),
      OrdersU_ (f, this),
      OrdersV_ (f, this),
      Coefficients_ (f, this),
      normalized_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Spline23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // KnotsU
        //
        if (n.name () == "KnotsU" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KnotsU_type > r (
            KnotsU_traits::create (i, f, this));

          if (!KnotsU_.present ())
          {
            this->KnotsU_.set (r);
            continue;
          }
        }

        // KnotsV
        //
        if (n.name () == "KnotsV" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KnotsV_type > r (
            KnotsV_traits::create (i, f, this));

          if (!KnotsV_.present ())
          {
            this->KnotsV_.set (r);
            continue;
          }
        }

        // OrdersU
        //
        if (n.name () == "OrdersU" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrdersU_type > r (
            OrdersU_traits::create (i, f, this));

          if (!OrdersU_.present ())
          {
            this->OrdersU_.set (r);
            continue;
          }
        }

        // OrdersV
        //
        if (n.name () == "OrdersV" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrdersV_type > r (
            OrdersV_traits::create (i, f, this));

          if (!OrdersV_.present ())
          {
            this->OrdersV_.set (r);
            continue;
          }
        }

        // Coefficients
        //
        if (n.name () == "Coefficients" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Coefficients_type > r (
            Coefficients_traits::create (i, f, this));

          if (!Coefficients_.present ())
          {
            this->Coefficients_.set (r);
            continue;
          }
        }

        break;
      }

      if (!KnotsU_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "KnotsU",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!KnotsV_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "KnotsV",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!OrdersU_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "OrdersU",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!OrdersV_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "OrdersV",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Coefficients_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Coefficients",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "normalized" && n.namespace_ ().empty ())
        {
          this->normalized_.set (normalized_traits::create (i, f, this));
          continue;
        }
      }

      if (!normalized_.present ())
      {
        this->normalized_.set (normalized_default_value ());
      }
    }

    Spline23CoreType* Spline23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Spline23CoreType (*this, f, c);
    }

    Spline23CoreType::
    ~Spline23CoreType ()
    {
    }

    // Spline23Type
    //

    Spline23Type::
    Spline23Type (const id_type& id,
                  const Spline23Core_type& Spline23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Spline23Core_ (Spline23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Spline23Type::
    Spline23Type (const id_type& id,
                  ::std::auto_ptr< Spline23Core_type >& Spline23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Spline23Core_ (Spline23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Spline23Type::
    Spline23Type (const Spline23Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Spline23Core_ (x.Spline23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Spline23Type::
    Spline23Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Spline23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Spline23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Spline23Core
        //
        if (n.name () == "Spline23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Spline23Core_type > r (
            Spline23Core_traits::create (i, f, this));

          if (!Spline23Core_.present ())
          {
            this->Spline23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Spline23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Spline23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Spline23Type* Spline23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Spline23Type (*this, f, c);
    }

    Spline23Type::
    ~Spline23Type ()
    {
    }

    // Revolution23CoreType
    //

    Revolution23CoreType::
    Revolution23CoreType (const Axis_type& Axis,
                          const Generatrix_type& Generatrix,
                          const angle_type& angle)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Axis_ (Axis, ::xml_schema::flags (), this),
      Generatrix_ (Generatrix, ::xml_schema::flags (), this),
      angle_ (angle, ::xml_schema::flags (), this)
    {
    }

    Revolution23CoreType::
    Revolution23CoreType (::std::auto_ptr< Axis_type >& Axis,
                          ::std::auto_ptr< Generatrix_type >& Generatrix,
                          const angle_type& angle)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Axis_ (Axis, ::xml_schema::flags (), this),
      Generatrix_ (Generatrix, ::xml_schema::flags (), this),
      angle_ (angle, ::xml_schema::flags (), this)
    {
    }

    Revolution23CoreType::
    Revolution23CoreType (const Revolution23CoreType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      Axis_ (x.Axis_, f, this),
      Generatrix_ (x.Generatrix_, f, this),
      angle_ (x.angle_, f, this)
    {
    }

    Revolution23CoreType::
    Revolution23CoreType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Axis_ (f, this),
      Generatrix_ (f, this),
      angle_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Revolution23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Axis
        //
        if (n.name () == "Axis" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Axis_type > r (
            Axis_traits::create (i, f, this));

          if (!Axis_.present ())
          {
            this->Axis_.set (r);
            continue;
          }
        }

        // Generatrix
        //
        if (n.name () == "Generatrix" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Generatrix_type > r (
            Generatrix_traits::create (i, f, this));

          if (!Generatrix_.present ())
          {
            this->Generatrix_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Axis_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Axis",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Generatrix_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Generatrix",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "angle" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< angle_type > r (
            angle_traits::create (i, f, this));

          this->angle_.set (r);
          continue;
        }
      }

      if (!angle_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "angle",
          "");
      }
    }

    Revolution23CoreType* Revolution23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Revolution23CoreType (*this, f, c);
    }

    Revolution23CoreType::
    ~Revolution23CoreType ()
    {
    }

    // Revolution23Type
    //

    Revolution23Type::
    Revolution23Type (const id_type& id,
                      const Revolution23Core_type& Revolution23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Revolution23Core_ (Revolution23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Revolution23Type::
    Revolution23Type (const id_type& id,
                      ::std::auto_ptr< Revolution23Core_type >& Revolution23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Revolution23Core_ (Revolution23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Revolution23Type::
    Revolution23Type (const Revolution23Type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Revolution23Core_ (x.Revolution23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Revolution23Type::
    Revolution23Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Revolution23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Revolution23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Revolution23Core
        //
        if (n.name () == "Revolution23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Revolution23Core_type > r (
            Revolution23Core_traits::create (i, f, this));

          if (!Revolution23Core_.present ())
          {
            this->Revolution23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Revolution23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Revolution23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Revolution23Type* Revolution23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Revolution23Type (*this, f, c);
    }

    Revolution23Type::
    ~Revolution23Type ()
    {
    }

    // Extrude23CoreType
    //

    Extrude23CoreType::
    Extrude23CoreType (const TerminationPoint_type& TerminationPoint,
                       const Curve_type& Curve)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      TerminationPoint_ (TerminationPoint, ::xml_schema::flags (), this),
      Curve_ (Curve, ::xml_schema::flags (), this)
    {
    }

    Extrude23CoreType::
    Extrude23CoreType (const TerminationPoint_type& TerminationPoint,
                       ::std::auto_ptr< Curve_type >& Curve)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      TerminationPoint_ (TerminationPoint, ::xml_schema::flags (), this),
      Curve_ (Curve, ::xml_schema::flags (), this)
    {
    }

    Extrude23CoreType::
    Extrude23CoreType (const Extrude23CoreType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      TerminationPoint_ (x.TerminationPoint_, f, this),
      Curve_ (x.Curve_, f, this)
    {
    }

    Extrude23CoreType::
    Extrude23CoreType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      TerminationPoint_ (f, this),
      Curve_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Extrude23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TerminationPoint
        //
        if (n.name () == "TerminationPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TerminationPoint_type > r (
            TerminationPoint_traits::create (i, f, this));

          if (!TerminationPoint_.present ())
          {
            this->TerminationPoint_.set (r);
            continue;
          }
        }

        // Curve
        //
        if (n.name () == "Curve" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve_type > r (
            Curve_traits::create (i, f, this));

          if (!Curve_.present ())
          {
            this->Curve_.set (r);
            continue;
          }
        }

        break;
      }

      if (!TerminationPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "TerminationPoint",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Curve_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Curve",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Extrude23CoreType* Extrude23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Extrude23CoreType (*this, f, c);
    }

    Extrude23CoreType::
    ~Extrude23CoreType ()
    {
    }

    // Extrude23Type
    //

    Extrude23Type::
    Extrude23Type (const id_type& id,
                   const Extrude23Core_type& Extrude23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Extrude23Core_ (Extrude23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Extrude23Type::
    Extrude23Type (const id_type& id,
                   ::std::auto_ptr< Extrude23Core_type >& Extrude23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Extrude23Core_ (Extrude23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Extrude23Type::
    Extrude23Type (const Extrude23Type& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Extrude23Core_ (x.Extrude23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Extrude23Type::
    Extrude23Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Extrude23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Extrude23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Extrude23Core
        //
        if (n.name () == "Extrude23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Extrude23Core_type > r (
            Extrude23Core_traits::create (i, f, this));

          if (!Extrude23Core_.present ())
          {
            this->Extrude23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Extrude23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Extrude23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Extrude23Type* Extrude23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Extrude23Type (*this, f, c);
    }

    Extrude23Type::
    ~Extrude23Type ()
    {
    }

    // Ruled23CoreType
    //

    Ruled23CoreType::
    Ruled23CoreType ()
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Curve_ (::xml_schema::flags (), this),
      turnedSecondCurve_ (turnedSecondCurve_default_value (), ::xml_schema::flags (), this)
    {
    }

    Ruled23CoreType::
    Ruled23CoreType (const Ruled23CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      Curve_ (x.Curve_, f, this),
      turnedSecondCurve_ (x.turnedSecondCurve_, f, this)
    {
    }

    Ruled23CoreType::
    Ruled23CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Curve_ (f, this),
      turnedSecondCurve_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Ruled23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Curve
        //
        if (n.name () == "Curve" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Curve_type > r (
            Curve_traits::create (i, f, this));

          this->Curve_.push_back (r);
          continue;
        }

        break;
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turnedSecondCurve" && n.namespace_ ().empty ())
        {
          this->turnedSecondCurve_.set (turnedSecondCurve_traits::create (i, f, this));
          continue;
        }
      }

      if (!turnedSecondCurve_.present ())
      {
        this->turnedSecondCurve_.set (turnedSecondCurve_default_value ());
      }
    }

    Ruled23CoreType* Ruled23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Ruled23CoreType (*this, f, c);
    }

    Ruled23CoreType::
    ~Ruled23CoreType ()
    {
    }

    // Ruled23Type
    //

    Ruled23Type::
    Ruled23Type (const id_type& id,
                 const Ruled23Core_type& Ruled23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Ruled23Core_ (Ruled23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Ruled23Type::
    Ruled23Type (const id_type& id,
                 ::std::auto_ptr< Ruled23Core_type >& Ruled23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Ruled23Core_ (Ruled23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Ruled23Type::
    Ruled23Type (const Ruled23Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Ruled23Core_ (x.Ruled23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Ruled23Type::
    Ruled23Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Ruled23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Ruled23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Ruled23Core
        //
        if (n.name () == "Ruled23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Ruled23Core_type > r (
            Ruled23Core_traits::create (i, f, this));

          if (!Ruled23Core_.present ())
          {
            this->Ruled23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Ruled23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Ruled23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Ruled23Type* Ruled23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Ruled23Type (*this, f, c);
    }

    Ruled23Type::
    ~Ruled23Type ()
    {
    }

    // Offset23CoreType
    //

    Offset23CoreType::
    Offset23CoreType (const Distance_type& Distance,
                      const Surface_type& Surface)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Distance_ (Distance, ::xml_schema::flags (), this),
      Surface_ (Surface, ::xml_schema::flags (), this)
    {
    }

    Offset23CoreType::
    Offset23CoreType (const Distance_type& Distance,
                      ::std::auto_ptr< Surface_type >& Surface)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Distance_ (Distance, ::xml_schema::flags (), this),
      Surface_ (Surface, ::xml_schema::flags (), this)
    {
    }

    Offset23CoreType::
    Offset23CoreType (const Offset23CoreType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      Distance_ (x.Distance_, f, this),
      Surface_ (x.Surface_, f, this)
    {
    }

    Offset23CoreType::
    Offset23CoreType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Distance_ (f, this),
      Surface_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Offset23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Distance
        //
        if (n.name () == "Distance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Distance_.present ())
          {
            this->Distance_.set (Distance_traits::create (i, f, this));
            continue;
          }
        }

        // Surface
        //
        if (n.name () == "Surface" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Surface_type > r (
            Surface_traits::create (i, f, this));

          if (!Surface_.present ())
          {
            this->Surface_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Distance",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Surface_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Surface",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Offset23CoreType* Offset23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Offset23CoreType (*this, f, c);
    }

    Offset23CoreType::
    ~Offset23CoreType ()
    {
    }

    // Offset23Type
    //

    Offset23Type::
    Offset23Type (const id_type& id,
                  const Offset23Core_type& Offset23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Offset23Core_ (Offset23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Offset23Type::
    Offset23Type (const id_type& id,
                  ::std::auto_ptr< Offset23Core_type >& Offset23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Offset23Core_ (Offset23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Offset23Type::
    Offset23Type (const Offset23Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Offset23Core_ (x.Offset23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Offset23Type::
    Offset23Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Offset23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Offset23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Offset23Core
        //
        if (n.name () == "Offset23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Offset23Core_type > r (
            Offset23Core_traits::create (i, f, this));

          if (!Offset23Core_.present ())
          {
            this->Offset23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Offset23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Offset23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Offset23Type* Offset23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Offset23Type (*this, f, c);
    }

    Offset23Type::
    ~Offset23Type ()
    {
    }

    // Plane23CoreType
    //

    Plane23CoreType::
    Plane23CoreType (const Origin_type& Origin,
                     const DirU_type& DirU,
                     const DirV_type& DirV,
                     const domainU_type& domainU,
                     const domainV_type& domainV)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Origin_ (Origin, ::xml_schema::flags (), this),
      DirU_ (DirU, ::xml_schema::flags (), this),
      DirV_ (DirV, ::xml_schema::flags (), this),
      domainU_ (domainU, ::xml_schema::flags (), this),
      domainV_ (domainV, ::xml_schema::flags (), this)
    {
    }

    Plane23CoreType::
    Plane23CoreType (const Plane23CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      Origin_ (x.Origin_, f, this),
      DirU_ (x.DirU_, f, this),
      DirV_ (x.DirV_, f, this),
      domainU_ (x.domainU_, f, this),
      domainV_ (x.domainV_, f, this)
    {
    }

    Plane23CoreType::
    Plane23CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Origin_ (f, this),
      DirU_ (f, this),
      DirV_ (f, this),
      domainU_ (f, this),
      domainV_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Plane23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Origin
        //
        if (n.name () == "Origin" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Origin_type > r (
            Origin_traits::create (i, f, this));

          if (!Origin_.present ())
          {
            this->Origin_.set (r);
            continue;
          }
        }

        // DirU
        //
        if (n.name () == "DirU" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirU_type > r (
            DirU_traits::create (i, f, this));

          if (!DirU_.present ())
          {
            this->DirU_.set (r);
            continue;
          }
        }

        // DirV
        //
        if (n.name () == "DirV" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirV_type > r (
            DirV_traits::create (i, f, this));

          if (!DirV_.present ())
          {
            this->DirV_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Origin_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Origin",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DirU_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DirU",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DirV_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DirV",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "domainU" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< domainU_type > r (
            domainU_traits::create (i, f, this));

          this->domainU_.set (r);
          continue;
        }

        if (n.name () == "domainV" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< domainV_type > r (
            domainV_traits::create (i, f, this));

          this->domainV_.set (r);
          continue;
        }
      }

      if (!domainU_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "domainU",
          "");
      }

      if (!domainV_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "domainV",
          "");
      }
    }

    Plane23CoreType* Plane23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Plane23CoreType (*this, f, c);
    }

    Plane23CoreType::
    ~Plane23CoreType ()
    {
    }

    // Plane23Type
    //

    Plane23Type::
    Plane23Type (const id_type& id,
                 const Plane23Core_type& Plane23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Plane23Core_ (Plane23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Plane23Type::
    Plane23Type (const id_type& id,
                 ::std::auto_ptr< Plane23Core_type >& Plane23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Plane23Core_ (Plane23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Plane23Type::
    Plane23Type (const Plane23Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Plane23Core_ (x.Plane23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Plane23Type::
    Plane23Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Plane23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Plane23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Plane23Core
        //
        if (n.name () == "Plane23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Plane23Core_type > r (
            Plane23Core_traits::create (i, f, this));

          if (!Plane23Core_.present ())
          {
            this->Plane23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Plane23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Plane23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Plane23Type* Plane23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Plane23Type (*this, f, c);
    }

    Plane23Type::
    ~Plane23Type ()
    {
    }

    // Cone23CoreType
    //

    Cone23CoreType::
    Cone23CoreType (const DiameterBottom_type& DiameterBottom,
                    const DiameterTop_type& DiameterTop,
                    const Length_type& Length,
                    const Axis_type& Axis,
                    const Sweep_type& Sweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      DiameterBottom_ (DiameterBottom, ::xml_schema::flags (), this),
      DiameterTop_ (DiameterTop, ::xml_schema::flags (), this),
      Length_ (Length, ::xml_schema::flags (), this),
      Axis_ (Axis, ::xml_schema::flags (), this),
      Sweep_ (Sweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Cone23CoreType::
    Cone23CoreType (const DiameterBottom_type& DiameterBottom,
                    const DiameterTop_type& DiameterTop,
                    const Length_type& Length,
                    ::std::auto_ptr< Axis_type >& Axis,
                    ::std::auto_ptr< Sweep_type >& Sweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      DiameterBottom_ (DiameterBottom, ::xml_schema::flags (), this),
      DiameterTop_ (DiameterTop, ::xml_schema::flags (), this),
      Length_ (Length, ::xml_schema::flags (), this),
      Axis_ (Axis, ::xml_schema::flags (), this),
      Sweep_ (Sweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Cone23CoreType::
    Cone23CoreType (const Cone23CoreType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      DiameterBottom_ (x.DiameterBottom_, f, this),
      DiameterTop_ (x.DiameterTop_, f, this),
      Length_ (x.Length_, f, this),
      Axis_ (x.Axis_, f, this),
      Sweep_ (x.Sweep_, f, this),
      turnedV_ (x.turnedV_, f, this),
      scaleU_ (x.scaleU_, f, this),
      scaleV_ (x.scaleV_, f, this)
    {
    }

    Cone23CoreType::
    Cone23CoreType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      DiameterBottom_ (f, this),
      DiameterTop_ (f, this),
      Length_ (f, this),
      Axis_ (f, this),
      Sweep_ (f, this),
      turnedV_ (f, this),
      scaleU_ (f, this),
      scaleV_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Cone23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DiameterBottom
        //
        if (n.name () == "DiameterBottom" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!DiameterBottom_.present ())
          {
            this->DiameterBottom_.set (DiameterBottom_traits::create (i, f, this));
            continue;
          }
        }

        // DiameterTop
        //
        if (n.name () == "DiameterTop" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!DiameterTop_.present ())
          {
            this->DiameterTop_.set (DiameterTop_traits::create (i, f, this));
            continue;
          }
        }

        // Length
        //
        if (n.name () == "Length" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Length_.present ())
          {
            this->Length_.set (Length_traits::create (i, f, this));
            continue;
          }
        }

        // Axis
        //
        if (n.name () == "Axis" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Axis_type > r (
            Axis_traits::create (i, f, this));

          if (!Axis_.present ())
          {
            this->Axis_.set (r);
            continue;
          }
        }

        // Sweep
        //
        if (n.name () == "Sweep" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Sweep_type > r (
            Sweep_traits::create (i, f, this));

          if (!Sweep_.present ())
          {
            this->Sweep_.set (r);
            continue;
          }
        }

        break;
      }

      if (!DiameterBottom_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DiameterBottom",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DiameterTop_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DiameterTop",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Length_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Length",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Axis_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Axis",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Sweep_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Sweep",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turnedV" && n.namespace_ ().empty ())
        {
          this->turnedV_.set (turnedV_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "scaleU" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleU_type > r (
            scaleU_traits::create (i, f, this));

          this->scaleU_.set (r);
          continue;
        }

        if (n.name () == "scaleV" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleV_type > r (
            scaleV_traits::create (i, f, this));

          this->scaleV_.set (r);
          continue;
        }
      }

      if (!turnedV_.present ())
      {
        this->turnedV_.set (turnedV_default_value ());
      }

      if (!scaleU_.present ())
      {
        this->scaleU_.set (scaleU_default_value ());
      }

      if (!scaleV_.present ())
      {
        this->scaleV_.set (scaleV_default_value ());
      }
    }

    Cone23CoreType* Cone23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Cone23CoreType (*this, f, c);
    }

    Cone23CoreType::
    ~Cone23CoreType ()
    {
    }

    // Cone23Type
    //

    Cone23Type::
    Cone23Type (const id_type& id,
                const Cone23Core_type& Cone23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Cone23Core_ (Cone23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Cone23Type::
    Cone23Type (const id_type& id,
                ::std::auto_ptr< Cone23Core_type >& Cone23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Cone23Core_ (Cone23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Cone23Type::
    Cone23Type (const Cone23Type& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Cone23Core_ (x.Cone23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Cone23Type::
    Cone23Type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Cone23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Cone23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Cone23Core
        //
        if (n.name () == "Cone23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Cone23Core_type > r (
            Cone23Core_traits::create (i, f, this));

          if (!Cone23Core_.present ())
          {
            this->Cone23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Cone23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Cone23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Cone23Type* Cone23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Cone23Type (*this, f, c);
    }

    Cone23Type::
    ~Cone23Type ()
    {
    }

    // Cylinder23CoreType
    //

    Cylinder23CoreType::
    Cylinder23CoreType (const Diameter_type& Diameter,
                        const Length_type& Length,
                        const Axis_type& Axis,
                        const Sweep_type& Sweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Diameter_ (Diameter, ::xml_schema::flags (), this),
      Length_ (Length, ::xml_schema::flags (), this),
      Axis_ (Axis, ::xml_schema::flags (), this),
      Sweep_ (Sweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Cylinder23CoreType::
    Cylinder23CoreType (const Diameter_type& Diameter,
                        const Length_type& Length,
                        ::std::auto_ptr< Axis_type >& Axis,
                        ::std::auto_ptr< Sweep_type >& Sweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Diameter_ (Diameter, ::xml_schema::flags (), this),
      Length_ (Length, ::xml_schema::flags (), this),
      Axis_ (Axis, ::xml_schema::flags (), this),
      Sweep_ (Sweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Cylinder23CoreType::
    Cylinder23CoreType (const Cylinder23CoreType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      Diameter_ (x.Diameter_, f, this),
      Length_ (x.Length_, f, this),
      Axis_ (x.Axis_, f, this),
      Sweep_ (x.Sweep_, f, this),
      turnedV_ (x.turnedV_, f, this),
      scaleU_ (x.scaleU_, f, this),
      scaleV_ (x.scaleV_, f, this)
    {
    }

    Cylinder23CoreType::
    Cylinder23CoreType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Diameter_ (f, this),
      Length_ (f, this),
      Axis_ (f, this),
      Sweep_ (f, this),
      turnedV_ (f, this),
      scaleU_ (f, this),
      scaleV_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Cylinder23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Diameter
        //
        if (n.name () == "Diameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Diameter_.present ())
          {
            this->Diameter_.set (Diameter_traits::create (i, f, this));
            continue;
          }
        }

        // Length
        //
        if (n.name () == "Length" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Length_.present ())
          {
            this->Length_.set (Length_traits::create (i, f, this));
            continue;
          }
        }

        // Axis
        //
        if (n.name () == "Axis" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Axis_type > r (
            Axis_traits::create (i, f, this));

          if (!Axis_.present ())
          {
            this->Axis_.set (r);
            continue;
          }
        }

        // Sweep
        //
        if (n.name () == "Sweep" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Sweep_type > r (
            Sweep_traits::create (i, f, this));

          if (!Sweep_.present ())
          {
            this->Sweep_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Diameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Diameter",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Length_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Length",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Axis_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Axis",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Sweep_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Sweep",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turnedV" && n.namespace_ ().empty ())
        {
          this->turnedV_.set (turnedV_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "scaleU" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleU_type > r (
            scaleU_traits::create (i, f, this));

          this->scaleU_.set (r);
          continue;
        }

        if (n.name () == "scaleV" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleV_type > r (
            scaleV_traits::create (i, f, this));

          this->scaleV_.set (r);
          continue;
        }
      }

      if (!turnedV_.present ())
      {
        this->turnedV_.set (turnedV_default_value ());
      }

      if (!scaleU_.present ())
      {
        this->scaleU_.set (scaleU_default_value ());
      }

      if (!scaleV_.present ())
      {
        this->scaleV_.set (scaleV_default_value ());
      }
    }

    Cylinder23CoreType* Cylinder23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Cylinder23CoreType (*this, f, c);
    }

    Cylinder23CoreType::
    ~Cylinder23CoreType ()
    {
    }

    // Cylinder23Type
    //

    Cylinder23Type::
    Cylinder23Type (const id_type& id,
                    const Cylinder23Core_type& Cylinder23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Cylinder23Core_ (Cylinder23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Cylinder23Type::
    Cylinder23Type (const id_type& id,
                    ::std::auto_ptr< Cylinder23Core_type >& Cylinder23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Cylinder23Core_ (Cylinder23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Cylinder23Type::
    Cylinder23Type (const Cylinder23Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Cylinder23Core_ (x.Cylinder23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Cylinder23Type::
    Cylinder23Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Cylinder23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Cylinder23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Cylinder23Core
        //
        if (n.name () == "Cylinder23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Cylinder23Core_type > r (
            Cylinder23Core_traits::create (i, f, this));

          if (!Cylinder23Core_.present ())
          {
            this->Cylinder23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Cylinder23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Cylinder23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Cylinder23Type* Cylinder23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Cylinder23Type (*this, f, c);
    }

    Cylinder23Type::
    ~Cylinder23Type ()
    {
    }

    // Sphere23CoreType
    //

    Sphere23CoreType::
    Sphere23CoreType (const Diameter_type& Diameter,
                      const Location_type& Location,
                      const LatitudeLongitudeSweep_type& LatitudeLongitudeSweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Diameter_ (Diameter, ::xml_schema::flags (), this),
      Location_ (Location, ::xml_schema::flags (), this),
      LatitudeLongitudeSweep_ (LatitudeLongitudeSweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Sphere23CoreType::
    Sphere23CoreType (const Diameter_type& Diameter,
                      const Location_type& Location,
                      ::std::auto_ptr< LatitudeLongitudeSweep_type >& LatitudeLongitudeSweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      Diameter_ (Diameter, ::xml_schema::flags (), this),
      Location_ (Location, ::xml_schema::flags (), this),
      LatitudeLongitudeSweep_ (LatitudeLongitudeSweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Sphere23CoreType::
    Sphere23CoreType (const Sphere23CoreType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      Diameter_ (x.Diameter_, f, this),
      Location_ (x.Location_, f, this),
      LatitudeLongitudeSweep_ (x.LatitudeLongitudeSweep_, f, this),
      turnedV_ (x.turnedV_, f, this),
      scaleU_ (x.scaleU_, f, this),
      scaleV_ (x.scaleV_, f, this)
    {
    }

    Sphere23CoreType::
    Sphere23CoreType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      Diameter_ (f, this),
      Location_ (f, this),
      LatitudeLongitudeSweep_ (f, this),
      turnedV_ (f, this),
      scaleU_ (f, this),
      scaleV_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Sphere23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Diameter
        //
        if (n.name () == "Diameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!Diameter_.present ())
          {
            this->Diameter_.set (Diameter_traits::create (i, f, this));
            continue;
          }
        }

        // Location
        //
        if (n.name () == "Location" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Location_type > r (
            Location_traits::create (i, f, this));

          if (!Location_.present ())
          {
            this->Location_.set (r);
            continue;
          }
        }

        // LatitudeLongitudeSweep
        //
        if (n.name () == "LatitudeLongitudeSweep" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LatitudeLongitudeSweep_type > r (
            LatitudeLongitudeSweep_traits::create (i, f, this));

          if (!LatitudeLongitudeSweep_.present ())
          {
            this->LatitudeLongitudeSweep_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Diameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Diameter",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Location_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Location",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!LatitudeLongitudeSweep_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "LatitudeLongitudeSweep",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turnedV" && n.namespace_ ().empty ())
        {
          this->turnedV_.set (turnedV_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "scaleU" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleU_type > r (
            scaleU_traits::create (i, f, this));

          this->scaleU_.set (r);
          continue;
        }

        if (n.name () == "scaleV" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleV_type > r (
            scaleV_traits::create (i, f, this));

          this->scaleV_.set (r);
          continue;
        }
      }

      if (!turnedV_.present ())
      {
        this->turnedV_.set (turnedV_default_value ());
      }

      if (!scaleU_.present ())
      {
        this->scaleU_.set (scaleU_default_value ());
      }

      if (!scaleV_.present ())
      {
        this->scaleV_.set (scaleV_default_value ());
      }
    }

    Sphere23CoreType* Sphere23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Sphere23CoreType (*this, f, c);
    }

    Sphere23CoreType::
    ~Sphere23CoreType ()
    {
    }

    // Sphere23Type
    //

    Sphere23Type::
    Sphere23Type (const id_type& id,
                  const Sphere23Core_type& Sphere23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Sphere23Core_ (Sphere23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Sphere23Type::
    Sphere23Type (const id_type& id,
                  ::std::auto_ptr< Sphere23Core_type >& Sphere23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Sphere23Core_ (Sphere23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Sphere23Type::
    Sphere23Type (const Sphere23Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Sphere23Core_ (x.Sphere23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Sphere23Type::
    Sphere23Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Sphere23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Sphere23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Sphere23Core
        //
        if (n.name () == "Sphere23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Sphere23Core_type > r (
            Sphere23Core_traits::create (i, f, this));

          if (!Sphere23Core_.present ())
          {
            this->Sphere23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Sphere23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Sphere23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Sphere23Type* Sphere23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Sphere23Type (*this, f, c);
    }

    Sphere23Type::
    ~Sphere23Type ()
    {
    }

    // Torus23CoreType
    //

    Torus23CoreType::
    Torus23CoreType (const DiameterMinor_type& DiameterMinor,
                     const DiameterMajor_type& DiameterMajor,
                     const Axis_type& Axis,
                     const LatitudeLongitudeSweep_type& LatitudeLongitudeSweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      DiameterMinor_ (DiameterMinor, ::xml_schema::flags (), this),
      DiameterMajor_ (DiameterMajor, ::xml_schema::flags (), this),
      Axis_ (Axis, ::xml_schema::flags (), this),
      LatitudeLongitudeSweep_ (LatitudeLongitudeSweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      offsetV_ (offsetV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Torus23CoreType::
    Torus23CoreType (const DiameterMinor_type& DiameterMinor,
                     const DiameterMajor_type& DiameterMajor,
                     ::std::auto_ptr< Axis_type >& Axis,
                     ::std::auto_ptr< LatitudeLongitudeSweep_type >& LatitudeLongitudeSweep)
    : ::xsd::qif2::SurfaceCoreBaseType (),
      DiameterMinor_ (DiameterMinor, ::xml_schema::flags (), this),
      DiameterMajor_ (DiameterMajor, ::xml_schema::flags (), this),
      Axis_ (Axis, ::xml_schema::flags (), this),
      LatitudeLongitudeSweep_ (LatitudeLongitudeSweep, ::xml_schema::flags (), this),
      turnedV_ (turnedV_default_value (), ::xml_schema::flags (), this),
      offsetV_ (offsetV_default_value (), ::xml_schema::flags (), this),
      scaleU_ (scaleU_default_value (), ::xml_schema::flags (), this),
      scaleV_ (scaleV_default_value (), ::xml_schema::flags (), this)
    {
    }

    Torus23CoreType::
    Torus23CoreType (const Torus23CoreType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (x, f, c),
      DiameterMinor_ (x.DiameterMinor_, f, this),
      DiameterMajor_ (x.DiameterMajor_, f, this),
      Axis_ (x.Axis_, f, this),
      LatitudeLongitudeSweep_ (x.LatitudeLongitudeSweep_, f, this),
      turnedV_ (x.turnedV_, f, this),
      offsetV_ (x.offsetV_, f, this),
      scaleU_ (x.scaleU_, f, this),
      scaleV_ (x.scaleV_, f, this)
    {
    }

    Torus23CoreType::
    Torus23CoreType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceCoreBaseType (e, f | ::xml_schema::flags::base, c),
      DiameterMinor_ (f, this),
      DiameterMajor_ (f, this),
      Axis_ (f, this),
      LatitudeLongitudeSweep_ (f, this),
      turnedV_ (f, this),
      offsetV_ (f, this),
      scaleU_ (f, this),
      scaleV_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Torus23CoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceCoreBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DiameterMinor
        //
        if (n.name () == "DiameterMinor" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!DiameterMinor_.present ())
          {
            this->DiameterMinor_.set (DiameterMinor_traits::create (i, f, this));
            continue;
          }
        }

        // DiameterMajor
        //
        if (n.name () == "DiameterMajor" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!DiameterMajor_.present ())
          {
            this->DiameterMajor_.set (DiameterMajor_traits::create (i, f, this));
            continue;
          }
        }

        // Axis
        //
        if (n.name () == "Axis" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Axis_type > r (
            Axis_traits::create (i, f, this));

          if (!Axis_.present ())
          {
            this->Axis_.set (r);
            continue;
          }
        }

        // LatitudeLongitudeSweep
        //
        if (n.name () == "LatitudeLongitudeSweep" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LatitudeLongitudeSweep_type > r (
            LatitudeLongitudeSweep_traits::create (i, f, this));

          if (!LatitudeLongitudeSweep_.present ())
          {
            this->LatitudeLongitudeSweep_.set (r);
            continue;
          }
        }

        break;
      }

      if (!DiameterMinor_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DiameterMinor",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DiameterMajor_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DiameterMajor",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Axis_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Axis",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!LatitudeLongitudeSweep_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "LatitudeLongitudeSweep",
          "http://qifstandards.org/xsd/qif2");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "turnedV" && n.namespace_ ().empty ())
        {
          this->turnedV_.set (turnedV_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "offsetV" && n.namespace_ ().empty ())
        {
          this->offsetV_.set (offsetV_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "scaleU" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleU_type > r (
            scaleU_traits::create (i, f, this));

          this->scaleU_.set (r);
          continue;
        }

        if (n.name () == "scaleV" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< scaleV_type > r (
            scaleV_traits::create (i, f, this));

          this->scaleV_.set (r);
          continue;
        }
      }

      if (!turnedV_.present ())
      {
        this->turnedV_.set (turnedV_default_value ());
      }

      if (!offsetV_.present ())
      {
        this->offsetV_.set (offsetV_default_value ());
      }

      if (!scaleU_.present ())
      {
        this->scaleU_.set (scaleU_default_value ());
      }

      if (!scaleV_.present ())
      {
        this->scaleV_.set (scaleV_default_value ());
      }
    }

    Torus23CoreType* Torus23CoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Torus23CoreType (*this, f, c);
    }

    Torus23CoreType::
    ~Torus23CoreType ()
    {
    }

    // Torus23Type
    //

    Torus23Type::
    Torus23Type (const id_type& id,
                 const Torus23Core_type& Torus23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Torus23Core_ (Torus23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Torus23Type::
    Torus23Type (const id_type& id,
                 ::std::auto_ptr< Torus23Core_type >& Torus23Core)
    : ::xsd::qif2::SurfaceBaseType (id),
      Torus23Core_ (Torus23Core, ::xml_schema::flags (), this),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    Torus23Type::
    Torus23Type (const Torus23Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (x, f, c),
      Torus23Core_ (x.Torus23Core_, f, this),
      Transform_ (x.Transform_, f, this)
    {
    }

    Torus23Type::
    Torus23Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xsd::qif2::SurfaceBaseType (e, f | ::xml_schema::flags::base, c),
      Torus23Core_ (f, this),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void Torus23Type::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SurfaceBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Torus23Core
        //
        if (n.name () == "Torus23Core" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Torus23Core_type > r (
            Torus23Core_traits::create (i, f, this));

          if (!Torus23Core_.present ())
          {
            this->Torus23Core_.set (r);
            continue;
          }
        }

        // Transform
        //
        if (n.name () == "Transform" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Transform_type > r (
            Transform_traits::create (i, f, this));

          if (!this->Transform_)
          {
            this->Transform_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Torus23Core_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Torus23Core",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    Torus23Type* Torus23Type::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class Torus23Type (*this, f, c);
    }

    Torus23Type::
    ~Torus23Type ()
    {
    }

    // CurveMeshSetType
    //

    CurveMeshSetType::
    CurveMeshSetType (const N_type& N)
    : ::xml_schema::type (),
      PathTriangulation_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    CurveMeshSetType::
    CurveMeshSetType (const CurveMeshSetType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      PathTriangulation_ (x.PathTriangulation_, f, this),
      N_ (x.N_, f, this)
    {
    }

    CurveMeshSetType::
    CurveMeshSetType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      PathTriangulation_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CurveMeshSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PathTriangulation
        //
        if (n.name () == "PathTriangulation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PathTriangulation_type > r (
            PathTriangulation_traits::create (i, f, this));

          this->PathTriangulation_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    CurveMeshSetType* CurveMeshSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveMeshSetType (*this, f, c);
    }

    CurveMeshSetType::
    ~CurveMeshSetType ()
    {
    }

    // PathTriangulationCoreType
    //

    PathTriangulationCoreType::
    PathTriangulationCoreType ()
    : ::xml_schema::type (),
      Edges_ (::xml_schema::flags (), this),
      EdgesBinary_ (::xml_schema::flags (), this)
    {
    }

    PathTriangulationCoreType::
    PathTriangulationCoreType (const PathTriangulationCoreType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Edges_ (x.Edges_, f, this),
      EdgesBinary_ (x.EdgesBinary_, f, this)
    {
    }

    PathTriangulationCoreType::
    PathTriangulationCoreType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Edges_ (f, this),
      EdgesBinary_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PathTriangulationCoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Edges
        //
        if (n.name () == "Edges" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Edges_type > r (
            Edges_traits::create (i, f, this));

          if (!this->Edges_)
          {
            this->Edges_.set (r);
            continue;
          }
        }

        // EdgesBinary
        //
        if (n.name () == "EdgesBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EdgesBinary_type > r (
            EdgesBinary_traits::create (i, f, this));

          if (!this->EdgesBinary_)
          {
            this->EdgesBinary_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PathTriangulationCoreType* PathTriangulationCoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PathTriangulationCoreType (*this, f, c);
    }

    PathTriangulationCoreType::
    ~PathTriangulationCoreType ()
    {
    }

    // PathTriangulationType
    //

    PathTriangulationType::
    PathTriangulationType (const id_type& id,
                           const PathTriangulationCore_type& PathTriangulationCore,
                           const MeshTriangle_type& MeshTriangle)
    : ::xsd::qif2::GeometryBaseType (id),
      PathTriangulationCore_ (PathTriangulationCore, ::xml_schema::flags (), this),
      MeshTriangle_ (MeshTriangle, ::xml_schema::flags (), this)
    {
    }

    PathTriangulationType::
    PathTriangulationType (const id_type& id,
                           ::std::auto_ptr< PathTriangulationCore_type >& PathTriangulationCore,
                           ::std::auto_ptr< MeshTriangle_type >& MeshTriangle)
    : ::xsd::qif2::GeometryBaseType (id),
      PathTriangulationCore_ (PathTriangulationCore, ::xml_schema::flags (), this),
      MeshTriangle_ (MeshTriangle, ::xml_schema::flags (), this)
    {
    }

    PathTriangulationType::
    PathTriangulationType (const PathTriangulationType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (x, f, c),
      PathTriangulationCore_ (x.PathTriangulationCore_, f, this),
      MeshTriangle_ (x.MeshTriangle_, f, this)
    {
    }

    PathTriangulationType::
    PathTriangulationType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (e, f | ::xml_schema::flags::base, c),
      PathTriangulationCore_ (f, this),
      MeshTriangle_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PathTriangulationType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometryBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PathTriangulationCore
        //
        if (n.name () == "PathTriangulationCore" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PathTriangulationCore_type > r (
            PathTriangulationCore_traits::create (i, f, this));

          if (!PathTriangulationCore_.present ())
          {
            this->PathTriangulationCore_.set (r);
            continue;
          }
        }

        // MeshTriangle
        //
        if (n.name () == "MeshTriangle" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeshTriangle_type > r (
            MeshTriangle_traits::create (i, f, this));

          if (!MeshTriangle_.present ())
          {
            this->MeshTriangle_.set (r);
            continue;
          }
        }

        break;
      }

      if (!PathTriangulationCore_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PathTriangulationCore",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!MeshTriangle_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MeshTriangle",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PathTriangulationType* PathTriangulationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PathTriangulationType (*this, f, c);
    }

    PathTriangulationType::
    ~PathTriangulationType ()
    {
    }

    // SurfaceMeshSetType
    //

    SurfaceMeshSetType::
    SurfaceMeshSetType (const N_type& N)
    : ::xml_schema::type (),
      MeshTriangle_ (::xml_schema::flags (), this),
      N_ (N, ::xml_schema::flags (), this)
    {
    }

    SurfaceMeshSetType::
    SurfaceMeshSetType (const SurfaceMeshSetType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MeshTriangle_ (x.MeshTriangle_, f, this),
      N_ (x.N_, f, this)
    {
    }

    SurfaceMeshSetType::
    SurfaceMeshSetType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MeshTriangle_ (f, this),
      N_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceMeshSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeshTriangle
        //
        if (n.name () == "MeshTriangle" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeshTriangle_type > r (
            MeshTriangle_traits::create (i, f, this));

          this->MeshTriangle_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< N_type > r (
            N_traits::create (i, f, this));

          this->N_.set (r);
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    SurfaceMeshSetType* SurfaceMeshSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceMeshSetType (*this, f, c);
    }

    SurfaceMeshSetType::
    ~SurfaceMeshSetType ()
    {
    }

    // MeshTriangleCoreType
    //

    MeshTriangleCoreType::
    MeshTriangleCoreType ()
    : ::xml_schema::type (),
      Triangles_ (::xml_schema::flags (), this),
      TrianglesBinary_ (::xml_schema::flags (), this),
      Neighbours_ (::xml_schema::flags (), this),
      NeighboursBinary_ (::xml_schema::flags (), this),
      Vertices_ (::xml_schema::flags (), this),
      VerticesBinary_ (::xml_schema::flags (), this),
      Normals_ (::xml_schema::flags (), this),
      NormalsBinary_ (::xml_schema::flags (), this)
    {
    }

    MeshTriangleCoreType::
    MeshTriangleCoreType (const MeshTriangleCoreType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Triangles_ (x.Triangles_, f, this),
      TrianglesBinary_ (x.TrianglesBinary_, f, this),
      Neighbours_ (x.Neighbours_, f, this),
      NeighboursBinary_ (x.NeighboursBinary_, f, this),
      Vertices_ (x.Vertices_, f, this),
      VerticesBinary_ (x.VerticesBinary_, f, this),
      Normals_ (x.Normals_, f, this),
      NormalsBinary_ (x.NormalsBinary_, f, this)
    {
    }

    MeshTriangleCoreType::
    MeshTriangleCoreType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Triangles_ (f, this),
      TrianglesBinary_ (f, this),
      Neighbours_ (f, this),
      NeighboursBinary_ (f, this),
      Vertices_ (f, this),
      VerticesBinary_ (f, this),
      Normals_ (f, this),
      NormalsBinary_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void MeshTriangleCoreType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Triangles
        //
        if (n.name () == "Triangles" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Triangles_type > r (
            Triangles_traits::create (i, f, this));

          if (!this->Triangles_)
          {
            this->Triangles_.set (r);
            continue;
          }
        }

        // TrianglesBinary
        //
        if (n.name () == "TrianglesBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TrianglesBinary_type > r (
            TrianglesBinary_traits::create (i, f, this));

          if (!this->TrianglesBinary_)
          {
            this->TrianglesBinary_.set (r);
            continue;
          }
        }

        // Neighbours
        //
        if (n.name () == "Neighbours" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Neighbours_type > r (
            Neighbours_traits::create (i, f, this));

          if (!this->Neighbours_)
          {
            this->Neighbours_.set (r);
            continue;
          }
        }

        // NeighboursBinary
        //
        if (n.name () == "NeighboursBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NeighboursBinary_type > r (
            NeighboursBinary_traits::create (i, f, this));

          if (!this->NeighboursBinary_)
          {
            this->NeighboursBinary_.set (r);
            continue;
          }
        }

        // Vertices
        //
        if (n.name () == "Vertices" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Vertices_type > r (
            Vertices_traits::create (i, f, this));

          if (!this->Vertices_)
          {
            this->Vertices_.set (r);
            continue;
          }
        }

        // VerticesBinary
        //
        if (n.name () == "VerticesBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< VerticesBinary_type > r (
            VerticesBinary_traits::create (i, f, this));

          if (!this->VerticesBinary_)
          {
            this->VerticesBinary_.set (r);
            continue;
          }
        }

        // Normals
        //
        if (n.name () == "Normals" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Normals_type > r (
            Normals_traits::create (i, f, this));

          if (!this->Normals_)
          {
            this->Normals_.set (r);
            continue;
          }
        }

        // NormalsBinary
        //
        if (n.name () == "NormalsBinary" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NormalsBinary_type > r (
            NormalsBinary_traits::create (i, f, this));

          if (!this->NormalsBinary_)
          {
            this->NormalsBinary_.set (r);
            continue;
          }
        }

        break;
      }
    }

    MeshTriangleCoreType* MeshTriangleCoreType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeshTriangleCoreType (*this, f, c);
    }

    MeshTriangleCoreType::
    ~MeshTriangleCoreType ()
    {
    }

    // MeshTriangleType
    //

    MeshTriangleType::
    MeshTriangleType (const id_type& id,
                      const MeshTriangleCore_type& MeshTriangleCore)
    : ::xsd::qif2::GeometryBaseType (id),
      MeshTriangleCore_ (MeshTriangleCore, ::xml_schema::flags (), this)
    {
    }

    MeshTriangleType::
    MeshTriangleType (const id_type& id,
                      ::std::auto_ptr< MeshTriangleCore_type >& MeshTriangleCore)
    : ::xsd::qif2::GeometryBaseType (id),
      MeshTriangleCore_ (MeshTriangleCore, ::xml_schema::flags (), this)
    {
    }

    MeshTriangleType::
    MeshTriangleType (const MeshTriangleType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (x, f, c),
      MeshTriangleCore_ (x.MeshTriangleCore_, f, this)
    {
    }

    MeshTriangleType::
    MeshTriangleType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::GeometryBaseType (e, f | ::xml_schema::flags::base, c),
      MeshTriangleCore_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void MeshTriangleType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometryBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeshTriangleCore
        //
        if (n.name () == "MeshTriangleCore" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeshTriangleCore_type > r (
            MeshTriangleCore_traits::create (i, f, this));

          if (!MeshTriangleCore_.present ())
          {
            this->MeshTriangleCore_.set (r);
            continue;
          }
        }

        break;
      }

      if (!MeshTriangleCore_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MeshTriangleCore",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    MeshTriangleType* MeshTriangleType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeshTriangleType (*this, f, c);
    }

    MeshTriangleType::
    ~MeshTriangleType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
        ::xsd::qif2::GeometrySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
        ::xsd::qif2::GeometrySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
        ::xsd::qif2::GeometrySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GeometrySet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GeometrySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::GeometrySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GeometrySet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GeometrySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::GeometrySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
        ::xsd::qif2::GeometrySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
        ::xsd::qif2::GeometrySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
        ::xsd::qif2::GeometrySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
          ::xsd::qif2::GeometrySet (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "GeometrySet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::GeometrySetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GeometrySet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::GeometrySetType >
    GeometrySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "GeometrySet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::GeometrySetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::GeometrySetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GeometrySet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
        ::xsd::qif2::PointSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
        ::xsd::qif2::PointSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
        ::xsd::qif2::PointSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
        ::xsd::qif2::PointSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
        ::xsd::qif2::PointSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
        ::xsd::qif2::PointSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
          ::xsd::qif2::PointSet (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PointSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointSetType >
    PointSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PointSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
        ::xsd::qif2::Point (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
        ::xsd::qif2::Point (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
        ::xsd::qif2::Point (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Point (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Point (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Point (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Point (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Point (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Point (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
        ::xsd::qif2::Point (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
        ::xsd::qif2::Point (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
        ::xsd::qif2::Point (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
          ::xsd::qif2::Point (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Point" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointEntityType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Point",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointEntityType >
    Point (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Point" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointEntityType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointEntityType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Point",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
        ::xsd::qif2::Curve12Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
        ::xsd::qif2::Curve12Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
        ::xsd::qif2::Curve12Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12Set (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12Set (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
        ::xsd::qif2::Curve12Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
        ::xsd::qif2::Curve12Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
        ::xsd::qif2::Curve12Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
          ::xsd::qif2::Curve12Set (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Curve12Set" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve12SetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve12Set",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12SetType >
    Curve12Set (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Curve12Set" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve12SetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve12SetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve12Set",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
        ::xsd::qif2::Curve13Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
        ::xsd::qif2::Curve13Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
        ::xsd::qif2::Curve13Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13Set (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13Set (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13Set (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
        ::xsd::qif2::Curve13Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
        ::xsd::qif2::Curve13Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
        ::xsd::qif2::Curve13Set (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
          ::xsd::qif2::Curve13Set (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Curve13Set" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve13SetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve13Set",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13SetType >
    Curve13Set (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Curve13Set" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve13SetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve13SetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve13Set",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
        ::xsd::qif2::Curve12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
        ::xsd::qif2::Curve12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
        ::xsd::qif2::Curve12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
        ::xsd::qif2::Curve12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
        ::xsd::qif2::Curve12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
        ::xsd::qif2::Curve12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
          ::xsd::qif2::Curve12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Curve12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve12BaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve12BaseType >
    Curve12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Curve12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve12BaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve12BaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
        ::xsd::qif2::Curve13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
        ::xsd::qif2::Curve13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
        ::xsd::qif2::Curve13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
        ::xsd::qif2::Curve13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
        ::xsd::qif2::Curve13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
        ::xsd::qif2::Curve13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
          ::xsd::qif2::Curve13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Curve13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve13BaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Curve13BaseType >
    Curve13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Curve13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Curve13BaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Curve13BaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
          ::xsd::qif2::Curve12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Curve12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveCoreBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Curve12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveCoreBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Curve13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Curve13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
        ::xsd::qif2::Curve13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
          ::xsd::qif2::Curve13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Curve13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveCoreBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType >
    Curve13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Curve13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveCoreBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveCoreBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Curve13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
        ::xsd::qif2::Segment13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
        ::xsd::qif2::Segment13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
        ::xsd::qif2::Segment13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
        ::xsd::qif2::Segment13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
        ::xsd::qif2::Segment13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
        ::xsd::qif2::Segment13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
          ::xsd::qif2::Segment13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Segment13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13CoreType >
    Segment13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Segment13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
        ::xsd::qif2::Segment12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
        ::xsd::qif2::Segment12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
        ::xsd::qif2::Segment12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
        ::xsd::qif2::Segment12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
        ::xsd::qif2::Segment12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
        ::xsd::qif2::Segment12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
          ::xsd::qif2::Segment12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Segment12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12CoreType >
    Segment12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Segment12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
        ::xsd::qif2::Segment13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
        ::xsd::qif2::Segment13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
        ::xsd::qif2::Segment13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
        ::xsd::qif2::Segment13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
        ::xsd::qif2::Segment13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
        ::xsd::qif2::Segment13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
          ::xsd::qif2::Segment13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Segment13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment13Type >
    Segment13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Segment13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
        ::xsd::qif2::Segment12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
        ::xsd::qif2::Segment12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
        ::xsd::qif2::Segment12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Segment12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Segment12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
        ::xsd::qif2::Segment12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
        ::xsd::qif2::Segment12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
        ::xsd::qif2::Segment12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
          ::xsd::qif2::Segment12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Segment12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Segment12Type >
    Segment12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Segment12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Segment12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Segment12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Segment12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
        ::xsd::qif2::ArcConic13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
        ::xsd::qif2::ArcConic13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
        ::xsd::qif2::ArcConic13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
        ::xsd::qif2::ArcConic13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
        ::xsd::qif2::ArcConic13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
        ::xsd::qif2::ArcConic13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
          ::xsd::qif2::ArcConic13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcConic13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType >
    ArcConic13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcConic13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
        ::xsd::qif2::ArcConic12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
        ::xsd::qif2::ArcConic12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
        ::xsd::qif2::ArcConic12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
        ::xsd::qif2::ArcConic12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
        ::xsd::qif2::ArcConic12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
        ::xsd::qif2::ArcConic12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
          ::xsd::qif2::ArcConic12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcConic12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType >
    ArcConic12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcConic12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
        ::xsd::qif2::ArcConic13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
        ::xsd::qif2::ArcConic13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
        ::xsd::qif2::ArcConic13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
        ::xsd::qif2::ArcConic13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
        ::xsd::qif2::ArcConic13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
        ::xsd::qif2::ArcConic13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
          ::xsd::qif2::ArcConic13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcConic13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic13Type >
    ArcConic13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcConic13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
        ::xsd::qif2::ArcConic12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
        ::xsd::qif2::ArcConic12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
        ::xsd::qif2::ArcConic12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcConic12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcConic12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
        ::xsd::qif2::ArcConic12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
        ::xsd::qif2::ArcConic12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
        ::xsd::qif2::ArcConic12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
          ::xsd::qif2::ArcConic12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcConic12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcConic12Type >
    ArcConic12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcConic12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcConic12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcConic12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcConic12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
        ::xsd::qif2::ArcCircular13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
        ::xsd::qif2::ArcCircular13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
        ::xsd::qif2::ArcCircular13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
        ::xsd::qif2::ArcCircular13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
        ::xsd::qif2::ArcCircular13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
        ::xsd::qif2::ArcCircular13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
          ::xsd::qif2::ArcCircular13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcCircular13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType >
    ArcCircular13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcCircular13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
        ::xsd::qif2::ArcCircular12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
        ::xsd::qif2::ArcCircular12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
        ::xsd::qif2::ArcCircular12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
        ::xsd::qif2::ArcCircular12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
        ::xsd::qif2::ArcCircular12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
        ::xsd::qif2::ArcCircular12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
          ::xsd::qif2::ArcCircular12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcCircular12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType >
    ArcCircular12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcCircular12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
        ::xsd::qif2::ArcCircular13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
        ::xsd::qif2::ArcCircular13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
        ::xsd::qif2::ArcCircular13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
        ::xsd::qif2::ArcCircular13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
        ::xsd::qif2::ArcCircular13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
        ::xsd::qif2::ArcCircular13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
          ::xsd::qif2::ArcCircular13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcCircular13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type >
    ArcCircular13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcCircular13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
        ::xsd::qif2::ArcCircular12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
        ::xsd::qif2::ArcCircular12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
        ::xsd::qif2::ArcCircular12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArcCircular12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArcCircular12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
        ::xsd::qif2::ArcCircular12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
        ::xsd::qif2::ArcCircular12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
        ::xsd::qif2::ArcCircular12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
          ::xsd::qif2::ArcCircular12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArcCircular12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type >
    ArcCircular12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArcCircular12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArcCircular12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArcCircular12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArcCircular12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
        ::xsd::qif2::Nurbs12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
        ::xsd::qif2::Nurbs12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
        ::xsd::qif2::Nurbs12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
        ::xsd::qif2::Nurbs12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
        ::xsd::qif2::Nurbs12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
        ::xsd::qif2::Nurbs12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
          ::xsd::qif2::Nurbs12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Nurbs12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType >
    Nurbs12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Nurbs12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
        ::xsd::qif2::Nurbs13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
        ::xsd::qif2::Nurbs13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
        ::xsd::qif2::Nurbs13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
        ::xsd::qif2::Nurbs13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
        ::xsd::qif2::Nurbs13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
        ::xsd::qif2::Nurbs13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
          ::xsd::qif2::Nurbs13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Nurbs13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType >
    Nurbs13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Nurbs13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
        ::xsd::qif2::Nurbs13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
        ::xsd::qif2::Nurbs13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
        ::xsd::qif2::Nurbs13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
        ::xsd::qif2::Nurbs13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
        ::xsd::qif2::Nurbs13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
        ::xsd::qif2::Nurbs13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
          ::xsd::qif2::Nurbs13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Nurbs13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs13Type >
    Nurbs13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Nurbs13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
        ::xsd::qif2::Nurbs12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
        ::xsd::qif2::Nurbs12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
        ::xsd::qif2::Nurbs12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
        ::xsd::qif2::Nurbs12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
        ::xsd::qif2::Nurbs12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
        ::xsd::qif2::Nurbs12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
          ::xsd::qif2::Nurbs12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Nurbs12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs12Type >
    Nurbs12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Nurbs12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
        ::xsd::qif2::Spline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
        ::xsd::qif2::Spline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
        ::xsd::qif2::Spline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
        ::xsd::qif2::Spline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
        ::xsd::qif2::Spline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
        ::xsd::qif2::Spline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
          ::xsd::qif2::Spline13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Spline13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13CoreType >
    Spline13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Spline13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
        ::xsd::qif2::Spline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
        ::xsd::qif2::Spline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
        ::xsd::qif2::Spline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
        ::xsd::qif2::Spline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
        ::xsd::qif2::Spline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
        ::xsd::qif2::Spline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
          ::xsd::qif2::Spline12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Spline12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12CoreType >
    Spline12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Spline12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
        ::xsd::qif2::Spline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
        ::xsd::qif2::Spline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
        ::xsd::qif2::Spline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
        ::xsd::qif2::Spline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
        ::xsd::qif2::Spline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
        ::xsd::qif2::Spline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
          ::xsd::qif2::Spline13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Spline13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline13Type >
    Spline13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Spline13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
        ::xsd::qif2::Spline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
        ::xsd::qif2::Spline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
        ::xsd::qif2::Spline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
        ::xsd::qif2::Spline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
        ::xsd::qif2::Spline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
        ::xsd::qif2::Spline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
          ::xsd::qif2::Spline12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Spline12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline12Type >
    Spline12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Spline12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
        ::xsd::qif2::Aggregate12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
        ::xsd::qif2::Aggregate12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
        ::xsd::qif2::Aggregate12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
        ::xsd::qif2::Aggregate12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
        ::xsd::qif2::Aggregate12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
        ::xsd::qif2::Aggregate12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
          ::xsd::qif2::Aggregate12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Aggregate12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType >
    Aggregate12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Aggregate12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
        ::xsd::qif2::Aggregate13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
        ::xsd::qif2::Aggregate13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
        ::xsd::qif2::Aggregate13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
        ::xsd::qif2::Aggregate13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
        ::xsd::qif2::Aggregate13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
        ::xsd::qif2::Aggregate13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
          ::xsd::qif2::Aggregate13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Aggregate13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType >
    Aggregate13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Aggregate13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
        ::xsd::qif2::Aggregate12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
        ::xsd::qif2::Aggregate12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
        ::xsd::qif2::Aggregate12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
        ::xsd::qif2::Aggregate12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
        ::xsd::qif2::Aggregate12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
        ::xsd::qif2::Aggregate12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
          ::xsd::qif2::Aggregate12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Aggregate12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate12Type >
    Aggregate12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Aggregate12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
        ::xsd::qif2::Aggregate13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
        ::xsd::qif2::Aggregate13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
        ::xsd::qif2::Aggregate13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Aggregate13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Aggregate13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
        ::xsd::qif2::Aggregate13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
        ::xsd::qif2::Aggregate13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
        ::xsd::qif2::Aggregate13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
          ::xsd::qif2::Aggregate13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Aggregate13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Aggregate13Type >
    Aggregate13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Aggregate13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Aggregate13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Aggregate13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Aggregate13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
        ::xsd::qif2::Polyline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
        ::xsd::qif2::Polyline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
        ::xsd::qif2::Polyline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline13Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline13Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
        ::xsd::qif2::Polyline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
        ::xsd::qif2::Polyline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
        ::xsd::qif2::Polyline13Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
          ::xsd::qif2::Polyline13Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Polyline13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType >
    Polyline13Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Polyline13Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline13CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline13CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline13Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
        ::xsd::qif2::Polyline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
        ::xsd::qif2::Polyline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
        ::xsd::qif2::Polyline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline12Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline12Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
        ::xsd::qif2::Polyline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
        ::xsd::qif2::Polyline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
        ::xsd::qif2::Polyline12Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
          ::xsd::qif2::Polyline12Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Polyline12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType >
    Polyline12Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Polyline12Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline12CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline12CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline12Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
        ::xsd::qif2::Polyline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
        ::xsd::qif2::Polyline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
        ::xsd::qif2::Polyline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline13 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline13 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
        ::xsd::qif2::Polyline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
        ::xsd::qif2::Polyline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
        ::xsd::qif2::Polyline13 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
          ::xsd::qif2::Polyline13 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Polyline13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline13Type >
    Polyline13 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Polyline13" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline13Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline13Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline13",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
        ::xsd::qif2::Polyline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
        ::xsd::qif2::Polyline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
        ::xsd::qif2::Polyline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Polyline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline12 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Polyline12 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
        ::xsd::qif2::Polyline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
        ::xsd::qif2::Polyline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
        ::xsd::qif2::Polyline12 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
          ::xsd::qif2::Polyline12 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Polyline12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Polyline12Type >
    Polyline12 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Polyline12" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Polyline12Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Polyline12Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Polyline12",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
        ::xsd::qif2::Surface (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
        ::xsd::qif2::Surface (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
        ::xsd::qif2::Surface (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Surface (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Surface (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Surface (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Surface (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Surface (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Surface (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
        ::xsd::qif2::Surface (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
        ::xsd::qif2::Surface (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
        ::xsd::qif2::Surface (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
          ::xsd::qif2::Surface (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Surface" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Surface",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType >
    Surface (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Surface" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Surface",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
        ::xsd::qif2::SurfaceSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
        ::xsd::qif2::SurfaceSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
        ::xsd::qif2::SurfaceSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
        ::xsd::qif2::SurfaceSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
        ::xsd::qif2::SurfaceSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
        ::xsd::qif2::SurfaceSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
          ::xsd::qif2::SurfaceSet (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceSetType >
    SurfaceSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
        ::xsd::qif2::SurfaceCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
        ::xsd::qif2::SurfaceCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
        ::xsd::qif2::SurfaceCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceCore (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceCore (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
        ::xsd::qif2::SurfaceCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
        ::xsd::qif2::SurfaceCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
        ::xsd::qif2::SurfaceCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
          ::xsd::qif2::SurfaceCore (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceCore" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceCoreBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceCore",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType >
    SurfaceCore (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceCore" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceCoreBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceCoreBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceCore",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
        ::xsd::qif2::Nurbs23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
        ::xsd::qif2::Nurbs23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
        ::xsd::qif2::Nurbs23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
        ::xsd::qif2::Nurbs23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
        ::xsd::qif2::Nurbs23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
        ::xsd::qif2::Nurbs23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
          ::xsd::qif2::Nurbs23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Nurbs23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType >
    Nurbs23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Nurbs23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
        ::xsd::qif2::Nurbs23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
        ::xsd::qif2::Nurbs23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
        ::xsd::qif2::Nurbs23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Nurbs23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Nurbs23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
        ::xsd::qif2::Nurbs23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
        ::xsd::qif2::Nurbs23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
        ::xsd::qif2::Nurbs23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
          ::xsd::qif2::Nurbs23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Nurbs23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Nurbs23Type >
    Nurbs23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Nurbs23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Nurbs23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Nurbs23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Nurbs23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
        ::xsd::qif2::Spline23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
        ::xsd::qif2::Spline23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
        ::xsd::qif2::Spline23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
        ::xsd::qif2::Spline23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
        ::xsd::qif2::Spline23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
        ::xsd::qif2::Spline23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
          ::xsd::qif2::Spline23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Spline23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23CoreType >
    Spline23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Spline23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
        ::xsd::qif2::Spline23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
        ::xsd::qif2::Spline23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
        ::xsd::qif2::Spline23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Spline23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Spline23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
        ::xsd::qif2::Spline23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
        ::xsd::qif2::Spline23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
        ::xsd::qif2::Spline23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
          ::xsd::qif2::Spline23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Spline23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Spline23Type >
    Spline23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Spline23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Spline23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Spline23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Spline23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
        ::xsd::qif2::Revolution23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
        ::xsd::qif2::Revolution23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
        ::xsd::qif2::Revolution23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Revolution23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Revolution23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Revolution23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Revolution23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Revolution23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Revolution23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
        ::xsd::qif2::Revolution23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
        ::xsd::qif2::Revolution23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
        ::xsd::qif2::Revolution23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
          ::xsd::qif2::Revolution23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Revolution23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Revolution23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Revolution23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType >
    Revolution23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Revolution23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Revolution23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Revolution23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Revolution23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
        ::xsd::qif2::Revolution23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
        ::xsd::qif2::Revolution23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
        ::xsd::qif2::Revolution23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Revolution23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Revolution23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Revolution23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Revolution23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Revolution23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Revolution23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
        ::xsd::qif2::Revolution23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
        ::xsd::qif2::Revolution23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
        ::xsd::qif2::Revolution23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
          ::xsd::qif2::Revolution23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Revolution23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Revolution23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Revolution23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Revolution23Type >
    Revolution23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Revolution23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Revolution23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Revolution23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Revolution23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
        ::xsd::qif2::Extrude23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
        ::xsd::qif2::Extrude23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
        ::xsd::qif2::Extrude23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Extrude23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Extrude23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Extrude23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Extrude23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Extrude23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Extrude23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
        ::xsd::qif2::Extrude23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
        ::xsd::qif2::Extrude23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
        ::xsd::qif2::Extrude23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
          ::xsd::qif2::Extrude23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Extrude23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Extrude23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Extrude23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType >
    Extrude23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Extrude23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Extrude23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Extrude23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Extrude23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
        ::xsd::qif2::Extrude23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
        ::xsd::qif2::Extrude23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
        ::xsd::qif2::Extrude23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Extrude23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Extrude23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Extrude23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Extrude23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Extrude23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Extrude23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
        ::xsd::qif2::Extrude23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
        ::xsd::qif2::Extrude23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
        ::xsd::qif2::Extrude23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
          ::xsd::qif2::Extrude23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Extrude23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Extrude23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Extrude23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Extrude23Type >
    Extrude23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Extrude23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Extrude23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Extrude23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Extrude23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
        ::xsd::qif2::Ruled23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
        ::xsd::qif2::Ruled23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
        ::xsd::qif2::Ruled23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Ruled23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Ruled23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Ruled23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Ruled23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Ruled23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Ruled23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
        ::xsd::qif2::Ruled23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
        ::xsd::qif2::Ruled23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
        ::xsd::qif2::Ruled23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
          ::xsd::qif2::Ruled23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Ruled23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Ruled23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Ruled23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType >
    Ruled23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Ruled23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Ruled23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Ruled23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Ruled23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
        ::xsd::qif2::Ruled23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
        ::xsd::qif2::Ruled23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
        ::xsd::qif2::Ruled23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Ruled23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Ruled23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Ruled23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Ruled23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Ruled23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Ruled23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
        ::xsd::qif2::Ruled23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
        ::xsd::qif2::Ruled23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
        ::xsd::qif2::Ruled23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
          ::xsd::qif2::Ruled23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Ruled23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Ruled23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Ruled23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Ruled23Type >
    Ruled23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Ruled23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Ruled23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Ruled23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Ruled23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
        ::xsd::qif2::Offset23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
        ::xsd::qif2::Offset23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
        ::xsd::qif2::Offset23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Offset23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Offset23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Offset23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Offset23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Offset23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Offset23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
        ::xsd::qif2::Offset23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
        ::xsd::qif2::Offset23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
        ::xsd::qif2::Offset23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
          ::xsd::qif2::Offset23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Offset23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Offset23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Offset23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23CoreType >
    Offset23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Offset23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Offset23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Offset23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Offset23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
        ::xsd::qif2::Offset23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
        ::xsd::qif2::Offset23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
        ::xsd::qif2::Offset23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Offset23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Offset23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Offset23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Offset23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Offset23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Offset23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
        ::xsd::qif2::Offset23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
        ::xsd::qif2::Offset23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
        ::xsd::qif2::Offset23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
          ::xsd::qif2::Offset23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Offset23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Offset23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Offset23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Offset23Type >
    Offset23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Offset23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Offset23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Offset23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Offset23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
        ::xsd::qif2::Plane23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
        ::xsd::qif2::Plane23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
        ::xsd::qif2::Plane23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Plane23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Plane23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Plane23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Plane23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Plane23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Plane23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
        ::xsd::qif2::Plane23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
        ::xsd::qif2::Plane23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
        ::xsd::qif2::Plane23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
          ::xsd::qif2::Plane23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Plane23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Plane23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Plane23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23CoreType >
    Plane23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Plane23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Plane23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Plane23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Plane23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
        ::xsd::qif2::Plane23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
        ::xsd::qif2::Plane23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
        ::xsd::qif2::Plane23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Plane23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Plane23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Plane23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Plane23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Plane23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Plane23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
        ::xsd::qif2::Plane23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
        ::xsd::qif2::Plane23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
        ::xsd::qif2::Plane23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
          ::xsd::qif2::Plane23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Plane23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Plane23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Plane23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Plane23Type >
    Plane23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Plane23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Plane23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Plane23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Plane23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
        ::xsd::qif2::Cone23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
        ::xsd::qif2::Cone23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
        ::xsd::qif2::Cone23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cone23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cone23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cone23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cone23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cone23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cone23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
        ::xsd::qif2::Cone23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
        ::xsd::qif2::Cone23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
        ::xsd::qif2::Cone23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
          ::xsd::qif2::Cone23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Cone23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cone23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cone23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23CoreType >
    Cone23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Cone23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cone23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cone23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cone23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
        ::xsd::qif2::Cone23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
        ::xsd::qif2::Cone23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
        ::xsd::qif2::Cone23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cone23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cone23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cone23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cone23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cone23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cone23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
        ::xsd::qif2::Cone23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
        ::xsd::qif2::Cone23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
        ::xsd::qif2::Cone23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
          ::xsd::qif2::Cone23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Cone23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cone23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cone23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cone23Type >
    Cone23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Cone23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cone23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cone23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cone23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
        ::xsd::qif2::Cylinder23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
        ::xsd::qif2::Cylinder23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
        ::xsd::qif2::Cylinder23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cylinder23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cylinder23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cylinder23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cylinder23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cylinder23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cylinder23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
        ::xsd::qif2::Cylinder23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
        ::xsd::qif2::Cylinder23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
        ::xsd::qif2::Cylinder23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
          ::xsd::qif2::Cylinder23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Cylinder23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cylinder23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cylinder23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType >
    Cylinder23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Cylinder23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cylinder23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cylinder23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cylinder23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
        ::xsd::qif2::Cylinder23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
        ::xsd::qif2::Cylinder23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
        ::xsd::qif2::Cylinder23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cylinder23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cylinder23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Cylinder23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cylinder23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cylinder23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Cylinder23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
        ::xsd::qif2::Cylinder23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
        ::xsd::qif2::Cylinder23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
        ::xsd::qif2::Cylinder23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
          ::xsd::qif2::Cylinder23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Cylinder23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cylinder23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cylinder23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Cylinder23Type >
    Cylinder23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Cylinder23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Cylinder23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Cylinder23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Cylinder23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
        ::xsd::qif2::Sphere23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
        ::xsd::qif2::Sphere23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
        ::xsd::qif2::Sphere23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Sphere23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Sphere23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Sphere23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Sphere23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Sphere23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Sphere23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
        ::xsd::qif2::Sphere23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
        ::xsd::qif2::Sphere23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
        ::xsd::qif2::Sphere23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
          ::xsd::qif2::Sphere23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Sphere23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Sphere23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Sphere23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType >
    Sphere23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Sphere23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Sphere23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Sphere23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Sphere23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
        ::xsd::qif2::Sphere23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
        ::xsd::qif2::Sphere23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
        ::xsd::qif2::Sphere23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Sphere23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Sphere23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Sphere23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Sphere23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Sphere23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Sphere23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
        ::xsd::qif2::Sphere23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
        ::xsd::qif2::Sphere23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
        ::xsd::qif2::Sphere23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
          ::xsd::qif2::Sphere23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Sphere23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Sphere23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Sphere23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Sphere23Type >
    Sphere23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Sphere23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Sphere23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Sphere23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Sphere23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
        ::xsd::qif2::Torus23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
        ::xsd::qif2::Torus23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
        ::xsd::qif2::Torus23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Torus23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Torus23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Torus23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Torus23Core (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Torus23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Torus23Core (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
        ::xsd::qif2::Torus23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
        ::xsd::qif2::Torus23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
        ::xsd::qif2::Torus23Core (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
          ::xsd::qif2::Torus23Core (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Torus23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Torus23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Torus23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23CoreType >
    Torus23Core (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Torus23Core" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Torus23CoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Torus23CoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Torus23Core",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
        ::xsd::qif2::Torus23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
        ::xsd::qif2::Torus23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
        ::xsd::qif2::Torus23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Torus23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Torus23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Torus23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Torus23 (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Torus23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Torus23 (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
        ::xsd::qif2::Torus23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
        ::xsd::qif2::Torus23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
        ::xsd::qif2::Torus23 (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
          ::xsd::qif2::Torus23 (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Torus23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Torus23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Torus23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::Torus23Type >
    Torus23 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Torus23" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::Torus23Type > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::Torus23Type, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Torus23",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
        ::xsd::qif2::CurveMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
        ::xsd::qif2::CurveMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
        ::xsd::qif2::CurveMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveMeshSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveMeshSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
        ::xsd::qif2::CurveMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
        ::xsd::qif2::CurveMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
        ::xsd::qif2::CurveMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
          ::xsd::qif2::CurveMeshSet (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CurveMeshSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveMeshSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveMeshSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType >
    CurveMeshSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CurveMeshSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveMeshSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveMeshSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveMeshSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
        ::xsd::qif2::PathTriangulationCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
        ::xsd::qif2::PathTriangulationCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
        ::xsd::qif2::PathTriangulationCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PathTriangulationCore (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PathTriangulationCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PathTriangulationCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PathTriangulationCore (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PathTriangulationCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PathTriangulationCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
        ::xsd::qif2::PathTriangulationCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
        ::xsd::qif2::PathTriangulationCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
        ::xsd::qif2::PathTriangulationCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
          ::xsd::qif2::PathTriangulationCore (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PathTriangulationCore" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PathTriangulationCoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PathTriangulationCore",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType >
    PathTriangulationCore (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PathTriangulationCore" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PathTriangulationCoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PathTriangulationCoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PathTriangulationCore",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
        ::xsd::qif2::PathTriangulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
        ::xsd::qif2::PathTriangulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
        ::xsd::qif2::PathTriangulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PathTriangulation (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PathTriangulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PathTriangulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PathTriangulation (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PathTriangulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PathTriangulation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
        ::xsd::qif2::PathTriangulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
        ::xsd::qif2::PathTriangulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
        ::xsd::qif2::PathTriangulation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
          ::xsd::qif2::PathTriangulation (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PathTriangulation" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PathTriangulationType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PathTriangulation",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PathTriangulationType >
    PathTriangulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PathTriangulation" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PathTriangulationType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PathTriangulationType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PathTriangulation",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
        ::xsd::qif2::SurfaceMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
        ::xsd::qif2::SurfaceMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
        ::xsd::qif2::SurfaceMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceMeshSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceMeshSet (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceMeshSet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
        ::xsd::qif2::SurfaceMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
        ::xsd::qif2::SurfaceMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
        ::xsd::qif2::SurfaceMeshSet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
          ::xsd::qif2::SurfaceMeshSet (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceMeshSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceMeshSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceMeshSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType >
    SurfaceMeshSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceMeshSet" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceMeshSetType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceMeshSetType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceMeshSet",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
        ::xsd::qif2::MeshTriangleCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
        ::xsd::qif2::MeshTriangleCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
        ::xsd::qif2::MeshTriangleCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeshTriangleCore (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeshTriangleCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeshTriangleCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeshTriangleCore (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeshTriangleCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeshTriangleCore (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
        ::xsd::qif2::MeshTriangleCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
        ::xsd::qif2::MeshTriangleCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
        ::xsd::qif2::MeshTriangleCore (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
          ::xsd::qif2::MeshTriangleCore (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MeshTriangleCore" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeshTriangleCoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeshTriangleCore",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType >
    MeshTriangleCore (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "MeshTriangleCore" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeshTriangleCoreType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeshTriangleCoreType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeshTriangleCore",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
        ::xsd::qif2::MeshTriangle (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
        ::xsd::qif2::MeshTriangle (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
        ::xsd::qif2::MeshTriangle (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeshTriangle (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeshTriangle (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeshTriangle (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeshTriangle (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeshTriangle (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeshTriangle (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
        ::xsd::qif2::MeshTriangle (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
        ::xsd::qif2::MeshTriangle (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
        ::xsd::qif2::MeshTriangle (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
          ::xsd::qif2::MeshTriangle (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MeshTriangle" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeshTriangleType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeshTriangle",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeshTriangleType >
    MeshTriangle (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "MeshTriangle" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeshTriangleType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeshTriangleType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeshTriangle",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

