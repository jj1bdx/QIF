// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Expressions.hxx"

namespace xsd
{
  namespace qif2
  {
    // SamplingRigorIsType
    // 

    const SamplingRigorIsType::val_type& SamplingRigorIsType::
    val () const
    {
      return this->val_.get ();
    }

    SamplingRigorIsType::val_type& SamplingRigorIsType::
    val ()
    {
      return this->val_.get ();
    }

    void SamplingRigorIsType::
    val (const val_type& x)
    {
      this->val_.set (x);
    }


    // FeatureIsDatumType
    // 


    // FeatureIsInternalType
    // 


    // CharacteristicIsType
    // 

    const CharacteristicIsType::val_type& CharacteristicIsType::
    val () const
    {
      return this->val_.get ();
    }

    CharacteristicIsType::val_type& CharacteristicIsType::
    val ()
    {
      return this->val_.get ();
    }

    void CharacteristicIsType::
    val (const val_type& x)
    {
      this->val_.set (x);
    }

    void CharacteristicIsType::
    val (::std::auto_ptr< val_type > x)
    {
      this->val_.set (x);
    }


    // ShapeClassIsType
    // 

    const ShapeClassIsType::val_type& ShapeClassIsType::
    val () const
    {
      return this->val_.get ();
    }

    ShapeClassIsType::val_type& ShapeClassIsType::
    val ()
    {
      return this->val_.get ();
    }

    void ShapeClassIsType::
    val (const val_type& x)
    {
      this->val_.set (x);
    }

    void ShapeClassIsType::
    val (::std::auto_ptr< val_type > x)
    {
      this->val_.set (x);
    }


    // PointSamplingStrategyEnumBaseType
    // 

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (value v)
    : ::xml_schema::nmtoken (_xsd_PointSamplingStrategyEnumBaseType_literals_[v])
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const PointSamplingStrategyEnumBaseType& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    PointSamplingStrategyEnumBaseType& PointSamplingStrategyEnumBaseType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_PointSamplingStrategyEnumBaseType_literals_[v]);

      return *this;
    }


    // PointPointSamplingStrategyEnumType
    // 

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const PointPointSamplingStrategyEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    PointPointSamplingStrategyEnumType& PointPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // OpenCurvePointSamplingStrategyEnumType
    // 

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const OpenCurvePointSamplingStrategyEnumType& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    OpenCurvePointSamplingStrategyEnumType& OpenCurvePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // ClosedCurvePointSamplingStrategyEnumType
    // 

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[v])
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ClosedCurvePointSamplingStrategyEnumType& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType& ClosedCurvePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[v]);

      return *this;
    }


    // PointDefinedPointSamplingStrategyEnumType
    // 

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_PointDefinedPointSamplingStrategyEnumType_literals_[v])
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const PointDefinedPointSamplingStrategyEnumType& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    PointDefinedPointSamplingStrategyEnumType& PointDefinedPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_PointDefinedPointSamplingStrategyEnumType_literals_[v]);

      return *this;
    }


    // ConePointSamplingStrategyEnumType
    // 

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ConePointSamplingStrategyEnumType& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    ConePointSamplingStrategyEnumType& ConePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // ElongatedCylinderPointSamplingStrategyEnumType
    // 

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ElongatedCylinderPointSamplingStrategyEnumType& v,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType& ElongatedCylinderPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // ExtrudedCrossSectionPointSamplingStrategyEnumType
    // 

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ExtrudedCrossSectionPointSamplingStrategyEnumType& v,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType& ExtrudedCrossSectionPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // PrismPointSamplingStrategyEnumType
    // 

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const PrismPointSamplingStrategyEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    PrismPointSamplingStrategyEnumType& PrismPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // SpherePointSamplingStrategyEnumType
    // 

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const SpherePointSamplingStrategyEnumType& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    SpherePointSamplingStrategyEnumType& SpherePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // SurfaceOfRevolutionPointSamplingStrategyEnumType
    // 

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const SurfaceOfRevolutionPointSamplingStrategyEnumType& v,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType& SurfaceOfRevolutionPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // PlanePointSamplingStrategyEnumType
    // 

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const PlanePointSamplingStrategyEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    PlanePointSamplingStrategyEnumType& PlanePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // CharacteristicTypeEnumType
    // 

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CharacteristicTypeEnumType_literals_[v])
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const CharacteristicTypeEnumType& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CharacteristicTypeEnumType& CharacteristicTypeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CharacteristicTypeEnumType_literals_[v]);

      return *this;
    }


    // ArithmeticFeatureParameterType
    // 

    const ArithmeticFeatureParameterType::Parameter_type& ArithmeticFeatureParameterType::
    Parameter () const
    {
      return this->Parameter_.get ();
    }

    ArithmeticFeatureParameterType::Parameter_type& ArithmeticFeatureParameterType::
    Parameter ()
    {
      return this->Parameter_.get ();
    }

    void ArithmeticFeatureParameterType::
    Parameter (const Parameter_type& x)
    {
      this->Parameter_.set (x);
    }

    void ArithmeticFeatureParameterType::
    Parameter (::std::auto_ptr< Parameter_type > x)
    {
      this->Parameter_.set (x);
    }


    // ArithmeticCharacteristicParameterType
    // 

    const ArithmeticCharacteristicParameterType::CharacteristicTypeEnum_type& ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum () const
    {
      return this->CharacteristicTypeEnum_.get ();
    }

    ArithmeticCharacteristicParameterType::CharacteristicTypeEnum_type& ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum ()
    {
      return this->CharacteristicTypeEnum_.get ();
    }

    void ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum (const CharacteristicTypeEnum_type& x)
    {
      this->CharacteristicTypeEnum_.set (x);
    }

    void ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum (::std::auto_ptr< CharacteristicTypeEnum_type > x)
    {
      this->CharacteristicTypeEnum_.set (x);
    }

    const ArithmeticCharacteristicParameterType::Parameter_type& ArithmeticCharacteristicParameterType::
    Parameter () const
    {
      return this->Parameter_.get ();
    }

    ArithmeticCharacteristicParameterType::Parameter_type& ArithmeticCharacteristicParameterType::
    Parameter ()
    {
      return this->Parameter_.get ();
    }

    void ArithmeticCharacteristicParameterType::
    Parameter (const Parameter_type& x)
    {
      this->Parameter_.set (x);
    }

    void ArithmeticCharacteristicParameterType::
    Parameter (::std::auto_ptr< Parameter_type > x)
    {
      this->Parameter_.set (x);
    }


    // FeatureLengthType
    // 


    // FeatureAreaType
    // 
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xsd
{
  namespace qif2
  {
    // SamplingRigorIsType
    //

    SamplingRigorIsType::
    SamplingRigorIsType (const val_type& val)
    : ::xsd::qif2::BooleanExpressionBaseType (),
      val_ (val, ::xml_schema::flags (), this)
    {
    }

    SamplingRigorIsType::
    SamplingRigorIsType (const SamplingRigorIsType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c),
      val_ (x.val_, f, this)
    {
    }

    SamplingRigorIsType::
    SamplingRigorIsType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      val_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void SamplingRigorIsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "val" && n.namespace_ ().empty ())
        {
          this->val_.set (val_traits::create (i, f, this));
          continue;
        }
      }

      if (!val_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "val",
          "");
      }
    }

    SamplingRigorIsType* SamplingRigorIsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SamplingRigorIsType (*this, f, c);
    }

    SamplingRigorIsType::
    ~SamplingRigorIsType ()
    {
    }

    // FeatureIsDatumType
    //

    FeatureIsDatumType::
    FeatureIsDatumType ()
    : ::xsd::qif2::BooleanExpressionBaseType ()
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const FeatureIsDatumType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c)
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f, c)
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (a, f, c)
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (s, e, f, c)
    {
    }

    FeatureIsDatumType* FeatureIsDatumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureIsDatumType (*this, f, c);
    }

    FeatureIsDatumType::
    ~FeatureIsDatumType ()
    {
    }

    // FeatureIsInternalType
    //

    FeatureIsInternalType::
    FeatureIsInternalType ()
    : ::xsd::qif2::BooleanExpressionBaseType ()
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const FeatureIsInternalType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c)
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f, c)
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (a, f, c)
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (s, e, f, c)
    {
    }

    FeatureIsInternalType* FeatureIsInternalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureIsInternalType (*this, f, c);
    }

    FeatureIsInternalType::
    ~FeatureIsInternalType ()
    {
    }

    // CharacteristicIsType
    //

    CharacteristicIsType::
    CharacteristicIsType (const val_type& val)
    : ::xsd::qif2::BooleanExpressionBaseType (),
      val_ (val, ::xml_schema::flags (), this)
    {
    }

    CharacteristicIsType::
    CharacteristicIsType (const CharacteristicIsType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c),
      val_ (x.val_, f, this)
    {
    }

    CharacteristicIsType::
    CharacteristicIsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      val_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicIsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "val" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< val_type > r (
            val_traits::create (i, f, this));

          this->val_.set (r);
          continue;
        }
      }

      if (!val_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "val",
          "");
      }
    }

    CharacteristicIsType* CharacteristicIsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicIsType (*this, f, c);
    }

    CharacteristicIsType::
    ~CharacteristicIsType ()
    {
    }

    // ShapeClassIsType
    //

    ShapeClassIsType::
    ShapeClassIsType (const val_type& val)
    : ::xsd::qif2::BooleanExpressionBaseType (),
      val_ (val, ::xml_schema::flags (), this)
    {
    }

    ShapeClassIsType::
    ShapeClassIsType (const ShapeClassIsType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c),
      val_ (x.val_, f, this)
    {
    }

    ShapeClassIsType::
    ShapeClassIsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      val_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void ShapeClassIsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "val" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< val_type > r (
            val_traits::create (i, f, this));

          this->val_.set (r);
          continue;
        }
      }

      if (!val_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "val",
          "");
      }
    }

    ShapeClassIsType* ShapeClassIsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ShapeClassIsType (*this, f, c);
    }

    ShapeClassIsType::
    ~ShapeClassIsType ()
    {
    }

    // PointSamplingStrategyEnumBaseType
    //

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_PointSamplingStrategyEnumBaseType_convert ();
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_PointSamplingStrategyEnumBaseType_convert ();
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_PointSamplingStrategyEnumBaseType_convert ();
    }

    PointSamplingStrategyEnumBaseType* PointSamplingStrategyEnumBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointSamplingStrategyEnumBaseType (*this, f, c);
    }

    PointSamplingStrategyEnumBaseType::value PointSamplingStrategyEnumBaseType::
    _xsd_PointSamplingStrategyEnumBaseType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointSamplingStrategyEnumBaseType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PointSamplingStrategyEnumBaseType_indexes_,
                        _xsd_PointSamplingStrategyEnumBaseType_indexes_ + 9,
                        *this,
                        c));

      if (i == _xsd_PointSamplingStrategyEnumBaseType_indexes_ + 9 || _xsd_PointSamplingStrategyEnumBaseType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const PointSamplingStrategyEnumBaseType::
    _xsd_PointSamplingStrategyEnumBaseType_literals_[9] =
    {
      "ORTHOGONALGRID",
      "BIRDCAGE",
      "POLARGRID",
      "SPECIFIEDGRID",
      "STRATIFIED",
      "HELIX",
      "SPIRAL",
      "SPIDERWEB",
      "POINTS"
    };

    const PointSamplingStrategyEnumBaseType::value PointSamplingStrategyEnumBaseType::
    _xsd_PointSamplingStrategyEnumBaseType_indexes_[9] =
    {
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::BIRDCAGE,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::HELIX,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::ORTHOGONALGRID,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::POINTS,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::POLARGRID,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::SPECIFIEDGRID,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::SPIDERWEB,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::SPIRAL,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::STRATIFIED
    };

    // PointPointSamplingStrategyEnumType
    //

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_PointPointSamplingStrategyEnumType_convert ();
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_PointPointSamplingStrategyEnumType_convert ();
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_PointPointSamplingStrategyEnumType_convert ();
    }

    PointPointSamplingStrategyEnumType* PointPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointPointSamplingStrategyEnumType (*this, f, c);
    }

    PointPointSamplingStrategyEnumType::value PointPointSamplingStrategyEnumType::
    _xsd_PointPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PointPointSamplingStrategyEnumType_indexes_,
                        _xsd_PointPointSamplingStrategyEnumType_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_PointPointSamplingStrategyEnumType_indexes_ + 1 || _xsd_PointPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* PointPointSamplingStrategyEnumType::
    _xsd_PointPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const PointPointSamplingStrategyEnumType::value PointPointSamplingStrategyEnumType::
    _xsd_PointPointSamplingStrategyEnumType_indexes_[1] =
    {
      ::xsd::qif2::PointPointSamplingStrategyEnumType::POINTS
    };

    // OpenCurvePointSamplingStrategyEnumType
    //

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
    }

    OpenCurvePointSamplingStrategyEnumType* OpenCurvePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OpenCurvePointSamplingStrategyEnumType (*this, f, c);
    }

    OpenCurvePointSamplingStrategyEnumType::value OpenCurvePointSamplingStrategyEnumType::
    _xsd_OpenCurvePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OpenCurvePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_,
                        _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_ + 1 || _xsd_OpenCurvePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* OpenCurvePointSamplingStrategyEnumType::
    _xsd_OpenCurvePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const OpenCurvePointSamplingStrategyEnumType::value OpenCurvePointSamplingStrategyEnumType::
    _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_[1] =
    {
      ::xsd::qif2::OpenCurvePointSamplingStrategyEnumType::POINTS
    };

    // ClosedCurvePointSamplingStrategyEnumType
    //

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
    }

    ClosedCurvePointSamplingStrategyEnumType* ClosedCurvePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ClosedCurvePointSamplingStrategyEnumType (*this, f, c);
    }

    ClosedCurvePointSamplingStrategyEnumType::value ClosedCurvePointSamplingStrategyEnumType::
    _xsd_ClosedCurvePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ClosedCurvePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_,
                        _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_ + 2 || _xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ClosedCurvePointSamplingStrategyEnumType::
    _xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[2] =
    {
      "POINTS",
      "EQUIDISTANT"
    };

    const ClosedCurvePointSamplingStrategyEnumType::value ClosedCurvePointSamplingStrategyEnumType::
    _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_[2] =
    {
      ::xsd::qif2::ClosedCurvePointSamplingStrategyEnumType::EQUIDISTANT,
      ::xsd::qif2::ClosedCurvePointSamplingStrategyEnumType::POINTS
    };

    // PointDefinedPointSamplingStrategyEnumType
    //

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
    }

    PointDefinedPointSamplingStrategyEnumType* PointDefinedPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDefinedPointSamplingStrategyEnumType (*this, f, c);
    }

    PointDefinedPointSamplingStrategyEnumType::value PointDefinedPointSamplingStrategyEnumType::
    _xsd_PointDefinedPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointDefinedPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_,
                        _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_ + 2 || _xsd_PointDefinedPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const PointDefinedPointSamplingStrategyEnumType::
    _xsd_PointDefinedPointSamplingStrategyEnumType_literals_[2] =
    {
      "GIVENPOINTS",
      "POINTS"
    };

    const PointDefinedPointSamplingStrategyEnumType::value PointDefinedPointSamplingStrategyEnumType::
    _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_[2] =
    {
      ::xsd::qif2::PointDefinedPointSamplingStrategyEnumType::GIVENPOINTS,
      ::xsd::qif2::PointDefinedPointSamplingStrategyEnumType::POINTS
    };

    // ConePointSamplingStrategyEnumType
    //

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_ConePointSamplingStrategyEnumType_convert ();
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_ConePointSamplingStrategyEnumType_convert ();
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_ConePointSamplingStrategyEnumType_convert ();
    }

    ConePointSamplingStrategyEnumType* ConePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConePointSamplingStrategyEnumType (*this, f, c);
    }

    ConePointSamplingStrategyEnumType::value ConePointSamplingStrategyEnumType::
    _xsd_ConePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ConePointSamplingStrategyEnumType_indexes_,
                        _xsd_ConePointSamplingStrategyEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_ConePointSamplingStrategyEnumType_indexes_ + 5 || _xsd_ConePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* ConePointSamplingStrategyEnumType::
    _xsd_ConePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const ConePointSamplingStrategyEnumType::value ConePointSamplingStrategyEnumType::
    _xsd_ConePointSamplingStrategyEnumType_indexes_[5] =
    {
      ::xsd::qif2::ConePointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::POLARGRID,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::SPIDERWEB,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::SPIRAL,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::STRATIFIED
    };

    // ElongatedCylinderPointSamplingStrategyEnumType
    //

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::std::string& s,
                                                    const ::xercesc::DOMElement* e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
    }

    ElongatedCylinderPointSamplingStrategyEnumType* ElongatedCylinderPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ElongatedCylinderPointSamplingStrategyEnumType (*this, f, c);
    }

    ElongatedCylinderPointSamplingStrategyEnumType::value ElongatedCylinderPointSamplingStrategyEnumType::
    _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_,
                        _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_ + 6 || _xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* ElongatedCylinderPointSamplingStrategyEnumType::
    _xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const ElongatedCylinderPointSamplingStrategyEnumType::value ElongatedCylinderPointSamplingStrategyEnumType::
    _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_[6] =
    {
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::STRATIFIED
    };

    // ExtrudedCrossSectionPointSamplingStrategyEnumType
    //

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::std::string& s,
                                                       const ::xercesc::DOMElement* e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType* ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExtrudedCrossSectionPointSamplingStrategyEnumType (*this, f, c);
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::value ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_,
                        _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_ + 3 || _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const ExtrudedCrossSectionPointSamplingStrategyEnumType::value ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_[3] =
    {
      ::xsd::qif2::ExtrudedCrossSectionPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::ExtrudedCrossSectionPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::ExtrudedCrossSectionPointSamplingStrategyEnumType::STRATIFIED
    };

    // PrismPointSamplingStrategyEnumType
    //

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_PrismPointSamplingStrategyEnumType_convert ();
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_PrismPointSamplingStrategyEnumType_convert ();
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_PrismPointSamplingStrategyEnumType_convert ();
    }

    PrismPointSamplingStrategyEnumType* PrismPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PrismPointSamplingStrategyEnumType (*this, f, c);
    }

    PrismPointSamplingStrategyEnumType::value PrismPointSamplingStrategyEnumType::
    _xsd_PrismPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PrismPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PrismPointSamplingStrategyEnumType_indexes_,
                        _xsd_PrismPointSamplingStrategyEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_PrismPointSamplingStrategyEnumType_indexes_ + 6 || _xsd_PrismPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* PrismPointSamplingStrategyEnumType::
    _xsd_PrismPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const PrismPointSamplingStrategyEnumType::value PrismPointSamplingStrategyEnumType::
    _xsd_PrismPointSamplingStrategyEnumType_indexes_[6] =
    {
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::STRATIFIED
    };

    // SpherePointSamplingStrategyEnumType
    //

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_SpherePointSamplingStrategyEnumType_convert ();
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_SpherePointSamplingStrategyEnumType_convert ();
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_SpherePointSamplingStrategyEnumType_convert ();
    }

    SpherePointSamplingStrategyEnumType* SpherePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SpherePointSamplingStrategyEnumType (*this, f, c);
    }

    SpherePointSamplingStrategyEnumType::value SpherePointSamplingStrategyEnumType::
    _xsd_SpherePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SpherePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SpherePointSamplingStrategyEnumType_indexes_,
                        _xsd_SpherePointSamplingStrategyEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_SpherePointSamplingStrategyEnumType_indexes_ + 5 || _xsd_SpherePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* SpherePointSamplingStrategyEnumType::
    _xsd_SpherePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const SpherePointSamplingStrategyEnumType::value SpherePointSamplingStrategyEnumType::
    _xsd_SpherePointSamplingStrategyEnumType_indexes_[5] =
    {
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::STRATIFIED
    };

    // SurfaceOfRevolutionPointSamplingStrategyEnumType
    //

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::std::string& s,
                                                      const ::xercesc::DOMElement* e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType* SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceOfRevolutionPointSamplingStrategyEnumType (*this, f, c);
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::value SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_,
                        _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_ + 6 || _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const SurfaceOfRevolutionPointSamplingStrategyEnumType::value SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_[6] =
    {
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::STRATIFIED
    };

    // PlanePointSamplingStrategyEnumType
    //

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_PlanePointSamplingStrategyEnumType_convert ();
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_PlanePointSamplingStrategyEnumType_convert ();
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_PlanePointSamplingStrategyEnumType_convert ();
    }

    PlanePointSamplingStrategyEnumType* PlanePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PlanePointSamplingStrategyEnumType (*this, f, c);
    }

    PlanePointSamplingStrategyEnumType::value PlanePointSamplingStrategyEnumType::
    _xsd_PlanePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PlanePointSamplingStrategyEnumType_indexes_,
                        _xsd_PlanePointSamplingStrategyEnumType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_PlanePointSamplingStrategyEnumType_indexes_ + 7 || _xsd_PlanePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* PlanePointSamplingStrategyEnumType::
    _xsd_PlanePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const PlanePointSamplingStrategyEnumType::value PlanePointSamplingStrategyEnumType::
    _xsd_PlanePointSamplingStrategyEnumType_indexes_[7] =
    {
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::POLARGRID,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::SPIDERWEB,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::SPIRAL,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::STRATIFIED
    };

    // CharacteristicTypeEnumType
    //

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CharacteristicTypeEnumType_convert ();
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CharacteristicTypeEnumType_convert ();
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CharacteristicTypeEnumType_convert ();
    }

    CharacteristicTypeEnumType* CharacteristicTypeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicTypeEnumType (*this, f, c);
    }

    CharacteristicTypeEnumType::value CharacteristicTypeEnumType::
    _xsd_CharacteristicTypeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CharacteristicTypeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CharacteristicTypeEnumType_indexes_,
                        _xsd_CharacteristicTypeEnumType_indexes_ + 34,
                        *this,
                        c));

      if (i == _xsd_CharacteristicTypeEnumType_indexes_ + 34 || _xsd_CharacteristicTypeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const CharacteristicTypeEnumType::
    _xsd_CharacteristicTypeEnumType_literals_[34] =
    {
      "ANGLE",
      "ANGLECOORDINATE",
      "ANGLEFROM",
      "ANGLEBETWEEN",
      "ANGULARITY",
      "CHORD",
      "CIRCULARITY",
      "CIRCULARRUNOUT",
      "CONCENTRICITY",
      "CURVELENGTH",
      "CYLINDRICITY",
      "DEPTH",
      "DIAMETER",
      "DISTANCE",
      "DISTANCEFROM",
      "FLATNESS",
      "HEIGHT",
      "LENGTH",
      "LENGTHCOORDINATE",
      "LINEPROFILE",
      "PERPENDICULARITY",
      "PARALLELISM",
      "POINTPROFILE",
      "POSITION",
      "RADIUS",
      "SQUARE",
      "STRAIGHTNESS",
      "SURFACEPROFILE",
      "SURFACEPROFILENONUNIFORM",
      "SYMMETRY",
      "THICKNESS",
      "THREAD",
      "TOTALRUNOUT",
      "WIDTH"
    };

    const CharacteristicTypeEnumType::value CharacteristicTypeEnumType::
    _xsd_CharacteristicTypeEnumType_indexes_[34] =
    {
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLE,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLEBETWEEN,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLECOORDINATE,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLEFROM,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGULARITY,
      ::xsd::qif2::CharacteristicTypeEnumType::CHORD,
      ::xsd::qif2::CharacteristicTypeEnumType::CIRCULARITY,
      ::xsd::qif2::CharacteristicTypeEnumType::CIRCULARRUNOUT,
      ::xsd::qif2::CharacteristicTypeEnumType::CONCENTRICITY,
      ::xsd::qif2::CharacteristicTypeEnumType::CURVELENGTH,
      ::xsd::qif2::CharacteristicTypeEnumType::CYLINDRICITY,
      ::xsd::qif2::CharacteristicTypeEnumType::DEPTH,
      ::xsd::qif2::CharacteristicTypeEnumType::DIAMETER,
      ::xsd::qif2::CharacteristicTypeEnumType::DISTANCE,
      ::xsd::qif2::CharacteristicTypeEnumType::DISTANCEFROM,
      ::xsd::qif2::CharacteristicTypeEnumType::FLATNESS,
      ::xsd::qif2::CharacteristicTypeEnumType::HEIGHT,
      ::xsd::qif2::CharacteristicTypeEnumType::LENGTH,
      ::xsd::qif2::CharacteristicTypeEnumType::LENGTHCOORDINATE,
      ::xsd::qif2::CharacteristicTypeEnumType::LINEPROFILE,
      ::xsd::qif2::CharacteristicTypeEnumType::PARALLELISM,
      ::xsd::qif2::CharacteristicTypeEnumType::PERPENDICULARITY,
      ::xsd::qif2::CharacteristicTypeEnumType::POINTPROFILE,
      ::xsd::qif2::CharacteristicTypeEnumType::POSITION,
      ::xsd::qif2::CharacteristicTypeEnumType::RADIUS,
      ::xsd::qif2::CharacteristicTypeEnumType::SQUARE,
      ::xsd::qif2::CharacteristicTypeEnumType::STRAIGHTNESS,
      ::xsd::qif2::CharacteristicTypeEnumType::SURFACEPROFILE,
      ::xsd::qif2::CharacteristicTypeEnumType::SURFACEPROFILENONUNIFORM,
      ::xsd::qif2::CharacteristicTypeEnumType::SYMMETRY,
      ::xsd::qif2::CharacteristicTypeEnumType::THICKNESS,
      ::xsd::qif2::CharacteristicTypeEnumType::THREAD,
      ::xsd::qif2::CharacteristicTypeEnumType::TOTALRUNOUT,
      ::xsd::qif2::CharacteristicTypeEnumType::WIDTH
    };

    // ArithmeticFeatureParameterType
    //

    ArithmeticFeatureParameterType::
    ArithmeticFeatureParameterType (const Parameter_type& Parameter)
    : ::xsd::qif2::ArithmeticExpressionBaseType (),
      Parameter_ (Parameter, ::xml_schema::flags (), this)
    {
    }

    ArithmeticFeatureParameterType::
    ArithmeticFeatureParameterType (const ArithmeticFeatureParameterType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c),
      Parameter_ (x.Parameter_, f, this)
    {
    }

    ArithmeticFeatureParameterType::
    ArithmeticFeatureParameterType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      Parameter_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ArithmeticFeatureParameterType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Parameter
        //
        if (n.name () == "Parameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Parameter_type > r (
            Parameter_traits::create (i, f, this));

          if (!Parameter_.present ())
          {
            this->Parameter_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Parameter",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArithmeticFeatureParameterType* ArithmeticFeatureParameterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArithmeticFeatureParameterType (*this, f, c);
    }

    ArithmeticFeatureParameterType::
    ~ArithmeticFeatureParameterType ()
    {
    }

    // ArithmeticCharacteristicParameterType
    //

    ArithmeticCharacteristicParameterType::
    ArithmeticCharacteristicParameterType (const CharacteristicTypeEnum_type& CharacteristicTypeEnum,
                                           const Parameter_type& Parameter)
    : ::xsd::qif2::ArithmeticExpressionBaseType (),
      CharacteristicTypeEnum_ (CharacteristicTypeEnum, ::xml_schema::flags (), this),
      Parameter_ (Parameter, ::xml_schema::flags (), this)
    {
    }

    ArithmeticCharacteristicParameterType::
    ArithmeticCharacteristicParameterType (const ArithmeticCharacteristicParameterType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c),
      CharacteristicTypeEnum_ (x.CharacteristicTypeEnum_, f, this),
      Parameter_ (x.Parameter_, f, this)
    {
    }

    ArithmeticCharacteristicParameterType::
    ArithmeticCharacteristicParameterType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      CharacteristicTypeEnum_ (f, this),
      Parameter_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ArithmeticCharacteristicParameterType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicTypeEnum
        //
        if (n.name () == "CharacteristicTypeEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicTypeEnum_type > r (
            CharacteristicTypeEnum_traits::create (i, f, this));

          if (!CharacteristicTypeEnum_.present ())
          {
            this->CharacteristicTypeEnum_.set (r);
            continue;
          }
        }

        // Parameter
        //
        if (n.name () == "Parameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Parameter_type > r (
            Parameter_traits::create (i, f, this));

          if (!Parameter_.present ())
          {
            this->Parameter_.set (r);
            continue;
          }
        }

        break;
      }

      if (!CharacteristicTypeEnum_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicTypeEnum",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Parameter",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArithmeticCharacteristicParameterType* ArithmeticCharacteristicParameterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArithmeticCharacteristicParameterType (*this, f, c);
    }

    ArithmeticCharacteristicParameterType::
    ~ArithmeticCharacteristicParameterType ()
    {
    }

    // FeatureLengthType
    //

    FeatureLengthType::
    FeatureLengthType ()
    : ::xsd::qif2::ArithmeticExpressionBaseType ()
    {
    }

    FeatureLengthType::
    FeatureLengthType (const FeatureLengthType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c)
    {
    }

    FeatureLengthType::
    FeatureLengthType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f, c)
    {
    }

    FeatureLengthType::
    FeatureLengthType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (a, f, c)
    {
    }

    FeatureLengthType::
    FeatureLengthType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (s, e, f, c)
    {
    }

    FeatureLengthType* FeatureLengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureLengthType (*this, f, c);
    }

    FeatureLengthType::
    ~FeatureLengthType ()
    {
    }

    // FeatureAreaType
    //

    FeatureAreaType::
    FeatureAreaType ()
    : ::xsd::qif2::ArithmeticExpressionBaseType ()
    {
    }

    FeatureAreaType::
    FeatureAreaType (const FeatureAreaType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c)
    {
    }

    FeatureAreaType::
    FeatureAreaType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f, c)
    {
    }

    FeatureAreaType::
    FeatureAreaType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (a, f, c)
    {
    }

    FeatureAreaType::
    FeatureAreaType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (s, e, f, c)
    {
    }

    FeatureAreaType* FeatureAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureAreaType (*this, f, c);
    }

    FeatureAreaType::
    ~FeatureAreaType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
        ::xsd::qif2::SamplingRigorIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
        ::xsd::qif2::SamplingRigorIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
        ::xsd::qif2::SamplingRigorIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SamplingRigorIs (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SamplingRigorIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SamplingRigorIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SamplingRigorIs (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SamplingRigorIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SamplingRigorIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
        ::xsd::qif2::SamplingRigorIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
        ::xsd::qif2::SamplingRigorIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
        ::xsd::qif2::SamplingRigorIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
          ::xsd::qif2::SamplingRigorIs (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SamplingRigorIs" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SamplingRigorIsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SamplingRigorIs",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType >
    SamplingRigorIs (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SamplingRigorIs" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SamplingRigorIsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SamplingRigorIsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SamplingRigorIs",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
        ::xsd::qif2::FeatureIsDatum (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
        ::xsd::qif2::FeatureIsDatum (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
        ::xsd::qif2::FeatureIsDatum (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureIsDatum (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureIsDatum (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureIsDatum (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureIsDatum (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureIsDatum (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureIsDatum (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
        ::xsd::qif2::FeatureIsDatum (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
        ::xsd::qif2::FeatureIsDatum (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
        ::xsd::qif2::FeatureIsDatum (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
          ::xsd::qif2::FeatureIsDatum (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FeatureIsDatum" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureIsDatumType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureIsDatum",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType >
    FeatureIsDatum (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FeatureIsDatum" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureIsDatumType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureIsDatumType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureIsDatum",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
        ::xsd::qif2::FeatureIsInternal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
        ::xsd::qif2::FeatureIsInternal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
        ::xsd::qif2::FeatureIsInternal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureIsInternal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureIsInternal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureIsInternal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureIsInternal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureIsInternal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureIsInternal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
        ::xsd::qif2::FeatureIsInternal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
        ::xsd::qif2::FeatureIsInternal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
        ::xsd::qif2::FeatureIsInternal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
          ::xsd::qif2::FeatureIsInternal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FeatureIsInternal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureIsInternalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureIsInternal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType >
    FeatureIsInternal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FeatureIsInternal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureIsInternalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureIsInternalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureIsInternal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
        ::xsd::qif2::CharacteristicIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
        ::xsd::qif2::CharacteristicIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
        ::xsd::qif2::CharacteristicIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicIs (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicIs (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
        ::xsd::qif2::CharacteristicIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
        ::xsd::qif2::CharacteristicIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
        ::xsd::qif2::CharacteristicIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
          ::xsd::qif2::CharacteristicIs (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicIs" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicIsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicIs",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType >
    CharacteristicIs (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicIs" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicIsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicIsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicIs",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
        ::xsd::qif2::ShapeClassIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
        ::xsd::qif2::ShapeClassIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
        ::xsd::qif2::ShapeClassIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ShapeClassIs (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ShapeClassIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ShapeClassIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ShapeClassIs (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ShapeClassIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ShapeClassIs (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
        ::xsd::qif2::ShapeClassIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
        ::xsd::qif2::ShapeClassIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
        ::xsd::qif2::ShapeClassIs (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
          ::xsd::qif2::ShapeClassIs (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ShapeClassIs" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ShapeClassIsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ShapeClassIs",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType >
    ShapeClassIs (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ShapeClassIs" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ShapeClassIsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ShapeClassIsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ShapeClassIs",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
        ::xsd::qif2::ArithmeticFeatureParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
        ::xsd::qif2::ArithmeticFeatureParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
        ::xsd::qif2::ArithmeticFeatureParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArithmeticFeatureParameter (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArithmeticFeatureParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArithmeticFeatureParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArithmeticFeatureParameter (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArithmeticFeatureParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArithmeticFeatureParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
        ::xsd::qif2::ArithmeticFeatureParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
        ::xsd::qif2::ArithmeticFeatureParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
        ::xsd::qif2::ArithmeticFeatureParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
          ::xsd::qif2::ArithmeticFeatureParameter (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArithmeticFeatureParameter" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArithmeticFeatureParameterType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArithmeticFeatureParameter",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType >
    ArithmeticFeatureParameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArithmeticFeatureParameter" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArithmeticFeatureParameterType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArithmeticFeatureParameterType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArithmeticFeatureParameter",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
        ::xsd::qif2::ArithmeticCharacteristicParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
        ::xsd::qif2::ArithmeticCharacteristicParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
        ::xsd::qif2::ArithmeticCharacteristicParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArithmeticCharacteristicParameter (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArithmeticCharacteristicParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ArithmeticCharacteristicParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArithmeticCharacteristicParameter (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArithmeticCharacteristicParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ArithmeticCharacteristicParameter (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
        ::xsd::qif2::ArithmeticCharacteristicParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
        ::xsd::qif2::ArithmeticCharacteristicParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
        ::xsd::qif2::ArithmeticCharacteristicParameter (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
          ::xsd::qif2::ArithmeticCharacteristicParameter (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ArithmeticCharacteristicParameter" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArithmeticCharacteristicParameterType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArithmeticCharacteristicParameter",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType >
    ArithmeticCharacteristicParameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ArithmeticCharacteristicParameter" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ArithmeticCharacteristicParameterType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ArithmeticCharacteristicParameterType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ArithmeticCharacteristicParameter",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
        ::xsd::qif2::FeatureLength (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
        ::xsd::qif2::FeatureLength (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
        ::xsd::qif2::FeatureLength (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureLength (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureLength (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureLength (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureLength (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureLength (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureLength (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
        ::xsd::qif2::FeatureLength (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
        ::xsd::qif2::FeatureLength (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
        ::xsd::qif2::FeatureLength (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
          ::xsd::qif2::FeatureLength (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FeatureLength" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureLengthType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureLength",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureLengthType >
    FeatureLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FeatureLength" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureLengthType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureLengthType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureLength",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
        ::xsd::qif2::FeatureArea (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
        ::xsd::qif2::FeatureArea (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
        ::xsd::qif2::FeatureArea (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureArea (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureArea (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FeatureArea (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureArea (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureArea (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FeatureArea (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
        ::xsd::qif2::FeatureArea (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
        ::xsd::qif2::FeatureArea (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
        ::xsd::qif2::FeatureArea (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
          ::xsd::qif2::FeatureArea (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FeatureArea" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureAreaType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureArea",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FeatureAreaType >
    FeatureArea (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FeatureArea" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FeatureAreaType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FeatureAreaType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FeatureArea",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

