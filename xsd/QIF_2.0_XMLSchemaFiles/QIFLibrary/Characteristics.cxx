// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Characteristics.hxx"

namespace xsd
{
  namespace qif2
  {
    // CharacteristicBaseType
    // 

    const CharacteristicBaseType::Attributes_optional& CharacteristicBaseType::
    Attributes () const
    {
      return this->Attributes_;
    }

    CharacteristicBaseType::Attributes_optional& CharacteristicBaseType::
    Attributes ()
    {
      return this->Attributes_;
    }

    void CharacteristicBaseType::
    Attributes (const Attributes_type& x)
    {
      this->Attributes_.set (x);
    }

    void CharacteristicBaseType::
    Attributes (const Attributes_optional& x)
    {
      this->Attributes_ = x;
    }

    void CharacteristicBaseType::
    Attributes (::std::auto_ptr< Attributes_type > x)
    {
      this->Attributes_.set (x);
    }

    const CharacteristicBaseType::Description_optional& CharacteristicBaseType::
    Description () const
    {
      return this->Description_;
    }

    CharacteristicBaseType::Description_optional& CharacteristicBaseType::
    Description ()
    {
      return this->Description_;
    }

    void CharacteristicBaseType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void CharacteristicBaseType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void CharacteristicBaseType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const CharacteristicBaseType::id_type& CharacteristicBaseType::
    id () const
    {
      return this->id_.get ();
    }

    CharacteristicBaseType::id_type& CharacteristicBaseType::
    id ()
    {
      return this->id_.get ();
    }

    void CharacteristicBaseType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void CharacteristicBaseType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // CharacteristicItemBaseType
    // 

    const CharacteristicItemBaseType::Name_type& CharacteristicItemBaseType::
    Name () const
    {
      return this->Name_.get ();
    }

    CharacteristicItemBaseType::Name_type& CharacteristicItemBaseType::
    Name ()
    {
      return this->Name_.get ();
    }

    void CharacteristicItemBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicItemBaseType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const CharacteristicItemBaseType::QPId_optional& CharacteristicItemBaseType::
    QPId () const
    {
      return this->QPId_;
    }

    CharacteristicItemBaseType::QPId_optional& CharacteristicItemBaseType::
    QPId ()
    {
      return this->QPId_;
    }

    void CharacteristicItemBaseType::
    QPId (const QPId_type& x)
    {
      this->QPId_.set (x);
    }

    void CharacteristicItemBaseType::
    QPId (const QPId_optional& x)
    {
      this->QPId_ = x;
    }

    void CharacteristicItemBaseType::
    QPId (::std::auto_ptr< QPId_type > x)
    {
      this->QPId_.set (x);
    }

    const CharacteristicItemBaseType::KeyCharacteristic_optional& CharacteristicItemBaseType::
    KeyCharacteristic () const
    {
      return this->KeyCharacteristic_;
    }

    CharacteristicItemBaseType::KeyCharacteristic_optional& CharacteristicItemBaseType::
    KeyCharacteristic ()
    {
      return this->KeyCharacteristic_;
    }

    void CharacteristicItemBaseType::
    KeyCharacteristic (const KeyCharacteristic_type& x)
    {
      this->KeyCharacteristic_.set (x);
    }

    void CharacteristicItemBaseType::
    KeyCharacteristic (const KeyCharacteristic_optional& x)
    {
      this->KeyCharacteristic_ = x;
    }

    void CharacteristicItemBaseType::
    KeyCharacteristic (::std::auto_ptr< KeyCharacteristic_type > x)
    {
      this->KeyCharacteristic_.set (x);
    }

    const CharacteristicItemBaseType::FeatureItemIds_optional& CharacteristicItemBaseType::
    FeatureItemIds () const
    {
      return this->FeatureItemIds_;
    }

    CharacteristicItemBaseType::FeatureItemIds_optional& CharacteristicItemBaseType::
    FeatureItemIds ()
    {
      return this->FeatureItemIds_;
    }

    void CharacteristicItemBaseType::
    FeatureItemIds (const FeatureItemIds_type& x)
    {
      this->FeatureItemIds_.set (x);
    }

    void CharacteristicItemBaseType::
    FeatureItemIds (const FeatureItemIds_optional& x)
    {
      this->FeatureItemIds_ = x;
    }

    void CharacteristicItemBaseType::
    FeatureItemIds (::std::auto_ptr< FeatureItemIds_type > x)
    {
      this->FeatureItemIds_.set (x);
    }

    const CharacteristicItemBaseType::NotableEventIds_optional& CharacteristicItemBaseType::
    NotableEventIds () const
    {
      return this->NotableEventIds_;
    }

    CharacteristicItemBaseType::NotableEventIds_optional& CharacteristicItemBaseType::
    NotableEventIds ()
    {
      return this->NotableEventIds_;
    }

    void CharacteristicItemBaseType::
    NotableEventIds (const NotableEventIds_type& x)
    {
      this->NotableEventIds_.set (x);
    }

    void CharacteristicItemBaseType::
    NotableEventIds (const NotableEventIds_optional& x)
    {
      this->NotableEventIds_ = x;
    }

    void CharacteristicItemBaseType::
    NotableEventIds (::std::auto_ptr< NotableEventIds_type > x)
    {
      this->NotableEventIds_.set (x);
    }

    const CharacteristicItemBaseType::MeasurementDeviceIds_optional& CharacteristicItemBaseType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    CharacteristicItemBaseType::MeasurementDeviceIds_optional& CharacteristicItemBaseType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void CharacteristicItemBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void CharacteristicItemBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void CharacteristicItemBaseType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const CharacteristicItemBaseType::CharacteristicNominalId_type& CharacteristicItemBaseType::
    CharacteristicNominalId () const
    {
      return this->CharacteristicNominalId_.get ();
    }

    CharacteristicItemBaseType::CharacteristicNominalId_type& CharacteristicItemBaseType::
    CharacteristicNominalId ()
    {
      return this->CharacteristicNominalId_.get ();
    }

    void CharacteristicItemBaseType::
    CharacteristicNominalId (const CharacteristicNominalId_type& x)
    {
      this->CharacteristicNominalId_.set (x);
    }

    void CharacteristicItemBaseType::
    CharacteristicNominalId (::std::auto_ptr< CharacteristicNominalId_type > x)
    {
      this->CharacteristicNominalId_.set (x);
    }

    const CharacteristicItemBaseType::LocationOnDrawing_optional& CharacteristicItemBaseType::
    LocationOnDrawing () const
    {
      return this->LocationOnDrawing_;
    }

    CharacteristicItemBaseType::LocationOnDrawing_optional& CharacteristicItemBaseType::
    LocationOnDrawing ()
    {
      return this->LocationOnDrawing_;
    }

    void CharacteristicItemBaseType::
    LocationOnDrawing (const LocationOnDrawing_type& x)
    {
      this->LocationOnDrawing_.set (x);
    }

    void CharacteristicItemBaseType::
    LocationOnDrawing (const LocationOnDrawing_optional& x)
    {
      this->LocationOnDrawing_ = x;
    }

    void CharacteristicItemBaseType::
    LocationOnDrawing (::std::auto_ptr< LocationOnDrawing_type > x)
    {
      this->LocationOnDrawing_.set (x);
    }


    // KeyCharacteristicType
    // 

    const KeyCharacteristicType::Designator_type& KeyCharacteristicType::
    Designator () const
    {
      return this->Designator_.get ();
    }

    KeyCharacteristicType::Designator_type& KeyCharacteristicType::
    Designator ()
    {
      return this->Designator_.get ();
    }

    void KeyCharacteristicType::
    Designator (const Designator_type& x)
    {
      this->Designator_.set (x);
    }

    void KeyCharacteristicType::
    Designator (::std::auto_ptr< Designator_type > x)
    {
      this->Designator_.set (x);
    }

    const KeyCharacteristicType::Criticality_optional& KeyCharacteristicType::
    Criticality () const
    {
      return this->Criticality_;
    }

    KeyCharacteristicType::Criticality_optional& KeyCharacteristicType::
    Criticality ()
    {
      return this->Criticality_;
    }

    void KeyCharacteristicType::
    Criticality (const Criticality_type& x)
    {
      this->Criticality_.set (x);
    }

    void KeyCharacteristicType::
    Criticality (const Criticality_optional& x)
    {
      this->Criticality_ = x;
    }

    void KeyCharacteristicType::
    Criticality (::std::auto_ptr< Criticality_type > x)
    {
      this->Criticality_.set (x);
    }


    // LocationOnDrawingType
    // 

    const LocationOnDrawingType::DrawingId_optional& LocationOnDrawingType::
    DrawingId () const
    {
      return this->DrawingId_;
    }

    LocationOnDrawingType::DrawingId_optional& LocationOnDrawingType::
    DrawingId ()
    {
      return this->DrawingId_;
    }

    void LocationOnDrawingType::
    DrawingId (const DrawingId_type& x)
    {
      this->DrawingId_.set (x);
    }

    void LocationOnDrawingType::
    DrawingId (const DrawingId_optional& x)
    {
      this->DrawingId_ = x;
    }

    void LocationOnDrawingType::
    DrawingId (::std::auto_ptr< DrawingId_type > x)
    {
      this->DrawingId_.set (x);
    }

    const LocationOnDrawingType::SheetNumber_optional& LocationOnDrawingType::
    SheetNumber () const
    {
      return this->SheetNumber_;
    }

    LocationOnDrawingType::SheetNumber_optional& LocationOnDrawingType::
    SheetNumber ()
    {
      return this->SheetNumber_;
    }

    void LocationOnDrawingType::
    SheetNumber (const SheetNumber_type& x)
    {
      this->SheetNumber_.set (x);
    }

    void LocationOnDrawingType::
    SheetNumber (const SheetNumber_optional& x)
    {
      this->SheetNumber_ = x;
    }

    void LocationOnDrawingType::
    SheetNumber (::std::auto_ptr< SheetNumber_type > x)
    {
      this->SheetNumber_.set (x);
    }

    const LocationOnDrawingType::DrawingZone_optional& LocationOnDrawingType::
    DrawingZone () const
    {
      return this->DrawingZone_;
    }

    LocationOnDrawingType::DrawingZone_optional& LocationOnDrawingType::
    DrawingZone ()
    {
      return this->DrawingZone_;
    }

    void LocationOnDrawingType::
    DrawingZone (const DrawingZone_type& x)
    {
      this->DrawingZone_.set (x);
    }

    void LocationOnDrawingType::
    DrawingZone (const DrawingZone_optional& x)
    {
      this->DrawingZone_ = x;
    }

    void LocationOnDrawingType::
    DrawingZone (::std::auto_ptr< DrawingZone_type > x)
    {
      this->DrawingZone_.set (x);
    }

    const LocationOnDrawingType::ModelId_optional& LocationOnDrawingType::
    ModelId () const
    {
      return this->ModelId_;
    }

    LocationOnDrawingType::ModelId_optional& LocationOnDrawingType::
    ModelId ()
    {
      return this->ModelId_;
    }

    void LocationOnDrawingType::
    ModelId (const ModelId_type& x)
    {
      this->ModelId_.set (x);
    }

    void LocationOnDrawingType::
    ModelId (const ModelId_optional& x)
    {
      this->ModelId_ = x;
    }

    void LocationOnDrawingType::
    ModelId (::std::auto_ptr< ModelId_type > x)
    {
      this->ModelId_.set (x);
    }

    const LocationOnDrawingType::View_optional& LocationOnDrawingType::
    View () const
    {
      return this->View_;
    }

    LocationOnDrawingType::View_optional& LocationOnDrawingType::
    View ()
    {
      return this->View_;
    }

    void LocationOnDrawingType::
    View (const View_type& x)
    {
      this->View_.set (x);
    }

    void LocationOnDrawingType::
    View (const View_optional& x)
    {
      this->View_ = x;
    }

    void LocationOnDrawingType::
    View (::std::auto_ptr< View_type > x)
    {
      this->View_.set (x);
    }

    const LocationOnDrawingType::ViewId_optional& LocationOnDrawingType::
    ViewId () const
    {
      return this->ViewId_;
    }

    LocationOnDrawingType::ViewId_optional& LocationOnDrawingType::
    ViewId ()
    {
      return this->ViewId_;
    }

    void LocationOnDrawingType::
    ViewId (const ViewId_type& x)
    {
      this->ViewId_.set (x);
    }

    void LocationOnDrawingType::
    ViewId (const ViewId_optional& x)
    {
      this->ViewId_ = x;
    }

    void LocationOnDrawingType::
    ViewId (::std::auto_ptr< ViewId_type > x)
    {
      this->ViewId_.set (x);
    }


    // CharacteristicDefinitionBaseType
    // 

    const CharacteristicDefinitionBaseType::Name_optional& CharacteristicDefinitionBaseType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicDefinitionBaseType::Name_optional& CharacteristicDefinitionBaseType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicDefinitionBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicDefinitionBaseType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const CharacteristicDefinitionBaseType::KeyCharacteristic_optional& CharacteristicDefinitionBaseType::
    KeyCharacteristic () const
    {
      return this->KeyCharacteristic_;
    }

    CharacteristicDefinitionBaseType::KeyCharacteristic_optional& CharacteristicDefinitionBaseType::
    KeyCharacteristic ()
    {
      return this->KeyCharacteristic_;
    }

    void CharacteristicDefinitionBaseType::
    KeyCharacteristic (const KeyCharacteristic_type& x)
    {
      this->KeyCharacteristic_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    KeyCharacteristic (const KeyCharacteristic_optional& x)
    {
      this->KeyCharacteristic_ = x;
    }

    void CharacteristicDefinitionBaseType::
    KeyCharacteristic (::std::auto_ptr< KeyCharacteristic_type > x)
    {
      this->KeyCharacteristic_.set (x);
    }

    const CharacteristicDefinitionBaseType::FreeState_optional& CharacteristicDefinitionBaseType::
    FreeState () const
    {
      return this->FreeState_;
    }

    CharacteristicDefinitionBaseType::FreeState_optional& CharacteristicDefinitionBaseType::
    FreeState ()
    {
      return this->FreeState_;
    }

    void CharacteristicDefinitionBaseType::
    FreeState (const FreeState_type& x)
    {
      this->FreeState_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    FreeState (const FreeState_optional& x)
    {
      this->FreeState_ = x;
    }

    const CharacteristicDefinitionBaseType::StatisticalCharacteristic_optional& CharacteristicDefinitionBaseType::
    StatisticalCharacteristic () const
    {
      return this->StatisticalCharacteristic_;
    }

    CharacteristicDefinitionBaseType::StatisticalCharacteristic_optional& CharacteristicDefinitionBaseType::
    StatisticalCharacteristic ()
    {
      return this->StatisticalCharacteristic_;
    }

    void CharacteristicDefinitionBaseType::
    StatisticalCharacteristic (const StatisticalCharacteristic_type& x)
    {
      this->StatisticalCharacteristic_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    StatisticalCharacteristic (const StatisticalCharacteristic_optional& x)
    {
      this->StatisticalCharacteristic_ = x;
    }

    const CharacteristicDefinitionBaseType::CommonZone_optional& CharacteristicDefinitionBaseType::
    CommonZone () const
    {
      return this->CommonZone_;
    }

    CharacteristicDefinitionBaseType::CommonZone_optional& CharacteristicDefinitionBaseType::
    CommonZone ()
    {
      return this->CommonZone_;
    }

    void CharacteristicDefinitionBaseType::
    CommonZone (const CommonZone_type& x)
    {
      this->CommonZone_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    CommonZone (const CommonZone_optional& x)
    {
      this->CommonZone_ = x;
    }

    const CharacteristicDefinitionBaseType::MedianFeature_optional& CharacteristicDefinitionBaseType::
    MedianFeature () const
    {
      return this->MedianFeature_;
    }

    CharacteristicDefinitionBaseType::MedianFeature_optional& CharacteristicDefinitionBaseType::
    MedianFeature ()
    {
      return this->MedianFeature_;
    }

    void CharacteristicDefinitionBaseType::
    MedianFeature (const MedianFeature_type& x)
    {
      this->MedianFeature_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    MedianFeature (const MedianFeature_optional& x)
    {
      this->MedianFeature_ = x;
    }

    const CharacteristicDefinitionBaseType::EnvelopeRequirement_optional& CharacteristicDefinitionBaseType::
    EnvelopeRequirement () const
    {
      return this->EnvelopeRequirement_;
    }

    CharacteristicDefinitionBaseType::EnvelopeRequirement_optional& CharacteristicDefinitionBaseType::
    EnvelopeRequirement ()
    {
      return this->EnvelopeRequirement_;
    }

    void CharacteristicDefinitionBaseType::
    EnvelopeRequirement (const EnvelopeRequirement_type& x)
    {
      this->EnvelopeRequirement_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    EnvelopeRequirement (const EnvelopeRequirement_optional& x)
    {
      this->EnvelopeRequirement_ = x;
    }

    const CharacteristicDefinitionBaseType::UnitedFeature_optional& CharacteristicDefinitionBaseType::
    UnitedFeature () const
    {
      return this->UnitedFeature_;
    }

    CharacteristicDefinitionBaseType::UnitedFeature_optional& CharacteristicDefinitionBaseType::
    UnitedFeature ()
    {
      return this->UnitedFeature_;
    }

    void CharacteristicDefinitionBaseType::
    UnitedFeature (const UnitedFeature_type& x)
    {
      this->UnitedFeature_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    UnitedFeature (const UnitedFeature_optional& x)
    {
      this->UnitedFeature_ = x;
    }

    const CharacteristicDefinitionBaseType::SeparateZone_optional& CharacteristicDefinitionBaseType::
    SeparateZone () const
    {
      return this->SeparateZone_;
    }

    CharacteristicDefinitionBaseType::SeparateZone_optional& CharacteristicDefinitionBaseType::
    SeparateZone ()
    {
      return this->SeparateZone_;
    }

    void CharacteristicDefinitionBaseType::
    SeparateZone (const SeparateZone_type& x)
    {
      this->SeparateZone_.set (x);
    }

    void CharacteristicDefinitionBaseType::
    SeparateZone (const SeparateZone_optional& x)
    {
      this->SeparateZone_ = x;
    }


    // CharacteristicNominalBaseType
    // 

    const CharacteristicNominalBaseType::CharacteristicDefinitionId_type& CharacteristicNominalBaseType::
    CharacteristicDefinitionId () const
    {
      return this->CharacteristicDefinitionId_.get ();
    }

    CharacteristicNominalBaseType::CharacteristicDefinitionId_type& CharacteristicNominalBaseType::
    CharacteristicDefinitionId ()
    {
      return this->CharacteristicDefinitionId_.get ();
    }

    void CharacteristicNominalBaseType::
    CharacteristicDefinitionId (const CharacteristicDefinitionId_type& x)
    {
      this->CharacteristicDefinitionId_.set (x);
    }

    void CharacteristicNominalBaseType::
    CharacteristicDefinitionId (::std::auto_ptr< CharacteristicDefinitionId_type > x)
    {
      this->CharacteristicDefinitionId_.set (x);
    }

    const CharacteristicNominalBaseType::FeatureNominalIds_optional& CharacteristicNominalBaseType::
    FeatureNominalIds () const
    {
      return this->FeatureNominalIds_;
    }

    CharacteristicNominalBaseType::FeatureNominalIds_optional& CharacteristicNominalBaseType::
    FeatureNominalIds ()
    {
      return this->FeatureNominalIds_;
    }

    void CharacteristicNominalBaseType::
    FeatureNominalIds (const FeatureNominalIds_type& x)
    {
      this->FeatureNominalIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    FeatureNominalIds (const FeatureNominalIds_optional& x)
    {
      this->FeatureNominalIds_ = x;
    }

    void CharacteristicNominalBaseType::
    FeatureNominalIds (::std::auto_ptr< FeatureNominalIds_type > x)
    {
      this->FeatureNominalIds_.set (x);
    }

    const CharacteristicNominalBaseType::EntityInternalIds_optional& CharacteristicNominalBaseType::
    EntityInternalIds () const
    {
      return this->EntityInternalIds_;
    }

    CharacteristicNominalBaseType::EntityInternalIds_optional& CharacteristicNominalBaseType::
    EntityInternalIds ()
    {
      return this->EntityInternalIds_;
    }

    void CharacteristicNominalBaseType::
    EntityInternalIds (const EntityInternalIds_type& x)
    {
      this->EntityInternalIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    EntityInternalIds (const EntityInternalIds_optional& x)
    {
      this->EntityInternalIds_ = x;
    }

    void CharacteristicNominalBaseType::
    EntityInternalIds (::std::auto_ptr< EntityInternalIds_type > x)
    {
      this->EntityInternalIds_.set (x);
    }

    const CharacteristicNominalBaseType::EntityExternalIds_optional& CharacteristicNominalBaseType::
    EntityExternalIds () const
    {
      return this->EntityExternalIds_;
    }

    CharacteristicNominalBaseType::EntityExternalIds_optional& CharacteristicNominalBaseType::
    EntityExternalIds ()
    {
      return this->EntityExternalIds_;
    }

    void CharacteristicNominalBaseType::
    EntityExternalIds (const EntityExternalIds_type& x)
    {
      this->EntityExternalIds_.set (x);
    }

    void CharacteristicNominalBaseType::
    EntityExternalIds (const EntityExternalIds_optional& x)
    {
      this->EntityExternalIds_ = x;
    }

    void CharacteristicNominalBaseType::
    EntityExternalIds (::std::auto_ptr< EntityExternalIds_type > x)
    {
      this->EntityExternalIds_.set (x);
    }

    const CharacteristicNominalBaseType::Name_optional& CharacteristicNominalBaseType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicNominalBaseType::Name_optional& CharacteristicNominalBaseType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicNominalBaseType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicNominalBaseType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicNominalBaseType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const CharacteristicNominalBaseType::KeyCharacteristic_optional& CharacteristicNominalBaseType::
    KeyCharacteristic () const
    {
      return this->KeyCharacteristic_;
    }

    CharacteristicNominalBaseType::KeyCharacteristic_optional& CharacteristicNominalBaseType::
    KeyCharacteristic ()
    {
      return this->KeyCharacteristic_;
    }

    void CharacteristicNominalBaseType::
    KeyCharacteristic (const KeyCharacteristic_type& x)
    {
      this->KeyCharacteristic_.set (x);
    }

    void CharacteristicNominalBaseType::
    KeyCharacteristic (const KeyCharacteristic_optional& x)
    {
      this->KeyCharacteristic_ = x;
    }

    void CharacteristicNominalBaseType::
    KeyCharacteristic (::std::auto_ptr< KeyCharacteristic_type > x)
    {
      this->KeyCharacteristic_.set (x);
    }


    // CharacteristicActualBaseType
    // 

    const CharacteristicActualBaseType::Status_type& CharacteristicActualBaseType::
    Status () const
    {
      return this->Status_.get ();
    }

    CharacteristicActualBaseType::Status_type& CharacteristicActualBaseType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CharacteristicActualBaseType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CharacteristicActualBaseType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const CharacteristicActualBaseType::CharacteristicItemId_type& CharacteristicActualBaseType::
    CharacteristicItemId () const
    {
      return this->CharacteristicItemId_.get ();
    }

    CharacteristicActualBaseType::CharacteristicItemId_type& CharacteristicActualBaseType::
    CharacteristicItemId ()
    {
      return this->CharacteristicItemId_.get ();
    }

    void CharacteristicActualBaseType::
    CharacteristicItemId (const CharacteristicItemId_type& x)
    {
      this->CharacteristicItemId_.set (x);
    }

    void CharacteristicActualBaseType::
    CharacteristicItemId (::std::auto_ptr< CharacteristicItemId_type > x)
    {
      this->CharacteristicItemId_.set (x);
    }

    const CharacteristicActualBaseType::FeatureActualIds_optional& CharacteristicActualBaseType::
    FeatureActualIds () const
    {
      return this->FeatureActualIds_;
    }

    CharacteristicActualBaseType::FeatureActualIds_optional& CharacteristicActualBaseType::
    FeatureActualIds ()
    {
      return this->FeatureActualIds_;
    }

    void CharacteristicActualBaseType::
    FeatureActualIds (const FeatureActualIds_type& x)
    {
      this->FeatureActualIds_.set (x);
    }

    void CharacteristicActualBaseType::
    FeatureActualIds (const FeatureActualIds_optional& x)
    {
      this->FeatureActualIds_ = x;
    }

    void CharacteristicActualBaseType::
    FeatureActualIds (::std::auto_ptr< FeatureActualIds_type > x)
    {
      this->FeatureActualIds_.set (x);
    }

    const CharacteristicActualBaseType::ActualComponentId_optional& CharacteristicActualBaseType::
    ActualComponentId () const
    {
      return this->ActualComponentId_;
    }

    CharacteristicActualBaseType::ActualComponentId_optional& CharacteristicActualBaseType::
    ActualComponentId ()
    {
      return this->ActualComponentId_;
    }

    void CharacteristicActualBaseType::
    ActualComponentId (const ActualComponentId_type& x)
    {
      this->ActualComponentId_.set (x);
    }

    void CharacteristicActualBaseType::
    ActualComponentId (const ActualComponentId_optional& x)
    {
      this->ActualComponentId_ = x;
    }

    void CharacteristicActualBaseType::
    ActualComponentId (::std::auto_ptr< ActualComponentId_type > x)
    {
      this->ActualComponentId_.set (x);
    }

    const CharacteristicActualBaseType::MeasurementDeviceIds_optional& CharacteristicActualBaseType::
    MeasurementDeviceIds () const
    {
      return this->MeasurementDeviceIds_;
    }

    CharacteristicActualBaseType::MeasurementDeviceIds_optional& CharacteristicActualBaseType::
    MeasurementDeviceIds ()
    {
      return this->MeasurementDeviceIds_;
    }

    void CharacteristicActualBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_type& x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    void CharacteristicActualBaseType::
    MeasurementDeviceIds (const MeasurementDeviceIds_optional& x)
    {
      this->MeasurementDeviceIds_ = x;
    }

    void CharacteristicActualBaseType::
    MeasurementDeviceIds (::std::auto_ptr< MeasurementDeviceIds_type > x)
    {
      this->MeasurementDeviceIds_.set (x);
    }

    const CharacteristicActualBaseType::ManufacturingProcessId_optional& CharacteristicActualBaseType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    CharacteristicActualBaseType::ManufacturingProcessId_optional& CharacteristicActualBaseType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void CharacteristicActualBaseType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void CharacteristicActualBaseType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void CharacteristicActualBaseType::
    ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    const CharacteristicActualBaseType::NotedEventIds_optional& CharacteristicActualBaseType::
    NotedEventIds () const
    {
      return this->NotedEventIds_;
    }

    CharacteristicActualBaseType::NotedEventIds_optional& CharacteristicActualBaseType::
    NotedEventIds ()
    {
      return this->NotedEventIds_;
    }

    void CharacteristicActualBaseType::
    NotedEventIds (const NotedEventIds_type& x)
    {
      this->NotedEventIds_.set (x);
    }

    void CharacteristicActualBaseType::
    NotedEventIds (const NotedEventIds_optional& x)
    {
      this->NotedEventIds_ = x;
    }

    void CharacteristicActualBaseType::
    NotedEventIds (::std::auto_ptr< NotedEventIds_type > x)
    {
      this->NotedEventIds_.set (x);
    }

    const CharacteristicActualBaseType::NonConformanceDesignator_optional& CharacteristicActualBaseType::
    NonConformanceDesignator () const
    {
      return this->NonConformanceDesignator_;
    }

    CharacteristicActualBaseType::NonConformanceDesignator_optional& CharacteristicActualBaseType::
    NonConformanceDesignator ()
    {
      return this->NonConformanceDesignator_;
    }

    void CharacteristicActualBaseType::
    NonConformanceDesignator (const NonConformanceDesignator_type& x)
    {
      this->NonConformanceDesignator_.set (x);
    }

    void CharacteristicActualBaseType::
    NonConformanceDesignator (const NonConformanceDesignator_optional& x)
    {
      this->NonConformanceDesignator_ = x;
    }

    void CharacteristicActualBaseType::
    NonConformanceDesignator (::std::auto_ptr< NonConformanceDesignator_type > x)
    {
      this->NonConformanceDesignator_.set (x);
    }


    // GeometricCharacteristicDefinitionBaseType
    // 

    const GeometricCharacteristicDefinitionBaseType::DirectionFeature_optional& GeometricCharacteristicDefinitionBaseType::
    DirectionFeature () const
    {
      return this->DirectionFeature_;
    }

    GeometricCharacteristicDefinitionBaseType::DirectionFeature_optional& GeometricCharacteristicDefinitionBaseType::
    DirectionFeature ()
    {
      return this->DirectionFeature_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    DirectionFeature (const DirectionFeature_type& x)
    {
      this->DirectionFeature_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    DirectionFeature (const DirectionFeature_optional& x)
    {
      this->DirectionFeature_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    DirectionFeature (::std::auto_ptr< DirectionFeature_type > x)
    {
      this->DirectionFeature_.set (x);
    }

    const GeometricCharacteristicDefinitionBaseType::CollectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    CollectionPlane () const
    {
      return this->CollectionPlane_;
    }

    GeometricCharacteristicDefinitionBaseType::CollectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    CollectionPlane ()
    {
      return this->CollectionPlane_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    CollectionPlane (const CollectionPlane_type& x)
    {
      this->CollectionPlane_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    CollectionPlane (const CollectionPlane_optional& x)
    {
      this->CollectionPlane_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    CollectionPlane (::std::auto_ptr< CollectionPlane_type > x)
    {
      this->CollectionPlane_.set (x);
    }

    const GeometricCharacteristicDefinitionBaseType::IntersectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane () const
    {
      return this->IntersectionPlane_;
    }

    GeometricCharacteristicDefinitionBaseType::IntersectionPlane_optional& GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane ()
    {
      return this->IntersectionPlane_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane (const IntersectionPlane_type& x)
    {
      this->IntersectionPlane_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane (const IntersectionPlane_optional& x)
    {
      this->IntersectionPlane_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    IntersectionPlane (::std::auto_ptr< IntersectionPlane_type > x)
    {
      this->IntersectionPlane_.set (x);
    }

    const GeometricCharacteristicDefinitionBaseType::OrientationPlane_optional& GeometricCharacteristicDefinitionBaseType::
    OrientationPlane () const
    {
      return this->OrientationPlane_;
    }

    GeometricCharacteristicDefinitionBaseType::OrientationPlane_optional& GeometricCharacteristicDefinitionBaseType::
    OrientationPlane ()
    {
      return this->OrientationPlane_;
    }

    void GeometricCharacteristicDefinitionBaseType::
    OrientationPlane (const OrientationPlane_type& x)
    {
      this->OrientationPlane_.set (x);
    }

    void GeometricCharacteristicDefinitionBaseType::
    OrientationPlane (const OrientationPlane_optional& x)
    {
      this->OrientationPlane_ = x;
    }

    void GeometricCharacteristicDefinitionBaseType::
    OrientationPlane (::std::auto_ptr< OrientationPlane_type > x)
    {
      this->OrientationPlane_.set (x);
    }


    // GeometricCharacteristicNominalBaseType
    // 


    // GeometricCharacteristicActualBaseType
    // 

    const GeometricCharacteristicActualBaseType::Value_optional& GeometricCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    GeometricCharacteristicActualBaseType::Value_optional& GeometricCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void GeometricCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void GeometricCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void GeometricCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const GeometricCharacteristicActualBaseType::MaxValue_optional& GeometricCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    GeometricCharacteristicActualBaseType::MaxValue_optional& GeometricCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void GeometricCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void GeometricCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void GeometricCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const GeometricCharacteristicActualBaseType::MinValue_optional& GeometricCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    GeometricCharacteristicActualBaseType::MinValue_optional& GeometricCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void GeometricCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void GeometricCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void GeometricCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // GeometricCharacteristicItemBaseType
    // 


    // DimensionalCharacteristicDefinitionBaseType
    // 

    const DimensionalCharacteristicDefinitionBaseType::DimensionType_optional& DimensionalCharacteristicDefinitionBaseType::
    DimensionType () const
    {
      return this->DimensionType_;
    }

    DimensionalCharacteristicDefinitionBaseType::DimensionType_optional& DimensionalCharacteristicDefinitionBaseType::
    DimensionType ()
    {
      return this->DimensionType_;
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionType (const DimensionType_type& x)
    {
      this->DimensionType_.set (x);
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionType (const DimensionType_optional& x)
    {
      this->DimensionType_ = x;
    }

    void DimensionalCharacteristicDefinitionBaseType::
    DimensionType (::std::auto_ptr< DimensionType_type > x)
    {
      this->DimensionType_.set (x);
    }


    // DimensionalCharacteristicNominalBaseType
    // 


    // DimensionalCharacteristicActualBaseType
    // 


    // DimensionalCharacteristicItemBaseType
    // 


    // CoordinateCharacteristicDefinitionBaseType
    // 


    // CoordinateCharacteristicNominalBaseType
    // 


    // CoordinateCharacteristicActualBaseType
    // 

    const CoordinateCharacteristicActualBaseType::TypeOfCoordinates_type& CoordinateCharacteristicActualBaseType::
    TypeOfCoordinates () const
    {
      return this->TypeOfCoordinates_.get ();
    }

    CoordinateCharacteristicActualBaseType::TypeOfCoordinates_type& CoordinateCharacteristicActualBaseType::
    TypeOfCoordinates ()
    {
      return this->TypeOfCoordinates_.get ();
    }

    void CoordinateCharacteristicActualBaseType::
    TypeOfCoordinates (const TypeOfCoordinates_type& x)
    {
      this->TypeOfCoordinates_.set (x);
    }

    void CoordinateCharacteristicActualBaseType::
    TypeOfCoordinates (::std::auto_ptr< TypeOfCoordinates_type > x)
    {
      this->TypeOfCoordinates_.set (x);
    }


    // CoordinateCharacteristicItemBaseType
    // 


    // UserDefinedAttributeCharacteristicDefinitionType
    // 


    // UserDefinedAttributeCharacteristicNominalType
    // 

    const UserDefinedAttributeCharacteristicNominalType::PassValues_type& UserDefinedAttributeCharacteristicNominalType::
    PassValues () const
    {
      return this->PassValues_.get ();
    }

    UserDefinedAttributeCharacteristicNominalType::PassValues_type& UserDefinedAttributeCharacteristicNominalType::
    PassValues ()
    {
      return this->PassValues_.get ();
    }

    void UserDefinedAttributeCharacteristicNominalType::
    PassValues (const PassValues_type& x)
    {
      this->PassValues_.set (x);
    }

    void UserDefinedAttributeCharacteristicNominalType::
    PassValues (::std::auto_ptr< PassValues_type > x)
    {
      this->PassValues_.set (x);
    }

    const UserDefinedAttributeCharacteristicNominalType::FailValues_type& UserDefinedAttributeCharacteristicNominalType::
    FailValues () const
    {
      return this->FailValues_.get ();
    }

    UserDefinedAttributeCharacteristicNominalType::FailValues_type& UserDefinedAttributeCharacteristicNominalType::
    FailValues ()
    {
      return this->FailValues_.get ();
    }

    void UserDefinedAttributeCharacteristicNominalType::
    FailValues (const FailValues_type& x)
    {
      this->FailValues_.set (x);
    }

    void UserDefinedAttributeCharacteristicNominalType::
    FailValues (::std::auto_ptr< FailValues_type > x)
    {
      this->FailValues_.set (x);
    }


    // UserDefinedAttributeCharacteristicActualType
    // 

    const UserDefinedAttributeCharacteristicActualType::Value_optional& UserDefinedAttributeCharacteristicActualType::
    Value () const
    {
      return this->Value_;
    }

    UserDefinedAttributeCharacteristicActualType::Value_optional& UserDefinedAttributeCharacteristicActualType::
    Value ()
    {
      return this->Value_;
    }

    void UserDefinedAttributeCharacteristicActualType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void UserDefinedAttributeCharacteristicActualType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void UserDefinedAttributeCharacteristicActualType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }


    // UserDefinedAttributeCharacteristicItemType
    // 


    // StringValuesType
    // 

    const StringValuesType::StringValue_sequence& StringValuesType::
    StringValue () const
    {
      return this->StringValue_;
    }

    StringValuesType::StringValue_sequence& StringValuesType::
    StringValue ()
    {
      return this->StringValue_;
    }

    void StringValuesType::
    StringValue (const StringValue_sequence& s)
    {
      this->StringValue_ = s;
    }


    // LinearCharacteristicDefinitionBaseType
    // 

    const LinearCharacteristicDefinitionBaseType::Tolerance_optional& LinearCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    LinearCharacteristicDefinitionBaseType::Tolerance_optional& LinearCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void LinearCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void LinearCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void LinearCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const LinearCharacteristicDefinitionBaseType::NonTolerance_optional& LinearCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    LinearCharacteristicDefinitionBaseType::NonTolerance_optional& LinearCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void LinearCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void LinearCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void LinearCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // UserDefinedLinearCharacteristicDefinitionType
    // 

    const UserDefinedLinearCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedLinearCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedLinearCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // LinearCharacteristicNominalBaseType
    // 

    const LinearCharacteristicNominalBaseType::TargetValue_optional& LinearCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    LinearCharacteristicNominalBaseType::TargetValue_optional& LinearCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void LinearCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void LinearCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void LinearCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // UserDefinedLinearCharacteristicNominalType
    // 


    // LinearCharacteristicActualBaseType
    // 

    const LinearCharacteristicActualBaseType::Value_optional& LinearCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    LinearCharacteristicActualBaseType::Value_optional& LinearCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void LinearCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void LinearCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void LinearCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const LinearCharacteristicActualBaseType::MaxValue_optional& LinearCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    LinearCharacteristicActualBaseType::MaxValue_optional& LinearCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void LinearCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void LinearCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void LinearCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const LinearCharacteristicActualBaseType::MinValue_optional& LinearCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    LinearCharacteristicActualBaseType::MinValue_optional& LinearCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void LinearCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void LinearCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void LinearCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // UserDefinedLinearCharacteristicActualType
    // 


    // LinearCharacteristicItemBaseType
    // 


    // UserDefinedLinearCharacteristicItemType
    // 


    // AngularCharacteristicDefinitionBaseType
    // 

    const AngularCharacteristicDefinitionBaseType::Tolerance_optional& AngularCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    AngularCharacteristicDefinitionBaseType::Tolerance_optional& AngularCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void AngularCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void AngularCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void AngularCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const AngularCharacteristicDefinitionBaseType::NonTolerance_optional& AngularCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    AngularCharacteristicDefinitionBaseType::NonTolerance_optional& AngularCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void AngularCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void AngularCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void AngularCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // UserDefinedAngularCharacteristicDefinitionType
    // 

    const UserDefinedAngularCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedAngularCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedAngularCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // AngularCharacteristicNominalBaseType
    // 

    const AngularCharacteristicNominalBaseType::TargetValue_optional& AngularCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    AngularCharacteristicNominalBaseType::TargetValue_optional& AngularCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void AngularCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void AngularCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void AngularCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // UserDefinedAngularCharacteristicNominalType
    // 


    // AngularCharacteristicActualBaseType
    // 

    const AngularCharacteristicActualBaseType::Value_optional& AngularCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    AngularCharacteristicActualBaseType::Value_optional& AngularCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void AngularCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void AngularCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void AngularCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const AngularCharacteristicActualBaseType::MaxValue_optional& AngularCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    AngularCharacteristicActualBaseType::MaxValue_optional& AngularCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void AngularCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void AngularCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void AngularCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const AngularCharacteristicActualBaseType::MinValue_optional& AngularCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    AngularCharacteristicActualBaseType::MinValue_optional& AngularCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void AngularCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void AngularCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void AngularCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // UserDefinedAngularCharacteristicActualType
    // 


    // AngularCharacteristicItemBaseType
    // 


    // UserDefinedAngularCharacteristicItemType
    // 


    // TemperatureCharacteristicDefinitionBaseType
    // 

    const TemperatureCharacteristicDefinitionBaseType::Tolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    TemperatureCharacteristicDefinitionBaseType::Tolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void TemperatureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const TemperatureCharacteristicDefinitionBaseType::NonTolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    TemperatureCharacteristicDefinitionBaseType::NonTolerance_optional& TemperatureCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void TemperatureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void TemperatureCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // TemperatureCharacteristicNominalBaseType
    // 

    const TemperatureCharacteristicNominalBaseType::TargetValue_optional& TemperatureCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    TemperatureCharacteristicNominalBaseType::TargetValue_optional& TemperatureCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void TemperatureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void TemperatureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void TemperatureCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // TemperatureCharacteristicActualBaseType
    // 

    const TemperatureCharacteristicActualBaseType::Value_optional& TemperatureCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    TemperatureCharacteristicActualBaseType::Value_optional& TemperatureCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void TemperatureCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void TemperatureCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void TemperatureCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const TemperatureCharacteristicActualBaseType::MaxValue_optional& TemperatureCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    TemperatureCharacteristicActualBaseType::MaxValue_optional& TemperatureCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void TemperatureCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void TemperatureCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void TemperatureCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const TemperatureCharacteristicActualBaseType::MinValue_optional& TemperatureCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    TemperatureCharacteristicActualBaseType::MinValue_optional& TemperatureCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void TemperatureCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void TemperatureCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void TemperatureCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // TemperatureCharacteristicItemBaseType
    // 


    // UserDefinedTemperatureCharacteristicDefinitionType
    // 

    const UserDefinedTemperatureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedTemperatureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedTemperatureCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedTemperatureCharacteristicNominalType
    // 


    // UserDefinedTemperatureCharacteristicActualType
    // 


    // UserDefinedTemperatureCharacteristicItemType
    // 


    // AreaCharacteristicDefinitionBaseType
    // 

    const AreaCharacteristicDefinitionBaseType::Tolerance_optional& AreaCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    AreaCharacteristicDefinitionBaseType::Tolerance_optional& AreaCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void AreaCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void AreaCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void AreaCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const AreaCharacteristicDefinitionBaseType::NonTolerance_optional& AreaCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    AreaCharacteristicDefinitionBaseType::NonTolerance_optional& AreaCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void AreaCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void AreaCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void AreaCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // AreaCharacteristicNominalBaseType
    // 

    const AreaCharacteristicNominalBaseType::TargetValue_optional& AreaCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    AreaCharacteristicNominalBaseType::TargetValue_optional& AreaCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void AreaCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void AreaCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void AreaCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // AreaCharacteristicActualBaseType
    // 

    const AreaCharacteristicActualBaseType::Value_optional& AreaCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    AreaCharacteristicActualBaseType::Value_optional& AreaCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void AreaCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void AreaCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void AreaCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const AreaCharacteristicActualBaseType::MaxValue_optional& AreaCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    AreaCharacteristicActualBaseType::MaxValue_optional& AreaCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void AreaCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void AreaCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void AreaCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const AreaCharacteristicActualBaseType::MinValue_optional& AreaCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    AreaCharacteristicActualBaseType::MinValue_optional& AreaCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void AreaCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void AreaCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void AreaCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // AreaCharacteristicItemBaseType
    // 


    // UserDefinedAreaCharacteristicDefinitionType
    // 

    const UserDefinedAreaCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedAreaCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedAreaCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedAreaCharacteristicNominalType
    // 


    // UserDefinedAreaCharacteristicActualType
    // 


    // UserDefinedAreaCharacteristicItemType
    // 


    // ForceCharacteristicDefinitionBaseType
    // 

    const ForceCharacteristicDefinitionBaseType::Tolerance_optional& ForceCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    ForceCharacteristicDefinitionBaseType::Tolerance_optional& ForceCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void ForceCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void ForceCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void ForceCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const ForceCharacteristicDefinitionBaseType::NonTolerance_optional& ForceCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    ForceCharacteristicDefinitionBaseType::NonTolerance_optional& ForceCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void ForceCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void ForceCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void ForceCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // ForceCharacteristicNominalBaseType
    // 

    const ForceCharacteristicNominalBaseType::TargetValue_optional& ForceCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    ForceCharacteristicNominalBaseType::TargetValue_optional& ForceCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void ForceCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void ForceCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void ForceCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // ForceCharacteristicActualBaseType
    // 

    const ForceCharacteristicActualBaseType::Value_optional& ForceCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    ForceCharacteristicActualBaseType::Value_optional& ForceCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void ForceCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void ForceCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void ForceCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const ForceCharacteristicActualBaseType::MaxValue_optional& ForceCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    ForceCharacteristicActualBaseType::MaxValue_optional& ForceCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void ForceCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void ForceCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void ForceCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const ForceCharacteristicActualBaseType::MinValue_optional& ForceCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    ForceCharacteristicActualBaseType::MinValue_optional& ForceCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void ForceCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void ForceCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void ForceCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // ForceCharacteristicItemBaseType
    // 


    // UserDefinedForceCharacteristicDefinitionType
    // 

    const UserDefinedForceCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedForceCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedForceCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedForceCharacteristicNominalType
    // 


    // UserDefinedForceCharacteristicActualType
    // 


    // UserDefinedForceCharacteristicItemType
    // 


    // MassCharacteristicDefinitionBaseType
    // 

    const MassCharacteristicDefinitionBaseType::Tolerance_optional& MassCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    MassCharacteristicDefinitionBaseType::Tolerance_optional& MassCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void MassCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void MassCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void MassCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const MassCharacteristicDefinitionBaseType::NonTolerance_optional& MassCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    MassCharacteristicDefinitionBaseType::NonTolerance_optional& MassCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void MassCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void MassCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void MassCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // MassCharacteristicNominalBaseType
    // 

    const MassCharacteristicNominalBaseType::TargetValue_optional& MassCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    MassCharacteristicNominalBaseType::TargetValue_optional& MassCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void MassCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void MassCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void MassCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // MassCharacteristicActualBaseType
    // 

    const MassCharacteristicActualBaseType::Value_optional& MassCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    MassCharacteristicActualBaseType::Value_optional& MassCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void MassCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void MassCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void MassCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const MassCharacteristicActualBaseType::MaxValue_optional& MassCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    MassCharacteristicActualBaseType::MaxValue_optional& MassCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void MassCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void MassCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void MassCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const MassCharacteristicActualBaseType::MinValue_optional& MassCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    MassCharacteristicActualBaseType::MinValue_optional& MassCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void MassCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void MassCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void MassCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // MassCharacteristicItemBaseType
    // 


    // UserDefinedMassCharacteristicDefinitionType
    // 

    const UserDefinedMassCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedMassCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedMassCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedMassCharacteristicNominalType
    // 


    // UserDefinedMassCharacteristicActualType
    // 


    // UserDefinedMassCharacteristicItemType
    // 


    // PressureCharacteristicDefinitionBaseType
    // 

    const PressureCharacteristicDefinitionBaseType::Tolerance_optional& PressureCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    PressureCharacteristicDefinitionBaseType::Tolerance_optional& PressureCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void PressureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void PressureCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void PressureCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const PressureCharacteristicDefinitionBaseType::NonTolerance_optional& PressureCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    PressureCharacteristicDefinitionBaseType::NonTolerance_optional& PressureCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void PressureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void PressureCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void PressureCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // PressureCharacteristicNominalBaseType
    // 

    const PressureCharacteristicNominalBaseType::TargetValue_optional& PressureCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    PressureCharacteristicNominalBaseType::TargetValue_optional& PressureCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void PressureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void PressureCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void PressureCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // PressureCharacteristicActualBaseType
    // 

    const PressureCharacteristicActualBaseType::Value_optional& PressureCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    PressureCharacteristicActualBaseType::Value_optional& PressureCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void PressureCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void PressureCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void PressureCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const PressureCharacteristicActualBaseType::MaxValue_optional& PressureCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    PressureCharacteristicActualBaseType::MaxValue_optional& PressureCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void PressureCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void PressureCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void PressureCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const PressureCharacteristicActualBaseType::MinValue_optional& PressureCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    PressureCharacteristicActualBaseType::MinValue_optional& PressureCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void PressureCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void PressureCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void PressureCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // PressureCharacteristicItemBaseType
    // 


    // UserDefinedPressureCharacteristicDefinitionType
    // 

    const UserDefinedPressureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedPressureCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedPressureCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedPressureCharacteristicNominalType
    // 


    // UserDefinedPressureCharacteristicActualType
    // 


    // UserDefinedPressureCharacteristicItemType
    // 


    // SpeedCharacteristicDefinitionBaseType
    // 

    const SpeedCharacteristicDefinitionBaseType::Tolerance_optional& SpeedCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    SpeedCharacteristicDefinitionBaseType::Tolerance_optional& SpeedCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void SpeedCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void SpeedCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void SpeedCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const SpeedCharacteristicDefinitionBaseType::NonTolerance_optional& SpeedCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    SpeedCharacteristicDefinitionBaseType::NonTolerance_optional& SpeedCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void SpeedCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void SpeedCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void SpeedCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // SpeedCharacteristicNominalBaseType
    // 

    const SpeedCharacteristicNominalBaseType::TargetValue_optional& SpeedCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    SpeedCharacteristicNominalBaseType::TargetValue_optional& SpeedCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void SpeedCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void SpeedCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void SpeedCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // SpeedCharacteristicActualBaseType
    // 

    const SpeedCharacteristicActualBaseType::Value_optional& SpeedCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    SpeedCharacteristicActualBaseType::Value_optional& SpeedCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void SpeedCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void SpeedCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void SpeedCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const SpeedCharacteristicActualBaseType::MaxValue_optional& SpeedCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    SpeedCharacteristicActualBaseType::MaxValue_optional& SpeedCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void SpeedCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void SpeedCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void SpeedCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const SpeedCharacteristicActualBaseType::MinValue_optional& SpeedCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    SpeedCharacteristicActualBaseType::MinValue_optional& SpeedCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void SpeedCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void SpeedCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void SpeedCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // SpeedCharacteristicItemBaseType
    // 


    // UserDefinedSpeedCharacteristicDefinitionType
    // 

    const UserDefinedSpeedCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedSpeedCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedSpeedCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedSpeedCharacteristicNominalType
    // 


    // UserDefinedSpeedCharacteristicActualType
    // 


    // UserDefinedSpeedCharacteristicItemType
    // 


    // TimeCharacteristicDefinitionBaseType
    // 

    const TimeCharacteristicDefinitionBaseType::Tolerance_optional& TimeCharacteristicDefinitionBaseType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    TimeCharacteristicDefinitionBaseType::Tolerance_optional& TimeCharacteristicDefinitionBaseType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void TimeCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void TimeCharacteristicDefinitionBaseType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void TimeCharacteristicDefinitionBaseType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const TimeCharacteristicDefinitionBaseType::NonTolerance_optional& TimeCharacteristicDefinitionBaseType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    TimeCharacteristicDefinitionBaseType::NonTolerance_optional& TimeCharacteristicDefinitionBaseType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void TimeCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void TimeCharacteristicDefinitionBaseType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void TimeCharacteristicDefinitionBaseType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // TimeCharacteristicNominalBaseType
    // 

    const TimeCharacteristicNominalBaseType::TargetValue_optional& TimeCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    TimeCharacteristicNominalBaseType::TargetValue_optional& TimeCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void TimeCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void TimeCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void TimeCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // TimeCharacteristicActualBaseType
    // 

    const TimeCharacteristicActualBaseType::Value_optional& TimeCharacteristicActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    TimeCharacteristicActualBaseType::Value_optional& TimeCharacteristicActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void TimeCharacteristicActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void TimeCharacteristicActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void TimeCharacteristicActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const TimeCharacteristicActualBaseType::MaxValue_optional& TimeCharacteristicActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    TimeCharacteristicActualBaseType::MaxValue_optional& TimeCharacteristicActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void TimeCharacteristicActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void TimeCharacteristicActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void TimeCharacteristicActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const TimeCharacteristicActualBaseType::MinValue_optional& TimeCharacteristicActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    TimeCharacteristicActualBaseType::MinValue_optional& TimeCharacteristicActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void TimeCharacteristicActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void TimeCharacteristicActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void TimeCharacteristicActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // TimeCharacteristicItemBaseType
    // 


    // UserDefinedTimeCharacteristicDefinitionType
    // 

    const UserDefinedTimeCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure () const
    {
      return this->WhatToMeasure_.get ();
    }

    UserDefinedTimeCharacteristicDefinitionType::WhatToMeasure_type& UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure ()
    {
      return this->WhatToMeasure_.get ();
    }

    void UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure (const WhatToMeasure_type& x)
    {
      this->WhatToMeasure_.set (x);
    }

    void UserDefinedTimeCharacteristicDefinitionType::
    WhatToMeasure (::std::auto_ptr< WhatToMeasure_type > x)
    {
      this->WhatToMeasure_.set (x);
    }


    // UserDefinedTimeCharacteristicNominalType
    // 


    // UserDefinedTimeCharacteristicActualType
    // 


    // UserDefinedTimeCharacteristicItemType
    // 


    // UserDefinedUnitCharacteristicDefinitionType
    // 


    // UserDefinedUnitCharacteristicNominalType
    // 

    const UserDefinedUnitCharacteristicNominalType::TargetValue_type& UserDefinedUnitCharacteristicNominalType::
    TargetValue () const
    {
      return this->TargetValue_.get ();
    }

    UserDefinedUnitCharacteristicNominalType::TargetValue_type& UserDefinedUnitCharacteristicNominalType::
    TargetValue ()
    {
      return this->TargetValue_.get ();
    }

    void UserDefinedUnitCharacteristicNominalType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void UserDefinedUnitCharacteristicNominalType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }

    const UserDefinedUnitCharacteristicNominalType::MaxValue_optional& UserDefinedUnitCharacteristicNominalType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    UserDefinedUnitCharacteristicNominalType::MaxValue_optional& UserDefinedUnitCharacteristicNominalType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void UserDefinedUnitCharacteristicNominalType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const UserDefinedUnitCharacteristicNominalType::MinValue_optional& UserDefinedUnitCharacteristicNominalType::
    MinValue () const
    {
      return this->MinValue_;
    }

    UserDefinedUnitCharacteristicNominalType::MinValue_optional& UserDefinedUnitCharacteristicNominalType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void UserDefinedUnitCharacteristicNominalType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void UserDefinedUnitCharacteristicNominalType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }

    const UserDefinedUnitCharacteristicNominalType::DefinedAsLimit_type& UserDefinedUnitCharacteristicNominalType::
    DefinedAsLimit () const
    {
      return this->DefinedAsLimit_.get ();
    }

    UserDefinedUnitCharacteristicNominalType::DefinedAsLimit_type& UserDefinedUnitCharacteristicNominalType::
    DefinedAsLimit ()
    {
      return this->DefinedAsLimit_.get ();
    }

    void UserDefinedUnitCharacteristicNominalType::
    DefinedAsLimit (const DefinedAsLimit_type& x)
    {
      this->DefinedAsLimit_.set (x);
    }


    // UserDefinedUnitCharacteristicActualType
    // 

    const UserDefinedUnitCharacteristicActualType::Value_optional& UserDefinedUnitCharacteristicActualType::
    Value () const
    {
      return this->Value_;
    }

    UserDefinedUnitCharacteristicActualType::Value_optional& UserDefinedUnitCharacteristicActualType::
    Value ()
    {
      return this->Value_;
    }

    void UserDefinedUnitCharacteristicActualType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void UserDefinedUnitCharacteristicActualType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void UserDefinedUnitCharacteristicActualType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const UserDefinedUnitCharacteristicActualType::MaxValue_optional& UserDefinedUnitCharacteristicActualType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    UserDefinedUnitCharacteristicActualType::MaxValue_optional& UserDefinedUnitCharacteristicActualType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void UserDefinedUnitCharacteristicActualType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void UserDefinedUnitCharacteristicActualType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void UserDefinedUnitCharacteristicActualType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const UserDefinedUnitCharacteristicActualType::MinValue_optional& UserDefinedUnitCharacteristicActualType::
    MinValue () const
    {
      return this->MinValue_;
    }

    UserDefinedUnitCharacteristicActualType::MinValue_optional& UserDefinedUnitCharacteristicActualType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void UserDefinedUnitCharacteristicActualType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void UserDefinedUnitCharacteristicActualType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void UserDefinedUnitCharacteristicActualType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // UserDefinedUnitCharacteristicItemType
    // 


    // CompositeSegmentDefinitionBaseType
    // 

    const CompositeSegmentDefinitionBaseType::DatumReferenceFrameId_type& CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_.get ();
    }

    CompositeSegmentDefinitionBaseType::DatumReferenceFrameId_type& CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_.get ();
    }

    void CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void CompositeSegmentDefinitionBaseType::
    DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    const CompositeSegmentDefinitionBaseType::ToleranceValue_type& CompositeSegmentDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    CompositeSegmentDefinitionBaseType::ToleranceValue_type& CompositeSegmentDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void CompositeSegmentDefinitionBaseType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }


    // CompositeSegmentActualBaseType
    // 

    const CompositeSegmentActualBaseType::Value_optional& CompositeSegmentActualBaseType::
    Value () const
    {
      return this->Value_;
    }

    CompositeSegmentActualBaseType::Value_optional& CompositeSegmentActualBaseType::
    Value ()
    {
      return this->Value_;
    }

    void CompositeSegmentActualBaseType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void CompositeSegmentActualBaseType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void CompositeSegmentActualBaseType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const CompositeSegmentActualBaseType::MaxValue_optional& CompositeSegmentActualBaseType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    CompositeSegmentActualBaseType::MaxValue_optional& CompositeSegmentActualBaseType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void CompositeSegmentActualBaseType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void CompositeSegmentActualBaseType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void CompositeSegmentActualBaseType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const CompositeSegmentActualBaseType::MinValue_optional& CompositeSegmentActualBaseType::
    MinValue () const
    {
      return this->MinValue_;
    }

    CompositeSegmentActualBaseType::MinValue_optional& CompositeSegmentActualBaseType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void CompositeSegmentActualBaseType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void CompositeSegmentActualBaseType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void CompositeSegmentActualBaseType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }

    const CompositeSegmentActualBaseType::Status_type& CompositeSegmentActualBaseType::
    Status () const
    {
      return this->Status_.get ();
    }

    CompositeSegmentActualBaseType::Status_type& CompositeSegmentActualBaseType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CompositeSegmentActualBaseType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CompositeSegmentActualBaseType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const CompositeSegmentActualBaseType::DRFTransformActualId_optional& CompositeSegmentActualBaseType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    CompositeSegmentActualBaseType::DRFTransformActualId_optional& CompositeSegmentActualBaseType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void CompositeSegmentActualBaseType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void CompositeSegmentActualBaseType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void CompositeSegmentActualBaseType::
    DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (x);
    }

    const CompositeSegmentActualBaseType::ZoneData_sequence& CompositeSegmentActualBaseType::
    ZoneData () const
    {
      return this->ZoneData_;
    }

    CompositeSegmentActualBaseType::ZoneData_sequence& CompositeSegmentActualBaseType::
    ZoneData ()
    {
      return this->ZoneData_;
    }

    void CompositeSegmentActualBaseType::
    ZoneData (const ZoneData_sequence& s)
    {
      this->ZoneData_ = s;
    }


    // CompositeSegmentPositionDefinitionType
    // 

    const CompositeSegmentPositionDefinitionType::MaterialCondition_type& CompositeSegmentPositionDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_.get ();
    }

    CompositeSegmentPositionDefinitionType::MaterialCondition_type& CompositeSegmentPositionDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_.get ();
    }

    void CompositeSegmentPositionDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    MaterialCondition (::std::auto_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (x);
    }

    const CompositeSegmentPositionDefinitionType::ZoneShape_type& CompositeSegmentPositionDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    CompositeSegmentPositionDefinitionType::ZoneShape_type& CompositeSegmentPositionDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void CompositeSegmentPositionDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    ZoneShape (::std::auto_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (x);
    }

    const CompositeSegmentPositionDefinitionType::ProjectedToleranceZone_optional& CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone () const
    {
      return this->ProjectedToleranceZone_;
    }

    CompositeSegmentPositionDefinitionType::ProjectedToleranceZone_optional& CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone ()
    {
      return this->ProjectedToleranceZone_;
    }

    void CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone (const ProjectedToleranceZone_type& x)
    {
      this->ProjectedToleranceZone_.set (x);
    }

    void CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone (const ProjectedToleranceZone_optional& x)
    {
      this->ProjectedToleranceZone_ = x;
    }

    void CompositeSegmentPositionDefinitionType::
    ProjectedToleranceZone (::std::auto_ptr< ProjectedToleranceZone_type > x)
    {
      this->ProjectedToleranceZone_.set (x);
    }


    // CompositeSegmentPositionActualType
    // 


    // CompositeSegmentProfileDefinitionType
    // 

    const CompositeSegmentProfileDefinitionType::OuterDisposition_optional& CompositeSegmentProfileDefinitionType::
    OuterDisposition () const
    {
      return this->OuterDisposition_;
    }

    CompositeSegmentProfileDefinitionType::OuterDisposition_optional& CompositeSegmentProfileDefinitionType::
    OuterDisposition ()
    {
      return this->OuterDisposition_;
    }

    void CompositeSegmentProfileDefinitionType::
    OuterDisposition (const OuterDisposition_type& x)
    {
      this->OuterDisposition_.set (x);
    }

    void CompositeSegmentProfileDefinitionType::
    OuterDisposition (const OuterDisposition_optional& x)
    {
      this->OuterDisposition_ = x;
    }

    void CompositeSegmentProfileDefinitionType::
    OuterDisposition (::std::auto_ptr< OuterDisposition_type > x)
    {
      this->OuterDisposition_.set (x);
    }


    // CompositeSegmentProfileActualType
    // 


    // CompositeSegmentSymmetryDefinitionType
    // 


    // CompositeSegmentSymmetryActualType
    // 


    // OriginReferenceType
    // 

    const OriginReferenceType::FeatureItemId_optional& OriginReferenceType::
    FeatureItemId () const
    {
      return this->FeatureItemId_;
    }

    OriginReferenceType::FeatureItemId_optional& OriginReferenceType::
    FeatureItemId ()
    {
      return this->FeatureItemId_;
    }

    void OriginReferenceType::
    FeatureItemId (const FeatureItemId_type& x)
    {
      this->FeatureItemId_.set (x);
    }

    void OriginReferenceType::
    FeatureItemId (const FeatureItemId_optional& x)
    {
      this->FeatureItemId_ = x;
    }

    void OriginReferenceType::
    FeatureItemId (::std::auto_ptr< FeatureItemId_type > x)
    {
      this->FeatureItemId_.set (x);
    }

    const OriginReferenceType::ReferencedComponent_optional& OriginReferenceType::
    ReferencedComponent () const
    {
      return this->ReferencedComponent_;
    }

    OriginReferenceType::ReferencedComponent_optional& OriginReferenceType::
    ReferencedComponent ()
    {
      return this->ReferencedComponent_;
    }

    void OriginReferenceType::
    ReferencedComponent (const ReferencedComponent_type& x)
    {
      this->ReferencedComponent_.set (x);
    }

    void OriginReferenceType::
    ReferencedComponent (const ReferencedComponent_optional& x)
    {
      this->ReferencedComponent_ = x;
    }

    void OriginReferenceType::
    ReferencedComponent (::std::auto_ptr< ReferencedComponent_type > x)
    {
      this->ReferencedComponent_.set (x);
    }

    const OriginReferenceType::DatumDefinitionId_optional& OriginReferenceType::
    DatumDefinitionId () const
    {
      return this->DatumDefinitionId_;
    }

    OriginReferenceType::DatumDefinitionId_optional& OriginReferenceType::
    DatumDefinitionId ()
    {
      return this->DatumDefinitionId_;
    }

    void OriginReferenceType::
    DatumDefinitionId (const DatumDefinitionId_type& x)
    {
      this->DatumDefinitionId_.set (x);
    }

    void OriginReferenceType::
    DatumDefinitionId (const DatumDefinitionId_optional& x)
    {
      this->DatumDefinitionId_ = x;
    }

    void OriginReferenceType::
    DatumDefinitionId (::std::auto_ptr< DatumDefinitionId_type > x)
    {
      this->DatumDefinitionId_.set (x);
    }


    // SurfaceTextureCharacteristicDefinitionType
    // 

    const SurfaceTextureCharacteristicDefinitionType::RoughnessAverage_type& SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage () const
    {
      return this->RoughnessAverage_.get ();
    }

    SurfaceTextureCharacteristicDefinitionType::RoughnessAverage_type& SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage ()
    {
      return this->RoughnessAverage_.get ();
    }

    void SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage (const RoughnessAverage_type& x)
    {
      this->RoughnessAverage_.set (x);
    }

    void SurfaceTextureCharacteristicDefinitionType::
    RoughnessAverage (::std::auto_ptr< RoughnessAverage_type > x)
    {
      this->RoughnessAverage_.set (x);
    }


    // SurfaceTextureCharacteristicNominalType
    // 


    // SurfaceTextureCharacteristicActualType
    // 

    const SurfaceTextureCharacteristicActualType::RoughnessAverageValue_optional& SurfaceTextureCharacteristicActualType::
    RoughnessAverageValue () const
    {
      return this->RoughnessAverageValue_;
    }

    SurfaceTextureCharacteristicActualType::RoughnessAverageValue_optional& SurfaceTextureCharacteristicActualType::
    RoughnessAverageValue ()
    {
      return this->RoughnessAverageValue_;
    }

    void SurfaceTextureCharacteristicActualType::
    RoughnessAverageValue (const RoughnessAverageValue_type& x)
    {
      this->RoughnessAverageValue_.set (x);
    }

    void SurfaceTextureCharacteristicActualType::
    RoughnessAverageValue (const RoughnessAverageValue_optional& x)
    {
      this->RoughnessAverageValue_ = x;
    }

    void SurfaceTextureCharacteristicActualType::
    RoughnessAverageValue (::std::auto_ptr< RoughnessAverageValue_type > x)
    {
      this->RoughnessAverageValue_.set (x);
    }


    // SurfaceTextureCharacteristicItemType
    // 


    // OrientationDiametricalZoneType
    // 

    const OrientationDiametricalZoneType::ZoneOrientationVector_optional& OrientationDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    OrientationDiametricalZoneType::ZoneOrientationVector_optional& OrientationDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void OrientationDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void OrientationDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void OrientationDiametricalZoneType::
    ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (x);
    }


    // OrientationPlanarZoneType
    // 

    const OrientationPlanarZoneType::ZoneOrientationVector_optional& OrientationPlanarZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    OrientationPlanarZoneType::ZoneOrientationVector_optional& OrientationPlanarZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void OrientationPlanarZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void OrientationPlanarZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void OrientationPlanarZoneType::
    ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (x);
    }


    // OrientationZoneShapeType
    // 

    const OrientationZoneShapeType::DiametricalZone_optional& OrientationZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    OrientationZoneShapeType::DiametricalZone_optional& OrientationZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void OrientationZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void OrientationZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void OrientationZoneShapeType::
    DiametricalZone (::std::auto_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (x);
    }

    const OrientationZoneShapeType::PlanarZone_optional& OrientationZoneShapeType::
    PlanarZone () const
    {
      return this->PlanarZone_;
    }

    OrientationZoneShapeType::PlanarZone_optional& OrientationZoneShapeType::
    PlanarZone ()
    {
      return this->PlanarZone_;
    }

    void OrientationZoneShapeType::
    PlanarZone (const PlanarZone_type& x)
    {
      this->PlanarZone_.set (x);
    }

    void OrientationZoneShapeType::
    PlanarZone (const PlanarZone_optional& x)
    {
      this->PlanarZone_ = x;
    }

    void OrientationZoneShapeType::
    PlanarZone (::std::auto_ptr< PlanarZone_type > x)
    {
      this->PlanarZone_.set (x);
    }


    // OrientationCharacteristicItemBaseType
    // 


    // OrientationCharacteristicDefinitionBaseType
    // 

    const OrientationCharacteristicDefinitionBaseType::ToleranceValue_type& OrientationCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::ToleranceValue_type& OrientationCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const OrientationCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    const OrientationCharacteristicDefinitionBaseType::MaterialCondition_type& OrientationCharacteristicDefinitionBaseType::
    MaterialCondition () const
    {
      return this->MaterialCondition_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::MaterialCondition_type& OrientationCharacteristicDefinitionBaseType::
    MaterialCondition ()
    {
      return this->MaterialCondition_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaterialCondition (::std::auto_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (x);
    }

    const OrientationCharacteristicDefinitionBaseType::ZoneShape_type& OrientationCharacteristicDefinitionBaseType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    OrientationCharacteristicDefinitionBaseType::ZoneShape_type& OrientationCharacteristicDefinitionBaseType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void OrientationCharacteristicDefinitionBaseType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ZoneShape (::std::auto_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (x);
    }

    const OrientationCharacteristicDefinitionBaseType::TangentPlane_optional& OrientationCharacteristicDefinitionBaseType::
    TangentPlane () const
    {
      return this->TangentPlane_;
    }

    OrientationCharacteristicDefinitionBaseType::TangentPlane_optional& OrientationCharacteristicDefinitionBaseType::
    TangentPlane ()
    {
      return this->TangentPlane_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    TangentPlane (const TangentPlane_type& x)
    {
      this->TangentPlane_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    TangentPlane (const TangentPlane_optional& x)
    {
      this->TangentPlane_ = x;
    }

    const OrientationCharacteristicDefinitionBaseType::MaximumToleranceValue_optional& OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue () const
    {
      return this->MaximumToleranceValue_;
    }

    OrientationCharacteristicDefinitionBaseType::MaximumToleranceValue_optional& OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue ()
    {
      return this->MaximumToleranceValue_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue (const MaximumToleranceValue_type& x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue (const MaximumToleranceValue_optional& x)
    {
      this->MaximumToleranceValue_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    MaximumToleranceValue (::std::auto_ptr< MaximumToleranceValue_type > x)
    {
      this->MaximumToleranceValue_.set (x);
    }

    const OrientationCharacteristicDefinitionBaseType::ProjectedToleranceZoneValue_optional& OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue () const
    {
      return this->ProjectedToleranceZoneValue_;
    }

    OrientationCharacteristicDefinitionBaseType::ProjectedToleranceZoneValue_optional& OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue ()
    {
      return this->ProjectedToleranceZoneValue_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_type& x)
    {
      this->ProjectedToleranceZoneValue_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_optional& x)
    {
      this->ProjectedToleranceZoneValue_ = x;
    }

    void OrientationCharacteristicDefinitionBaseType::
    ProjectedToleranceZoneValue (::std::auto_ptr< ProjectedToleranceZoneValue_type > x)
    {
      this->ProjectedToleranceZoneValue_.set (x);
    }

    const OrientationCharacteristicDefinitionBaseType::EachRadialElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachRadialElement () const
    {
      return this->EachRadialElement_;
    }

    OrientationCharacteristicDefinitionBaseType::EachRadialElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachRadialElement ()
    {
      return this->EachRadialElement_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachRadialElement (const EachRadialElement_type& x)
    {
      this->EachRadialElement_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachRadialElement (const EachRadialElement_optional& x)
    {
      this->EachRadialElement_ = x;
    }

    const OrientationCharacteristicDefinitionBaseType::EachElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachElement () const
    {
      return this->EachElement_;
    }

    OrientationCharacteristicDefinitionBaseType::EachElement_optional& OrientationCharacteristicDefinitionBaseType::
    EachElement ()
    {
      return this->EachElement_;
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachElement (const EachElement_type& x)
    {
      this->EachElement_.set (x);
    }

    void OrientationCharacteristicDefinitionBaseType::
    EachElement (const EachElement_optional& x)
    {
      this->EachElement_ = x;
    }


    // OrientationCharacteristicNominalBaseType
    // 

    const OrientationCharacteristicNominalBaseType::CircularZoneLimit_optional& OrientationCharacteristicNominalBaseType::
    CircularZoneLimit () const
    {
      return this->CircularZoneLimit_;
    }

    OrientationCharacteristicNominalBaseType::CircularZoneLimit_optional& OrientationCharacteristicNominalBaseType::
    CircularZoneLimit ()
    {
      return this->CircularZoneLimit_;
    }

    void OrientationCharacteristicNominalBaseType::
    CircularZoneLimit (const CircularZoneLimit_type& x)
    {
      this->CircularZoneLimit_.set (x);
    }

    void OrientationCharacteristicNominalBaseType::
    CircularZoneLimit (const CircularZoneLimit_optional& x)
    {
      this->CircularZoneLimit_ = x;
    }

    void OrientationCharacteristicNominalBaseType::
    CircularZoneLimit (::std::auto_ptr< CircularZoneLimit_type > x)
    {
      this->CircularZoneLimit_.set (x);
    }

    const OrientationCharacteristicNominalBaseType::DirectionalZoneLimit_optional& OrientationCharacteristicNominalBaseType::
    DirectionalZoneLimit () const
    {
      return this->DirectionalZoneLimit_;
    }

    OrientationCharacteristicNominalBaseType::DirectionalZoneLimit_optional& OrientationCharacteristicNominalBaseType::
    DirectionalZoneLimit ()
    {
      return this->DirectionalZoneLimit_;
    }

    void OrientationCharacteristicNominalBaseType::
    DirectionalZoneLimit (const DirectionalZoneLimit_type& x)
    {
      this->DirectionalZoneLimit_.set (x);
    }

    void OrientationCharacteristicNominalBaseType::
    DirectionalZoneLimit (const DirectionalZoneLimit_optional& x)
    {
      this->DirectionalZoneLimit_ = x;
    }

    void OrientationCharacteristicNominalBaseType::
    DirectionalZoneLimit (::std::auto_ptr< DirectionalZoneLimit_type > x)
    {
      this->DirectionalZoneLimit_.set (x);
    }

    const OrientationCharacteristicNominalBaseType::RectangularZoneLimit_optional& OrientationCharacteristicNominalBaseType::
    RectangularZoneLimit () const
    {
      return this->RectangularZoneLimit_;
    }

    OrientationCharacteristicNominalBaseType::RectangularZoneLimit_optional& OrientationCharacteristicNominalBaseType::
    RectangularZoneLimit ()
    {
      return this->RectangularZoneLimit_;
    }

    void OrientationCharacteristicNominalBaseType::
    RectangularZoneLimit (const RectangularZoneLimit_type& x)
    {
      this->RectangularZoneLimit_.set (x);
    }

    void OrientationCharacteristicNominalBaseType::
    RectangularZoneLimit (const RectangularZoneLimit_optional& x)
    {
      this->RectangularZoneLimit_ = x;
    }

    void OrientationCharacteristicNominalBaseType::
    RectangularZoneLimit (::std::auto_ptr< RectangularZoneLimit_type > x)
    {
      this->RectangularZoneLimit_.set (x);
    }


    // OrientationCharacteristicActualBaseType
    // 

    const OrientationCharacteristicActualBaseType::DatumsOk_optional& OrientationCharacteristicActualBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    OrientationCharacteristicActualBaseType::DatumsOk_optional& OrientationCharacteristicActualBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void OrientationCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void OrientationCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }

    const OrientationCharacteristicActualBaseType::Bonus_optional& OrientationCharacteristicActualBaseType::
    Bonus () const
    {
      return this->Bonus_;
    }

    OrientationCharacteristicActualBaseType::Bonus_optional& OrientationCharacteristicActualBaseType::
    Bonus ()
    {
      return this->Bonus_;
    }

    void OrientationCharacteristicActualBaseType::
    Bonus (const Bonus_type& x)
    {
      this->Bonus_.set (x);
    }

    void OrientationCharacteristicActualBaseType::
    Bonus (const Bonus_optional& x)
    {
      this->Bonus_ = x;
    }

    void OrientationCharacteristicActualBaseType::
    Bonus (::std::auto_ptr< Bonus_type > x)
    {
      this->Bonus_.set (x);
    }

    const OrientationCharacteristicActualBaseType::ReferenceLength_optional& OrientationCharacteristicActualBaseType::
    ReferenceLength () const
    {
      return this->ReferenceLength_;
    }

    OrientationCharacteristicActualBaseType::ReferenceLength_optional& OrientationCharacteristicActualBaseType::
    ReferenceLength ()
    {
      return this->ReferenceLength_;
    }

    void OrientationCharacteristicActualBaseType::
    ReferenceLength (const ReferenceLength_type& x)
    {
      this->ReferenceLength_.set (x);
    }

    void OrientationCharacteristicActualBaseType::
    ReferenceLength (const ReferenceLength_optional& x)
    {
      this->ReferenceLength_ = x;
    }

    void OrientationCharacteristicActualBaseType::
    ReferenceLength (::std::auto_ptr< ReferenceLength_type > x)
    {
      this->ReferenceLength_.set (x);
    }

    const OrientationCharacteristicActualBaseType::DRFTransformActualId_optional& OrientationCharacteristicActualBaseType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    OrientationCharacteristicActualBaseType::DRFTransformActualId_optional& OrientationCharacteristicActualBaseType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void OrientationCharacteristicActualBaseType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void OrientationCharacteristicActualBaseType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void OrientationCharacteristicActualBaseType::
    DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (x);
    }


    // AngularityCharacteristicItemType
    // 


    // AngularityCharacteristicDefinitionType
    // 


    // AngularityCharacteristicNominalType
    // 

    const AngularityCharacteristicNominalType::Angle_optional& AngularityCharacteristicNominalType::
    Angle () const
    {
      return this->Angle_;
    }

    AngularityCharacteristicNominalType::Angle_optional& AngularityCharacteristicNominalType::
    Angle ()
    {
      return this->Angle_;
    }

    void AngularityCharacteristicNominalType::
    Angle (const Angle_type& x)
    {
      this->Angle_.set (x);
    }

    void AngularityCharacteristicNominalType::
    Angle (const Angle_optional& x)
    {
      this->Angle_ = x;
    }

    void AngularityCharacteristicNominalType::
    Angle (::std::auto_ptr< Angle_type > x)
    {
      this->Angle_.set (x);
    }


    // AngularityCharacteristicActualType
    // 


    // PerpendicularityCharacteristicItemType
    // 


    // PerpendicularityCharacteristicDefinitionType
    // 


    // PerpendicularityCharacteristicNominalType
    // 


    // PerpendicularityCharacteristicActualType
    // 


    // ParallelismCharacteristicItemType
    // 


    // ParallelismCharacteristicDefinitionType
    // 


    // ParallelismCharacteristicNominalType
    // 


    // ParallelismCharacteristicActualType
    // 


    // FormCharacteristicDefinitionBaseType
    // 


    // FormCharacteristicNominalBaseType
    // 


    // FormCharacteristicActualBaseType
    // 


    // FormCharacteristicItemBaseType
    // 


    // StraightnessDiametricalZoneType
    // 


    // StraightnessNonDiametricalZoneType
    // 

    const StraightnessNonDiametricalZoneType::ZoneOrientationVector_optional& StraightnessNonDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    StraightnessNonDiametricalZoneType::ZoneOrientationVector_optional& StraightnessNonDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void StraightnessNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void StraightnessNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void StraightnessNonDiametricalZoneType::
    ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (x);
    }


    // StraightnessZoneShapeType
    // 

    const StraightnessZoneShapeType::DiametricalZone_optional& StraightnessZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    StraightnessZoneShapeType::DiametricalZone_optional& StraightnessZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void StraightnessZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void StraightnessZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void StraightnessZoneShapeType::
    DiametricalZone (::std::auto_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (x);
    }

    const StraightnessZoneShapeType::NonDiametricalZone_optional& StraightnessZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    StraightnessZoneShapeType::NonDiametricalZone_optional& StraightnessZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void StraightnessZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void StraightnessZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void StraightnessZoneShapeType::
    NonDiametricalZone (::std::auto_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (x);
    }


    // StraightnessCharacteristicItemType
    // 


    // StraightnessCharacteristicDefinitionType
    // 

    const StraightnessCharacteristicDefinitionType::ToleranceValue_optional& StraightnessCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    StraightnessCharacteristicDefinitionType::ToleranceValue_optional& StraightnessCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const StraightnessCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength () const
    {
      return this->ToleranceZonePerUnitLength_;
    }

    StraightnessCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength ()
    {
      return this->ToleranceZonePerUnitLength_;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_type& x)
    {
      this->ToleranceZonePerUnitLength_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_optional& x)
    {
      this->ToleranceZonePerUnitLength_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (::std::auto_ptr< ToleranceZonePerUnitLength_type > x)
    {
      this->ToleranceZonePerUnitLength_.set (x);
    }

    const StraightnessCharacteristicDefinitionType::MaterialCondition_optional& StraightnessCharacteristicDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_;
    }

    StraightnessCharacteristicDefinitionType::MaterialCondition_optional& StraightnessCharacteristicDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_;
    }

    void StraightnessCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_optional& x)
    {
      this->MaterialCondition_ = x;
    }

    void StraightnessCharacteristicDefinitionType::
    MaterialCondition (::std::auto_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (x);
    }

    const StraightnessCharacteristicDefinitionType::ZoneShape_type& StraightnessCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    StraightnessCharacteristicDefinitionType::ZoneShape_type& StraightnessCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void StraightnessCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void StraightnessCharacteristicDefinitionType::
    ZoneShape (::std::auto_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (x);
    }


    // StraightnessCharacteristicNominalType
    // 

    const StraightnessCharacteristicNominalType::ZoneLimit_optional& StraightnessCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    StraightnessCharacteristicNominalType::ZoneLimit_optional& StraightnessCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void StraightnessCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void StraightnessCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void StraightnessCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // StraightnessCharacteristicActualType
    // 

    const StraightnessCharacteristicActualType::MaxStraightness_optional& StraightnessCharacteristicActualType::
    MaxStraightness () const
    {
      return this->MaxStraightness_;
    }

    StraightnessCharacteristicActualType::MaxStraightness_optional& StraightnessCharacteristicActualType::
    MaxStraightness ()
    {
      return this->MaxStraightness_;
    }

    void StraightnessCharacteristicActualType::
    MaxStraightness (const MaxStraightness_type& x)
    {
      this->MaxStraightness_.set (x);
    }

    void StraightnessCharacteristicActualType::
    MaxStraightness (const MaxStraightness_optional& x)
    {
      this->MaxStraightness_ = x;
    }

    void StraightnessCharacteristicActualType::
    MaxStraightness (::std::auto_ptr< MaxStraightness_type > x)
    {
      this->MaxStraightness_.set (x);
    }

    const StraightnessCharacteristicActualType::ZoneOrientation_optional& StraightnessCharacteristicActualType::
    ZoneOrientation () const
    {
      return this->ZoneOrientation_;
    }

    StraightnessCharacteristicActualType::ZoneOrientation_optional& StraightnessCharacteristicActualType::
    ZoneOrientation ()
    {
      return this->ZoneOrientation_;
    }

    void StraightnessCharacteristicActualType::
    ZoneOrientation (const ZoneOrientation_type& x)
    {
      this->ZoneOrientation_.set (x);
    }

    void StraightnessCharacteristicActualType::
    ZoneOrientation (const ZoneOrientation_optional& x)
    {
      this->ZoneOrientation_ = x;
    }

    void StraightnessCharacteristicActualType::
    ZoneOrientation (::std::auto_ptr< ZoneOrientation_type > x)
    {
      this->ZoneOrientation_.set (x);
    }

    const StraightnessCharacteristicActualType::ZoneLine_optional& StraightnessCharacteristicActualType::
    ZoneLine () const
    {
      return this->ZoneLine_;
    }

    StraightnessCharacteristicActualType::ZoneLine_optional& StraightnessCharacteristicActualType::
    ZoneLine ()
    {
      return this->ZoneLine_;
    }

    void StraightnessCharacteristicActualType::
    ZoneLine (const ZoneLine_type& x)
    {
      this->ZoneLine_.set (x);
    }

    void StraightnessCharacteristicActualType::
    ZoneLine (const ZoneLine_optional& x)
    {
      this->ZoneLine_ = x;
    }

    void StraightnessCharacteristicActualType::
    ZoneLine (::std::auto_ptr< ZoneLine_type > x)
    {
      this->ZoneLine_.set (x);
    }


    // FlatnessCharacteristicItemType
    // 


    // FlatnessCharacteristicDefinitionType
    // 

    const FlatnessCharacteristicDefinitionType::ToleranceValue_optional& FlatnessCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    FlatnessCharacteristicDefinitionType::ToleranceValue_optional& FlatnessCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const FlatnessCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea () const
    {
      return this->ToleranceZonePerUnitArea_;
    }

    FlatnessCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea ()
    {
      return this->ToleranceZonePerUnitArea_;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_type& x)
    {
      this->ToleranceZonePerUnitArea_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_optional& x)
    {
      this->ToleranceZonePerUnitArea_ = x;
    }

    void FlatnessCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (::std::auto_ptr< ToleranceZonePerUnitArea_type > x)
    {
      this->ToleranceZonePerUnitArea_.set (x);
    }

    const FlatnessCharacteristicDefinitionType::NotConvex_optional& FlatnessCharacteristicDefinitionType::
    NotConvex () const
    {
      return this->NotConvex_;
    }

    FlatnessCharacteristicDefinitionType::NotConvex_optional& FlatnessCharacteristicDefinitionType::
    NotConvex ()
    {
      return this->NotConvex_;
    }

    void FlatnessCharacteristicDefinitionType::
    NotConvex (const NotConvex_type& x)
    {
      this->NotConvex_.set (x);
    }

    void FlatnessCharacteristicDefinitionType::
    NotConvex (const NotConvex_optional& x)
    {
      this->NotConvex_ = x;
    }


    // FlatnessCharacteristicNominalType
    // 

    const FlatnessCharacteristicNominalType::CircularZoneLimit_optional& FlatnessCharacteristicNominalType::
    CircularZoneLimit () const
    {
      return this->CircularZoneLimit_;
    }

    FlatnessCharacteristicNominalType::CircularZoneLimit_optional& FlatnessCharacteristicNominalType::
    CircularZoneLimit ()
    {
      return this->CircularZoneLimit_;
    }

    void FlatnessCharacteristicNominalType::
    CircularZoneLimit (const CircularZoneLimit_type& x)
    {
      this->CircularZoneLimit_.set (x);
    }

    void FlatnessCharacteristicNominalType::
    CircularZoneLimit (const CircularZoneLimit_optional& x)
    {
      this->CircularZoneLimit_ = x;
    }

    void FlatnessCharacteristicNominalType::
    CircularZoneLimit (::std::auto_ptr< CircularZoneLimit_type > x)
    {
      this->CircularZoneLimit_.set (x);
    }

    const FlatnessCharacteristicNominalType::DirectionalZoneLimit_optional& FlatnessCharacteristicNominalType::
    DirectionalZoneLimit () const
    {
      return this->DirectionalZoneLimit_;
    }

    FlatnessCharacteristicNominalType::DirectionalZoneLimit_optional& FlatnessCharacteristicNominalType::
    DirectionalZoneLimit ()
    {
      return this->DirectionalZoneLimit_;
    }

    void FlatnessCharacteristicNominalType::
    DirectionalZoneLimit (const DirectionalZoneLimit_type& x)
    {
      this->DirectionalZoneLimit_.set (x);
    }

    void FlatnessCharacteristicNominalType::
    DirectionalZoneLimit (const DirectionalZoneLimit_optional& x)
    {
      this->DirectionalZoneLimit_ = x;
    }

    void FlatnessCharacteristicNominalType::
    DirectionalZoneLimit (::std::auto_ptr< DirectionalZoneLimit_type > x)
    {
      this->DirectionalZoneLimit_.set (x);
    }

    const FlatnessCharacteristicNominalType::RectangularZoneLimit_optional& FlatnessCharacteristicNominalType::
    RectangularZoneLimit () const
    {
      return this->RectangularZoneLimit_;
    }

    FlatnessCharacteristicNominalType::RectangularZoneLimit_optional& FlatnessCharacteristicNominalType::
    RectangularZoneLimit ()
    {
      return this->RectangularZoneLimit_;
    }

    void FlatnessCharacteristicNominalType::
    RectangularZoneLimit (const RectangularZoneLimit_type& x)
    {
      this->RectangularZoneLimit_.set (x);
    }

    void FlatnessCharacteristicNominalType::
    RectangularZoneLimit (const RectangularZoneLimit_optional& x)
    {
      this->RectangularZoneLimit_ = x;
    }

    void FlatnessCharacteristicNominalType::
    RectangularZoneLimit (::std::auto_ptr< RectangularZoneLimit_type > x)
    {
      this->RectangularZoneLimit_.set (x);
    }


    // FlatnessCharacteristicActualType
    // 

    const FlatnessCharacteristicActualType::MaxFlatness_optional& FlatnessCharacteristicActualType::
    MaxFlatness () const
    {
      return this->MaxFlatness_;
    }

    FlatnessCharacteristicActualType::MaxFlatness_optional& FlatnessCharacteristicActualType::
    MaxFlatness ()
    {
      return this->MaxFlatness_;
    }

    void FlatnessCharacteristicActualType::
    MaxFlatness (const MaxFlatness_type& x)
    {
      this->MaxFlatness_.set (x);
    }

    void FlatnessCharacteristicActualType::
    MaxFlatness (const MaxFlatness_optional& x)
    {
      this->MaxFlatness_ = x;
    }

    void FlatnessCharacteristicActualType::
    MaxFlatness (::std::auto_ptr< MaxFlatness_type > x)
    {
      this->MaxFlatness_.set (x);
    }

    const FlatnessCharacteristicActualType::ZonePlane_optional& FlatnessCharacteristicActualType::
    ZonePlane () const
    {
      return this->ZonePlane_;
    }

    FlatnessCharacteristicActualType::ZonePlane_optional& FlatnessCharacteristicActualType::
    ZonePlane ()
    {
      return this->ZonePlane_;
    }

    void FlatnessCharacteristicActualType::
    ZonePlane (const ZonePlane_type& x)
    {
      this->ZonePlane_.set (x);
    }

    void FlatnessCharacteristicActualType::
    ZonePlane (const ZonePlane_optional& x)
    {
      this->ZonePlane_ = x;
    }

    void FlatnessCharacteristicActualType::
    ZonePlane (::std::auto_ptr< ZonePlane_type > x)
    {
      this->ZonePlane_.set (x);
    }


    // CircularityCharacteristicItemType
    // 


    // CircularityCharacteristicDefinitionType
    // 

    const CircularityCharacteristicDefinitionType::ToleranceValue_optional& CircularityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    CircularityCharacteristicDefinitionType::ToleranceValue_optional& CircularityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const CircularityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle () const
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    CircularityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle ()
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_type& x)
    {
      this->ToleranceZonePerUnitAngle_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_optional& x)
    {
      this->ToleranceZonePerUnitAngle_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (::std::auto_ptr< ToleranceZonePerUnitAngle_type > x)
    {
      this->ToleranceZonePerUnitAngle_.set (x);
    }

    const CircularityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength () const
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    CircularityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength ()
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_type& x)
    {
      this->ToleranceZonePerUnitArcLength_.set (x);
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_optional& x)
    {
      this->ToleranceZonePerUnitArcLength_ = x;
    }

    void CircularityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (::std::auto_ptr< ToleranceZonePerUnitArcLength_type > x)
    {
      this->ToleranceZonePerUnitArcLength_.set (x);
    }


    // CircularityCharacteristicNominalType
    // 

    const CircularityCharacteristicNominalType::ZoneLimit_optional& CircularityCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    CircularityCharacteristicNominalType::ZoneLimit_optional& CircularityCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void CircularityCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void CircularityCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void CircularityCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // CircularityCharacteristicActualType
    // 

    const CircularityCharacteristicActualType::MaxCircularity_optional& CircularityCharacteristicActualType::
    MaxCircularity () const
    {
      return this->MaxCircularity_;
    }

    CircularityCharacteristicActualType::MaxCircularity_optional& CircularityCharacteristicActualType::
    MaxCircularity ()
    {
      return this->MaxCircularity_;
    }

    void CircularityCharacteristicActualType::
    MaxCircularity (const MaxCircularity_type& x)
    {
      this->MaxCircularity_.set (x);
    }

    void CircularityCharacteristicActualType::
    MaxCircularity (const MaxCircularity_optional& x)
    {
      this->MaxCircularity_ = x;
    }

    void CircularityCharacteristicActualType::
    MaxCircularity (::std::auto_ptr< MaxCircularity_type > x)
    {
      this->MaxCircularity_.set (x);
    }

    const CircularityCharacteristicActualType::ZoneRadii_optional& CircularityCharacteristicActualType::
    ZoneRadii () const
    {
      return this->ZoneRadii_;
    }

    CircularityCharacteristicActualType::ZoneRadii_optional& CircularityCharacteristicActualType::
    ZoneRadii ()
    {
      return this->ZoneRadii_;
    }

    void CircularityCharacteristicActualType::
    ZoneRadii (const ZoneRadii_type& x)
    {
      this->ZoneRadii_.set (x);
    }

    void CircularityCharacteristicActualType::
    ZoneRadii (const ZoneRadii_optional& x)
    {
      this->ZoneRadii_ = x;
    }

    void CircularityCharacteristicActualType::
    ZoneRadii (::std::auto_ptr< ZoneRadii_type > x)
    {
      this->ZoneRadii_.set (x);
    }

    const CircularityCharacteristicActualType::ZonePlane_optional& CircularityCharacteristicActualType::
    ZonePlane () const
    {
      return this->ZonePlane_;
    }

    CircularityCharacteristicActualType::ZonePlane_optional& CircularityCharacteristicActualType::
    ZonePlane ()
    {
      return this->ZonePlane_;
    }

    void CircularityCharacteristicActualType::
    ZonePlane (const ZonePlane_type& x)
    {
      this->ZonePlane_.set (x);
    }

    void CircularityCharacteristicActualType::
    ZonePlane (const ZonePlane_optional& x)
    {
      this->ZonePlane_ = x;
    }

    void CircularityCharacteristicActualType::
    ZonePlane (::std::auto_ptr< ZonePlane_type > x)
    {
      this->ZonePlane_.set (x);
    }


    // CylindricityCharacteristicItemType
    // 


    // CylindricityCharacteristicDefinitionType
    // 

    const CylindricityCharacteristicDefinitionType::ToleranceValue_optional& CylindricityCharacteristicDefinitionType::
    ToleranceValue () const
    {
      return this->ToleranceValue_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceValue_optional& CylindricityCharacteristicDefinitionType::
    ToleranceValue ()
    {
      return this->ToleranceValue_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceValue (const ToleranceValue_optional& x)
    {
      this->ToleranceValue_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle () const
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitAngle_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle ()
    {
      return this->ToleranceZonePerUnitAngle_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_type& x)
    {
      this->ToleranceZonePerUnitAngle_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (const ToleranceZonePerUnitAngle_optional& x)
    {
      this->ToleranceZonePerUnitAngle_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitAngle (::std::auto_ptr< ToleranceZonePerUnitAngle_type > x)
    {
      this->ToleranceZonePerUnitAngle_.set (x);
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength () const
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArcLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength ()
    {
      return this->ToleranceZonePerUnitArcLength_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_type& x)
    {
      this->ToleranceZonePerUnitArcLength_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (const ToleranceZonePerUnitArcLength_optional& x)
    {
      this->ToleranceZonePerUnitArcLength_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArcLength (::std::auto_ptr< ToleranceZonePerUnitArcLength_type > x)
    {
      this->ToleranceZonePerUnitArcLength_.set (x);
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitPolarArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea () const
    {
      return this->ToleranceZonePerUnitPolarArea_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitPolarArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea ()
    {
      return this->ToleranceZonePerUnitPolarArea_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea (const ToleranceZonePerUnitPolarArea_type& x)
    {
      this->ToleranceZonePerUnitPolarArea_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea (const ToleranceZonePerUnitPolarArea_optional& x)
    {
      this->ToleranceZonePerUnitPolarArea_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitPolarArea (::std::auto_ptr< ToleranceZonePerUnitPolarArea_type > x)
    {
      this->ToleranceZonePerUnitPolarArea_.set (x);
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea () const
    {
      return this->ToleranceZonePerUnitArea_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitArea_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea ()
    {
      return this->ToleranceZonePerUnitArea_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_type& x)
    {
      this->ToleranceZonePerUnitArea_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (const ToleranceZonePerUnitArea_optional& x)
    {
      this->ToleranceZonePerUnitArea_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitArea (::std::auto_ptr< ToleranceZonePerUnitArea_type > x)
    {
      this->ToleranceZonePerUnitArea_.set (x);
    }

    const CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength () const
    {
      return this->ToleranceZonePerUnitLength_;
    }

    CylindricityCharacteristicDefinitionType::ToleranceZonePerUnitLength_optional& CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength ()
    {
      return this->ToleranceZonePerUnitLength_;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_type& x)
    {
      this->ToleranceZonePerUnitLength_.set (x);
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (const ToleranceZonePerUnitLength_optional& x)
    {
      this->ToleranceZonePerUnitLength_ = x;
    }

    void CylindricityCharacteristicDefinitionType::
    ToleranceZonePerUnitLength (::std::auto_ptr< ToleranceZonePerUnitLength_type > x)
    {
      this->ToleranceZonePerUnitLength_.set (x);
    }


    // CylindricityCharacteristicNominalType
    // 

    const CylindricityCharacteristicNominalType::ZoneLimit_optional& CylindricityCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    CylindricityCharacteristicNominalType::ZoneLimit_optional& CylindricityCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void CylindricityCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void CylindricityCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void CylindricityCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // CylindricityCharacteristicActualType
    // 

    const CylindricityCharacteristicActualType::MaxCylindricity_optional& CylindricityCharacteristicActualType::
    MaxCylindricity () const
    {
      return this->MaxCylindricity_;
    }

    CylindricityCharacteristicActualType::MaxCylindricity_optional& CylindricityCharacteristicActualType::
    MaxCylindricity ()
    {
      return this->MaxCylindricity_;
    }

    void CylindricityCharacteristicActualType::
    MaxCylindricity (const MaxCylindricity_type& x)
    {
      this->MaxCylindricity_.set (x);
    }

    void CylindricityCharacteristicActualType::
    MaxCylindricity (const MaxCylindricity_optional& x)
    {
      this->MaxCylindricity_ = x;
    }

    void CylindricityCharacteristicActualType::
    MaxCylindricity (::std::auto_ptr< MaxCylindricity_type > x)
    {
      this->MaxCylindricity_.set (x);
    }

    const CylindricityCharacteristicActualType::ZoneRadii_optional& CylindricityCharacteristicActualType::
    ZoneRadii () const
    {
      return this->ZoneRadii_;
    }

    CylindricityCharacteristicActualType::ZoneRadii_optional& CylindricityCharacteristicActualType::
    ZoneRadii ()
    {
      return this->ZoneRadii_;
    }

    void CylindricityCharacteristicActualType::
    ZoneRadii (const ZoneRadii_type& x)
    {
      this->ZoneRadii_.set (x);
    }

    void CylindricityCharacteristicActualType::
    ZoneRadii (const ZoneRadii_optional& x)
    {
      this->ZoneRadii_ = x;
    }

    void CylindricityCharacteristicActualType::
    ZoneRadii (::std::auto_ptr< ZoneRadii_type > x)
    {
      this->ZoneRadii_.set (x);
    }

    const CylindricityCharacteristicActualType::ZoneAxis_optional& CylindricityCharacteristicActualType::
    ZoneAxis () const
    {
      return this->ZoneAxis_;
    }

    CylindricityCharacteristicActualType::ZoneAxis_optional& CylindricityCharacteristicActualType::
    ZoneAxis ()
    {
      return this->ZoneAxis_;
    }

    void CylindricityCharacteristicActualType::
    ZoneAxis (const ZoneAxis_type& x)
    {
      this->ZoneAxis_.set (x);
    }

    void CylindricityCharacteristicActualType::
    ZoneAxis (const ZoneAxis_optional& x)
    {
      this->ZoneAxis_ = x;
    }

    void CylindricityCharacteristicActualType::
    ZoneAxis (::std::auto_ptr< ZoneAxis_type > x)
    {
      this->ZoneAxis_.set (x);
    }


    // LocationCharacteristicItemBaseType
    // 


    // LocationCharacteristicDefinitionBaseType
    // 

    const LocationCharacteristicDefinitionBaseType::ToleranceValue_type& LocationCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    LocationCharacteristicDefinitionBaseType::ToleranceValue_type& LocationCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void LocationCharacteristicDefinitionBaseType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const LocationCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_.get ();
    }

    LocationCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_.get ();
    }

    void LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void LocationCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (x);
    }


    // LocationCharacteristicNominalBaseType
    // 


    // LocationCharacteristicActualBaseType
    // 

    const LocationCharacteristicActualBaseType::ZoneData_sequence& LocationCharacteristicActualBaseType::
    ZoneData () const
    {
      return this->ZoneData_;
    }

    LocationCharacteristicActualBaseType::ZoneData_sequence& LocationCharacteristicActualBaseType::
    ZoneData ()
    {
      return this->ZoneData_;
    }

    void LocationCharacteristicActualBaseType::
    ZoneData (const ZoneData_sequence& s)
    {
      this->ZoneData_ = s;
    }

    const LocationCharacteristicActualBaseType::DatumsOk_optional& LocationCharacteristicActualBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    LocationCharacteristicActualBaseType::DatumsOk_optional& LocationCharacteristicActualBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void LocationCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void LocationCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }


    // PositionCharacteristicItemType
    // 


    // PositionSphericalZoneType
    // 

    const PositionSphericalZoneType::Dimensionality_optional& PositionSphericalZoneType::
    Dimensionality () const
    {
      return this->Dimensionality_;
    }

    PositionSphericalZoneType::Dimensionality_optional& PositionSphericalZoneType::
    Dimensionality ()
    {
      return this->Dimensionality_;
    }

    void PositionSphericalZoneType::
    Dimensionality (const Dimensionality_type& x)
    {
      this->Dimensionality_.set (x);
    }

    void PositionSphericalZoneType::
    Dimensionality (const Dimensionality_optional& x)
    {
      this->Dimensionality_ = x;
    }

    void PositionSphericalZoneType::
    Dimensionality (::std::auto_ptr< Dimensionality_type > x)
    {
      this->Dimensionality_.set (x);
    }

    const PositionSphericalZoneType::Dimensionality_type& PositionSphericalZoneType::
    Dimensionality_default_value ()
    {
      return Dimensionality_default_value_;
    }


    // PositionDiametricalZoneType
    // 

    const PositionDiametricalZoneType::Dimensionality_optional& PositionDiametricalZoneType::
    Dimensionality () const
    {
      return this->Dimensionality_;
    }

    PositionDiametricalZoneType::Dimensionality_optional& PositionDiametricalZoneType::
    Dimensionality ()
    {
      return this->Dimensionality_;
    }

    void PositionDiametricalZoneType::
    Dimensionality (const Dimensionality_type& x)
    {
      this->Dimensionality_.set (x);
    }

    void PositionDiametricalZoneType::
    Dimensionality (const Dimensionality_optional& x)
    {
      this->Dimensionality_ = x;
    }

    void PositionDiametricalZoneType::
    Dimensionality (::std::auto_ptr< Dimensionality_type > x)
    {
      this->Dimensionality_.set (x);
    }

    const PositionDiametricalZoneType::ZoneOrientationVector_optional& PositionDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    PositionDiametricalZoneType::ZoneOrientationVector_optional& PositionDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void PositionDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void PositionDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void PositionDiametricalZoneType::
    ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    const PositionDiametricalZoneType::ElongatedZone_optional& PositionDiametricalZoneType::
    ElongatedZone () const
    {
      return this->ElongatedZone_;
    }

    PositionDiametricalZoneType::ElongatedZone_optional& PositionDiametricalZoneType::
    ElongatedZone ()
    {
      return this->ElongatedZone_;
    }

    void PositionDiametricalZoneType::
    ElongatedZone (const ElongatedZone_type& x)
    {
      this->ElongatedZone_.set (x);
    }

    void PositionDiametricalZoneType::
    ElongatedZone (const ElongatedZone_optional& x)
    {
      this->ElongatedZone_ = x;
    }


    // PositionNonDiametricalZoneType
    // 

    const PositionNonDiametricalZoneType::Dimensionality_optional& PositionNonDiametricalZoneType::
    Dimensionality () const
    {
      return this->Dimensionality_;
    }

    PositionNonDiametricalZoneType::Dimensionality_optional& PositionNonDiametricalZoneType::
    Dimensionality ()
    {
      return this->Dimensionality_;
    }

    void PositionNonDiametricalZoneType::
    Dimensionality (const Dimensionality_type& x)
    {
      this->Dimensionality_.set (x);
    }

    void PositionNonDiametricalZoneType::
    Dimensionality (const Dimensionality_optional& x)
    {
      this->Dimensionality_ = x;
    }

    void PositionNonDiametricalZoneType::
    Dimensionality (::std::auto_ptr< Dimensionality_type > x)
    {
      this->Dimensionality_.set (x);
    }

    const PositionNonDiametricalZoneType::ZoneOrientationVector_optional& PositionNonDiametricalZoneType::
    ZoneOrientationVector () const
    {
      return this->ZoneOrientationVector_;
    }

    PositionNonDiametricalZoneType::ZoneOrientationVector_optional& PositionNonDiametricalZoneType::
    ZoneOrientationVector ()
    {
      return this->ZoneOrientationVector_;
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_type& x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationVector (const ZoneOrientationVector_optional& x)
    {
      this->ZoneOrientationVector_ = x;
    }

    void PositionNonDiametricalZoneType::
    ZoneOrientationVector (::std::auto_ptr< ZoneOrientationVector_type > x)
    {
      this->ZoneOrientationVector_.set (x);
    }

    const PositionNonDiametricalZoneType::BoundaryZone_optional& PositionNonDiametricalZoneType::
    BoundaryZone () const
    {
      return this->BoundaryZone_;
    }

    PositionNonDiametricalZoneType::BoundaryZone_optional& PositionNonDiametricalZoneType::
    BoundaryZone ()
    {
      return this->BoundaryZone_;
    }

    void PositionNonDiametricalZoneType::
    BoundaryZone (const BoundaryZone_type& x)
    {
      this->BoundaryZone_.set (x);
    }

    void PositionNonDiametricalZoneType::
    BoundaryZone (const BoundaryZone_optional& x)
    {
      this->BoundaryZone_ = x;
    }


    // PositionZoneShapeType
    // 

    const PositionZoneShapeType::SphericalZone_optional& PositionZoneShapeType::
    SphericalZone () const
    {
      return this->SphericalZone_;
    }

    PositionZoneShapeType::SphericalZone_optional& PositionZoneShapeType::
    SphericalZone ()
    {
      return this->SphericalZone_;
    }

    void PositionZoneShapeType::
    SphericalZone (const SphericalZone_type& x)
    {
      this->SphericalZone_.set (x);
    }

    void PositionZoneShapeType::
    SphericalZone (const SphericalZone_optional& x)
    {
      this->SphericalZone_ = x;
    }

    void PositionZoneShapeType::
    SphericalZone (::std::auto_ptr< SphericalZone_type > x)
    {
      this->SphericalZone_.set (x);
    }

    const PositionZoneShapeType::DiametricalZone_optional& PositionZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    PositionZoneShapeType::DiametricalZone_optional& PositionZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void PositionZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void PositionZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void PositionZoneShapeType::
    DiametricalZone (::std::auto_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (x);
    }

    const PositionZoneShapeType::NonDiametricalZone_optional& PositionZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    PositionZoneShapeType::NonDiametricalZone_optional& PositionZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void PositionZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void PositionZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void PositionZoneShapeType::
    NonDiametricalZone (::std::auto_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (x);
    }


    // PositionCharacteristicDefinitionType
    // 

    const PositionCharacteristicDefinitionType::MaterialCondition_type& PositionCharacteristicDefinitionType::
    MaterialCondition () const
    {
      return this->MaterialCondition_.get ();
    }

    PositionCharacteristicDefinitionType::MaterialCondition_type& PositionCharacteristicDefinitionType::
    MaterialCondition ()
    {
      return this->MaterialCondition_.get ();
    }

    void PositionCharacteristicDefinitionType::
    MaterialCondition (const MaterialCondition_type& x)
    {
      this->MaterialCondition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    MaterialCondition (::std::auto_ptr< MaterialCondition_type > x)
    {
      this->MaterialCondition_.set (x);
    }

    const PositionCharacteristicDefinitionType::ZoneShape_type& PositionCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    PositionCharacteristicDefinitionType::ZoneShape_type& PositionCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void PositionCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ZoneShape (::std::auto_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (x);
    }

    const PositionCharacteristicDefinitionType::ProjectedToleranceZoneValue_optional& PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue () const
    {
      return this->ProjectedToleranceZoneValue_;
    }

    PositionCharacteristicDefinitionType::ProjectedToleranceZoneValue_optional& PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue ()
    {
      return this->ProjectedToleranceZoneValue_;
    }

    void PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_type& x)
    {
      this->ProjectedToleranceZoneValue_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue (const ProjectedToleranceZoneValue_optional& x)
    {
      this->ProjectedToleranceZoneValue_ = x;
    }

    void PositionCharacteristicDefinitionType::
    ProjectedToleranceZoneValue (::std::auto_ptr< ProjectedToleranceZoneValue_type > x)
    {
      this->ProjectedToleranceZoneValue_.set (x);
    }

    const PositionCharacteristicDefinitionType::SecondCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition () const
    {
      return this->SecondCompositeSegmentPositionDefinition_;
    }

    PositionCharacteristicDefinitionType::SecondCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition ()
    {
      return this->SecondCompositeSegmentPositionDefinition_;
    }

    void PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition (const SecondCompositeSegmentPositionDefinition_type& x)
    {
      this->SecondCompositeSegmentPositionDefinition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition (const SecondCompositeSegmentPositionDefinition_optional& x)
    {
      this->SecondCompositeSegmentPositionDefinition_ = x;
    }

    void PositionCharacteristicDefinitionType::
    SecondCompositeSegmentPositionDefinition (::std::auto_ptr< SecondCompositeSegmentPositionDefinition_type > x)
    {
      this->SecondCompositeSegmentPositionDefinition_.set (x);
    }

    const PositionCharacteristicDefinitionType::ThirdCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition () const
    {
      return this->ThirdCompositeSegmentPositionDefinition_;
    }

    PositionCharacteristicDefinitionType::ThirdCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition ()
    {
      return this->ThirdCompositeSegmentPositionDefinition_;
    }

    void PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition (const ThirdCompositeSegmentPositionDefinition_type& x)
    {
      this->ThirdCompositeSegmentPositionDefinition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition (const ThirdCompositeSegmentPositionDefinition_optional& x)
    {
      this->ThirdCompositeSegmentPositionDefinition_ = x;
    }

    void PositionCharacteristicDefinitionType::
    ThirdCompositeSegmentPositionDefinition (::std::auto_ptr< ThirdCompositeSegmentPositionDefinition_type > x)
    {
      this->ThirdCompositeSegmentPositionDefinition_.set (x);
    }

    const PositionCharacteristicDefinitionType::FourthCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition () const
    {
      return this->FourthCompositeSegmentPositionDefinition_;
    }

    PositionCharacteristicDefinitionType::FourthCompositeSegmentPositionDefinition_optional& PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition ()
    {
      return this->FourthCompositeSegmentPositionDefinition_;
    }

    void PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition (const FourthCompositeSegmentPositionDefinition_type& x)
    {
      this->FourthCompositeSegmentPositionDefinition_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition (const FourthCompositeSegmentPositionDefinition_optional& x)
    {
      this->FourthCompositeSegmentPositionDefinition_ = x;
    }

    void PositionCharacteristicDefinitionType::
    FourthCompositeSegmentPositionDefinition (::std::auto_ptr< FourthCompositeSegmentPositionDefinition_type > x)
    {
      this->FourthCompositeSegmentPositionDefinition_.set (x);
    }

    const PositionCharacteristicDefinitionType::ToPointToleranceValue_optional& PositionCharacteristicDefinitionType::
    ToPointToleranceValue () const
    {
      return this->ToPointToleranceValue_;
    }

    PositionCharacteristicDefinitionType::ToPointToleranceValue_optional& PositionCharacteristicDefinitionType::
    ToPointToleranceValue ()
    {
      return this->ToPointToleranceValue_;
    }

    void PositionCharacteristicDefinitionType::
    ToPointToleranceValue (const ToPointToleranceValue_type& x)
    {
      this->ToPointToleranceValue_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    ToPointToleranceValue (const ToPointToleranceValue_optional& x)
    {
      this->ToPointToleranceValue_ = x;
    }

    void PositionCharacteristicDefinitionType::
    ToPointToleranceValue (::std::auto_ptr< ToPointToleranceValue_type > x)
    {
      this->ToPointToleranceValue_.set (x);
    }

    const PositionCharacteristicDefinitionType::OrientationOnly_optional& PositionCharacteristicDefinitionType::
    OrientationOnly () const
    {
      return this->OrientationOnly_;
    }

    PositionCharacteristicDefinitionType::OrientationOnly_optional& PositionCharacteristicDefinitionType::
    OrientationOnly ()
    {
      return this->OrientationOnly_;
    }

    void PositionCharacteristicDefinitionType::
    OrientationOnly (const OrientationOnly_type& x)
    {
      this->OrientationOnly_.set (x);
    }

    void PositionCharacteristicDefinitionType::
    OrientationOnly (const OrientationOnly_optional& x)
    {
      this->OrientationOnly_ = x;
    }


    // PositionCharacteristicNominalType
    // 

    const PositionCharacteristicNominalType::ZoneLimit_optional& PositionCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    PositionCharacteristicNominalType::ZoneLimit_optional& PositionCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void PositionCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void PositionCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void PositionCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // PositionCharacteristicActualType
    // 

    const PositionCharacteristicActualType::DRFTransformActualId_optional& PositionCharacteristicActualType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    PositionCharacteristicActualType::DRFTransformActualId_optional& PositionCharacteristicActualType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void PositionCharacteristicActualType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void PositionCharacteristicActualType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void PositionCharacteristicActualType::
    DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (x);
    }

    const PositionCharacteristicActualType::SecondCompositeSegmentPositionActual_optional& PositionCharacteristicActualType::
    SecondCompositeSegmentPositionActual () const
    {
      return this->SecondCompositeSegmentPositionActual_;
    }

    PositionCharacteristicActualType::SecondCompositeSegmentPositionActual_optional& PositionCharacteristicActualType::
    SecondCompositeSegmentPositionActual ()
    {
      return this->SecondCompositeSegmentPositionActual_;
    }

    void PositionCharacteristicActualType::
    SecondCompositeSegmentPositionActual (const SecondCompositeSegmentPositionActual_type& x)
    {
      this->SecondCompositeSegmentPositionActual_.set (x);
    }

    void PositionCharacteristicActualType::
    SecondCompositeSegmentPositionActual (const SecondCompositeSegmentPositionActual_optional& x)
    {
      this->SecondCompositeSegmentPositionActual_ = x;
    }

    void PositionCharacteristicActualType::
    SecondCompositeSegmentPositionActual (::std::auto_ptr< SecondCompositeSegmentPositionActual_type > x)
    {
      this->SecondCompositeSegmentPositionActual_.set (x);
    }

    const PositionCharacteristicActualType::ThirdCompositeSegmentPositionActual_optional& PositionCharacteristicActualType::
    ThirdCompositeSegmentPositionActual () const
    {
      return this->ThirdCompositeSegmentPositionActual_;
    }

    PositionCharacteristicActualType::ThirdCompositeSegmentPositionActual_optional& PositionCharacteristicActualType::
    ThirdCompositeSegmentPositionActual ()
    {
      return this->ThirdCompositeSegmentPositionActual_;
    }

    void PositionCharacteristicActualType::
    ThirdCompositeSegmentPositionActual (const ThirdCompositeSegmentPositionActual_type& x)
    {
      this->ThirdCompositeSegmentPositionActual_.set (x);
    }

    void PositionCharacteristicActualType::
    ThirdCompositeSegmentPositionActual (const ThirdCompositeSegmentPositionActual_optional& x)
    {
      this->ThirdCompositeSegmentPositionActual_ = x;
    }

    void PositionCharacteristicActualType::
    ThirdCompositeSegmentPositionActual (::std::auto_ptr< ThirdCompositeSegmentPositionActual_type > x)
    {
      this->ThirdCompositeSegmentPositionActual_.set (x);
    }

    const PositionCharacteristicActualType::FourthCompositeSegmentPositionActual_optional& PositionCharacteristicActualType::
    FourthCompositeSegmentPositionActual () const
    {
      return this->FourthCompositeSegmentPositionActual_;
    }

    PositionCharacteristicActualType::FourthCompositeSegmentPositionActual_optional& PositionCharacteristicActualType::
    FourthCompositeSegmentPositionActual ()
    {
      return this->FourthCompositeSegmentPositionActual_;
    }

    void PositionCharacteristicActualType::
    FourthCompositeSegmentPositionActual (const FourthCompositeSegmentPositionActual_type& x)
    {
      this->FourthCompositeSegmentPositionActual_.set (x);
    }

    void PositionCharacteristicActualType::
    FourthCompositeSegmentPositionActual (const FourthCompositeSegmentPositionActual_optional& x)
    {
      this->FourthCompositeSegmentPositionActual_ = x;
    }

    void PositionCharacteristicActualType::
    FourthCompositeSegmentPositionActual (::std::auto_ptr< FourthCompositeSegmentPositionActual_type > x)
    {
      this->FourthCompositeSegmentPositionActual_.set (x);
    }


    // AngleCharacteristicItemType
    // 


    // AngleCharacteristicDefinitionType
    // 


    // AngleCharacteristicNominalType
    // 


    // AngleCharacteristicActualType
    // 


    // AngleFromCharacteristicItemType
    // 


    // AngleFromCharacteristicDefinitionType
    // 


    // AngleFromCharacteristicNominalType
    // 

    const AngleFromCharacteristicNominalType::OriginReference_optional& AngleFromCharacteristicNominalType::
    OriginReference () const
    {
      return this->OriginReference_;
    }

    AngleFromCharacteristicNominalType::OriginReference_optional& AngleFromCharacteristicNominalType::
    OriginReference ()
    {
      return this->OriginReference_;
    }

    void AngleFromCharacteristicNominalType::
    OriginReference (const OriginReference_type& x)
    {
      this->OriginReference_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    OriginReference (const OriginReference_optional& x)
    {
      this->OriginReference_ = x;
    }

    void AngleFromCharacteristicNominalType::
    OriginReference (::std::auto_ptr< OriginReference_type > x)
    {
      this->OriginReference_.set (x);
    }

    const AngleFromCharacteristicNominalType::AnalysisVector_optional& AngleFromCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleFromCharacteristicNominalType::AnalysisVector_optional& AngleFromCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleFromCharacteristicNominalType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }

    const AngleFromCharacteristicNominalType::AnalysisMode_type& AngleFromCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    AngleFromCharacteristicNominalType::AnalysisMode_type& AngleFromCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void AngleFromCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    AnalysisMode (::std::auto_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (x);
    }

    const AngleFromCharacteristicNominalType::CoordinateSystemId_optional& AngleFromCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    AngleFromCharacteristicNominalType::CoordinateSystemId_optional& AngleFromCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void AngleFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void AngleFromCharacteristicNominalType::
    CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (x);
    }

    const AngleFromCharacteristicNominalType::MeasurementDirective_optional& AngleFromCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    AngleFromCharacteristicNominalType::MeasurementDirective_optional& AngleFromCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void AngleFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void AngleFromCharacteristicNominalType::
    MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (x);
    }

    const AngleFromCharacteristicNominalType::Vertex_optional& AngleFromCharacteristicNominalType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleFromCharacteristicNominalType::Vertex_optional& AngleFromCharacteristicNominalType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleFromCharacteristicNominalType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleFromCharacteristicNominalType::
    Vertex (::std::auto_ptr< Vertex_type > x)
    {
      this->Vertex_.set (x);
    }

    const AngleFromCharacteristicNominalType::ZoneLimit_optional& AngleFromCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    AngleFromCharacteristicNominalType::ZoneLimit_optional& AngleFromCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void AngleFromCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void AngleFromCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void AngleFromCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // AngleFromCharacteristicActualType
    // 

    const AngleFromCharacteristicActualType::AnalysisVector_optional& AngleFromCharacteristicActualType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleFromCharacteristicActualType::AnalysisVector_optional& AngleFromCharacteristicActualType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleFromCharacteristicActualType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleFromCharacteristicActualType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleFromCharacteristicActualType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }

    const AngleFromCharacteristicActualType::Vertex_optional& AngleFromCharacteristicActualType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleFromCharacteristicActualType::Vertex_optional& AngleFromCharacteristicActualType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleFromCharacteristicActualType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleFromCharacteristicActualType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleFromCharacteristicActualType::
    Vertex (::std::auto_ptr< Vertex_type > x)
    {
      this->Vertex_.set (x);
    }


    // AngleBetweenCharacteristicItemType
    // 


    // AngleBetweenCharacteristicDefinitionType
    // 


    // AngleBetweenCharacteristicNominalType
    // 

    const AngleBetweenCharacteristicNominalType::AnalysisVector_optional& AngleBetweenCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleBetweenCharacteristicNominalType::AnalysisVector_optional& AngleBetweenCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }

    const AngleBetweenCharacteristicNominalType::AnalysisMode_type& AngleBetweenCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    AngleBetweenCharacteristicNominalType::AnalysisMode_type& AngleBetweenCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    AnalysisMode (::std::auto_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (x);
    }

    const AngleBetweenCharacteristicNominalType::CoordinateSystemId_optional& AngleBetweenCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    AngleBetweenCharacteristicNominalType::CoordinateSystemId_optional& AngleBetweenCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void AngleBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (x);
    }

    const AngleBetweenCharacteristicNominalType::MeasurementDirective_optional& AngleBetweenCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    AngleBetweenCharacteristicNominalType::MeasurementDirective_optional& AngleBetweenCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void AngleBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (x);
    }

    const AngleBetweenCharacteristicNominalType::Vertex_optional& AngleBetweenCharacteristicNominalType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleBetweenCharacteristicNominalType::Vertex_optional& AngleBetweenCharacteristicNominalType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleBetweenCharacteristicNominalType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    Vertex (::std::auto_ptr< Vertex_type > x)
    {
      this->Vertex_.set (x);
    }

    const AngleBetweenCharacteristicNominalType::ZoneLimit_optional& AngleBetweenCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    AngleBetweenCharacteristicNominalType::ZoneLimit_optional& AngleBetweenCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void AngleBetweenCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void AngleBetweenCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void AngleBetweenCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // AngleBetweenCharacteristicActualType
    // 

    const AngleBetweenCharacteristicActualType::AnalysisVector_optional& AngleBetweenCharacteristicActualType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    AngleBetweenCharacteristicActualType::AnalysisVector_optional& AngleBetweenCharacteristicActualType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void AngleBetweenCharacteristicActualType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void AngleBetweenCharacteristicActualType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void AngleBetweenCharacteristicActualType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }

    const AngleBetweenCharacteristicActualType::Vertex_optional& AngleBetweenCharacteristicActualType::
    Vertex () const
    {
      return this->Vertex_;
    }

    AngleBetweenCharacteristicActualType::Vertex_optional& AngleBetweenCharacteristicActualType::
    Vertex ()
    {
      return this->Vertex_;
    }

    void AngleBetweenCharacteristicActualType::
    Vertex (const Vertex_type& x)
    {
      this->Vertex_.set (x);
    }

    void AngleBetweenCharacteristicActualType::
    Vertex (const Vertex_optional& x)
    {
      this->Vertex_ = x;
    }

    void AngleBetweenCharacteristicActualType::
    Vertex (::std::auto_ptr< Vertex_type > x)
    {
      this->Vertex_.set (x);
    }


    // LinearCoordinateCharacteristicItemType
    // 


    // LinearCoordinateCharacteristicDefinitionType
    // 

    const LinearCoordinateCharacteristicDefinitionType::Tolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    LinearCoordinateCharacteristicDefinitionType::Tolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void LinearCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const LinearCoordinateCharacteristicDefinitionType::NonTolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    LinearCoordinateCharacteristicDefinitionType::NonTolerance_optional& LinearCoordinateCharacteristicDefinitionType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void LinearCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void LinearCoordinateCharacteristicDefinitionType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // LinearCoordinateCharacteristicNominalType
    // 

    const LinearCoordinateCharacteristicNominalType::TargetValue_optional& LinearCoordinateCharacteristicNominalType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    LinearCoordinateCharacteristicNominalType::TargetValue_optional& LinearCoordinateCharacteristicNominalType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void LinearCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void LinearCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void LinearCoordinateCharacteristicNominalType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }

    const LinearCoordinateCharacteristicNominalType::Direction_type& LinearCoordinateCharacteristicNominalType::
    Direction () const
    {
      return this->Direction_.get ();
    }

    LinearCoordinateCharacteristicNominalType::Direction_type& LinearCoordinateCharacteristicNominalType::
    Direction ()
    {
      return this->Direction_.get ();
    }

    void LinearCoordinateCharacteristicNominalType::
    Direction (const Direction_type& x)
    {
      this->Direction_.set (x);
    }

    void LinearCoordinateCharacteristicNominalType::
    Direction (::std::auto_ptr< Direction_type > x)
    {
      this->Direction_.set (x);
    }

    const LinearCoordinateCharacteristicNominalType::CoordinateSystemId_optional& LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    LinearCoordinateCharacteristicNominalType::CoordinateSystemId_optional& LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void LinearCoordinateCharacteristicNominalType::
    CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (x);
    }


    // LinearCoordinateCharacteristicActualType
    // 

    const LinearCoordinateCharacteristicActualType::Value_optional& LinearCoordinateCharacteristicActualType::
    Value () const
    {
      return this->Value_;
    }

    LinearCoordinateCharacteristicActualType::Value_optional& LinearCoordinateCharacteristicActualType::
    Value ()
    {
      return this->Value_;
    }

    void LinearCoordinateCharacteristicActualType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void LinearCoordinateCharacteristicActualType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void LinearCoordinateCharacteristicActualType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const LinearCoordinateCharacteristicActualType::MaxValue_optional& LinearCoordinateCharacteristicActualType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    LinearCoordinateCharacteristicActualType::MaxValue_optional& LinearCoordinateCharacteristicActualType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void LinearCoordinateCharacteristicActualType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void LinearCoordinateCharacteristicActualType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void LinearCoordinateCharacteristicActualType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const LinearCoordinateCharacteristicActualType::MinValue_optional& LinearCoordinateCharacteristicActualType::
    MinValue () const
    {
      return this->MinValue_;
    }

    LinearCoordinateCharacteristicActualType::MinValue_optional& LinearCoordinateCharacteristicActualType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void LinearCoordinateCharacteristicActualType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void LinearCoordinateCharacteristicActualType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void LinearCoordinateCharacteristicActualType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // AngularCoordinateCharacteristicItemType
    // 


    // AngularCoordinateCharacteristicDefinitionType
    // 

    const AngularCoordinateCharacteristicDefinitionType::Tolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    Tolerance () const
    {
      return this->Tolerance_;
    }

    AngularCoordinateCharacteristicDefinitionType::Tolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    Tolerance ()
    {
      return this->Tolerance_;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_type& x)
    {
      this->Tolerance_.set (x);
    }

    void AngularCoordinateCharacteristicDefinitionType::
    Tolerance (const Tolerance_optional& x)
    {
      this->Tolerance_ = x;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    Tolerance (::std::auto_ptr< Tolerance_type > x)
    {
      this->Tolerance_.set (x);
    }

    const AngularCoordinateCharacteristicDefinitionType::NonTolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    NonTolerance () const
    {
      return this->NonTolerance_;
    }

    AngularCoordinateCharacteristicDefinitionType::NonTolerance_optional& AngularCoordinateCharacteristicDefinitionType::
    NonTolerance ()
    {
      return this->NonTolerance_;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_type& x)
    {
      this->NonTolerance_.set (x);
    }

    void AngularCoordinateCharacteristicDefinitionType::
    NonTolerance (const NonTolerance_optional& x)
    {
      this->NonTolerance_ = x;
    }

    void AngularCoordinateCharacteristicDefinitionType::
    NonTolerance (::std::auto_ptr< NonTolerance_type > x)
    {
      this->NonTolerance_.set (x);
    }


    // AngularCoordinateCharacteristicNominalType
    // 

    const AngularCoordinateCharacteristicNominalType::TargetValue_optional& AngularCoordinateCharacteristicNominalType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    AngularCoordinateCharacteristicNominalType::TargetValue_optional& AngularCoordinateCharacteristicNominalType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void AngularCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void AngularCoordinateCharacteristicNominalType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void AngularCoordinateCharacteristicNominalType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }

    const AngularCoordinateCharacteristicNominalType::Direction_type& AngularCoordinateCharacteristicNominalType::
    Direction () const
    {
      return this->Direction_.get ();
    }

    AngularCoordinateCharacteristicNominalType::Direction_type& AngularCoordinateCharacteristicNominalType::
    Direction ()
    {
      return this->Direction_.get ();
    }

    void AngularCoordinateCharacteristicNominalType::
    Direction (const Direction_type& x)
    {
      this->Direction_.set (x);
    }

    void AngularCoordinateCharacteristicNominalType::
    Direction (::std::auto_ptr< Direction_type > x)
    {
      this->Direction_.set (x);
    }

    const AngularCoordinateCharacteristicNominalType::CoordinateSystemId_optional& AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    AngularCoordinateCharacteristicNominalType::CoordinateSystemId_optional& AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void AngularCoordinateCharacteristicNominalType::
    CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (x);
    }


    // AngularCoordinateCharacteristicActualType
    // 

    const AngularCoordinateCharacteristicActualType::Value_optional& AngularCoordinateCharacteristicActualType::
    Value () const
    {
      return this->Value_;
    }

    AngularCoordinateCharacteristicActualType::Value_optional& AngularCoordinateCharacteristicActualType::
    Value ()
    {
      return this->Value_;
    }

    void AngularCoordinateCharacteristicActualType::
    Value (const Value_type& x)
    {
      this->Value_.set (x);
    }

    void AngularCoordinateCharacteristicActualType::
    Value (const Value_optional& x)
    {
      this->Value_ = x;
    }

    void AngularCoordinateCharacteristicActualType::
    Value (::std::auto_ptr< Value_type > x)
    {
      this->Value_.set (x);
    }

    const AngularCoordinateCharacteristicActualType::MaxValue_optional& AngularCoordinateCharacteristicActualType::
    MaxValue () const
    {
      return this->MaxValue_;
    }

    AngularCoordinateCharacteristicActualType::MaxValue_optional& AngularCoordinateCharacteristicActualType::
    MaxValue ()
    {
      return this->MaxValue_;
    }

    void AngularCoordinateCharacteristicActualType::
    MaxValue (const MaxValue_type& x)
    {
      this->MaxValue_.set (x);
    }

    void AngularCoordinateCharacteristicActualType::
    MaxValue (const MaxValue_optional& x)
    {
      this->MaxValue_ = x;
    }

    void AngularCoordinateCharacteristicActualType::
    MaxValue (::std::auto_ptr< MaxValue_type > x)
    {
      this->MaxValue_.set (x);
    }

    const AngularCoordinateCharacteristicActualType::MinValue_optional& AngularCoordinateCharacteristicActualType::
    MinValue () const
    {
      return this->MinValue_;
    }

    AngularCoordinateCharacteristicActualType::MinValue_optional& AngularCoordinateCharacteristicActualType::
    MinValue ()
    {
      return this->MinValue_;
    }

    void AngularCoordinateCharacteristicActualType::
    MinValue (const MinValue_type& x)
    {
      this->MinValue_.set (x);
    }

    void AngularCoordinateCharacteristicActualType::
    MinValue (const MinValue_optional& x)
    {
      this->MinValue_ = x;
    }

    void AngularCoordinateCharacteristicActualType::
    MinValue (::std::auto_ptr< MinValue_type > x)
    {
      this->MinValue_.set (x);
    }


    // CurveLengthCharacteristicItemType
    // 


    // CurveLengthCharacteristicDefinitionType
    // 


    // CurveLengthCharacteristicNominalType
    // 


    // CurveLengthCharacteristicActualType
    // 


    // DiameterCharacteristicItemType
    // 


    // DiameterCharacteristicDefinitionType
    // 


    // DiameterCharacteristicNominalType
    // 


    // DiameterCharacteristicActualType
    // 


    // LengthCharacteristicItemType
    // 


    // LengthCharacteristicDefinitionType
    // 


    // LengthCharacteristicNominalType
    // 


    // LengthCharacteristicActualType
    // 


    // WidthCharacteristicItemType
    // 


    // WidthCharacteristicDefinitionType
    // 


    // WidthCharacteristicNominalType
    // 


    // WidthCharacteristicActualType
    // 


    // HeightCharacteristicItemType
    // 


    // HeightCharacteristicDefinitionType
    // 


    // HeightCharacteristicNominalType
    // 


    // HeightCharacteristicActualType
    // 


    // DepthCharacteristicItemType
    // 


    // DepthCharacteristicDefinitionType
    // 


    // DepthCharacteristicNominalType
    // 


    // DepthCharacteristicActualType
    // 


    // ThicknessCharacteristicItemType
    // 


    // ThicknessCharacteristicDefinitionType
    // 


    // ThicknessCharacteristicNominalType
    // 


    // ThicknessCharacteristicActualType
    // 


    // SquareCharacteristicItemType
    // 


    // SquareCharacteristicDefinitionType
    // 


    // SquareCharacteristicNominalType
    // 


    // SquareCharacteristicActualType
    // 


    // DistanceFromCharacteristicItemType
    // 


    // DistanceFromCharacteristicDefinitionType
    // 


    // DistanceFromCharacteristicNominalType
    // 

    const DistanceFromCharacteristicNominalType::OriginReference_optional& DistanceFromCharacteristicNominalType::
    OriginReference () const
    {
      return this->OriginReference_;
    }

    DistanceFromCharacteristicNominalType::OriginReference_optional& DistanceFromCharacteristicNominalType::
    OriginReference ()
    {
      return this->OriginReference_;
    }

    void DistanceFromCharacteristicNominalType::
    OriginReference (const OriginReference_type& x)
    {
      this->OriginReference_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    OriginReference (const OriginReference_optional& x)
    {
      this->OriginReference_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    OriginReference (::std::auto_ptr< OriginReference_type > x)
    {
      this->OriginReference_.set (x);
    }

    const DistanceFromCharacteristicNominalType::AnalysisVector_optional& DistanceFromCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceFromCharacteristicNominalType::AnalysisVector_optional& DistanceFromCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }

    const DistanceFromCharacteristicNominalType::AnalysisMode_type& DistanceFromCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    DistanceFromCharacteristicNominalType::AnalysisMode_type& DistanceFromCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    AnalysisMode (::std::auto_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (x);
    }

    const DistanceFromCharacteristicNominalType::MeasurementDirective_optional& DistanceFromCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    DistanceFromCharacteristicNominalType::MeasurementDirective_optional& DistanceFromCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void DistanceFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (x);
    }

    const DistanceFromCharacteristicNominalType::CoordinateSystemId_optional& DistanceFromCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    DistanceFromCharacteristicNominalType::CoordinateSystemId_optional& DistanceFromCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void DistanceFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (x);
    }

    const DistanceFromCharacteristicNominalType::ZoneLimit_optional& DistanceFromCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    DistanceFromCharacteristicNominalType::ZoneLimit_optional& DistanceFromCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void DistanceFromCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void DistanceFromCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void DistanceFromCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // DistanceFromCharacteristicActualType
    // 

    const DistanceFromCharacteristicActualType::AnalysisVector_optional& DistanceFromCharacteristicActualType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceFromCharacteristicActualType::AnalysisVector_optional& DistanceFromCharacteristicActualType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceFromCharacteristicActualType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceFromCharacteristicActualType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceFromCharacteristicActualType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }


    // DistanceBetweenCharacteristicItemType
    // 


    // DistanceBetweenCharacteristicDefinitionType
    // 


    // DistanceBetweenCharacteristicNominalType
    // 

    const DistanceBetweenCharacteristicNominalType::AnalysisVector_optional& DistanceBetweenCharacteristicNominalType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceBetweenCharacteristicNominalType::AnalysisVector_optional& DistanceBetweenCharacteristicNominalType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }

    const DistanceBetweenCharacteristicNominalType::AnalysisMode_type& DistanceBetweenCharacteristicNominalType::
    AnalysisMode () const
    {
      return this->AnalysisMode_.get ();
    }

    DistanceBetweenCharacteristicNominalType::AnalysisMode_type& DistanceBetweenCharacteristicNominalType::
    AnalysisMode ()
    {
      return this->AnalysisMode_.get ();
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisMode (const AnalysisMode_type& x)
    {
      this->AnalysisMode_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    AnalysisMode (::std::auto_ptr< AnalysisMode_type > x)
    {
      this->AnalysisMode_.set (x);
    }

    const DistanceBetweenCharacteristicNominalType::MeasurementDirective_optional& DistanceBetweenCharacteristicNominalType::
    MeasurementDirective () const
    {
      return this->MeasurementDirective_;
    }

    DistanceBetweenCharacteristicNominalType::MeasurementDirective_optional& DistanceBetweenCharacteristicNominalType::
    MeasurementDirective ()
    {
      return this->MeasurementDirective_;
    }

    void DistanceBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_type& x)
    {
      this->MeasurementDirective_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    MeasurementDirective (const MeasurementDirective_optional& x)
    {
      this->MeasurementDirective_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    MeasurementDirective (::std::auto_ptr< MeasurementDirective_type > x)
    {
      this->MeasurementDirective_.set (x);
    }

    const DistanceBetweenCharacteristicNominalType::CoordinateSystemId_optional& DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId () const
    {
      return this->CoordinateSystemId_;
    }

    DistanceBetweenCharacteristicNominalType::CoordinateSystemId_optional& DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId ()
    {
      return this->CoordinateSystemId_;
    }

    void DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_type& x)
    {
      this->CoordinateSystemId_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId (const CoordinateSystemId_optional& x)
    {
      this->CoordinateSystemId_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    CoordinateSystemId (::std::auto_ptr< CoordinateSystemId_type > x)
    {
      this->CoordinateSystemId_.set (x);
    }

    const DistanceBetweenCharacteristicNominalType::ZoneLimit_optional& DistanceBetweenCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    DistanceBetweenCharacteristicNominalType::ZoneLimit_optional& DistanceBetweenCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void DistanceBetweenCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void DistanceBetweenCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void DistanceBetweenCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // DistanceBetweenCharacteristicActualType
    // 

    const DistanceBetweenCharacteristicActualType::AnalysisVector_optional& DistanceBetweenCharacteristicActualType::
    AnalysisVector () const
    {
      return this->AnalysisVector_;
    }

    DistanceBetweenCharacteristicActualType::AnalysisVector_optional& DistanceBetweenCharacteristicActualType::
    AnalysisVector ()
    {
      return this->AnalysisVector_;
    }

    void DistanceBetweenCharacteristicActualType::
    AnalysisVector (const AnalysisVector_type& x)
    {
      this->AnalysisVector_.set (x);
    }

    void DistanceBetweenCharacteristicActualType::
    AnalysisVector (const AnalysisVector_optional& x)
    {
      this->AnalysisVector_ = x;
    }

    void DistanceBetweenCharacteristicActualType::
    AnalysisVector (::std::auto_ptr< AnalysisVector_type > x)
    {
      this->AnalysisVector_.set (x);
    }


    // RadiusCharacteristicItemType
    // 


    // RadiusCharacteristicDefinitionType
    // 

    const RadiusCharacteristicDefinitionType::ControlledRadius_optional& RadiusCharacteristicDefinitionType::
    ControlledRadius () const
    {
      return this->ControlledRadius_;
    }

    RadiusCharacteristicDefinitionType::ControlledRadius_optional& RadiusCharacteristicDefinitionType::
    ControlledRadius ()
    {
      return this->ControlledRadius_;
    }

    void RadiusCharacteristicDefinitionType::
    ControlledRadius (const ControlledRadius_type& x)
    {
      this->ControlledRadius_.set (x);
    }

    void RadiusCharacteristicDefinitionType::
    ControlledRadius (const ControlledRadius_optional& x)
    {
      this->ControlledRadius_ = x;
    }


    // RadiusCharacteristicNominalType
    // 


    // RadiusCharacteristicActualType
    // 


    // ChordCharacteristicItemType
    // 


    // ChordCharacteristicDefinitionType
    // 


    // ChordCharacteristicNominalType
    // 


    // ChordCharacteristicActualType
    // 


    // RunoutCharacteristicItemBaseType
    // 


    // RunoutCharacteristicDefinitionBaseType
    // 

    const RunoutCharacteristicDefinitionBaseType::ToleranceValue_type& RunoutCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    RunoutCharacteristicDefinitionBaseType::ToleranceValue_type& RunoutCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void RunoutCharacteristicDefinitionBaseType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const RunoutCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_.get ();
    }

    RunoutCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_.get ();
    }

    void RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void RunoutCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (x);
    }


    // RunoutCharacteristicNominalBaseType
    // 

    const RunoutCharacteristicNominalBaseType::ZoneLimit_optional& RunoutCharacteristicNominalBaseType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    RunoutCharacteristicNominalBaseType::ZoneLimit_optional& RunoutCharacteristicNominalBaseType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void RunoutCharacteristicNominalBaseType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void RunoutCharacteristicNominalBaseType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void RunoutCharacteristicNominalBaseType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // RunoutCharacteristicActualBaseType
    // 

    const RunoutCharacteristicActualBaseType::DatumsOk_optional& RunoutCharacteristicActualBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    RunoutCharacteristicActualBaseType::DatumsOk_optional& RunoutCharacteristicActualBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void RunoutCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void RunoutCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }


    // CircularRunoutCharacteristicItemType
    // 


    // CircularRunoutCharacteristicDefinitionType
    // 


    // CircularRunoutCharacteristicNominalType
    // 

    const CircularRunoutCharacteristicNominalType::ZoneDirection_optional& CircularRunoutCharacteristicNominalType::
    ZoneDirection () const
    {
      return this->ZoneDirection_;
    }

    CircularRunoutCharacteristicNominalType::ZoneDirection_optional& CircularRunoutCharacteristicNominalType::
    ZoneDirection ()
    {
      return this->ZoneDirection_;
    }

    void CircularRunoutCharacteristicNominalType::
    ZoneDirection (const ZoneDirection_type& x)
    {
      this->ZoneDirection_.set (x);
    }

    void CircularRunoutCharacteristicNominalType::
    ZoneDirection (const ZoneDirection_optional& x)
    {
      this->ZoneDirection_ = x;
    }

    void CircularRunoutCharacteristicNominalType::
    ZoneDirection (::std::auto_ptr< ZoneDirection_type > x)
    {
      this->ZoneDirection_.set (x);
    }


    // CircularRunoutCharacteristicActualType
    // 


    // TotalRunoutCharacteristicItemType
    // 


    // TotalRunoutCharacteristicDefinitionType
    // 


    // TotalRunoutCharacteristicNominalType
    // 


    // TotalRunoutCharacteristicActualType
    // 


    // ConcentricitySphericalZoneType
    // 


    // ConcentricityDiametricalZoneType
    // 


    // ConcentricityNonDiametricalZoneType
    // 


    // ConcentricityZoneShapeType
    // 

    const ConcentricityZoneShapeType::SphericalZone_optional& ConcentricityZoneShapeType::
    SphericalZone () const
    {
      return this->SphericalZone_;
    }

    ConcentricityZoneShapeType::SphericalZone_optional& ConcentricityZoneShapeType::
    SphericalZone ()
    {
      return this->SphericalZone_;
    }

    void ConcentricityZoneShapeType::
    SphericalZone (const SphericalZone_type& x)
    {
      this->SphericalZone_.set (x);
    }

    void ConcentricityZoneShapeType::
    SphericalZone (const SphericalZone_optional& x)
    {
      this->SphericalZone_ = x;
    }

    void ConcentricityZoneShapeType::
    SphericalZone (::std::auto_ptr< SphericalZone_type > x)
    {
      this->SphericalZone_.set (x);
    }

    const ConcentricityZoneShapeType::DiametricalZone_optional& ConcentricityZoneShapeType::
    DiametricalZone () const
    {
      return this->DiametricalZone_;
    }

    ConcentricityZoneShapeType::DiametricalZone_optional& ConcentricityZoneShapeType::
    DiametricalZone ()
    {
      return this->DiametricalZone_;
    }

    void ConcentricityZoneShapeType::
    DiametricalZone (const DiametricalZone_type& x)
    {
      this->DiametricalZone_.set (x);
    }

    void ConcentricityZoneShapeType::
    DiametricalZone (const DiametricalZone_optional& x)
    {
      this->DiametricalZone_ = x;
    }

    void ConcentricityZoneShapeType::
    DiametricalZone (::std::auto_ptr< DiametricalZone_type > x)
    {
      this->DiametricalZone_.set (x);
    }

    const ConcentricityZoneShapeType::NonDiametricalZone_optional& ConcentricityZoneShapeType::
    NonDiametricalZone () const
    {
      return this->NonDiametricalZone_;
    }

    ConcentricityZoneShapeType::NonDiametricalZone_optional& ConcentricityZoneShapeType::
    NonDiametricalZone ()
    {
      return this->NonDiametricalZone_;
    }

    void ConcentricityZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_type& x)
    {
      this->NonDiametricalZone_.set (x);
    }

    void ConcentricityZoneShapeType::
    NonDiametricalZone (const NonDiametricalZone_optional& x)
    {
      this->NonDiametricalZone_ = x;
    }

    void ConcentricityZoneShapeType::
    NonDiametricalZone (::std::auto_ptr< NonDiametricalZone_type > x)
    {
      this->NonDiametricalZone_.set (x);
    }


    // ConcentricityCharacteristicItemType
    // 


    // ConcentricityCharacteristicDefinitionType
    // 

    const ConcentricityCharacteristicDefinitionType::ZoneShape_type& ConcentricityCharacteristicDefinitionType::
    ZoneShape () const
    {
      return this->ZoneShape_.get ();
    }

    ConcentricityCharacteristicDefinitionType::ZoneShape_type& ConcentricityCharacteristicDefinitionType::
    ZoneShape ()
    {
      return this->ZoneShape_.get ();
    }

    void ConcentricityCharacteristicDefinitionType::
    ZoneShape (const ZoneShape_type& x)
    {
      this->ZoneShape_.set (x);
    }

    void ConcentricityCharacteristicDefinitionType::
    ZoneShape (::std::auto_ptr< ZoneShape_type > x)
    {
      this->ZoneShape_.set (x);
    }


    // ConcentricityCharacteristicNominalType
    // 

    const ConcentricityCharacteristicNominalType::ZoneLimit_optional& ConcentricityCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    ConcentricityCharacteristicNominalType::ZoneLimit_optional& ConcentricityCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void ConcentricityCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void ConcentricityCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void ConcentricityCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // ConcentricityCharacteristicActualType
    // 


    // SymmetryCharacteristicItemType
    // 


    // SymmetryCharacteristicDefinitionType
    // 

    const SymmetryCharacteristicDefinitionType::SecondCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition () const
    {
      return this->SecondCompositeSegmentSymmetryDefinition_;
    }

    SymmetryCharacteristicDefinitionType::SecondCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition ()
    {
      return this->SecondCompositeSegmentSymmetryDefinition_;
    }

    void SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition (const SecondCompositeSegmentSymmetryDefinition_type& x)
    {
      this->SecondCompositeSegmentSymmetryDefinition_.set (x);
    }

    void SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition (const SecondCompositeSegmentSymmetryDefinition_optional& x)
    {
      this->SecondCompositeSegmentSymmetryDefinition_ = x;
    }

    void SymmetryCharacteristicDefinitionType::
    SecondCompositeSegmentSymmetryDefinition (::std::auto_ptr< SecondCompositeSegmentSymmetryDefinition_type > x)
    {
      this->SecondCompositeSegmentSymmetryDefinition_.set (x);
    }

    const SymmetryCharacteristicDefinitionType::ThirdCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition () const
    {
      return this->ThirdCompositeSegmentSymmetryDefinition_;
    }

    SymmetryCharacteristicDefinitionType::ThirdCompositeSegmentSymmetryDefinition_optional& SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition ()
    {
      return this->ThirdCompositeSegmentSymmetryDefinition_;
    }

    void SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition (const ThirdCompositeSegmentSymmetryDefinition_type& x)
    {
      this->ThirdCompositeSegmentSymmetryDefinition_.set (x);
    }

    void SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition (const ThirdCompositeSegmentSymmetryDefinition_optional& x)
    {
      this->ThirdCompositeSegmentSymmetryDefinition_ = x;
    }

    void SymmetryCharacteristicDefinitionType::
    ThirdCompositeSegmentSymmetryDefinition (::std::auto_ptr< ThirdCompositeSegmentSymmetryDefinition_type > x)
    {
      this->ThirdCompositeSegmentSymmetryDefinition_.set (x);
    }


    // SymmetryCharacteristicNominalType
    // 


    // SymmetryCharacteristicActualType
    // 

    const SymmetryCharacteristicActualType::SecondCompositeSegmentSymmetryActual_optional& SymmetryCharacteristicActualType::
    SecondCompositeSegmentSymmetryActual () const
    {
      return this->SecondCompositeSegmentSymmetryActual_;
    }

    SymmetryCharacteristicActualType::SecondCompositeSegmentSymmetryActual_optional& SymmetryCharacteristicActualType::
    SecondCompositeSegmentSymmetryActual ()
    {
      return this->SecondCompositeSegmentSymmetryActual_;
    }

    void SymmetryCharacteristicActualType::
    SecondCompositeSegmentSymmetryActual (const SecondCompositeSegmentSymmetryActual_type& x)
    {
      this->SecondCompositeSegmentSymmetryActual_.set (x);
    }

    void SymmetryCharacteristicActualType::
    SecondCompositeSegmentSymmetryActual (const SecondCompositeSegmentSymmetryActual_optional& x)
    {
      this->SecondCompositeSegmentSymmetryActual_ = x;
    }

    void SymmetryCharacteristicActualType::
    SecondCompositeSegmentSymmetryActual (::std::auto_ptr< SecondCompositeSegmentSymmetryActual_type > x)
    {
      this->SecondCompositeSegmentSymmetryActual_.set (x);
    }

    const SymmetryCharacteristicActualType::ThirdCompositeSegmentSymmetryActual_optional& SymmetryCharacteristicActualType::
    ThirdCompositeSegmentSymmetryActual () const
    {
      return this->ThirdCompositeSegmentSymmetryActual_;
    }

    SymmetryCharacteristicActualType::ThirdCompositeSegmentSymmetryActual_optional& SymmetryCharacteristicActualType::
    ThirdCompositeSegmentSymmetryActual ()
    {
      return this->ThirdCompositeSegmentSymmetryActual_;
    }

    void SymmetryCharacteristicActualType::
    ThirdCompositeSegmentSymmetryActual (const ThirdCompositeSegmentSymmetryActual_type& x)
    {
      this->ThirdCompositeSegmentSymmetryActual_.set (x);
    }

    void SymmetryCharacteristicActualType::
    ThirdCompositeSegmentSymmetryActual (const ThirdCompositeSegmentSymmetryActual_optional& x)
    {
      this->ThirdCompositeSegmentSymmetryActual_ = x;
    }

    void SymmetryCharacteristicActualType::
    ThirdCompositeSegmentSymmetryActual (::std::auto_ptr< ThirdCompositeSegmentSymmetryActual_type > x)
    {
      this->ThirdCompositeSegmentSymmetryActual_.set (x);
    }


    // ProfileCharacteristicItemBaseType
    // 


    // ProfileCharacteristicDefinitionBaseType
    // 

    const ProfileCharacteristicDefinitionBaseType::ToleranceValue_type& ProfileCharacteristicDefinitionBaseType::
    ToleranceValue () const
    {
      return this->ToleranceValue_.get ();
    }

    ProfileCharacteristicDefinitionBaseType::ToleranceValue_type& ProfileCharacteristicDefinitionBaseType::
    ToleranceValue ()
    {
      return this->ToleranceValue_.get ();
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceValue (const ToleranceValue_type& x)
    {
      this->ToleranceValue_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    ToleranceValue (::std::auto_ptr< ToleranceValue_type > x)
    {
      this->ToleranceValue_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::OuterDisposition_optional& ProfileCharacteristicDefinitionBaseType::
    OuterDisposition () const
    {
      return this->OuterDisposition_;
    }

    ProfileCharacteristicDefinitionBaseType::OuterDisposition_optional& ProfileCharacteristicDefinitionBaseType::
    OuterDisposition ()
    {
      return this->OuterDisposition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OuterDisposition (const OuterDisposition_type& x)
    {
      this->OuterDisposition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    OuterDisposition (const OuterDisposition_optional& x)
    {
      this->OuterDisposition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OuterDisposition (::std::auto_ptr< OuterDisposition_type > x)
    {
      this->OuterDisposition_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::UnequallyDisposedZone_optional& ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone () const
    {
      return this->UnequallyDisposedZone_;
    }

    ProfileCharacteristicDefinitionBaseType::UnequallyDisposedZone_optional& ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone ()
    {
      return this->UnequallyDisposedZone_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone (const UnequallyDisposedZone_type& x)
    {
      this->UnequallyDisposedZone_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone (const UnequallyDisposedZone_optional& x)
    {
      this->UnequallyDisposedZone_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    UnequallyDisposedZone (::std::auto_ptr< UnequallyDisposedZone_type > x)
    {
      this->UnequallyDisposedZone_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::OffsetZone_optional& ProfileCharacteristicDefinitionBaseType::
    OffsetZone () const
    {
      return this->OffsetZone_;
    }

    ProfileCharacteristicDefinitionBaseType::OffsetZone_optional& ProfileCharacteristicDefinitionBaseType::
    OffsetZone ()
    {
      return this->OffsetZone_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OffsetZone (const OffsetZone_type& x)
    {
      this->OffsetZone_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    OffsetZone (const OffsetZone_optional& x)
    {
      this->OffsetZone_ = x;
    }

    const ProfileCharacteristicDefinitionBaseType::SecondCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition () const
    {
      return this->SecondCompositeSegmentProfileDefinition_;
    }

    ProfileCharacteristicDefinitionBaseType::SecondCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition ()
    {
      return this->SecondCompositeSegmentProfileDefinition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition (const SecondCompositeSegmentProfileDefinition_type& x)
    {
      this->SecondCompositeSegmentProfileDefinition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition (const SecondCompositeSegmentProfileDefinition_optional& x)
    {
      this->SecondCompositeSegmentProfileDefinition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    SecondCompositeSegmentProfileDefinition (::std::auto_ptr< SecondCompositeSegmentProfileDefinition_type > x)
    {
      this->SecondCompositeSegmentProfileDefinition_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::ThirdCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition () const
    {
      return this->ThirdCompositeSegmentProfileDefinition_;
    }

    ProfileCharacteristicDefinitionBaseType::ThirdCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition ()
    {
      return this->ThirdCompositeSegmentProfileDefinition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition (const ThirdCompositeSegmentProfileDefinition_type& x)
    {
      this->ThirdCompositeSegmentProfileDefinition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition (const ThirdCompositeSegmentProfileDefinition_optional& x)
    {
      this->ThirdCompositeSegmentProfileDefinition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    ThirdCompositeSegmentProfileDefinition (::std::auto_ptr< ThirdCompositeSegmentProfileDefinition_type > x)
    {
      this->ThirdCompositeSegmentProfileDefinition_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::FourthCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition () const
    {
      return this->FourthCompositeSegmentProfileDefinition_;
    }

    ProfileCharacteristicDefinitionBaseType::FourthCompositeSegmentProfileDefinition_optional& ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition ()
    {
      return this->FourthCompositeSegmentProfileDefinition_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition (const FourthCompositeSegmentProfileDefinition_type& x)
    {
      this->FourthCompositeSegmentProfileDefinition_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition (const FourthCompositeSegmentProfileDefinition_optional& x)
    {
      this->FourthCompositeSegmentProfileDefinition_ = x;
    }

    void ProfileCharacteristicDefinitionBaseType::
    FourthCompositeSegmentProfileDefinition (::std::auto_ptr< FourthCompositeSegmentProfileDefinition_type > x)
    {
      this->FourthCompositeSegmentProfileDefinition_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId () const
    {
      return this->DatumReferenceFrameId_.get ();
    }

    ProfileCharacteristicDefinitionBaseType::DatumReferenceFrameId_type& ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId ()
    {
      return this->DatumReferenceFrameId_.get ();
    }

    void ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (const DatumReferenceFrameId_type& x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    DatumReferenceFrameId (::std::auto_ptr< DatumReferenceFrameId_type > x)
    {
      this->DatumReferenceFrameId_.set (x);
    }

    const ProfileCharacteristicDefinitionBaseType::OrientationOnly_optional& ProfileCharacteristicDefinitionBaseType::
    OrientationOnly () const
    {
      return this->OrientationOnly_;
    }

    ProfileCharacteristicDefinitionBaseType::OrientationOnly_optional& ProfileCharacteristicDefinitionBaseType::
    OrientationOnly ()
    {
      return this->OrientationOnly_;
    }

    void ProfileCharacteristicDefinitionBaseType::
    OrientationOnly (const OrientationOnly_type& x)
    {
      this->OrientationOnly_.set (x);
    }

    void ProfileCharacteristicDefinitionBaseType::
    OrientationOnly (const OrientationOnly_optional& x)
    {
      this->OrientationOnly_ = x;
    }


    // ProfileCharacteristicNominalBaseType
    // 

    const ProfileCharacteristicNominalBaseType::TargetValue_optional& ProfileCharacteristicNominalBaseType::
    TargetValue () const
    {
      return this->TargetValue_;
    }

    ProfileCharacteristicNominalBaseType::TargetValue_optional& ProfileCharacteristicNominalBaseType::
    TargetValue ()
    {
      return this->TargetValue_;
    }

    void ProfileCharacteristicNominalBaseType::
    TargetValue (const TargetValue_type& x)
    {
      this->TargetValue_.set (x);
    }

    void ProfileCharacteristicNominalBaseType::
    TargetValue (const TargetValue_optional& x)
    {
      this->TargetValue_ = x;
    }

    void ProfileCharacteristicNominalBaseType::
    TargetValue (::std::auto_ptr< TargetValue_type > x)
    {
      this->TargetValue_.set (x);
    }


    // ProfileCharacteristicActualBaseType
    // 

    const ProfileCharacteristicActualBaseType::WorstPositiveDeviation_optional& ProfileCharacteristicActualBaseType::
    WorstPositiveDeviation () const
    {
      return this->WorstPositiveDeviation_;
    }

    ProfileCharacteristicActualBaseType::WorstPositiveDeviation_optional& ProfileCharacteristicActualBaseType::
    WorstPositiveDeviation ()
    {
      return this->WorstPositiveDeviation_;
    }

    void ProfileCharacteristicActualBaseType::
    WorstPositiveDeviation (const WorstPositiveDeviation_type& x)
    {
      this->WorstPositiveDeviation_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    WorstPositiveDeviation (const WorstPositiveDeviation_optional& x)
    {
      this->WorstPositiveDeviation_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    WorstPositiveDeviation (::std::auto_ptr< WorstPositiveDeviation_type > x)
    {
      this->WorstPositiveDeviation_.set (x);
    }

    const ProfileCharacteristicActualBaseType::WorstNegativeDeviation_optional& ProfileCharacteristicActualBaseType::
    WorstNegativeDeviation () const
    {
      return this->WorstNegativeDeviation_;
    }

    ProfileCharacteristicActualBaseType::WorstNegativeDeviation_optional& ProfileCharacteristicActualBaseType::
    WorstNegativeDeviation ()
    {
      return this->WorstNegativeDeviation_;
    }

    void ProfileCharacteristicActualBaseType::
    WorstNegativeDeviation (const WorstNegativeDeviation_type& x)
    {
      this->WorstNegativeDeviation_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    WorstNegativeDeviation (const WorstNegativeDeviation_optional& x)
    {
      this->WorstNegativeDeviation_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    WorstNegativeDeviation (::std::auto_ptr< WorstNegativeDeviation_type > x)
    {
      this->WorstNegativeDeviation_.set (x);
    }

    const ProfileCharacteristicActualBaseType::PointDeviations_optional& ProfileCharacteristicActualBaseType::
    PointDeviations () const
    {
      return this->PointDeviations_;
    }

    ProfileCharacteristicActualBaseType::PointDeviations_optional& ProfileCharacteristicActualBaseType::
    PointDeviations ()
    {
      return this->PointDeviations_;
    }

    void ProfileCharacteristicActualBaseType::
    PointDeviations (const PointDeviations_type& x)
    {
      this->PointDeviations_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    PointDeviations (const PointDeviations_optional& x)
    {
      this->PointDeviations_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    PointDeviations (::std::auto_ptr< PointDeviations_type > x)
    {
      this->PointDeviations_.set (x);
    }

    const ProfileCharacteristicActualBaseType::DatumsOk_optional& ProfileCharacteristicActualBaseType::
    DatumsOk () const
    {
      return this->DatumsOk_;
    }

    ProfileCharacteristicActualBaseType::DatumsOk_optional& ProfileCharacteristicActualBaseType::
    DatumsOk ()
    {
      return this->DatumsOk_;
    }

    void ProfileCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_type& x)
    {
      this->DatumsOk_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    DatumsOk (const DatumsOk_optional& x)
    {
      this->DatumsOk_ = x;
    }

    const ProfileCharacteristicActualBaseType::DRFTransformActualId_optional& ProfileCharacteristicActualBaseType::
    DRFTransformActualId () const
    {
      return this->DRFTransformActualId_;
    }

    ProfileCharacteristicActualBaseType::DRFTransformActualId_optional& ProfileCharacteristicActualBaseType::
    DRFTransformActualId ()
    {
      return this->DRFTransformActualId_;
    }

    void ProfileCharacteristicActualBaseType::
    DRFTransformActualId (const DRFTransformActualId_type& x)
    {
      this->DRFTransformActualId_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    DRFTransformActualId (const DRFTransformActualId_optional& x)
    {
      this->DRFTransformActualId_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    DRFTransformActualId (::std::auto_ptr< DRFTransformActualId_type > x)
    {
      this->DRFTransformActualId_.set (x);
    }

    const ProfileCharacteristicActualBaseType::SecondCompositeSegmentProfileActual_optional& ProfileCharacteristicActualBaseType::
    SecondCompositeSegmentProfileActual () const
    {
      return this->SecondCompositeSegmentProfileActual_;
    }

    ProfileCharacteristicActualBaseType::SecondCompositeSegmentProfileActual_optional& ProfileCharacteristicActualBaseType::
    SecondCompositeSegmentProfileActual ()
    {
      return this->SecondCompositeSegmentProfileActual_;
    }

    void ProfileCharacteristicActualBaseType::
    SecondCompositeSegmentProfileActual (const SecondCompositeSegmentProfileActual_type& x)
    {
      this->SecondCompositeSegmentProfileActual_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    SecondCompositeSegmentProfileActual (const SecondCompositeSegmentProfileActual_optional& x)
    {
      this->SecondCompositeSegmentProfileActual_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    SecondCompositeSegmentProfileActual (::std::auto_ptr< SecondCompositeSegmentProfileActual_type > x)
    {
      this->SecondCompositeSegmentProfileActual_.set (x);
    }

    const ProfileCharacteristicActualBaseType::ThirdCompositeSegmentProfileActual_optional& ProfileCharacteristicActualBaseType::
    ThirdCompositeSegmentProfileActual () const
    {
      return this->ThirdCompositeSegmentProfileActual_;
    }

    ProfileCharacteristicActualBaseType::ThirdCompositeSegmentProfileActual_optional& ProfileCharacteristicActualBaseType::
    ThirdCompositeSegmentProfileActual ()
    {
      return this->ThirdCompositeSegmentProfileActual_;
    }

    void ProfileCharacteristicActualBaseType::
    ThirdCompositeSegmentProfileActual (const ThirdCompositeSegmentProfileActual_type& x)
    {
      this->ThirdCompositeSegmentProfileActual_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    ThirdCompositeSegmentProfileActual (const ThirdCompositeSegmentProfileActual_optional& x)
    {
      this->ThirdCompositeSegmentProfileActual_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    ThirdCompositeSegmentProfileActual (::std::auto_ptr< ThirdCompositeSegmentProfileActual_type > x)
    {
      this->ThirdCompositeSegmentProfileActual_.set (x);
    }

    const ProfileCharacteristicActualBaseType::FourthCompositeSegmentProfileActual_optional& ProfileCharacteristicActualBaseType::
    FourthCompositeSegmentProfileActual () const
    {
      return this->FourthCompositeSegmentProfileActual_;
    }

    ProfileCharacteristicActualBaseType::FourthCompositeSegmentProfileActual_optional& ProfileCharacteristicActualBaseType::
    FourthCompositeSegmentProfileActual ()
    {
      return this->FourthCompositeSegmentProfileActual_;
    }

    void ProfileCharacteristicActualBaseType::
    FourthCompositeSegmentProfileActual (const FourthCompositeSegmentProfileActual_type& x)
    {
      this->FourthCompositeSegmentProfileActual_.set (x);
    }

    void ProfileCharacteristicActualBaseType::
    FourthCompositeSegmentProfileActual (const FourthCompositeSegmentProfileActual_optional& x)
    {
      this->FourthCompositeSegmentProfileActual_ = x;
    }

    void ProfileCharacteristicActualBaseType::
    FourthCompositeSegmentProfileActual (::std::auto_ptr< FourthCompositeSegmentProfileActual_type > x)
    {
      this->FourthCompositeSegmentProfileActual_.set (x);
    }


    // LineProfileCharacteristicItemType
    // 


    // LineProfileCharacteristicDefinitionType
    // 

    const LineProfileCharacteristicDefinitionType::Extent_optional& LineProfileCharacteristicDefinitionType::
    Extent () const
    {
      return this->Extent_;
    }

    LineProfileCharacteristicDefinitionType::Extent_optional& LineProfileCharacteristicDefinitionType::
    Extent ()
    {
      return this->Extent_;
    }

    void LineProfileCharacteristicDefinitionType::
    Extent (const Extent_type& x)
    {
      this->Extent_.set (x);
    }

    void LineProfileCharacteristicDefinitionType::
    Extent (const Extent_optional& x)
    {
      this->Extent_ = x;
    }

    void LineProfileCharacteristicDefinitionType::
    Extent (::std::auto_ptr< Extent_type > x)
    {
      this->Extent_.set (x);
    }


    // LineProfileCharacteristicNominalType
    // 

    const LineProfileCharacteristicNominalType::Vector_type& LineProfileCharacteristicNominalType::
    Vector () const
    {
      return this->Vector_.get ();
    }

    LineProfileCharacteristicNominalType::Vector_type& LineProfileCharacteristicNominalType::
    Vector ()
    {
      return this->Vector_.get ();
    }

    void LineProfileCharacteristicNominalType::
    Vector (const Vector_type& x)
    {
      this->Vector_.set (x);
    }

    void LineProfileCharacteristicNominalType::
    Vector (::std::auto_ptr< Vector_type > x)
    {
      this->Vector_.set (x);
    }

    const LineProfileCharacteristicNominalType::ZoneLimit_optional& LineProfileCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_;
    }

    LineProfileCharacteristicNominalType::ZoneLimit_optional& LineProfileCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_;
    }

    void LineProfileCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void LineProfileCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_optional& x)
    {
      this->ZoneLimit_ = x;
    }

    void LineProfileCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // LineProfileCharacteristicActualType
    // 


    // PointProfileCharacteristicItemType
    // 


    // PointProfileCharacteristicDefinitionType
    // 


    // PointProfileCharacteristicNominalType
    // 


    // PointProfileCharacteristicActualType
    // 


    // SurfaceProfileCharacteristicItemType
    // 


    // SurfaceProfileCharacteristicDefinitionType
    // 

    const SurfaceProfileCharacteristicDefinitionType::Extent_optional& SurfaceProfileCharacteristicDefinitionType::
    Extent () const
    {
      return this->Extent_;
    }

    SurfaceProfileCharacteristicDefinitionType::Extent_optional& SurfaceProfileCharacteristicDefinitionType::
    Extent ()
    {
      return this->Extent_;
    }

    void SurfaceProfileCharacteristicDefinitionType::
    Extent (const Extent_type& x)
    {
      this->Extent_.set (x);
    }

    void SurfaceProfileCharacteristicDefinitionType::
    Extent (const Extent_optional& x)
    {
      this->Extent_ = x;
    }

    void SurfaceProfileCharacteristicDefinitionType::
    Extent (::std::auto_ptr< Extent_type > x)
    {
      this->Extent_.set (x);
    }


    // SurfaceProfileCharacteristicNominalType
    // 

    const SurfaceProfileCharacteristicNominalType::CircularZoneLimit_optional& SurfaceProfileCharacteristicNominalType::
    CircularZoneLimit () const
    {
      return this->CircularZoneLimit_;
    }

    SurfaceProfileCharacteristicNominalType::CircularZoneLimit_optional& SurfaceProfileCharacteristicNominalType::
    CircularZoneLimit ()
    {
      return this->CircularZoneLimit_;
    }

    void SurfaceProfileCharacteristicNominalType::
    CircularZoneLimit (const CircularZoneLimit_type& x)
    {
      this->CircularZoneLimit_.set (x);
    }

    void SurfaceProfileCharacteristicNominalType::
    CircularZoneLimit (const CircularZoneLimit_optional& x)
    {
      this->CircularZoneLimit_ = x;
    }

    void SurfaceProfileCharacteristicNominalType::
    CircularZoneLimit (::std::auto_ptr< CircularZoneLimit_type > x)
    {
      this->CircularZoneLimit_.set (x);
    }

    const SurfaceProfileCharacteristicNominalType::DirectionalZoneLimit_optional& SurfaceProfileCharacteristicNominalType::
    DirectionalZoneLimit () const
    {
      return this->DirectionalZoneLimit_;
    }

    SurfaceProfileCharacteristicNominalType::DirectionalZoneLimit_optional& SurfaceProfileCharacteristicNominalType::
    DirectionalZoneLimit ()
    {
      return this->DirectionalZoneLimit_;
    }

    void SurfaceProfileCharacteristicNominalType::
    DirectionalZoneLimit (const DirectionalZoneLimit_type& x)
    {
      this->DirectionalZoneLimit_.set (x);
    }

    void SurfaceProfileCharacteristicNominalType::
    DirectionalZoneLimit (const DirectionalZoneLimit_optional& x)
    {
      this->DirectionalZoneLimit_ = x;
    }

    void SurfaceProfileCharacteristicNominalType::
    DirectionalZoneLimit (::std::auto_ptr< DirectionalZoneLimit_type > x)
    {
      this->DirectionalZoneLimit_.set (x);
    }

    const SurfaceProfileCharacteristicNominalType::RectangularZoneLimit_optional& SurfaceProfileCharacteristicNominalType::
    RectangularZoneLimit () const
    {
      return this->RectangularZoneLimit_;
    }

    SurfaceProfileCharacteristicNominalType::RectangularZoneLimit_optional& SurfaceProfileCharacteristicNominalType::
    RectangularZoneLimit ()
    {
      return this->RectangularZoneLimit_;
    }

    void SurfaceProfileCharacteristicNominalType::
    RectangularZoneLimit (const RectangularZoneLimit_type& x)
    {
      this->RectangularZoneLimit_.set (x);
    }

    void SurfaceProfileCharacteristicNominalType::
    RectangularZoneLimit (const RectangularZoneLimit_optional& x)
    {
      this->RectangularZoneLimit_ = x;
    }

    void SurfaceProfileCharacteristicNominalType::
    RectangularZoneLimit (::std::auto_ptr< RectangularZoneLimit_type > x)
    {
      this->RectangularZoneLimit_.set (x);
    }


    // SurfaceProfileCharacteristicActualType
    // 


    // SurfaceProfileNonUniformCharacteristicItemType
    // 


    // SurfaceProfileNonUniformCharacteristicDefinitionType
    // 

    const SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointToleranceValue_type& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue () const
    {
      return this->ToPointToleranceValue_.get ();
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::ToPointToleranceValue_type& SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue ()
    {
      return this->ToPointToleranceValue_.get ();
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue (const ToPointToleranceValue_type& x)
    {
      this->ToPointToleranceValue_.set (x);
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    ToPointToleranceValue (::std::auto_ptr< ToPointToleranceValue_type > x)
    {
      this->ToPointToleranceValue_.set (x);
    }


    // SurfaceProfileNonUniformCharacteristicNominalType
    // 

    const SurfaceProfileNonUniformCharacteristicNominalType::ZoneLimit_type& SurfaceProfileNonUniformCharacteristicNominalType::
    ZoneLimit () const
    {
      return this->ZoneLimit_.get ();
    }

    SurfaceProfileNonUniformCharacteristicNominalType::ZoneLimit_type& SurfaceProfileNonUniformCharacteristicNominalType::
    ZoneLimit ()
    {
      return this->ZoneLimit_.get ();
    }

    void SurfaceProfileNonUniformCharacteristicNominalType::
    ZoneLimit (const ZoneLimit_type& x)
    {
      this->ZoneLimit_.set (x);
    }

    void SurfaceProfileNonUniformCharacteristicNominalType::
    ZoneLimit (::std::auto_ptr< ZoneLimit_type > x)
    {
      this->ZoneLimit_.set (x);
    }


    // SurfaceProfileNonUniformCharacteristicActualType
    // 


    // ZoneRadiiType
    // 

    const ZoneRadiiType::MinRadius_type& ZoneRadiiType::
    MinRadius () const
    {
      return this->MinRadius_.get ();
    }

    ZoneRadiiType::MinRadius_type& ZoneRadiiType::
    MinRadius ()
    {
      return this->MinRadius_.get ();
    }

    void ZoneRadiiType::
    MinRadius (const MinRadius_type& x)
    {
      this->MinRadius_.set (x);
    }

    void ZoneRadiiType::
    MinRadius (::std::auto_ptr< MinRadius_type > x)
    {
      this->MinRadius_.set (x);
    }

    const ZoneRadiiType::MaxRadius_type& ZoneRadiiType::
    MaxRadius () const
    {
      return this->MaxRadius_.get ();
    }

    ZoneRadiiType::MaxRadius_type& ZoneRadiiType::
    MaxRadius ()
    {
      return this->MaxRadius_.get ();
    }

    void ZoneRadiiType::
    MaxRadius (const MaxRadius_type& x)
    {
      this->MaxRadius_.set (x);
    }

    void ZoneRadiiType::
    MaxRadius (::std::auto_ptr< MaxRadius_type > x)
    {
      this->MaxRadius_.set (x);
    }


    // ActualZoneRadiiType
    // 

    const ActualZoneRadiiType::MinRadius_type& ActualZoneRadiiType::
    MinRadius () const
    {
      return this->MinRadius_.get ();
    }

    ActualZoneRadiiType::MinRadius_type& ActualZoneRadiiType::
    MinRadius ()
    {
      return this->MinRadius_.get ();
    }

    void ActualZoneRadiiType::
    MinRadius (const MinRadius_type& x)
    {
      this->MinRadius_.set (x);
    }

    void ActualZoneRadiiType::
    MinRadius (::std::auto_ptr< MinRadius_type > x)
    {
      this->MinRadius_.set (x);
    }

    const ActualZoneRadiiType::MaxRadius_type& ActualZoneRadiiType::
    MaxRadius () const
    {
      return this->MaxRadius_.get ();
    }

    ActualZoneRadiiType::MaxRadius_type& ActualZoneRadiiType::
    MaxRadius ()
    {
      return this->MaxRadius_.get ();
    }

    void ActualZoneRadiiType::
    MaxRadius (const MaxRadius_type& x)
    {
      this->MaxRadius_.set (x);
    }

    void ActualZoneRadiiType::
    MaxRadius (::std::auto_ptr< MaxRadius_type > x)
    {
      this->MaxRadius_.set (x);
    }


    // CharacteristicGroupType
    // 

    const CharacteristicGroupType::CharacteristicItemIds_type& CharacteristicGroupType::
    CharacteristicItemIds () const
    {
      return this->CharacteristicItemIds_.get ();
    }

    CharacteristicGroupType::CharacteristicItemIds_type& CharacteristicGroupType::
    CharacteristicItemIds ()
    {
      return this->CharacteristicItemIds_.get ();
    }

    void CharacteristicGroupType::
    CharacteristicItemIds (const CharacteristicItemIds_type& x)
    {
      this->CharacteristicItemIds_.set (x);
    }

    void CharacteristicGroupType::
    CharacteristicItemIds (::std::auto_ptr< CharacteristicItemIds_type > x)
    {
      this->CharacteristicItemIds_.set (x);
    }

    const CharacteristicGroupType::Description_optional& CharacteristicGroupType::
    Description () const
    {
      return this->Description_;
    }

    CharacteristicGroupType::Description_optional& CharacteristicGroupType::
    Description ()
    {
      return this->Description_;
    }

    void CharacteristicGroupType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void CharacteristicGroupType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void CharacteristicGroupType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const CharacteristicGroupType::Name_optional& CharacteristicGroupType::
    Name () const
    {
      return this->Name_;
    }

    CharacteristicGroupType::Name_optional& CharacteristicGroupType::
    Name ()
    {
      return this->Name_;
    }

    void CharacteristicGroupType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void CharacteristicGroupType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void CharacteristicGroupType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const CharacteristicGroupType::TransformId_optional& CharacteristicGroupType::
    TransformId () const
    {
      return this->TransformId_;
    }

    CharacteristicGroupType::TransformId_optional& CharacteristicGroupType::
    TransformId ()
    {
      return this->TransformId_;
    }

    void CharacteristicGroupType::
    TransformId (const TransformId_type& x)
    {
      this->TransformId_.set (x);
    }

    void CharacteristicGroupType::
    TransformId (const TransformId_optional& x)
    {
      this->TransformId_ = x;
    }

    void CharacteristicGroupType::
    TransformId (::std::auto_ptr< TransformId_type > x)
    {
      this->TransformId_.set (x);
    }

    const CharacteristicGroupType::Units_optional& CharacteristicGroupType::
    Units () const
    {
      return this->Units_;
    }

    CharacteristicGroupType::Units_optional& CharacteristicGroupType::
    Units ()
    {
      return this->Units_;
    }

    void CharacteristicGroupType::
    Units (const Units_type& x)
    {
      this->Units_.set (x);
    }

    void CharacteristicGroupType::
    Units (const Units_optional& x)
    {
      this->Units_ = x;
    }

    void CharacteristicGroupType::
    Units (::std::auto_ptr< Units_type > x)
    {
      this->Units_.set (x);
    }

    const CharacteristicGroupType::Scale_optional& CharacteristicGroupType::
    Scale () const
    {
      return this->Scale_;
    }

    CharacteristicGroupType::Scale_optional& CharacteristicGroupType::
    Scale ()
    {
      return this->Scale_;
    }

    void CharacteristicGroupType::
    Scale (const Scale_type& x)
    {
      this->Scale_.set (x);
    }

    void CharacteristicGroupType::
    Scale (const Scale_optional& x)
    {
      this->Scale_ = x;
    }

    void CharacteristicGroupType::
    Scale (::std::auto_ptr< Scale_type > x)
    {
      this->Scale_.set (x);
    }

    const CharacteristicGroupType::id_type& CharacteristicGroupType::
    id () const
    {
      return this->id_.get ();
    }

    CharacteristicGroupType::id_type& CharacteristicGroupType::
    id ()
    {
      return this->id_.get ();
    }

    void CharacteristicGroupType::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void CharacteristicGroupType::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // CharacteristicManufacturingProcessGroupType
    // 

    const CharacteristicManufacturingProcessGroupType::ManufacturingProcessId_optional& CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId () const
    {
      return this->ManufacturingProcessId_;
    }

    CharacteristicManufacturingProcessGroupType::ManufacturingProcessId_optional& CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId ()
    {
      return this->ManufacturingProcessId_;
    }

    void CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId (const ManufacturingProcessId_type& x)
    {
      this->ManufacturingProcessId_.set (x);
    }

    void CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId (const ManufacturingProcessId_optional& x)
    {
      this->ManufacturingProcessId_ = x;
    }

    void CharacteristicManufacturingProcessGroupType::
    ManufacturingProcessId (::std::auto_ptr< ManufacturingProcessId_type > x)
    {
      this->ManufacturingProcessId_.set (x);
    }


    // CharacteristicSimultaneityGroupType
    // 


    // CharacteristicStatusEnumType
    // 

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CharacteristicStatusEnumType_literals_[v])
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const CharacteristicStatusEnumType& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CharacteristicStatusEnumType& CharacteristicStatusEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CharacteristicStatusEnumType_literals_[v]);

      return *this;
    }


    // CharacteristicStatusType
    // 

    const CharacteristicStatusType::CharacteristicStatusEnum_optional& CharacteristicStatusType::
    CharacteristicStatusEnum () const
    {
      return this->CharacteristicStatusEnum_;
    }

    CharacteristicStatusType::CharacteristicStatusEnum_optional& CharacteristicStatusType::
    CharacteristicStatusEnum ()
    {
      return this->CharacteristicStatusEnum_;
    }

    void CharacteristicStatusType::
    CharacteristicStatusEnum (const CharacteristicStatusEnum_type& x)
    {
      this->CharacteristicStatusEnum_.set (x);
    }

    void CharacteristicStatusType::
    CharacteristicStatusEnum (const CharacteristicStatusEnum_optional& x)
    {
      this->CharacteristicStatusEnum_ = x;
    }

    void CharacteristicStatusType::
    CharacteristicStatusEnum (::std::auto_ptr< CharacteristicStatusEnum_type > x)
    {
      this->CharacteristicStatusEnum_.set (x);
    }

    const CharacteristicStatusType::OtherCharacteristicStatus_optional& CharacteristicStatusType::
    OtherCharacteristicStatus () const
    {
      return this->OtherCharacteristicStatus_;
    }

    CharacteristicStatusType::OtherCharacteristicStatus_optional& CharacteristicStatusType::
    OtherCharacteristicStatus ()
    {
      return this->OtherCharacteristicStatus_;
    }

    void CharacteristicStatusType::
    OtherCharacteristicStatus (const OtherCharacteristicStatus_type& x)
    {
      this->OtherCharacteristicStatus_.set (x);
    }

    void CharacteristicStatusType::
    OtherCharacteristicStatus (const OtherCharacteristicStatus_optional& x)
    {
      this->OtherCharacteristicStatus_ = x;
    }

    void CharacteristicStatusType::
    OtherCharacteristicStatus (::std::auto_ptr< OtherCharacteristicStatus_type > x)
    {
      this->OtherCharacteristicStatus_.set (x);
    }


    // CharacteristicGroupStatusType
    // 

    const CharacteristicGroupStatusType::Status_type& CharacteristicGroupStatusType::
    Status () const
    {
      return this->Status_.get ();
    }

    CharacteristicGroupStatusType::Status_type& CharacteristicGroupStatusType::
    Status ()
    {
      return this->Status_.get ();
    }

    void CharacteristicGroupStatusType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void CharacteristicGroupStatusType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const CharacteristicGroupStatusType::GroupId_type& CharacteristicGroupStatusType::
    GroupId () const
    {
      return this->GroupId_.get ();
    }

    CharacteristicGroupStatusType::GroupId_type& CharacteristicGroupStatusType::
    GroupId ()
    {
      return this->GroupId_.get ();
    }

    void CharacteristicGroupStatusType::
    GroupId (const GroupId_type& x)
    {
      this->GroupId_.set (x);
    }

    void CharacteristicGroupStatusType::
    GroupId (::std::auto_ptr< GroupId_type > x)
    {
      this->GroupId_.set (x);
    }


    // PointDeviationType
    // 

    const PointDeviationType::MeasurePointActualId_type& PointDeviationType::
    MeasurePointActualId () const
    {
      return this->MeasurePointActualId_.get ();
    }

    PointDeviationType::MeasurePointActualId_type& PointDeviationType::
    MeasurePointActualId ()
    {
      return this->MeasurePointActualId_.get ();
    }

    void PointDeviationType::
    MeasurePointActualId (const MeasurePointActualId_type& x)
    {
      this->MeasurePointActualId_.set (x);
    }

    void PointDeviationType::
    MeasurePointActualId (::std::auto_ptr< MeasurePointActualId_type > x)
    {
      this->MeasurePointActualId_.set (x);
    }

    const PointDeviationType::Deviation_type& PointDeviationType::
    Deviation () const
    {
      return this->Deviation_.get ();
    }

    PointDeviationType::Deviation_type& PointDeviationType::
    Deviation ()
    {
      return this->Deviation_.get ();
    }

    void PointDeviationType::
    Deviation (const Deviation_type& x)
    {
      this->Deviation_.set (x);
    }

    void PointDeviationType::
    Deviation (::std::auto_ptr< Deviation_type > x)
    {
      this->Deviation_.set (x);
    }


    // PointDeviationsType
    // 

    const PointDeviationsType::PointDeviation_sequence& PointDeviationsType::
    PointDeviation () const
    {
      return this->PointDeviation_;
    }

    PointDeviationsType::PointDeviation_sequence& PointDeviationsType::
    PointDeviation ()
    {
      return this->PointDeviation_;
    }

    void PointDeviationsType::
    PointDeviation (const PointDeviation_sequence& s)
    {
      this->PointDeviation_ = s;
    }


    // ExtentEnumType
    // 

    ExtentEnumType::
    ExtentEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ExtentEnumType_literals_[v])
    {
    }

    ExtentEnumType::
    ExtentEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExtentEnumType::
    ExtentEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExtentEnumType::
    ExtentEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ExtentEnumType::
    ExtentEnumType (const ExtentEnumType& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ExtentEnumType& ExtentEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ExtentEnumType_literals_[v]);

      return *this;
    }


    // ExtentType
    // 

    const ExtentType::ExtentEnum_optional& ExtentType::
    ExtentEnum () const
    {
      return this->ExtentEnum_;
    }

    ExtentType::ExtentEnum_optional& ExtentType::
    ExtentEnum ()
    {
      return this->ExtentEnum_;
    }

    void ExtentType::
    ExtentEnum (const ExtentEnum_type& x)
    {
      this->ExtentEnum_.set (x);
    }

    void ExtentType::
    ExtentEnum (const ExtentEnum_optional& x)
    {
      this->ExtentEnum_ = x;
    }

    void ExtentType::
    ExtentEnum (::std::auto_ptr< ExtentEnum_type > x)
    {
      this->ExtentEnum_.set (x);
    }

    const ExtentType::OtherExtent_optional& ExtentType::
    OtherExtent () const
    {
      return this->OtherExtent_;
    }

    ExtentType::OtherExtent_optional& ExtentType::
    OtherExtent ()
    {
      return this->OtherExtent_;
    }

    void ExtentType::
    OtherExtent (const OtherExtent_type& x)
    {
      this->OtherExtent_.set (x);
    }

    void ExtentType::
    OtherExtent (const OtherExtent_optional& x)
    {
      this->OtherExtent_ = x;
    }

    void ExtentType::
    OtherExtent (::std::auto_ptr< OtherExtent_type > x)
    {
      this->OtherExtent_.set (x);
    }


    // PointWithNameType
    // 

    const PointWithNameType::Point_type& PointWithNameType::
    Point () const
    {
      return this->Point_.get ();
    }

    PointWithNameType::Point_type& PointWithNameType::
    Point ()
    {
      return this->Point_.get ();
    }

    void PointWithNameType::
    Point (const Point_type& x)
    {
      this->Point_.set (x);
    }

    void PointWithNameType::
    Point (::std::auto_ptr< Point_type > x)
    {
      this->Point_.set (x);
    }

    const PointWithNameType::Name_optional& PointWithNameType::
    Name () const
    {
      return this->Name_;
    }

    PointWithNameType::Name_optional& PointWithNameType::
    Name ()
    {
      return this->Name_;
    }

    void PointWithNameType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void PointWithNameType::
    Name (const Name_optional& x)
    {
      this->Name_ = x;
    }

    void PointWithNameType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }


    // CharacteristicDirectionalZoneLimitType
    // 

    const CharacteristicDirectionalZoneLimitType::FromPoint_type& CharacteristicDirectionalZoneLimitType::
    FromPoint () const
    {
      return this->FromPoint_.get ();
    }

    CharacteristicDirectionalZoneLimitType::FromPoint_type& CharacteristicDirectionalZoneLimitType::
    FromPoint ()
    {
      return this->FromPoint_.get ();
    }

    void CharacteristicDirectionalZoneLimitType::
    FromPoint (const FromPoint_type& x)
    {
      this->FromPoint_.set (x);
    }

    void CharacteristicDirectionalZoneLimitType::
    FromPoint (::std::auto_ptr< FromPoint_type > x)
    {
      this->FromPoint_.set (x);
    }

    const CharacteristicDirectionalZoneLimitType::ToPoint_type& CharacteristicDirectionalZoneLimitType::
    ToPoint () const
    {
      return this->ToPoint_.get ();
    }

    CharacteristicDirectionalZoneLimitType::ToPoint_type& CharacteristicDirectionalZoneLimitType::
    ToPoint ()
    {
      return this->ToPoint_.get ();
    }

    void CharacteristicDirectionalZoneLimitType::
    ToPoint (const ToPoint_type& x)
    {
      this->ToPoint_.set (x);
    }

    void CharacteristicDirectionalZoneLimitType::
    ToPoint (::std::auto_ptr< ToPoint_type > x)
    {
      this->ToPoint_.set (x);
    }

    const CharacteristicDirectionalZoneLimitType::StartDirection_optional& CharacteristicDirectionalZoneLimitType::
    StartDirection () const
    {
      return this->StartDirection_;
    }

    CharacteristicDirectionalZoneLimitType::StartDirection_optional& CharacteristicDirectionalZoneLimitType::
    StartDirection ()
    {
      return this->StartDirection_;
    }

    void CharacteristicDirectionalZoneLimitType::
    StartDirection (const StartDirection_type& x)
    {
      this->StartDirection_.set (x);
    }

    void CharacteristicDirectionalZoneLimitType::
    StartDirection (const StartDirection_optional& x)
    {
      this->StartDirection_ = x;
    }

    void CharacteristicDirectionalZoneLimitType::
    StartDirection (::std::auto_ptr< StartDirection_type > x)
    {
      this->StartDirection_.set (x);
    }

    const CharacteristicDirectionalZoneLimitType::PlaneNormal_optional& CharacteristicDirectionalZoneLimitType::
    PlaneNormal () const
    {
      return this->PlaneNormal_;
    }

    CharacteristicDirectionalZoneLimitType::PlaneNormal_optional& CharacteristicDirectionalZoneLimitType::
    PlaneNormal ()
    {
      return this->PlaneNormal_;
    }

    void CharacteristicDirectionalZoneLimitType::
    PlaneNormal (const PlaneNormal_type& x)
    {
      this->PlaneNormal_.set (x);
    }

    void CharacteristicDirectionalZoneLimitType::
    PlaneNormal (const PlaneNormal_optional& x)
    {
      this->PlaneNormal_ = x;
    }

    void CharacteristicDirectionalZoneLimitType::
    PlaneNormal (::std::auto_ptr< PlaneNormal_type > x)
    {
      this->PlaneNormal_.set (x);
    }


    // CharacteristicRectangularZoneLimitType
    // 


    // CharacteristicCircularZoneLimitType
    // 


    // ThreadCharacteristicItemType
    // 


    // ThreadCharacteristicDefinitionType
    // 

    const ThreadCharacteristicDefinitionType::ThreadSpecificationId_type& ThreadCharacteristicDefinitionType::
    ThreadSpecificationId () const
    {
      return this->ThreadSpecificationId_.get ();
    }

    ThreadCharacteristicDefinitionType::ThreadSpecificationId_type& ThreadCharacteristicDefinitionType::
    ThreadSpecificationId ()
    {
      return this->ThreadSpecificationId_.get ();
    }

    void ThreadCharacteristicDefinitionType::
    ThreadSpecificationId (const ThreadSpecificationId_type& x)
    {
      this->ThreadSpecificationId_.set (x);
    }

    void ThreadCharacteristicDefinitionType::
    ThreadSpecificationId (::std::auto_ptr< ThreadSpecificationId_type > x)
    {
      this->ThreadSpecificationId_.set (x);
    }


    // ThreadCharacteristicNominalType
    // 


    // ThreadCharacteristicActualType
    // 

    const ThreadCharacteristicActualType::PitchDiameter_optional& ThreadCharacteristicActualType::
    PitchDiameter () const
    {
      return this->PitchDiameter_;
    }

    ThreadCharacteristicActualType::PitchDiameter_optional& ThreadCharacteristicActualType::
    PitchDiameter ()
    {
      return this->PitchDiameter_;
    }

    void ThreadCharacteristicActualType::
    PitchDiameter (const PitchDiameter_type& x)
    {
      this->PitchDiameter_.set (x);
    }

    void ThreadCharacteristicActualType::
    PitchDiameter (const PitchDiameter_optional& x)
    {
      this->PitchDiameter_ = x;
    }

    void ThreadCharacteristicActualType::
    PitchDiameter (::std::auto_ptr< PitchDiameter_type > x)
    {
      this->PitchDiameter_.set (x);
    }

    const ThreadCharacteristicActualType::FunctionalSize_optional& ThreadCharacteristicActualType::
    FunctionalSize () const
    {
      return this->FunctionalSize_;
    }

    ThreadCharacteristicActualType::FunctionalSize_optional& ThreadCharacteristicActualType::
    FunctionalSize ()
    {
      return this->FunctionalSize_;
    }

    void ThreadCharacteristicActualType::
    FunctionalSize (const FunctionalSize_type& x)
    {
      this->FunctionalSize_.set (x);
    }

    void ThreadCharacteristicActualType::
    FunctionalSize (const FunctionalSize_optional& x)
    {
      this->FunctionalSize_ = x;
    }

    void ThreadCharacteristicActualType::
    FunctionalSize (::std::auto_ptr< FunctionalSize_type > x)
    {
      this->FunctionalSize_.set (x);
    }


    // CharacteristicAspectsListsType
    // 

    const CharacteristicAspectsListsType::FormalStandard_type& CharacteristicAspectsListsType::
    FormalStandard () const
    {
      return this->FormalStandard_.get ();
    }

    CharacteristicAspectsListsType::FormalStandard_type& CharacteristicAspectsListsType::
    FormalStandard ()
    {
      return this->FormalStandard_.get ();
    }

    void CharacteristicAspectsListsType::
    FormalStandard (const FormalStandard_type& x)
    {
      this->FormalStandard_.set (x);
    }

    void CharacteristicAspectsListsType::
    FormalStandard (::std::auto_ptr< FormalStandard_type > x)
    {
      this->FormalStandard_.set (x);
    }

    const CharacteristicAspectsListsType::CharacteristicDefinitions_type& CharacteristicAspectsListsType::
    CharacteristicDefinitions () const
    {
      return this->CharacteristicDefinitions_.get ();
    }

    CharacteristicAspectsListsType::CharacteristicDefinitions_type& CharacteristicAspectsListsType::
    CharacteristicDefinitions ()
    {
      return this->CharacteristicDefinitions_.get ();
    }

    void CharacteristicAspectsListsType::
    CharacteristicDefinitions (const CharacteristicDefinitions_type& x)
    {
      this->CharacteristicDefinitions_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicDefinitions (::std::auto_ptr< CharacteristicDefinitions_type > x)
    {
      this->CharacteristicDefinitions_.set (x);
    }

    const CharacteristicAspectsListsType::DefaultCharacteristicDefinitions_optional& CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions () const
    {
      return this->DefaultCharacteristicDefinitions_;
    }

    CharacteristicAspectsListsType::DefaultCharacteristicDefinitions_optional& CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions ()
    {
      return this->DefaultCharacteristicDefinitions_;
    }

    void CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions (const DefaultCharacteristicDefinitions_type& x)
    {
      this->DefaultCharacteristicDefinitions_.set (x);
    }

    void CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions (const DefaultCharacteristicDefinitions_optional& x)
    {
      this->DefaultCharacteristicDefinitions_ = x;
    }

    void CharacteristicAspectsListsType::
    DefaultCharacteristicDefinitions (::std::auto_ptr< DefaultCharacteristicDefinitions_type > x)
    {
      this->DefaultCharacteristicDefinitions_.set (x);
    }

    const CharacteristicAspectsListsType::DefaultToleranceDefinitions_optional& CharacteristicAspectsListsType::
    DefaultToleranceDefinitions () const
    {
      return this->DefaultToleranceDefinitions_;
    }

    CharacteristicAspectsListsType::DefaultToleranceDefinitions_optional& CharacteristicAspectsListsType::
    DefaultToleranceDefinitions ()
    {
      return this->DefaultToleranceDefinitions_;
    }

    void CharacteristicAspectsListsType::
    DefaultToleranceDefinitions (const DefaultToleranceDefinitions_type& x)
    {
      this->DefaultToleranceDefinitions_.set (x);
    }

    void CharacteristicAspectsListsType::
    DefaultToleranceDefinitions (const DefaultToleranceDefinitions_optional& x)
    {
      this->DefaultToleranceDefinitions_ = x;
    }

    void CharacteristicAspectsListsType::
    DefaultToleranceDefinitions (::std::auto_ptr< DefaultToleranceDefinitions_type > x)
    {
      this->DefaultToleranceDefinitions_.set (x);
    }

    const CharacteristicAspectsListsType::CharacteristicNominals_type& CharacteristicAspectsListsType::
    CharacteristicNominals () const
    {
      return this->CharacteristicNominals_.get ();
    }

    CharacteristicAspectsListsType::CharacteristicNominals_type& CharacteristicAspectsListsType::
    CharacteristicNominals ()
    {
      return this->CharacteristicNominals_.get ();
    }

    void CharacteristicAspectsListsType::
    CharacteristicNominals (const CharacteristicNominals_type& x)
    {
      this->CharacteristicNominals_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicNominals (::std::auto_ptr< CharacteristicNominals_type > x)
    {
      this->CharacteristicNominals_.set (x);
    }

    const CharacteristicAspectsListsType::CharacteristicItems_optional& CharacteristicAspectsListsType::
    CharacteristicItems () const
    {
      return this->CharacteristicItems_;
    }

    CharacteristicAspectsListsType::CharacteristicItems_optional& CharacteristicAspectsListsType::
    CharacteristicItems ()
    {
      return this->CharacteristicItems_;
    }

    void CharacteristicAspectsListsType::
    CharacteristicItems (const CharacteristicItems_type& x)
    {
      this->CharacteristicItems_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicItems (const CharacteristicItems_optional& x)
    {
      this->CharacteristicItems_ = x;
    }

    void CharacteristicAspectsListsType::
    CharacteristicItems (::std::auto_ptr< CharacteristicItems_type > x)
    {
      this->CharacteristicItems_.set (x);
    }

    const CharacteristicAspectsListsType::CharacteristicGroups_optional& CharacteristicAspectsListsType::
    CharacteristicGroups () const
    {
      return this->CharacteristicGroups_;
    }

    CharacteristicAspectsListsType::CharacteristicGroups_optional& CharacteristicAspectsListsType::
    CharacteristicGroups ()
    {
      return this->CharacteristicGroups_;
    }

    void CharacteristicAspectsListsType::
    CharacteristicGroups (const CharacteristicGroups_type& x)
    {
      this->CharacteristicGroups_.set (x);
    }

    void CharacteristicAspectsListsType::
    CharacteristicGroups (const CharacteristicGroups_optional& x)
    {
      this->CharacteristicGroups_ = x;
    }

    void CharacteristicAspectsListsType::
    CharacteristicGroups (::std::auto_ptr< CharacteristicGroups_type > x)
    {
      this->CharacteristicGroups_.set (x);
    }


    // MeasuredCharacteristicsType
    // 

    const MeasuredCharacteristicsType::CharacteristicActuals_type& MeasuredCharacteristicsType::
    CharacteristicActuals () const
    {
      return this->CharacteristicActuals_.get ();
    }

    MeasuredCharacteristicsType::CharacteristicActuals_type& MeasuredCharacteristicsType::
    CharacteristicActuals ()
    {
      return this->CharacteristicActuals_.get ();
    }

    void MeasuredCharacteristicsType::
    CharacteristicActuals (const CharacteristicActuals_type& x)
    {
      this->CharacteristicActuals_.set (x);
    }

    void MeasuredCharacteristicsType::
    CharacteristicActuals (::std::auto_ptr< CharacteristicActuals_type > x)
    {
      this->CharacteristicActuals_.set (x);
    }

    const MeasuredCharacteristicsType::CharacteristicGroupStatuses_optional& MeasuredCharacteristicsType::
    CharacteristicGroupStatuses () const
    {
      return this->CharacteristicGroupStatuses_;
    }

    MeasuredCharacteristicsType::CharacteristicGroupStatuses_optional& MeasuredCharacteristicsType::
    CharacteristicGroupStatuses ()
    {
      return this->CharacteristicGroupStatuses_;
    }

    void MeasuredCharacteristicsType::
    CharacteristicGroupStatuses (const CharacteristicGroupStatuses_type& x)
    {
      this->CharacteristicGroupStatuses_.set (x);
    }

    void MeasuredCharacteristicsType::
    CharacteristicGroupStatuses (const CharacteristicGroupStatuses_optional& x)
    {
      this->CharacteristicGroupStatuses_ = x;
    }

    void MeasuredCharacteristicsType::
    CharacteristicGroupStatuses (::std::auto_ptr< CharacteristicGroupStatuses_type > x)
    {
      this->CharacteristicGroupStatuses_.set (x);
    }


    // CharacteristicItemsType
    // 

    const CharacteristicItemsType::CharacteristicItem_sequence& CharacteristicItemsType::
    CharacteristicItem () const
    {
      return this->CharacteristicItem_;
    }

    CharacteristicItemsType::CharacteristicItem_sequence& CharacteristicItemsType::
    CharacteristicItem ()
    {
      return this->CharacteristicItem_;
    }

    void CharacteristicItemsType::
    CharacteristicItem (const CharacteristicItem_sequence& s)
    {
      this->CharacteristicItem_ = s;
    }


    // CharacteristicGroupsType
    // 

    const CharacteristicGroupsType::CharacteristicGroup_sequence& CharacteristicGroupsType::
    CharacteristicGroup () const
    {
      return this->CharacteristicGroup_;
    }

    CharacteristicGroupsType::CharacteristicGroup_sequence& CharacteristicGroupsType::
    CharacteristicGroup ()
    {
      return this->CharacteristicGroup_;
    }

    void CharacteristicGroupsType::
    CharacteristicGroup (const CharacteristicGroup_sequence& s)
    {
      this->CharacteristicGroup_ = s;
    }


    // CharacteristicGroupStatusesType
    // 

    const CharacteristicGroupStatusesType::CharacteristicGroupStatus_sequence& CharacteristicGroupStatusesType::
    CharacteristicGroupStatus () const
    {
      return this->CharacteristicGroupStatus_;
    }

    CharacteristicGroupStatusesType::CharacteristicGroupStatus_sequence& CharacteristicGroupStatusesType::
    CharacteristicGroupStatus ()
    {
      return this->CharacteristicGroupStatus_;
    }

    void CharacteristicGroupStatusesType::
    CharacteristicGroupStatus (const CharacteristicGroupStatus_sequence& s)
    {
      this->CharacteristicGroupStatus_ = s;
    }


    // CharacteristicDefinitionsType
    // 

    const CharacteristicDefinitionsType::CharacteristicDefinition_sequence& CharacteristicDefinitionsType::
    CharacteristicDefinition () const
    {
      return this->CharacteristicDefinition_;
    }

    CharacteristicDefinitionsType::CharacteristicDefinition_sequence& CharacteristicDefinitionsType::
    CharacteristicDefinition ()
    {
      return this->CharacteristicDefinition_;
    }

    void CharacteristicDefinitionsType::
    CharacteristicDefinition (const CharacteristicDefinition_sequence& s)
    {
      this->CharacteristicDefinition_ = s;
    }


    // ToleranceDefinitionsType
    // 

    const ToleranceDefinitionsType::LinearTolerance_sequence& ToleranceDefinitionsType::
    LinearTolerance () const
    {
      return this->LinearTolerance_;
    }

    ToleranceDefinitionsType::LinearTolerance_sequence& ToleranceDefinitionsType::
    LinearTolerance ()
    {
      return this->LinearTolerance_;
    }

    void ToleranceDefinitionsType::
    LinearTolerance (const LinearTolerance_sequence& s)
    {
      this->LinearTolerance_ = s;
    }

    const ToleranceDefinitionsType::AngularTolerance_sequence& ToleranceDefinitionsType::
    AngularTolerance () const
    {
      return this->AngularTolerance_;
    }

    ToleranceDefinitionsType::AngularTolerance_sequence& ToleranceDefinitionsType::
    AngularTolerance ()
    {
      return this->AngularTolerance_;
    }

    void ToleranceDefinitionsType::
    AngularTolerance (const AngularTolerance_sequence& s)
    {
      this->AngularTolerance_ = s;
    }


    // CharacteristicNominalsType
    // 

    const CharacteristicNominalsType::CharacteristicNominal_sequence& CharacteristicNominalsType::
    CharacteristicNominal () const
    {
      return this->CharacteristicNominal_;
    }

    CharacteristicNominalsType::CharacteristicNominal_sequence& CharacteristicNominalsType::
    CharacteristicNominal ()
    {
      return this->CharacteristicNominal_;
    }

    void CharacteristicNominalsType::
    CharacteristicNominal (const CharacteristicNominal_sequence& s)
    {
      this->CharacteristicNominal_ = s;
    }


    // CharacteristicActualsType
    // 

    const CharacteristicActualsType::CharacteristicActual_sequence& CharacteristicActualsType::
    CharacteristicActual () const
    {
      return this->CharacteristicActual_;
    }

    CharacteristicActualsType::CharacteristicActual_sequence& CharacteristicActualsType::
    CharacteristicActual ()
    {
      return this->CharacteristicActual_;
    }

    void CharacteristicActualsType::
    CharacteristicActual (const CharacteristicActual_sequence& s)
    {
      this->CharacteristicActual_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xsd
{
  namespace qif2
  {
    // CharacteristicBaseType
    //

    CharacteristicBaseType::
    CharacteristicBaseType (const id_type& id)
    : ::xml_schema::type (),
      Attributes_ (::xml_schema::flags (), this),
      Description_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    CharacteristicBaseType::
    CharacteristicBaseType (const CharacteristicBaseType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attributes_ (x.Attributes_, f, this),
      Description_ (x.Description_, f, this),
      id_ (x.id_, f, this)
    {
    }

    CharacteristicBaseType::
    CharacteristicBaseType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attributes_ (f, this),
      Description_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Attributes
        //
        if (n.name () == "Attributes" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Attributes_type > r (
            Attributes_traits::create (i, f, this));

          if (!this->Attributes_)
          {
            this->Attributes_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    CharacteristicBaseType* CharacteristicBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicBaseType (*this, f, c);
    }

    CharacteristicBaseType::
    ~CharacteristicBaseType ()
    {
    }

    // CharacteristicItemBaseType
    //

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const id_type& id,
                                const Name_type& Name,
                                const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicBaseType (id),
      Name_ (Name, ::xml_schema::flags (), this),
      QPId_ (::xml_schema::flags (), this),
      KeyCharacteristic_ (::xml_schema::flags (), this),
      FeatureItemIds_ (::xml_schema::flags (), this),
      NotableEventIds_ (::xml_schema::flags (), this),
      MeasurementDeviceIds_ (::xml_schema::flags (), this),
      CharacteristicNominalId_ (CharacteristicNominalId, ::xml_schema::flags (), this),
      LocationOnDrawing_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const id_type& id,
                                const Name_type& Name,
                                ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicBaseType (id),
      Name_ (Name, ::xml_schema::flags (), this),
      QPId_ (::xml_schema::flags (), this),
      KeyCharacteristic_ (::xml_schema::flags (), this),
      FeatureItemIds_ (::xml_schema::flags (), this),
      NotableEventIds_ (::xml_schema::flags (), this),
      MeasurementDeviceIds_ (::xml_schema::flags (), this),
      CharacteristicNominalId_ (CharacteristicNominalId, ::xml_schema::flags (), this),
      LocationOnDrawing_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const CharacteristicItemBaseType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (x, f, c),
      Name_ (x.Name_, f, this),
      QPId_ (x.QPId_, f, this),
      KeyCharacteristic_ (x.KeyCharacteristic_, f, this),
      FeatureItemIds_ (x.FeatureItemIds_, f, this),
      NotableEventIds_ (x.NotableEventIds_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      CharacteristicNominalId_ (x.CharacteristicNominalId_, f, this),
      LocationOnDrawing_ (x.LocationOnDrawing_, f, this)
    {
    }

    CharacteristicItemBaseType::
    CharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      Name_ (f, this),
      QPId_ (f, this),
      KeyCharacteristic_ (f, this),
      FeatureItemIds_ (f, this),
      NotableEventIds_ (f, this),
      MeasurementDeviceIds_ (f, this),
      CharacteristicNominalId_ (f, this),
      LocationOnDrawing_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicItemBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!Name_.present ())
          {
            this->Name_.set (r);
            continue;
          }
        }

        // QPId
        //
        if (n.name () == "QPId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< QPId_type > r (
            QPId_traits::create (i, f, this));

          if (!this->QPId_)
          {
            this->QPId_.set (r);
            continue;
          }
        }

        // KeyCharacteristic
        //
        if (n.name () == "KeyCharacteristic" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KeyCharacteristic_type > r (
            KeyCharacteristic_traits::create (i, f, this));

          if (!this->KeyCharacteristic_)
          {
            this->KeyCharacteristic_.set (r);
            continue;
          }
        }

        // FeatureItemIds
        //
        if (n.name () == "FeatureItemIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FeatureItemIds_type > r (
            FeatureItemIds_traits::create (i, f, this));

          if (!this->FeatureItemIds_)
          {
            this->FeatureItemIds_.set (r);
            continue;
          }
        }

        // NotableEventIds
        //
        if (n.name () == "NotableEventIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotableEventIds_type > r (
            NotableEventIds_traits::create (i, f, this));

          if (!this->NotableEventIds_)
          {
            this->NotableEventIds_.set (r);
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // CharacteristicNominalId
        //
        if (n.name () == "CharacteristicNominalId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicNominalId_type > r (
            CharacteristicNominalId_traits::create (i, f, this));

          if (!CharacteristicNominalId_.present ())
          {
            this->CharacteristicNominalId_.set (r);
            continue;
          }
        }

        // LocationOnDrawing
        //
        if (n.name () == "LocationOnDrawing" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LocationOnDrawing_type > r (
            LocationOnDrawing_traits::create (i, f, this));

          if (!this->LocationOnDrawing_)
          {
            this->LocationOnDrawing_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Name_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Name",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!CharacteristicNominalId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicNominalId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicItemBaseType* CharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicItemBaseType (*this, f, c);
    }

    CharacteristicItemBaseType::
    ~CharacteristicItemBaseType ()
    {
    }

    // KeyCharacteristicType
    //

    KeyCharacteristicType::
    KeyCharacteristicType (const Designator_type& Designator)
    : ::xml_schema::type (),
      Designator_ (Designator, ::xml_schema::flags (), this),
      Criticality_ (::xml_schema::flags (), this)
    {
    }

    KeyCharacteristicType::
    KeyCharacteristicType (const KeyCharacteristicType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Designator_ (x.Designator_, f, this),
      Criticality_ (x.Criticality_, f, this)
    {
    }

    KeyCharacteristicType::
    KeyCharacteristicType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Designator_ (f, this),
      Criticality_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void KeyCharacteristicType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Designator
        //
        if (n.name () == "Designator" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Designator_type > r (
            Designator_traits::create (i, f, this));

          if (!Designator_.present ())
          {
            this->Designator_.set (r);
            continue;
          }
        }

        // Criticality
        //
        if (n.name () == "Criticality" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Criticality_type > r (
            Criticality_traits::create (i, f, this));

          if (!this->Criticality_)
          {
            this->Criticality_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Designator_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Designator",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    KeyCharacteristicType* KeyCharacteristicType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class KeyCharacteristicType (*this, f, c);
    }

    KeyCharacteristicType::
    ~KeyCharacteristicType ()
    {
    }

    // LocationOnDrawingType
    //

    LocationOnDrawingType::
    LocationOnDrawingType ()
    : ::xml_schema::type (),
      DrawingId_ (::xml_schema::flags (), this),
      SheetNumber_ (::xml_schema::flags (), this),
      DrawingZone_ (::xml_schema::flags (), this),
      ModelId_ (::xml_schema::flags (), this),
      View_ (::xml_schema::flags (), this),
      ViewId_ (::xml_schema::flags (), this)
    {
    }

    LocationOnDrawingType::
    LocationOnDrawingType (const LocationOnDrawingType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DrawingId_ (x.DrawingId_, f, this),
      SheetNumber_ (x.SheetNumber_, f, this),
      DrawingZone_ (x.DrawingZone_, f, this),
      ModelId_ (x.ModelId_, f, this),
      View_ (x.View_, f, this),
      ViewId_ (x.ViewId_, f, this)
    {
    }

    LocationOnDrawingType::
    LocationOnDrawingType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DrawingId_ (f, this),
      SheetNumber_ (f, this),
      DrawingZone_ (f, this),
      ModelId_ (f, this),
      View_ (f, this),
      ViewId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void LocationOnDrawingType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DrawingId
        //
        if (n.name () == "DrawingId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DrawingId_type > r (
            DrawingId_traits::create (i, f, this));

          if (!this->DrawingId_)
          {
            this->DrawingId_.set (r);
            continue;
          }
        }

        // SheetNumber
        //
        if (n.name () == "SheetNumber" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SheetNumber_type > r (
            SheetNumber_traits::create (i, f, this));

          if (!this->SheetNumber_)
          {
            this->SheetNumber_.set (r);
            continue;
          }
        }

        // DrawingZone
        //
        if (n.name () == "DrawingZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DrawingZone_type > r (
            DrawingZone_traits::create (i, f, this));

          if (!this->DrawingZone_)
          {
            this->DrawingZone_.set (r);
            continue;
          }
        }

        // ModelId
        //
        if (n.name () == "ModelId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ModelId_type > r (
            ModelId_traits::create (i, f, this));

          if (!this->ModelId_)
          {
            this->ModelId_.set (r);
            continue;
          }
        }

        // View
        //
        if (n.name () == "View" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< View_type > r (
            View_traits::create (i, f, this));

          if (!this->View_)
          {
            this->View_.set (r);
            continue;
          }
        }

        // ViewId
        //
        if (n.name () == "ViewId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ViewId_type > r (
            ViewId_traits::create (i, f, this));

          if (!this->ViewId_)
          {
            this->ViewId_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LocationOnDrawingType* LocationOnDrawingType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationOnDrawingType (*this, f, c);
    }

    LocationOnDrawingType::
    ~LocationOnDrawingType ()
    {
    }

    // CharacteristicDefinitionBaseType
    //

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicBaseType (id),
      Name_ (::xml_schema::flags (), this),
      KeyCharacteristic_ (::xml_schema::flags (), this),
      FreeState_ (::xml_schema::flags (), this),
      StatisticalCharacteristic_ (::xml_schema::flags (), this),
      CommonZone_ (::xml_schema::flags (), this),
      MedianFeature_ (::xml_schema::flags (), this),
      EnvelopeRequirement_ (::xml_schema::flags (), this),
      UnitedFeature_ (::xml_schema::flags (), this),
      SeparateZone_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType (const CharacteristicDefinitionBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (x, f, c),
      Name_ (x.Name_, f, this),
      KeyCharacteristic_ (x.KeyCharacteristic_, f, this),
      FreeState_ (x.FreeState_, f, this),
      StatisticalCharacteristic_ (x.StatisticalCharacteristic_, f, this),
      CommonZone_ (x.CommonZone_, f, this),
      MedianFeature_ (x.MedianFeature_, f, this),
      EnvelopeRequirement_ (x.EnvelopeRequirement_, f, this),
      UnitedFeature_ (x.UnitedFeature_, f, this),
      SeparateZone_ (x.SeparateZone_, f, this)
    {
    }

    CharacteristicDefinitionBaseType::
    CharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      Name_ (f, this),
      KeyCharacteristic_ (f, this),
      FreeState_ (f, this),
      StatisticalCharacteristic_ (f, this),
      CommonZone_ (f, this),
      MedianFeature_ (f, this),
      EnvelopeRequirement_ (f, this),
      UnitedFeature_ (f, this),
      SeparateZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (r);
            continue;
          }
        }

        // KeyCharacteristic
        //
        if (n.name () == "KeyCharacteristic" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KeyCharacteristic_type > r (
            KeyCharacteristic_traits::create (i, f, this));

          if (!this->KeyCharacteristic_)
          {
            this->KeyCharacteristic_.set (r);
            continue;
          }
        }

        // FreeState
        //
        if (n.name () == "FreeState" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->FreeState_)
          {
            this->FreeState_.set (FreeState_traits::create (i, f, this));
            continue;
          }
        }

        // StatisticalCharacteristic
        //
        if (n.name () == "StatisticalCharacteristic" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->StatisticalCharacteristic_)
          {
            this->StatisticalCharacteristic_.set (StatisticalCharacteristic_traits::create (i, f, this));
            continue;
          }
        }

        // CommonZone
        //
        if (n.name () == "CommonZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->CommonZone_)
          {
            this->CommonZone_.set (CommonZone_traits::create (i, f, this));
            continue;
          }
        }

        // MedianFeature
        //
        if (n.name () == "MedianFeature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->MedianFeature_)
          {
            this->MedianFeature_.set (MedianFeature_traits::create (i, f, this));
            continue;
          }
        }

        // EnvelopeRequirement
        //
        if (n.name () == "EnvelopeRequirement" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->EnvelopeRequirement_)
          {
            this->EnvelopeRequirement_.set (EnvelopeRequirement_traits::create (i, f, this));
            continue;
          }
        }

        // UnitedFeature
        //
        if (n.name () == "UnitedFeature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->UnitedFeature_)
          {
            this->UnitedFeature_.set (UnitedFeature_traits::create (i, f, this));
            continue;
          }
        }

        // SeparateZone
        //
        if (n.name () == "SeparateZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->SeparateZone_)
          {
            this->SeparateZone_.set (SeparateZone_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    CharacteristicDefinitionBaseType* CharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicDefinitionBaseType (*this, f, c);
    }

    CharacteristicDefinitionBaseType::
    ~CharacteristicDefinitionBaseType ()
    {
    }

    // CharacteristicNominalBaseType
    //

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const id_type& id,
                                   const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicBaseType (id),
      CharacteristicDefinitionId_ (CharacteristicDefinitionId, ::xml_schema::flags (), this),
      FeatureNominalIds_ (::xml_schema::flags (), this),
      EntityInternalIds_ (::xml_schema::flags (), this),
      EntityExternalIds_ (::xml_schema::flags (), this),
      Name_ (::xml_schema::flags (), this),
      KeyCharacteristic_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const CharacteristicNominalBaseType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (x, f, c),
      CharacteristicDefinitionId_ (x.CharacteristicDefinitionId_, f, this),
      FeatureNominalIds_ (x.FeatureNominalIds_, f, this),
      EntityInternalIds_ (x.EntityInternalIds_, f, this),
      EntityExternalIds_ (x.EntityExternalIds_, f, this),
      Name_ (x.Name_, f, this),
      KeyCharacteristic_ (x.KeyCharacteristic_, f, this)
    {
    }

    CharacteristicNominalBaseType::
    CharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      CharacteristicDefinitionId_ (f, this),
      FeatureNominalIds_ (f, this),
      EntityInternalIds_ (f, this),
      EntityExternalIds_ (f, this),
      Name_ (f, this),
      KeyCharacteristic_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicDefinitionId
        //
        if (n.name () == "CharacteristicDefinitionId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicDefinitionId_type > r (
            CharacteristicDefinitionId_traits::create (i, f, this));

          if (!CharacteristicDefinitionId_.present ())
          {
            this->CharacteristicDefinitionId_.set (r);
            continue;
          }
        }

        // FeatureNominalIds
        //
        if (n.name () == "FeatureNominalIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FeatureNominalIds_type > r (
            FeatureNominalIds_traits::create (i, f, this));

          if (!this->FeatureNominalIds_)
          {
            this->FeatureNominalIds_.set (r);
            continue;
          }
        }

        // EntityInternalIds
        //
        if (n.name () == "EntityInternalIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EntityInternalIds_type > r (
            EntityInternalIds_traits::create (i, f, this));

          if (!this->EntityInternalIds_)
          {
            this->EntityInternalIds_.set (r);
            continue;
          }
        }

        // EntityExternalIds
        //
        if (n.name () == "EntityExternalIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EntityExternalIds_type > r (
            EntityExternalIds_traits::create (i, f, this));

          if (!this->EntityExternalIds_)
          {
            this->EntityExternalIds_.set (r);
            continue;
          }
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (r);
            continue;
          }
        }

        // KeyCharacteristic
        //
        if (n.name () == "KeyCharacteristic" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< KeyCharacteristic_type > r (
            KeyCharacteristic_traits::create (i, f, this));

          if (!this->KeyCharacteristic_)
          {
            this->KeyCharacteristic_.set (r);
            continue;
          }
        }

        break;
      }

      if (!CharacteristicDefinitionId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicDefinitionId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicNominalBaseType* CharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicNominalBaseType (*this, f, c);
    }

    CharacteristicNominalBaseType::
    ~CharacteristicNominalBaseType ()
    {
    }

    // CharacteristicActualBaseType
    //

    CharacteristicActualBaseType::
    CharacteristicActualBaseType (const id_type& id,
                                  const Status_type& Status,
                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicBaseType (id),
      Status_ (Status, ::xml_schema::flags (), this),
      CharacteristicItemId_ (CharacteristicItemId, ::xml_schema::flags (), this),
      FeatureActualIds_ (::xml_schema::flags (), this),
      ActualComponentId_ (::xml_schema::flags (), this),
      MeasurementDeviceIds_ (::xml_schema::flags (), this),
      ManufacturingProcessId_ (::xml_schema::flags (), this),
      NotedEventIds_ (::xml_schema::flags (), this),
      NonConformanceDesignator_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicActualBaseType::
    CharacteristicActualBaseType (const id_type& id,
                                  ::std::auto_ptr< Status_type >& Status,
                                  ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicBaseType (id),
      Status_ (Status, ::xml_schema::flags (), this),
      CharacteristicItemId_ (CharacteristicItemId, ::xml_schema::flags (), this),
      FeatureActualIds_ (::xml_schema::flags (), this),
      ActualComponentId_ (::xml_schema::flags (), this),
      MeasurementDeviceIds_ (::xml_schema::flags (), this),
      ManufacturingProcessId_ (::xml_schema::flags (), this),
      NotedEventIds_ (::xml_schema::flags (), this),
      NonConformanceDesignator_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicActualBaseType::
    CharacteristicActualBaseType (const CharacteristicActualBaseType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (x, f, c),
      Status_ (x.Status_, f, this),
      CharacteristicItemId_ (x.CharacteristicItemId_, f, this),
      FeatureActualIds_ (x.FeatureActualIds_, f, this),
      ActualComponentId_ (x.ActualComponentId_, f, this),
      MeasurementDeviceIds_ (x.MeasurementDeviceIds_, f, this),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this),
      NotedEventIds_ (x.NotedEventIds_, f, this),
      NonConformanceDesignator_ (x.NonConformanceDesignator_, f, this)
    {
    }

    CharacteristicActualBaseType::
    CharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicBaseType (e, f | ::xml_schema::flags::base, c),
      Status_ (f, this),
      CharacteristicItemId_ (f, this),
      FeatureActualIds_ (f, this),
      ActualComponentId_ (f, this),
      MeasurementDeviceIds_ (f, this),
      ManufacturingProcessId_ (f, this),
      NotedEventIds_ (f, this),
      NonConformanceDesignator_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Status
        //
        if (n.name () == "Status" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (r);
            continue;
          }
        }

        // CharacteristicItemId
        //
        if (n.name () == "CharacteristicItemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicItemId_type > r (
            CharacteristicItemId_traits::create (i, f, this));

          if (!CharacteristicItemId_.present ())
          {
            this->CharacteristicItemId_.set (r);
            continue;
          }
        }

        // FeatureActualIds
        //
        if (n.name () == "FeatureActualIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FeatureActualIds_type > r (
            FeatureActualIds_traits::create (i, f, this));

          if (!this->FeatureActualIds_)
          {
            this->FeatureActualIds_.set (r);
            continue;
          }
        }

        // ActualComponentId
        //
        if (n.name () == "ActualComponentId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ActualComponentId_type > r (
            ActualComponentId_traits::create (i, f, this));

          if (!this->ActualComponentId_)
          {
            this->ActualComponentId_.set (r);
            continue;
          }
        }

        // MeasurementDeviceIds
        //
        if (n.name () == "MeasurementDeviceIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDeviceIds_type > r (
            MeasurementDeviceIds_traits::create (i, f, this));

          if (!this->MeasurementDeviceIds_)
          {
            this->MeasurementDeviceIds_.set (r);
            continue;
          }
        }

        // ManufacturingProcessId
        //
        if (n.name () == "ManufacturingProcessId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (r);
            continue;
          }
        }

        // NotedEventIds
        //
        if (n.name () == "NotedEventIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NotedEventIds_type > r (
            NotedEventIds_traits::create (i, f, this));

          if (!this->NotedEventIds_)
          {
            this->NotedEventIds_.set (r);
            continue;
          }
        }

        // NonConformanceDesignator
        //
        if (n.name () == "NonConformanceDesignator" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonConformanceDesignator_type > r (
            NonConformanceDesignator_traits::create (i, f, this));

          if (!this->NonConformanceDesignator_)
          {
            this->NonConformanceDesignator_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!CharacteristicItemId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicItemId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicActualBaseType* CharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicActualBaseType (*this, f, c);
    }

    CharacteristicActualBaseType::
    ~CharacteristicActualBaseType ()
    {
    }

    // GeometricCharacteristicDefinitionBaseType
    //

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      DirectionFeature_ (::xml_schema::flags (), this),
      CollectionPlane_ (::xml_schema::flags (), this),
      IntersectionPlane_ (::xml_schema::flags (), this),
      OrientationPlane_ (::xml_schema::flags (), this)
    {
    }

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType (const GeometricCharacteristicDefinitionBaseType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      DirectionFeature_ (x.DirectionFeature_, f, this),
      CollectionPlane_ (x.CollectionPlane_, f, this),
      IntersectionPlane_ (x.IntersectionPlane_, f, this),
      OrientationPlane_ (x.OrientationPlane_, f, this)
    {
    }

    GeometricCharacteristicDefinitionBaseType::
    GeometricCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      DirectionFeature_ (f, this),
      CollectionPlane_ (f, this),
      IntersectionPlane_ (f, this),
      OrientationPlane_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void GeometricCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DirectionFeature
        //
        if (n.name () == "DirectionFeature" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirectionFeature_type > r (
            DirectionFeature_traits::create (i, f, this));

          if (!this->DirectionFeature_)
          {
            this->DirectionFeature_.set (r);
            continue;
          }
        }

        // CollectionPlane
        //
        if (n.name () == "CollectionPlane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CollectionPlane_type > r (
            CollectionPlane_traits::create (i, f, this));

          if (!this->CollectionPlane_)
          {
            this->CollectionPlane_.set (r);
            continue;
          }
        }

        // IntersectionPlane
        //
        if (n.name () == "IntersectionPlane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< IntersectionPlane_type > r (
            IntersectionPlane_traits::create (i, f, this));

          if (!this->IntersectionPlane_)
          {
            this->IntersectionPlane_.set (r);
            continue;
          }
        }

        // OrientationPlane
        //
        if (n.name () == "OrientationPlane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OrientationPlane_type > r (
            OrientationPlane_traits::create (i, f, this));

          if (!this->OrientationPlane_)
          {
            this->OrientationPlane_.set (r);
            continue;
          }
        }

        break;
      }
    }

    GeometricCharacteristicDefinitionBaseType* GeometricCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometricCharacteristicDefinitionBaseType (*this, f, c);
    }

    GeometricCharacteristicDefinitionBaseType::
    ~GeometricCharacteristicDefinitionBaseType ()
    {
    }

    // GeometricCharacteristicNominalBaseType
    //

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const id_type& id,
                                            const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId)
    {
    }

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const GeometricCharacteristicNominalBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c)
    {
    }

    GeometricCharacteristicNominalBaseType::
    GeometricCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f, c)
    {
    }

    GeometricCharacteristicNominalBaseType* GeometricCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometricCharacteristicNominalBaseType (*this, f, c);
    }

    GeometricCharacteristicNominalBaseType::
    ~GeometricCharacteristicNominalBaseType ()
    {
    }

    // GeometricCharacteristicActualBaseType
    //

    GeometricCharacteristicActualBaseType::
    GeometricCharacteristicActualBaseType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    GeometricCharacteristicActualBaseType::
    GeometricCharacteristicActualBaseType (const id_type& id,
                                           ::std::auto_ptr< Status_type >& Status,
                                           ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    GeometricCharacteristicActualBaseType::
    GeometricCharacteristicActualBaseType (const GeometricCharacteristicActualBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    GeometricCharacteristicActualBaseType::
    GeometricCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void GeometricCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    GeometricCharacteristicActualBaseType* GeometricCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometricCharacteristicActualBaseType (*this, f, c);
    }

    GeometricCharacteristicActualBaseType::
    ~GeometricCharacteristicActualBaseType ()
    {
    }

    // GeometricCharacteristicItemBaseType
    //

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const id_type& id,
                                         const Name_type& Name,
                                         const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const id_type& id,
                                         const Name_type& Name,
                                         ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const GeometricCharacteristicItemBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    GeometricCharacteristicItemBaseType::
    GeometricCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    GeometricCharacteristicItemBaseType* GeometricCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class GeometricCharacteristicItemBaseType (*this, f, c);
    }

    GeometricCharacteristicItemBaseType::
    ~GeometricCharacteristicItemBaseType ()
    {
    }

    // DimensionalCharacteristicDefinitionBaseType
    //

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      DimensionType_ (::xml_schema::flags (), this)
    {
    }

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType (const DimensionalCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      DimensionType_ (x.DimensionType_, f, this)
    {
    }

    DimensionalCharacteristicDefinitionBaseType::
    DimensionalCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      DimensionType_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void DimensionalCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DimensionType
        //
        if (n.name () == "DimensionType" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DimensionType_type > r (
            DimensionType_traits::create (i, f, this));

          if (!this->DimensionType_)
          {
            this->DimensionType_.set (r);
            continue;
          }
        }

        break;
      }
    }

    DimensionalCharacteristicDefinitionBaseType* DimensionalCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DimensionalCharacteristicDefinitionBaseType (*this, f, c);
    }

    DimensionalCharacteristicDefinitionBaseType::
    ~DimensionalCharacteristicDefinitionBaseType ()
    {
    }

    // DimensionalCharacteristicNominalBaseType
    //

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId)
    {
    }

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const DimensionalCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c)
    {
    }

    DimensionalCharacteristicNominalBaseType::
    DimensionalCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f, c)
    {
    }

    DimensionalCharacteristicNominalBaseType* DimensionalCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DimensionalCharacteristicNominalBaseType (*this, f, c);
    }

    DimensionalCharacteristicNominalBaseType::
    ~DimensionalCharacteristicNominalBaseType ()
    {
    }

    // DimensionalCharacteristicActualBaseType
    //

    DimensionalCharacteristicActualBaseType::
    DimensionalCharacteristicActualBaseType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId)
    {
    }

    DimensionalCharacteristicActualBaseType::
    DimensionalCharacteristicActualBaseType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId)
    {
    }

    DimensionalCharacteristicActualBaseType::
    DimensionalCharacteristicActualBaseType (const DimensionalCharacteristicActualBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c)
    {
    }

    DimensionalCharacteristicActualBaseType::
    DimensionalCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f, c)
    {
    }

    DimensionalCharacteristicActualBaseType* DimensionalCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DimensionalCharacteristicActualBaseType (*this, f, c);
    }

    DimensionalCharacteristicActualBaseType::
    ~DimensionalCharacteristicActualBaseType ()
    {
    }

    // DimensionalCharacteristicItemBaseType
    //

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const DimensionalCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    DimensionalCharacteristicItemBaseType::
    DimensionalCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    DimensionalCharacteristicItemBaseType* DimensionalCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DimensionalCharacteristicItemBaseType (*this, f, c);
    }

    DimensionalCharacteristicItemBaseType::
    ~DimensionalCharacteristicItemBaseType ()
    {
    }

    // CoordinateCharacteristicDefinitionBaseType
    //

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (id)
    {
    }

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType (const CoordinateCharacteristicDefinitionBaseType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    CoordinateCharacteristicDefinitionBaseType::
    CoordinateCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    CoordinateCharacteristicDefinitionBaseType* CoordinateCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoordinateCharacteristicDefinitionBaseType (*this, f, c);
    }

    CoordinateCharacteristicDefinitionBaseType::
    ~CoordinateCharacteristicDefinitionBaseType ()
    {
    }

    // CoordinateCharacteristicNominalBaseType
    //

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId)
    {
    }

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const CoordinateCharacteristicNominalBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (x, f, c)
    {
    }

    CoordinateCharacteristicNominalBaseType::
    CoordinateCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (e, f, c)
    {
    }

    CoordinateCharacteristicNominalBaseType* CoordinateCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoordinateCharacteristicNominalBaseType (*this, f, c);
    }

    CoordinateCharacteristicNominalBaseType::
    ~CoordinateCharacteristicNominalBaseType ()
    {
    }

    // CoordinateCharacteristicActualBaseType
    //

    CoordinateCharacteristicActualBaseType::
    CoordinateCharacteristicActualBaseType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId,
                                            const TypeOfCoordinates_type& TypeOfCoordinates)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId),
      TypeOfCoordinates_ (TypeOfCoordinates, ::xml_schema::flags (), this)
    {
    }

    CoordinateCharacteristicActualBaseType::
    CoordinateCharacteristicActualBaseType (const id_type& id,
                                            ::std::auto_ptr< Status_type >& Status,
                                            ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId,
                                            ::std::auto_ptr< TypeOfCoordinates_type >& TypeOfCoordinates)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId),
      TypeOfCoordinates_ (TypeOfCoordinates, ::xml_schema::flags (), this)
    {
    }

    CoordinateCharacteristicActualBaseType::
    CoordinateCharacteristicActualBaseType (const CoordinateCharacteristicActualBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (x, f, c),
      TypeOfCoordinates_ (x.TypeOfCoordinates_, f, this)
    {
    }

    CoordinateCharacteristicActualBaseType::
    CoordinateCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      TypeOfCoordinates_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CoordinateCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TypeOfCoordinates
        //
        if (n.name () == "TypeOfCoordinates" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TypeOfCoordinates_type > r (
            TypeOfCoordinates_traits::create (i, f, this));

          if (!TypeOfCoordinates_.present ())
          {
            this->TypeOfCoordinates_.set (r);
            continue;
          }
        }

        break;
      }

      if (!TypeOfCoordinates_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "TypeOfCoordinates",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CoordinateCharacteristicActualBaseType* CoordinateCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoordinateCharacteristicActualBaseType (*this, f, c);
    }

    CoordinateCharacteristicActualBaseType::
    ~CoordinateCharacteristicActualBaseType ()
    {
    }

    // CoordinateCharacteristicItemBaseType
    //

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const id_type& id,
                                          const Name_type& Name,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const id_type& id,
                                          const Name_type& Name,
                                          ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const CoordinateCharacteristicItemBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (x, f, c)
    {
    }

    CoordinateCharacteristicItemBaseType::
    CoordinateCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (e, f, c)
    {
    }

    CoordinateCharacteristicItemBaseType* CoordinateCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoordinateCharacteristicItemBaseType (*this, f, c);
    }

    CoordinateCharacteristicItemBaseType::
    ~CoordinateCharacteristicItemBaseType ()
    {
    }

    // UserDefinedAttributeCharacteristicDefinitionType
    //

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id)
    {
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType (const UserDefinedAttributeCharacteristicDefinitionType& x,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c)
    {
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    UserDefinedAttributeCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f, c)
    {
    }

    UserDefinedAttributeCharacteristicDefinitionType* UserDefinedAttributeCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicDefinitionType::
    ~UserDefinedAttributeCharacteristicDefinitionType ()
    {
    }

    // UserDefinedAttributeCharacteristicNominalType
    //

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const id_type& id,
                                                   const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                                   const PassValues_type& PassValues,
                                                   const FailValues_type& FailValues)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      PassValues_ (PassValues, ::xml_schema::flags (), this),
      FailValues_ (FailValues, ::xml_schema::flags (), this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const id_type& id,
                                                   const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                                   ::std::auto_ptr< PassValues_type >& PassValues,
                                                   ::std::auto_ptr< FailValues_type >& FailValues)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      PassValues_ (PassValues, ::xml_schema::flags (), this),
      FailValues_ (FailValues, ::xml_schema::flags (), this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const UserDefinedAttributeCharacteristicNominalType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      PassValues_ (x.PassValues_, f, this),
      FailValues_ (x.FailValues_, f, this)
    {
    }

    UserDefinedAttributeCharacteristicNominalType::
    UserDefinedAttributeCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      PassValues_ (f, this),
      FailValues_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAttributeCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PassValues
        //
        if (n.name () == "PassValues" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PassValues_type > r (
            PassValues_traits::create (i, f, this));

          if (!PassValues_.present ())
          {
            this->PassValues_.set (r);
            continue;
          }
        }

        // FailValues
        //
        if (n.name () == "FailValues" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FailValues_type > r (
            FailValues_traits::create (i, f, this));

          if (!FailValues_.present ())
          {
            this->FailValues_.set (r);
            continue;
          }
        }

        break;
      }

      if (!PassValues_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "PassValues",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!FailValues_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FailValues",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedAttributeCharacteristicNominalType* UserDefinedAttributeCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicNominalType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicNominalType::
    ~UserDefinedAttributeCharacteristicNominalType ()
    {
    }

    // UserDefinedAttributeCharacteristicActualType
    //

    UserDefinedAttributeCharacteristicActualType::
    UserDefinedAttributeCharacteristicActualType (const id_type& id,
                                                  const Status_type& Status,
                                                  const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAttributeCharacteristicActualType::
    UserDefinedAttributeCharacteristicActualType (const id_type& id,
                                                  ::std::auto_ptr< Status_type >& Status,
                                                  ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedAttributeCharacteristicActualType::
    UserDefinedAttributeCharacteristicActualType (const UserDefinedAttributeCharacteristicActualType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this)
    {
    }

    UserDefinedAttributeCharacteristicActualType::
    UserDefinedAttributeCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAttributeCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedAttributeCharacteristicActualType* UserDefinedAttributeCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicActualType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicActualType::
    ~UserDefinedAttributeCharacteristicActualType ()
    {
    }

    // UserDefinedAttributeCharacteristicItemType
    //

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const id_type& id,
                                                const Name_type& Name,
                                                const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const id_type& id,
                                                const Name_type& Name,
                                                ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const UserDefinedAttributeCharacteristicItemType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedAttributeCharacteristicItemType::
    UserDefinedAttributeCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedAttributeCharacteristicItemType* UserDefinedAttributeCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAttributeCharacteristicItemType (*this, f, c);
    }

    UserDefinedAttributeCharacteristicItemType::
    ~UserDefinedAttributeCharacteristicItemType ()
    {
    }

    // StringValuesType
    //

    StringValuesType::
    StringValuesType ()
    : ::xml_schema::type (),
      StringValue_ (::xml_schema::flags (), this)
    {
    }

    StringValuesType::
    StringValuesType (const StringValuesType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      StringValue_ (x.StringValue_, f, this)
    {
    }

    StringValuesType::
    StringValuesType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      StringValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StringValuesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StringValue
        //
        if (n.name () == "StringValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StringValue_type > r (
            StringValue_traits::create (i, f, this));

          this->StringValue_.push_back (r);
          continue;
        }

        break;
      }
    }

    StringValuesType* StringValuesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StringValuesType (*this, f, c);
    }

    StringValuesType::
    ~StringValuesType ()
    {
    }

    // LinearCharacteristicDefinitionBaseType
    //

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType (const LinearCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    LinearCharacteristicDefinitionBaseType::
    LinearCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicDefinitionBaseType* LinearCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCharacteristicDefinitionBaseType (*this, f, c);
    }

    LinearCharacteristicDefinitionBaseType::
    ~LinearCharacteristicDefinitionBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicDefinitionType
    //

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType (const id_type& id,
                                                   const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType (const UserDefinedLinearCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedLinearCharacteristicDefinitionType::
    UserDefinedLinearCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedLinearCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LinearCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedLinearCharacteristicDefinitionType* UserDefinedLinearCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedLinearCharacteristicDefinitionType::
    ~UserDefinedLinearCharacteristicDefinitionType ()
    {
    }

    // LinearCharacteristicNominalBaseType
    //

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const LinearCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    LinearCharacteristicNominalBaseType::
    LinearCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicNominalBaseType* LinearCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCharacteristicNominalBaseType (*this, f, c);
    }

    LinearCharacteristicNominalBaseType::
    ~LinearCharacteristicNominalBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicNominalType
    //

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const id_type& id,
                                                const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const UserDefinedLinearCharacteristicNominalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedLinearCharacteristicNominalType::
    UserDefinedLinearCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedLinearCharacteristicNominalType* UserDefinedLinearCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicNominalType (*this, f, c);
    }

    UserDefinedLinearCharacteristicNominalType::
    ~UserDefinedLinearCharacteristicNominalType ()
    {
    }

    // LinearCharacteristicActualBaseType
    //

    LinearCharacteristicActualBaseType::
    LinearCharacteristicActualBaseType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    LinearCharacteristicActualBaseType::
    LinearCharacteristicActualBaseType (const id_type& id,
                                        ::std::auto_ptr< Status_type >& Status,
                                        ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    LinearCharacteristicActualBaseType::
    LinearCharacteristicActualBaseType (const LinearCharacteristicActualBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    LinearCharacteristicActualBaseType::
    LinearCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LinearCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LinearCharacteristicActualBaseType* LinearCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCharacteristicActualBaseType (*this, f, c);
    }

    LinearCharacteristicActualBaseType::
    ~LinearCharacteristicActualBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicActualType
    //

    UserDefinedLinearCharacteristicActualType::
    UserDefinedLinearCharacteristicActualType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    UserDefinedLinearCharacteristicActualType::
    UserDefinedLinearCharacteristicActualType (const id_type& id,
                                               ::std::auto_ptr< Status_type >& Status,
                                               ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    UserDefinedLinearCharacteristicActualType::
    UserDefinedLinearCharacteristicActualType (const UserDefinedLinearCharacteristicActualType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedLinearCharacteristicActualType::
    UserDefinedLinearCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedLinearCharacteristicActualType* UserDefinedLinearCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicActualType (*this, f, c);
    }

    UserDefinedLinearCharacteristicActualType::
    ~UserDefinedLinearCharacteristicActualType ()
    {
    }

    // LinearCharacteristicItemBaseType
    //

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const id_type& id,
                                      const Name_type& Name,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const id_type& id,
                                      const Name_type& Name,
                                      ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const LinearCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (x, f, c)
    {
    }

    LinearCharacteristicItemBaseType::
    LinearCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (e, f, c)
    {
    }

    LinearCharacteristicItemBaseType* LinearCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCharacteristicItemBaseType (*this, f, c);
    }

    LinearCharacteristicItemBaseType::
    ~LinearCharacteristicItemBaseType ()
    {
    }

    // UserDefinedLinearCharacteristicItemType
    //

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const id_type& id,
                                             const Name_type& Name,
                                             const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const id_type& id,
                                             const Name_type& Name,
                                             ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const UserDefinedLinearCharacteristicItemType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedLinearCharacteristicItemType::
    UserDefinedLinearCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedLinearCharacteristicItemType* UserDefinedLinearCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedLinearCharacteristicItemType (*this, f, c);
    }

    UserDefinedLinearCharacteristicItemType::
    ~UserDefinedLinearCharacteristicItemType ()
    {
    }

    // AngularCharacteristicDefinitionBaseType
    //

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType (const AngularCharacteristicDefinitionBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    AngularCharacteristicDefinitionBaseType::
    AngularCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicDefinitionBaseType* AngularCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCharacteristicDefinitionBaseType (*this, f, c);
    }

    AngularCharacteristicDefinitionBaseType::
    ~AngularCharacteristicDefinitionBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicDefinitionType
    //

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType (const id_type& id,
                                                    const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType (const UserDefinedAngularCharacteristicDefinitionType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedAngularCharacteristicDefinitionType::
    UserDefinedAngularCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAngularCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AngularCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedAngularCharacteristicDefinitionType* UserDefinedAngularCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedAngularCharacteristicDefinitionType::
    ~UserDefinedAngularCharacteristicDefinitionType ()
    {
    }

    // AngularCharacteristicNominalBaseType
    //

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const AngularCharacteristicNominalBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    AngularCharacteristicNominalBaseType::
    AngularCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicNominalBaseType* AngularCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCharacteristicNominalBaseType (*this, f, c);
    }

    AngularCharacteristicNominalBaseType::
    ~AngularCharacteristicNominalBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicNominalType
    //

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const id_type& id,
                                                 const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const UserDefinedAngularCharacteristicNominalType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedAngularCharacteristicNominalType::
    UserDefinedAngularCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedAngularCharacteristicNominalType* UserDefinedAngularCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicNominalType (*this, f, c);
    }

    UserDefinedAngularCharacteristicNominalType::
    ~UserDefinedAngularCharacteristicNominalType ()
    {
    }

    // AngularCharacteristicActualBaseType
    //

    AngularCharacteristicActualBaseType::
    AngularCharacteristicActualBaseType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    AngularCharacteristicActualBaseType::
    AngularCharacteristicActualBaseType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    AngularCharacteristicActualBaseType::
    AngularCharacteristicActualBaseType (const AngularCharacteristicActualBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    AngularCharacteristicActualBaseType::
    AngularCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DimensionalCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularCharacteristicActualBaseType* AngularCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCharacteristicActualBaseType (*this, f, c);
    }

    AngularCharacteristicActualBaseType::
    ~AngularCharacteristicActualBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicActualType
    //

    UserDefinedAngularCharacteristicActualType::
    UserDefinedAngularCharacteristicActualType (const id_type& id,
                                                const Status_type& Status,
                                                const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    UserDefinedAngularCharacteristicActualType::
    UserDefinedAngularCharacteristicActualType (const id_type& id,
                                                ::std::auto_ptr< Status_type >& Status,
                                                ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    UserDefinedAngularCharacteristicActualType::
    UserDefinedAngularCharacteristicActualType (const UserDefinedAngularCharacteristicActualType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedAngularCharacteristicActualType::
    UserDefinedAngularCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedAngularCharacteristicActualType* UserDefinedAngularCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicActualType (*this, f, c);
    }

    UserDefinedAngularCharacteristicActualType::
    ~UserDefinedAngularCharacteristicActualType ()
    {
    }

    // AngularCharacteristicItemBaseType
    //

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const AngularCharacteristicItemBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (x, f, c)
    {
    }

    AngularCharacteristicItemBaseType::
    AngularCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::DimensionalCharacteristicItemBaseType (e, f, c)
    {
    }

    AngularCharacteristicItemBaseType* AngularCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCharacteristicItemBaseType (*this, f, c);
    }

    AngularCharacteristicItemBaseType::
    ~AngularCharacteristicItemBaseType ()
    {
    }

    // UserDefinedAngularCharacteristicItemType
    //

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const id_type& id,
                                              const Name_type& Name,
                                              const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const id_type& id,
                                              const Name_type& Name,
                                              ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const UserDefinedAngularCharacteristicItemType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedAngularCharacteristicItemType::
    UserDefinedAngularCharacteristicItemType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedAngularCharacteristicItemType* UserDefinedAngularCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAngularCharacteristicItemType (*this, f, c);
    }

    UserDefinedAngularCharacteristicItemType::
    ~UserDefinedAngularCharacteristicItemType ()
    {
    }

    // TemperatureCharacteristicDefinitionBaseType
    //

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType (const TemperatureCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    TemperatureCharacteristicDefinitionBaseType::
    TemperatureCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void TemperatureCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TemperatureCharacteristicDefinitionBaseType* TemperatureCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TemperatureCharacteristicDefinitionBaseType (*this, f, c);
    }

    TemperatureCharacteristicDefinitionBaseType::
    ~TemperatureCharacteristicDefinitionBaseType ()
    {
    }

    // TemperatureCharacteristicNominalBaseType
    //

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const TemperatureCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    TemperatureCharacteristicNominalBaseType::
    TemperatureCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void TemperatureCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TemperatureCharacteristicNominalBaseType* TemperatureCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TemperatureCharacteristicNominalBaseType (*this, f, c);
    }

    TemperatureCharacteristicNominalBaseType::
    ~TemperatureCharacteristicNominalBaseType ()
    {
    }

    // TemperatureCharacteristicActualBaseType
    //

    TemperatureCharacteristicActualBaseType::
    TemperatureCharacteristicActualBaseType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    TemperatureCharacteristicActualBaseType::
    TemperatureCharacteristicActualBaseType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    TemperatureCharacteristicActualBaseType::
    TemperatureCharacteristicActualBaseType (const TemperatureCharacteristicActualBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    TemperatureCharacteristicActualBaseType::
    TemperatureCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void TemperatureCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TemperatureCharacteristicActualBaseType* TemperatureCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TemperatureCharacteristicActualBaseType (*this, f, c);
    }

    TemperatureCharacteristicActualBaseType::
    ~TemperatureCharacteristicActualBaseType ()
    {
    }

    // TemperatureCharacteristicItemBaseType
    //

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const TemperatureCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    TemperatureCharacteristicItemBaseType::
    TemperatureCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    TemperatureCharacteristicItemBaseType* TemperatureCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TemperatureCharacteristicItemBaseType (*this, f, c);
    }

    TemperatureCharacteristicItemBaseType::
    ~TemperatureCharacteristicItemBaseType ()
    {
    }

    // UserDefinedTemperatureCharacteristicDefinitionType
    //

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType (const id_type& id,
                                                        const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::TemperatureCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType (const UserDefinedTemperatureCharacteristicDefinitionType& x,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    UserDefinedTemperatureCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedTemperatureCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::TemperatureCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedTemperatureCharacteristicDefinitionType* UserDefinedTemperatureCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicDefinitionType::
    ~UserDefinedTemperatureCharacteristicDefinitionType ()
    {
    }

    // UserDefinedTemperatureCharacteristicNominalType
    //

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const id_type& id,
                                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::TemperatureCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId)
    {
    }

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const UserDefinedTemperatureCharacteristicNominalType& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicNominalType::
    UserDefinedTemperatureCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicNominalType* UserDefinedTemperatureCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicNominalType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicNominalType::
    ~UserDefinedTemperatureCharacteristicNominalType ()
    {
    }

    // UserDefinedTemperatureCharacteristicActualType
    //

    UserDefinedTemperatureCharacteristicActualType::
    UserDefinedTemperatureCharacteristicActualType (const id_type& id,
                                                    const Status_type& Status,
                                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::TemperatureCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    UserDefinedTemperatureCharacteristicActualType::
    UserDefinedTemperatureCharacteristicActualType (const id_type& id,
                                                    ::std::auto_ptr< Status_type >& Status,
                                                    ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::TemperatureCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    UserDefinedTemperatureCharacteristicActualType::
    UserDefinedTemperatureCharacteristicActualType (const UserDefinedTemperatureCharacteristicActualType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicActualType::
    UserDefinedTemperatureCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicActualType* UserDefinedTemperatureCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicActualType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicActualType::
    ~UserDefinedTemperatureCharacteristicActualType ()
    {
    }

    // UserDefinedTemperatureCharacteristicItemType
    //

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const id_type& id,
                                                  const Name_type& Name,
                                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::TemperatureCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const id_type& id,
                                                  const Name_type& Name,
                                                  ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::TemperatureCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const UserDefinedTemperatureCharacteristicItemType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicItemType::
    UserDefinedTemperatureCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::TemperatureCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedTemperatureCharacteristicItemType* UserDefinedTemperatureCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTemperatureCharacteristicItemType (*this, f, c);
    }

    UserDefinedTemperatureCharacteristicItemType::
    ~UserDefinedTemperatureCharacteristicItemType ()
    {
    }

    // AreaCharacteristicDefinitionBaseType
    //

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType (const AreaCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    AreaCharacteristicDefinitionBaseType::
    AreaCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AreaCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AreaCharacteristicDefinitionBaseType* AreaCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AreaCharacteristicDefinitionBaseType (*this, f, c);
    }

    AreaCharacteristicDefinitionBaseType::
    ~AreaCharacteristicDefinitionBaseType ()
    {
    }

    // AreaCharacteristicNominalBaseType
    //

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const AreaCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    AreaCharacteristicNominalBaseType::
    AreaCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AreaCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AreaCharacteristicNominalBaseType* AreaCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AreaCharacteristicNominalBaseType (*this, f, c);
    }

    AreaCharacteristicNominalBaseType::
    ~AreaCharacteristicNominalBaseType ()
    {
    }

    // AreaCharacteristicActualBaseType
    //

    AreaCharacteristicActualBaseType::
    AreaCharacteristicActualBaseType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    AreaCharacteristicActualBaseType::
    AreaCharacteristicActualBaseType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    AreaCharacteristicActualBaseType::
    AreaCharacteristicActualBaseType (const AreaCharacteristicActualBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    AreaCharacteristicActualBaseType::
    AreaCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AreaCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AreaCharacteristicActualBaseType* AreaCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AreaCharacteristicActualBaseType (*this, f, c);
    }

    AreaCharacteristicActualBaseType::
    ~AreaCharacteristicActualBaseType ()
    {
    }

    // AreaCharacteristicItemBaseType
    //

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const AreaCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    AreaCharacteristicItemBaseType::
    AreaCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    AreaCharacteristicItemBaseType* AreaCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AreaCharacteristicItemBaseType (*this, f, c);
    }

    AreaCharacteristicItemBaseType::
    ~AreaCharacteristicItemBaseType ()
    {
    }

    // UserDefinedAreaCharacteristicDefinitionType
    //

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType (const id_type& id,
                                                 const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::AreaCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType (const UserDefinedAreaCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedAreaCharacteristicDefinitionType::
    UserDefinedAreaCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedAreaCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AreaCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedAreaCharacteristicDefinitionType* UserDefinedAreaCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedAreaCharacteristicDefinitionType::
    ~UserDefinedAreaCharacteristicDefinitionType ()
    {
    }

    // UserDefinedAreaCharacteristicNominalType
    //

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::AreaCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId)
    {
    }

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const UserDefinedAreaCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedAreaCharacteristicNominalType::
    UserDefinedAreaCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedAreaCharacteristicNominalType* UserDefinedAreaCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicNominalType (*this, f, c);
    }

    UserDefinedAreaCharacteristicNominalType::
    ~UserDefinedAreaCharacteristicNominalType ()
    {
    }

    // UserDefinedAreaCharacteristicActualType
    //

    UserDefinedAreaCharacteristicActualType::
    UserDefinedAreaCharacteristicActualType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::AreaCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId)
    {
    }

    UserDefinedAreaCharacteristicActualType::
    UserDefinedAreaCharacteristicActualType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::AreaCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId)
    {
    }

    UserDefinedAreaCharacteristicActualType::
    UserDefinedAreaCharacteristicActualType (const UserDefinedAreaCharacteristicActualType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedAreaCharacteristicActualType::
    UserDefinedAreaCharacteristicActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedAreaCharacteristicActualType* UserDefinedAreaCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicActualType (*this, f, c);
    }

    UserDefinedAreaCharacteristicActualType::
    ~UserDefinedAreaCharacteristicActualType ()
    {
    }

    // UserDefinedAreaCharacteristicItemType
    //

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::AreaCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::AreaCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const UserDefinedAreaCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedAreaCharacteristicItemType::
    UserDefinedAreaCharacteristicItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::AreaCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedAreaCharacteristicItemType* UserDefinedAreaCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedAreaCharacteristicItemType (*this, f, c);
    }

    UserDefinedAreaCharacteristicItemType::
    ~UserDefinedAreaCharacteristicItemType ()
    {
    }

    // ForceCharacteristicDefinitionBaseType
    //

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType (const ForceCharacteristicDefinitionBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    ForceCharacteristicDefinitionBaseType::
    ForceCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ForceCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ForceCharacteristicDefinitionBaseType* ForceCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ForceCharacteristicDefinitionBaseType (*this, f, c);
    }

    ForceCharacteristicDefinitionBaseType::
    ~ForceCharacteristicDefinitionBaseType ()
    {
    }

    // ForceCharacteristicNominalBaseType
    //

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const ForceCharacteristicNominalBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    ForceCharacteristicNominalBaseType::
    ForceCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ForceCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ForceCharacteristicNominalBaseType* ForceCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ForceCharacteristicNominalBaseType (*this, f, c);
    }

    ForceCharacteristicNominalBaseType::
    ~ForceCharacteristicNominalBaseType ()
    {
    }

    // ForceCharacteristicActualBaseType
    //

    ForceCharacteristicActualBaseType::
    ForceCharacteristicActualBaseType (const id_type& id,
                                       const Status_type& Status,
                                       const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    ForceCharacteristicActualBaseType::
    ForceCharacteristicActualBaseType (const id_type& id,
                                       ::std::auto_ptr< Status_type >& Status,
                                       ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    ForceCharacteristicActualBaseType::
    ForceCharacteristicActualBaseType (const ForceCharacteristicActualBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    ForceCharacteristicActualBaseType::
    ForceCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ForceCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ForceCharacteristicActualBaseType* ForceCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ForceCharacteristicActualBaseType (*this, f, c);
    }

    ForceCharacteristicActualBaseType::
    ~ForceCharacteristicActualBaseType ()
    {
    }

    // ForceCharacteristicItemBaseType
    //

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const id_type& id,
                                     const Name_type& Name,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const id_type& id,
                                     const Name_type& Name,
                                     ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const ForceCharacteristicItemBaseType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    ForceCharacteristicItemBaseType::
    ForceCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    ForceCharacteristicItemBaseType* ForceCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ForceCharacteristicItemBaseType (*this, f, c);
    }

    ForceCharacteristicItemBaseType::
    ~ForceCharacteristicItemBaseType ()
    {
    }

    // UserDefinedForceCharacteristicDefinitionType
    //

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType (const id_type& id,
                                                  const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::ForceCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType (const UserDefinedForceCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedForceCharacteristicDefinitionType::
    UserDefinedForceCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedForceCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ForceCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedForceCharacteristicDefinitionType* UserDefinedForceCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedForceCharacteristicDefinitionType::
    ~UserDefinedForceCharacteristicDefinitionType ()
    {
    }

    // UserDefinedForceCharacteristicNominalType
    //

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::ForceCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const UserDefinedForceCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedForceCharacteristicNominalType::
    UserDefinedForceCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedForceCharacteristicNominalType* UserDefinedForceCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicNominalType (*this, f, c);
    }

    UserDefinedForceCharacteristicNominalType::
    ~UserDefinedForceCharacteristicNominalType ()
    {
    }

    // UserDefinedForceCharacteristicActualType
    //

    UserDefinedForceCharacteristicActualType::
    UserDefinedForceCharacteristicActualType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::ForceCharacteristicActualBaseType (id,
                                                      Status,
                                                      CharacteristicItemId)
    {
    }

    UserDefinedForceCharacteristicActualType::
    UserDefinedForceCharacteristicActualType (const id_type& id,
                                              ::std::auto_ptr< Status_type >& Status,
                                              ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::ForceCharacteristicActualBaseType (id,
                                                      Status,
                                                      CharacteristicItemId)
    {
    }

    UserDefinedForceCharacteristicActualType::
    UserDefinedForceCharacteristicActualType (const UserDefinedForceCharacteristicActualType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedForceCharacteristicActualType::
    UserDefinedForceCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedForceCharacteristicActualType* UserDefinedForceCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicActualType (*this, f, c);
    }

    UserDefinedForceCharacteristicActualType::
    ~UserDefinedForceCharacteristicActualType ()
    {
    }

    // UserDefinedForceCharacteristicItemType
    //

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::ForceCharacteristicItemBaseType (id,
                                                    Name,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::ForceCharacteristicItemBaseType (id,
                                                    Name,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const UserDefinedForceCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedForceCharacteristicItemType::
    UserDefinedForceCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::ForceCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedForceCharacteristicItemType* UserDefinedForceCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedForceCharacteristicItemType (*this, f, c);
    }

    UserDefinedForceCharacteristicItemType::
    ~UserDefinedForceCharacteristicItemType ()
    {
    }

    // MassCharacteristicDefinitionBaseType
    //

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType (const MassCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    MassCharacteristicDefinitionBaseType::
    MassCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void MassCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    MassCharacteristicDefinitionBaseType* MassCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MassCharacteristicDefinitionBaseType (*this, f, c);
    }

    MassCharacteristicDefinitionBaseType::
    ~MassCharacteristicDefinitionBaseType ()
    {
    }

    // MassCharacteristicNominalBaseType
    //

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const MassCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    MassCharacteristicNominalBaseType::
    MassCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void MassCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    MassCharacteristicNominalBaseType* MassCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MassCharacteristicNominalBaseType (*this, f, c);
    }

    MassCharacteristicNominalBaseType::
    ~MassCharacteristicNominalBaseType ()
    {
    }

    // MassCharacteristicActualBaseType
    //

    MassCharacteristicActualBaseType::
    MassCharacteristicActualBaseType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    MassCharacteristicActualBaseType::
    MassCharacteristicActualBaseType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    MassCharacteristicActualBaseType::
    MassCharacteristicActualBaseType (const MassCharacteristicActualBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    MassCharacteristicActualBaseType::
    MassCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void MassCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    MassCharacteristicActualBaseType* MassCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MassCharacteristicActualBaseType (*this, f, c);
    }

    MassCharacteristicActualBaseType::
    ~MassCharacteristicActualBaseType ()
    {
    }

    // MassCharacteristicItemBaseType
    //

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const MassCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    MassCharacteristicItemBaseType::
    MassCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    MassCharacteristicItemBaseType* MassCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MassCharacteristicItemBaseType (*this, f, c);
    }

    MassCharacteristicItemBaseType::
    ~MassCharacteristicItemBaseType ()
    {
    }

    // UserDefinedMassCharacteristicDefinitionType
    //

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType (const id_type& id,
                                                 const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::MassCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType (const UserDefinedMassCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedMassCharacteristicDefinitionType::
    UserDefinedMassCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedMassCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::MassCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedMassCharacteristicDefinitionType* UserDefinedMassCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedMassCharacteristicDefinitionType::
    ~UserDefinedMassCharacteristicDefinitionType ()
    {
    }

    // UserDefinedMassCharacteristicNominalType
    //

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::MassCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId)
    {
    }

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const UserDefinedMassCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedMassCharacteristicNominalType::
    UserDefinedMassCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedMassCharacteristicNominalType* UserDefinedMassCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicNominalType (*this, f, c);
    }

    UserDefinedMassCharacteristicNominalType::
    ~UserDefinedMassCharacteristicNominalType ()
    {
    }

    // UserDefinedMassCharacteristicActualType
    //

    UserDefinedMassCharacteristicActualType::
    UserDefinedMassCharacteristicActualType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::MassCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId)
    {
    }

    UserDefinedMassCharacteristicActualType::
    UserDefinedMassCharacteristicActualType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::MassCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId)
    {
    }

    UserDefinedMassCharacteristicActualType::
    UserDefinedMassCharacteristicActualType (const UserDefinedMassCharacteristicActualType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedMassCharacteristicActualType::
    UserDefinedMassCharacteristicActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedMassCharacteristicActualType* UserDefinedMassCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicActualType (*this, f, c);
    }

    UserDefinedMassCharacteristicActualType::
    ~UserDefinedMassCharacteristicActualType ()
    {
    }

    // UserDefinedMassCharacteristicItemType
    //

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::MassCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::MassCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const UserDefinedMassCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedMassCharacteristicItemType::
    UserDefinedMassCharacteristicItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::MassCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedMassCharacteristicItemType* UserDefinedMassCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedMassCharacteristicItemType (*this, f, c);
    }

    UserDefinedMassCharacteristicItemType::
    ~UserDefinedMassCharacteristicItemType ()
    {
    }

    // PressureCharacteristicDefinitionBaseType
    //

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType (const PressureCharacteristicDefinitionBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    PressureCharacteristicDefinitionBaseType::
    PressureCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PressureCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PressureCharacteristicDefinitionBaseType* PressureCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PressureCharacteristicDefinitionBaseType (*this, f, c);
    }

    PressureCharacteristicDefinitionBaseType::
    ~PressureCharacteristicDefinitionBaseType ()
    {
    }

    // PressureCharacteristicNominalBaseType
    //

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const PressureCharacteristicNominalBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    PressureCharacteristicNominalBaseType::
    PressureCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PressureCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PressureCharacteristicNominalBaseType* PressureCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PressureCharacteristicNominalBaseType (*this, f, c);
    }

    PressureCharacteristicNominalBaseType::
    ~PressureCharacteristicNominalBaseType ()
    {
    }

    // PressureCharacteristicActualBaseType
    //

    PressureCharacteristicActualBaseType::
    PressureCharacteristicActualBaseType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    PressureCharacteristicActualBaseType::
    PressureCharacteristicActualBaseType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    PressureCharacteristicActualBaseType::
    PressureCharacteristicActualBaseType (const PressureCharacteristicActualBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    PressureCharacteristicActualBaseType::
    PressureCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PressureCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PressureCharacteristicActualBaseType* PressureCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PressureCharacteristicActualBaseType (*this, f, c);
    }

    PressureCharacteristicActualBaseType::
    ~PressureCharacteristicActualBaseType ()
    {
    }

    // PressureCharacteristicItemBaseType
    //

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const PressureCharacteristicItemBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    PressureCharacteristicItemBaseType::
    PressureCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    PressureCharacteristicItemBaseType* PressureCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PressureCharacteristicItemBaseType (*this, f, c);
    }

    PressureCharacteristicItemBaseType::
    ~PressureCharacteristicItemBaseType ()
    {
    }

    // UserDefinedPressureCharacteristicDefinitionType
    //

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType (const id_type& id,
                                                     const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::PressureCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType (const UserDefinedPressureCharacteristicDefinitionType& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedPressureCharacteristicDefinitionType::
    UserDefinedPressureCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedPressureCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::PressureCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedPressureCharacteristicDefinitionType* UserDefinedPressureCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedPressureCharacteristicDefinitionType::
    ~UserDefinedPressureCharacteristicDefinitionType ()
    {
    }

    // UserDefinedPressureCharacteristicNominalType
    //

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const id_type& id,
                                                  const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::PressureCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const UserDefinedPressureCharacteristicNominalType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedPressureCharacteristicNominalType::
    UserDefinedPressureCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedPressureCharacteristicNominalType* UserDefinedPressureCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicNominalType (*this, f, c);
    }

    UserDefinedPressureCharacteristicNominalType::
    ~UserDefinedPressureCharacteristicNominalType ()
    {
    }

    // UserDefinedPressureCharacteristicActualType
    //

    UserDefinedPressureCharacteristicActualType::
    UserDefinedPressureCharacteristicActualType (const id_type& id,
                                                 const Status_type& Status,
                                                 const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::PressureCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId)
    {
    }

    UserDefinedPressureCharacteristicActualType::
    UserDefinedPressureCharacteristicActualType (const id_type& id,
                                                 ::std::auto_ptr< Status_type >& Status,
                                                 ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::PressureCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId)
    {
    }

    UserDefinedPressureCharacteristicActualType::
    UserDefinedPressureCharacteristicActualType (const UserDefinedPressureCharacteristicActualType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedPressureCharacteristicActualType::
    UserDefinedPressureCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedPressureCharacteristicActualType* UserDefinedPressureCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicActualType (*this, f, c);
    }

    UserDefinedPressureCharacteristicActualType::
    ~UserDefinedPressureCharacteristicActualType ()
    {
    }

    // UserDefinedPressureCharacteristicItemType
    //

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const id_type& id,
                                               const Name_type& Name,
                                               const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::PressureCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const id_type& id,
                                               const Name_type& Name,
                                               ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::PressureCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const UserDefinedPressureCharacteristicItemType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedPressureCharacteristicItemType::
    UserDefinedPressureCharacteristicItemType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::PressureCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedPressureCharacteristicItemType* UserDefinedPressureCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedPressureCharacteristicItemType (*this, f, c);
    }

    UserDefinedPressureCharacteristicItemType::
    ~UserDefinedPressureCharacteristicItemType ()
    {
    }

    // SpeedCharacteristicDefinitionBaseType
    //

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType (const SpeedCharacteristicDefinitionBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    SpeedCharacteristicDefinitionBaseType::
    SpeedCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SpeedCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SpeedCharacteristicDefinitionBaseType* SpeedCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SpeedCharacteristicDefinitionBaseType (*this, f, c);
    }

    SpeedCharacteristicDefinitionBaseType::
    ~SpeedCharacteristicDefinitionBaseType ()
    {
    }

    // SpeedCharacteristicNominalBaseType
    //

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const SpeedCharacteristicNominalBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    SpeedCharacteristicNominalBaseType::
    SpeedCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SpeedCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SpeedCharacteristicNominalBaseType* SpeedCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SpeedCharacteristicNominalBaseType (*this, f, c);
    }

    SpeedCharacteristicNominalBaseType::
    ~SpeedCharacteristicNominalBaseType ()
    {
    }

    // SpeedCharacteristicActualBaseType
    //

    SpeedCharacteristicActualBaseType::
    SpeedCharacteristicActualBaseType (const id_type& id,
                                       const Status_type& Status,
                                       const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    SpeedCharacteristicActualBaseType::
    SpeedCharacteristicActualBaseType (const id_type& id,
                                       ::std::auto_ptr< Status_type >& Status,
                                       ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    SpeedCharacteristicActualBaseType::
    SpeedCharacteristicActualBaseType (const SpeedCharacteristicActualBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    SpeedCharacteristicActualBaseType::
    SpeedCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SpeedCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SpeedCharacteristicActualBaseType* SpeedCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SpeedCharacteristicActualBaseType (*this, f, c);
    }

    SpeedCharacteristicActualBaseType::
    ~SpeedCharacteristicActualBaseType ()
    {
    }

    // SpeedCharacteristicItemBaseType
    //

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const id_type& id,
                                     const Name_type& Name,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const id_type& id,
                                     const Name_type& Name,
                                     ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const SpeedCharacteristicItemBaseType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    SpeedCharacteristicItemBaseType::
    SpeedCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    SpeedCharacteristicItemBaseType* SpeedCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SpeedCharacteristicItemBaseType (*this, f, c);
    }

    SpeedCharacteristicItemBaseType::
    ~SpeedCharacteristicItemBaseType ()
    {
    }

    // UserDefinedSpeedCharacteristicDefinitionType
    //

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType (const id_type& id,
                                                  const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::SpeedCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType (const UserDefinedSpeedCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    UserDefinedSpeedCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedSpeedCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::SpeedCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedSpeedCharacteristicDefinitionType* UserDefinedSpeedCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicDefinitionType::
    ~UserDefinedSpeedCharacteristicDefinitionType ()
    {
    }

    // UserDefinedSpeedCharacteristicNominalType
    //

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::SpeedCharacteristicNominalBaseType (id,
                                                       CharacteristicDefinitionId)
    {
    }

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const UserDefinedSpeedCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedSpeedCharacteristicNominalType::
    UserDefinedSpeedCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedSpeedCharacteristicNominalType* UserDefinedSpeedCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicNominalType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicNominalType::
    ~UserDefinedSpeedCharacteristicNominalType ()
    {
    }

    // UserDefinedSpeedCharacteristicActualType
    //

    UserDefinedSpeedCharacteristicActualType::
    UserDefinedSpeedCharacteristicActualType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::SpeedCharacteristicActualBaseType (id,
                                                      Status,
                                                      CharacteristicItemId)
    {
    }

    UserDefinedSpeedCharacteristicActualType::
    UserDefinedSpeedCharacteristicActualType (const id_type& id,
                                              ::std::auto_ptr< Status_type >& Status,
                                              ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::SpeedCharacteristicActualBaseType (id,
                                                      Status,
                                                      CharacteristicItemId)
    {
    }

    UserDefinedSpeedCharacteristicActualType::
    UserDefinedSpeedCharacteristicActualType (const UserDefinedSpeedCharacteristicActualType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedSpeedCharacteristicActualType::
    UserDefinedSpeedCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedSpeedCharacteristicActualType* UserDefinedSpeedCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicActualType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicActualType::
    ~UserDefinedSpeedCharacteristicActualType ()
    {
    }

    // UserDefinedSpeedCharacteristicItemType
    //

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::SpeedCharacteristicItemBaseType (id,
                                                    Name,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::SpeedCharacteristicItemBaseType (id,
                                                    Name,
                                                    CharacteristicNominalId)
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const UserDefinedSpeedCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedSpeedCharacteristicItemType::
    UserDefinedSpeedCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::SpeedCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedSpeedCharacteristicItemType* UserDefinedSpeedCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedSpeedCharacteristicItemType (*this, f, c);
    }

    UserDefinedSpeedCharacteristicItemType::
    ~UserDefinedSpeedCharacteristicItemType ()
    {
    }

    // TimeCharacteristicDefinitionBaseType
    //

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType (const TimeCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    TimeCharacteristicDefinitionBaseType::
    TimeCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void TimeCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TimeCharacteristicDefinitionBaseType* TimeCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeCharacteristicDefinitionBaseType (*this, f, c);
    }

    TimeCharacteristicDefinitionBaseType::
    ~TimeCharacteristicDefinitionBaseType ()
    {
    }

    // TimeCharacteristicNominalBaseType
    //

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const TimeCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    TimeCharacteristicNominalBaseType::
    TimeCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void TimeCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TimeCharacteristicNominalBaseType* TimeCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeCharacteristicNominalBaseType (*this, f, c);
    }

    TimeCharacteristicNominalBaseType::
    ~TimeCharacteristicNominalBaseType ()
    {
    }

    // TimeCharacteristicActualBaseType
    //

    TimeCharacteristicActualBaseType::
    TimeCharacteristicActualBaseType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    TimeCharacteristicActualBaseType::
    TimeCharacteristicActualBaseType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    TimeCharacteristicActualBaseType::
    TimeCharacteristicActualBaseType (const TimeCharacteristicActualBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    TimeCharacteristicActualBaseType::
    TimeCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void TimeCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    TimeCharacteristicActualBaseType* TimeCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeCharacteristicActualBaseType (*this, f, c);
    }

    TimeCharacteristicActualBaseType::
    ~TimeCharacteristicActualBaseType ()
    {
    }

    // TimeCharacteristicItemBaseType
    //

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const TimeCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    TimeCharacteristicItemBaseType::
    TimeCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    TimeCharacteristicItemBaseType* TimeCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TimeCharacteristicItemBaseType (*this, f, c);
    }

    TimeCharacteristicItemBaseType::
    ~TimeCharacteristicItemBaseType ()
    {
    }

    // UserDefinedTimeCharacteristicDefinitionType
    //

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType (const id_type& id,
                                                 const WhatToMeasure_type& WhatToMeasure)
    : ::xsd::qif2::TimeCharacteristicDefinitionBaseType (id),
      WhatToMeasure_ (WhatToMeasure, ::xml_schema::flags (), this)
    {
    }

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType (const UserDefinedTimeCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicDefinitionBaseType (x, f, c),
      WhatToMeasure_ (x.WhatToMeasure_, f, this)
    {
    }

    UserDefinedTimeCharacteristicDefinitionType::
    UserDefinedTimeCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      WhatToMeasure_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedTimeCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::TimeCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WhatToMeasure
        //
        if (n.name () == "WhatToMeasure" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WhatToMeasure_type > r (
            WhatToMeasure_traits::create (i, f, this));

          if (!WhatToMeasure_.present ())
          {
            this->WhatToMeasure_.set (r);
            continue;
          }
        }

        break;
      }

      if (!WhatToMeasure_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "WhatToMeasure",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedTimeCharacteristicDefinitionType* UserDefinedTimeCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedTimeCharacteristicDefinitionType::
    ~UserDefinedTimeCharacteristicDefinitionType ()
    {
    }

    // UserDefinedTimeCharacteristicNominalType
    //

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::TimeCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId)
    {
    }

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const UserDefinedTimeCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicNominalBaseType (x, f, c)
    {
    }

    UserDefinedTimeCharacteristicNominalType::
    UserDefinedTimeCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicNominalBaseType (e, f, c)
    {
    }

    UserDefinedTimeCharacteristicNominalType* UserDefinedTimeCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicNominalType (*this, f, c);
    }

    UserDefinedTimeCharacteristicNominalType::
    ~UserDefinedTimeCharacteristicNominalType ()
    {
    }

    // UserDefinedTimeCharacteristicActualType
    //

    UserDefinedTimeCharacteristicActualType::
    UserDefinedTimeCharacteristicActualType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::TimeCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId)
    {
    }

    UserDefinedTimeCharacteristicActualType::
    UserDefinedTimeCharacteristicActualType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::TimeCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId)
    {
    }

    UserDefinedTimeCharacteristicActualType::
    UserDefinedTimeCharacteristicActualType (const UserDefinedTimeCharacteristicActualType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicActualBaseType (x, f, c)
    {
    }

    UserDefinedTimeCharacteristicActualType::
    UserDefinedTimeCharacteristicActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicActualBaseType (e, f, c)
    {
    }

    UserDefinedTimeCharacteristicActualType* UserDefinedTimeCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicActualType (*this, f, c);
    }

    UserDefinedTimeCharacteristicActualType::
    ~UserDefinedTimeCharacteristicActualType ()
    {
    }

    // UserDefinedTimeCharacteristicItemType
    //

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::TimeCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::TimeCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const UserDefinedTimeCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedTimeCharacteristicItemType::
    UserDefinedTimeCharacteristicItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::TimeCharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedTimeCharacteristicItemType* UserDefinedTimeCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedTimeCharacteristicItemType (*this, f, c);
    }

    UserDefinedTimeCharacteristicItemType::
    ~UserDefinedTimeCharacteristicItemType ()
    {
    }

    // UserDefinedUnitCharacteristicDefinitionType
    //

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id)
    {
    }

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType (const UserDefinedUnitCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c)
    {
    }

    UserDefinedUnitCharacteristicDefinitionType::
    UserDefinedUnitCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f, c)
    {
    }

    UserDefinedUnitCharacteristicDefinitionType* UserDefinedUnitCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicDefinitionType (*this, f, c);
    }

    UserDefinedUnitCharacteristicDefinitionType::
    ~UserDefinedUnitCharacteristicDefinitionType ()
    {
    }

    // UserDefinedUnitCharacteristicNominalType
    //

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                              const TargetValue_type& TargetValue,
                                              const DefinedAsLimit_type& DefinedAsLimit)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (TargetValue, ::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this),
      DefinedAsLimit_ (DefinedAsLimit, ::xml_schema::flags (), this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                              ::std::auto_ptr< TargetValue_type >& TargetValue,
                                              const DefinedAsLimit_type& DefinedAsLimit)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId),
      TargetValue_ (TargetValue, ::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this),
      DefinedAsLimit_ (DefinedAsLimit, ::xml_schema::flags (), this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const UserDefinedUnitCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this),
      DefinedAsLimit_ (x.DefinedAsLimit_, f, this)
    {
    }

    UserDefinedUnitCharacteristicNominalType::
    UserDefinedUnitCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this),
      DefinedAsLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedUnitCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!TargetValue_.present ())
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        // DefinedAsLimit
        //
        if (n.name () == "DefinedAsLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!DefinedAsLimit_.present ())
          {
            this->DefinedAsLimit_.set (DefinedAsLimit_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!TargetValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "TargetValue",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DefinedAsLimit_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DefinedAsLimit",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    UserDefinedUnitCharacteristicNominalType* UserDefinedUnitCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicNominalType (*this, f, c);
    }

    UserDefinedUnitCharacteristicNominalType::
    ~UserDefinedUnitCharacteristicNominalType ()
    {
    }

    // UserDefinedUnitCharacteristicActualType
    //

    UserDefinedUnitCharacteristicActualType::
    UserDefinedUnitCharacteristicActualType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedUnitCharacteristicActualType::
    UserDefinedUnitCharacteristicActualType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    UserDefinedUnitCharacteristicActualType::
    UserDefinedUnitCharacteristicActualType (const UserDefinedUnitCharacteristicActualType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    UserDefinedUnitCharacteristicActualType::
    UserDefinedUnitCharacteristicActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void UserDefinedUnitCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    UserDefinedUnitCharacteristicActualType* UserDefinedUnitCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicActualType (*this, f, c);
    }

    UserDefinedUnitCharacteristicActualType::
    ~UserDefinedUnitCharacteristicActualType ()
    {
    }

    // UserDefinedUnitCharacteristicItemType
    //

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const UserDefinedUnitCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    UserDefinedUnitCharacteristicItemType::
    UserDefinedUnitCharacteristicItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    UserDefinedUnitCharacteristicItemType* UserDefinedUnitCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class UserDefinedUnitCharacteristicItemType (*this, f, c);
    }

    UserDefinedUnitCharacteristicItemType::
    ~UserDefinedUnitCharacteristicItemType ()
    {
    }

    // CompositeSegmentDefinitionBaseType
    //

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                        const ToleranceValue_type& ToleranceValue)
    : ::xml_schema::type (),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                        ::std::auto_ptr< ToleranceValue_type >& ToleranceValue)
    : ::xml_schema::type (),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (const CompositeSegmentDefinitionBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this),
      ToleranceValue_ (x.ToleranceValue_, f, this)
    {
    }

    CompositeSegmentDefinitionBaseType::
    CompositeSegmentDefinitionBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DatumReferenceFrameId_ (f, this),
      ToleranceValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DatumReferenceFrameId
        //
        if (n.name () == "DatumReferenceFrameId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!DatumReferenceFrameId_.present ())
          {
            this->DatumReferenceFrameId_.set (r);
            continue;
          }
        }

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        break;
      }

      if (!DatumReferenceFrameId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DatumReferenceFrameId",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToleranceValue",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CompositeSegmentDefinitionBaseType* CompositeSegmentDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentDefinitionBaseType (*this, f, c);
    }

    CompositeSegmentDefinitionBaseType::
    ~CompositeSegmentDefinitionBaseType ()
    {
    }

    // CompositeSegmentActualBaseType
    //

    CompositeSegmentActualBaseType::
    CompositeSegmentActualBaseType (const Status_type& Status)
    : ::xml_schema::type (),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this),
      Status_ (Status, ::xml_schema::flags (), this),
      DRFTransformActualId_ (::xml_schema::flags (), this),
      ZoneData_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentActualBaseType::
    CompositeSegmentActualBaseType (::std::auto_ptr< Status_type >& Status)
    : ::xml_schema::type (),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this),
      Status_ (Status, ::xml_schema::flags (), this),
      DRFTransformActualId_ (::xml_schema::flags (), this),
      ZoneData_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentActualBaseType::
    CompositeSegmentActualBaseType (const CompositeSegmentActualBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this),
      Status_ (x.Status_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this),
      ZoneData_ (x.ZoneData_, f, this)
    {
    }

    CompositeSegmentActualBaseType::
    CompositeSegmentActualBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this),
      Status_ (f, this),
      DRFTransformActualId_ (f, this),
      ZoneData_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        // Status
        //
        if (n.name () == "Status" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (r);
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == "DRFTransformActualId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (r);
            continue;
          }
        }

        // ZoneData
        //
        if (n.name () == "ZoneData" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneData_type > r (
            ZoneData_traits::create (i, f, this));

          this->ZoneData_.push_back (r);
          continue;
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CompositeSegmentActualBaseType* CompositeSegmentActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentActualBaseType (*this, f, c);
    }

    CompositeSegmentActualBaseType::
    ~CompositeSegmentActualBaseType ()
    {
    }

    // CompositeSegmentPositionDefinitionType
    //

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                            const ToleranceValue_type& ToleranceValue,
                                            const MaterialCondition_type& MaterialCondition,
                                            const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (DatumReferenceFrameId,
                                                       ToleranceValue),
      MaterialCondition_ (MaterialCondition, ::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this),
      ProjectedToleranceZone_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                            ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                            const MaterialCondition_type& MaterialCondition,
                                            ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (DatumReferenceFrameId,
                                                       ToleranceValue),
      MaterialCondition_ (MaterialCondition, ::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this),
      ProjectedToleranceZone_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (const CompositeSegmentPositionDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (x, f, c),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      ProjectedToleranceZone_ (x.ProjectedToleranceZone_, f, this)
    {
    }

    CompositeSegmentPositionDefinitionType::
    CompositeSegmentPositionDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      MaterialCondition_ (f, this),
      ZoneShape_ (f, this),
      ProjectedToleranceZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentPositionDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CompositeSegmentDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaterialCondition
        //
        if (n.name () == "MaterialCondition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!MaterialCondition_.present ())
          {
            this->MaterialCondition_.set (r);
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == "ZoneShape" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (r);
            continue;
          }
        }

        // ProjectedToleranceZone
        //
        if (n.name () == "ProjectedToleranceZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ProjectedToleranceZone_type > r (
            ProjectedToleranceZone_traits::create (i, f, this));

          if (!this->ProjectedToleranceZone_)
          {
            this->ProjectedToleranceZone_.set (r);
            continue;
          }
        }

        break;
      }

      if (!MaterialCondition_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MaterialCondition",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ZoneShape",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CompositeSegmentPositionDefinitionType* CompositeSegmentPositionDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentPositionDefinitionType (*this, f, c);
    }

    CompositeSegmentPositionDefinitionType::
    ~CompositeSegmentPositionDefinitionType ()
    {
    }

    // CompositeSegmentPositionActualType
    //

    CompositeSegmentPositionActualType::
    CompositeSegmentPositionActualType (const Status_type& Status)
    : ::xsd::qif2::CompositeSegmentActualBaseType (Status)
    {
    }

    CompositeSegmentPositionActualType::
    CompositeSegmentPositionActualType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CompositeSegmentActualBaseType (Status)
    {
    }

    CompositeSegmentPositionActualType::
    CompositeSegmentPositionActualType (const CompositeSegmentPositionActualType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentActualBaseType (x, f, c)
    {
    }

    CompositeSegmentPositionActualType::
    CompositeSegmentPositionActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentActualBaseType (e, f, c)
    {
    }

    CompositeSegmentPositionActualType* CompositeSegmentPositionActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentPositionActualType (*this, f, c);
    }

    CompositeSegmentPositionActualType::
    ~CompositeSegmentPositionActualType ()
    {
    }

    // CompositeSegmentProfileDefinitionType
    //

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                           const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (DatumReferenceFrameId,
                                                       ToleranceValue),
      OuterDisposition_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                           ::std::auto_ptr< ToleranceValue_type >& ToleranceValue)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (DatumReferenceFrameId,
                                                       ToleranceValue),
      OuterDisposition_ (::xml_schema::flags (), this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (const CompositeSegmentProfileDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (x, f, c),
      OuterDisposition_ (x.OuterDisposition_, f, this)
    {
    }

    CompositeSegmentProfileDefinitionType::
    CompositeSegmentProfileDefinitionType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      OuterDisposition_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CompositeSegmentProfileDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CompositeSegmentDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // OuterDisposition
        //
        if (n.name () == "OuterDisposition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OuterDisposition_type > r (
            OuterDisposition_traits::create (i, f, this));

          if (!this->OuterDisposition_)
          {
            this->OuterDisposition_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CompositeSegmentProfileDefinitionType* CompositeSegmentProfileDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentProfileDefinitionType (*this, f, c);
    }

    CompositeSegmentProfileDefinitionType::
    ~CompositeSegmentProfileDefinitionType ()
    {
    }

    // CompositeSegmentProfileActualType
    //

    CompositeSegmentProfileActualType::
    CompositeSegmentProfileActualType (const Status_type& Status)
    : ::xsd::qif2::CompositeSegmentActualBaseType (Status)
    {
    }

    CompositeSegmentProfileActualType::
    CompositeSegmentProfileActualType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CompositeSegmentActualBaseType (Status)
    {
    }

    CompositeSegmentProfileActualType::
    CompositeSegmentProfileActualType (const CompositeSegmentProfileActualType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentActualBaseType (x, f, c)
    {
    }

    CompositeSegmentProfileActualType::
    CompositeSegmentProfileActualType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentActualBaseType (e, f, c)
    {
    }

    CompositeSegmentProfileActualType* CompositeSegmentProfileActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentProfileActualType (*this, f, c);
    }

    CompositeSegmentProfileActualType::
    ~CompositeSegmentProfileActualType ()
    {
    }

    // CompositeSegmentSymmetryDefinitionType
    //

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                            const ToleranceValue_type& ToleranceValue)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (DatumReferenceFrameId,
                                                       ToleranceValue)
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                            ::std::auto_ptr< ToleranceValue_type >& ToleranceValue)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (DatumReferenceFrameId,
                                                       ToleranceValue)
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (const CompositeSegmentSymmetryDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (x, f, c)
    {
    }

    CompositeSegmentSymmetryDefinitionType::
    CompositeSegmentSymmetryDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentDefinitionBaseType (e, f, c)
    {
    }

    CompositeSegmentSymmetryDefinitionType* CompositeSegmentSymmetryDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentSymmetryDefinitionType (*this, f, c);
    }

    CompositeSegmentSymmetryDefinitionType::
    ~CompositeSegmentSymmetryDefinitionType ()
    {
    }

    // CompositeSegmentSymmetryActualType
    //

    CompositeSegmentSymmetryActualType::
    CompositeSegmentSymmetryActualType (const Status_type& Status)
    : ::xsd::qif2::CompositeSegmentActualBaseType (Status)
    {
    }

    CompositeSegmentSymmetryActualType::
    CompositeSegmentSymmetryActualType (::std::auto_ptr< Status_type >& Status)
    : ::xsd::qif2::CompositeSegmentActualBaseType (Status)
    {
    }

    CompositeSegmentSymmetryActualType::
    CompositeSegmentSymmetryActualType (const CompositeSegmentSymmetryActualType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentActualBaseType (x, f, c)
    {
    }

    CompositeSegmentSymmetryActualType::
    CompositeSegmentSymmetryActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CompositeSegmentActualBaseType (e, f, c)
    {
    }

    CompositeSegmentSymmetryActualType* CompositeSegmentSymmetryActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CompositeSegmentSymmetryActualType (*this, f, c);
    }

    CompositeSegmentSymmetryActualType::
    ~CompositeSegmentSymmetryActualType ()
    {
    }

    // OriginReferenceType
    //

    OriginReferenceType::
    OriginReferenceType ()
    : ::xml_schema::type (),
      FeatureItemId_ (::xml_schema::flags (), this),
      ReferencedComponent_ (::xml_schema::flags (), this),
      DatumDefinitionId_ (::xml_schema::flags (), this)
    {
    }

    OriginReferenceType::
    OriginReferenceType (const OriginReferenceType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FeatureItemId_ (x.FeatureItemId_, f, this),
      ReferencedComponent_ (x.ReferencedComponent_, f, this),
      DatumDefinitionId_ (x.DatumDefinitionId_, f, this)
    {
    }

    OriginReferenceType::
    OriginReferenceType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FeatureItemId_ (f, this),
      ReferencedComponent_ (f, this),
      DatumDefinitionId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void OriginReferenceType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // FeatureItemId
        //
        if (n.name () == "FeatureItemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FeatureItemId_type > r (
            FeatureItemId_traits::create (i, f, this));

          if (!this->FeatureItemId_)
          {
            this->FeatureItemId_.set (r);
            continue;
          }
        }

        // ReferencedComponent
        //
        if (n.name () == "ReferencedComponent" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferencedComponent_type > r (
            ReferencedComponent_traits::create (i, f, this));

          if (!this->ReferencedComponent_)
          {
            this->ReferencedComponent_.set (r);
            continue;
          }
        }

        // DatumDefinitionId
        //
        if (n.name () == "DatumDefinitionId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumDefinitionId_type > r (
            DatumDefinitionId_traits::create (i, f, this));

          if (!this->DatumDefinitionId_)
          {
            this->DatumDefinitionId_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OriginReferenceType* OriginReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OriginReferenceType (*this, f, c);
    }

    OriginReferenceType::
    ~OriginReferenceType ()
    {
    }

    // SurfaceTextureCharacteristicDefinitionType
    //

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const id_type& id,
                                                const RoughnessAverage_type& RoughnessAverage)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      RoughnessAverage_ (RoughnessAverage, ::xml_schema::flags (), this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const id_type& id,
                                                ::std::auto_ptr< RoughnessAverage_type >& RoughnessAverage)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      RoughnessAverage_ (RoughnessAverage, ::xml_schema::flags (), this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const SurfaceTextureCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      RoughnessAverage_ (x.RoughnessAverage_, f, this)
    {
    }

    SurfaceTextureCharacteristicDefinitionType::
    SurfaceTextureCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      RoughnessAverage_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceTextureCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // RoughnessAverage
        //
        if (n.name () == "RoughnessAverage" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RoughnessAverage_type > r (
            RoughnessAverage_traits::create (i, f, this));

          if (!RoughnessAverage_.present ())
          {
            this->RoughnessAverage_.set (r);
            continue;
          }
        }

        break;
      }

      if (!RoughnessAverage_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "RoughnessAverage",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SurfaceTextureCharacteristicDefinitionType* SurfaceTextureCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicDefinitionType (*this, f, c);
    }

    SurfaceTextureCharacteristicDefinitionType::
    ~SurfaceTextureCharacteristicDefinitionType ()
    {
    }

    // SurfaceTextureCharacteristicNominalType
    //

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId)
    {
    }

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const SurfaceTextureCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c)
    {
    }

    SurfaceTextureCharacteristicNominalType::
    SurfaceTextureCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f, c)
    {
    }

    SurfaceTextureCharacteristicNominalType* SurfaceTextureCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicNominalType (*this, f, c);
    }

    SurfaceTextureCharacteristicNominalType::
    ~SurfaceTextureCharacteristicNominalType ()
    {
    }

    // SurfaceTextureCharacteristicActualType
    //

    SurfaceTextureCharacteristicActualType::
    SurfaceTextureCharacteristicActualType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      RoughnessAverageValue_ (::xml_schema::flags (), this)
    {
    }

    SurfaceTextureCharacteristicActualType::
    SurfaceTextureCharacteristicActualType (const id_type& id,
                                            ::std::auto_ptr< Status_type >& Status,
                                            ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      RoughnessAverageValue_ (::xml_schema::flags (), this)
    {
    }

    SurfaceTextureCharacteristicActualType::
    SurfaceTextureCharacteristicActualType (const SurfaceTextureCharacteristicActualType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      RoughnessAverageValue_ (x.RoughnessAverageValue_, f, this)
    {
    }

    SurfaceTextureCharacteristicActualType::
    SurfaceTextureCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      RoughnessAverageValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceTextureCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // RoughnessAverageValue
        //
        if (n.name () == "RoughnessAverageValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RoughnessAverageValue_type > r (
            RoughnessAverageValue_traits::create (i, f, this));

          if (!this->RoughnessAverageValue_)
          {
            this->RoughnessAverageValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SurfaceTextureCharacteristicActualType* SurfaceTextureCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicActualType (*this, f, c);
    }

    SurfaceTextureCharacteristicActualType::
    ~SurfaceTextureCharacteristicActualType ()
    {
    }

    // SurfaceTextureCharacteristicItemType
    //

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const id_type& id,
                                          const Name_type& Name,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const id_type& id,
                                          const Name_type& Name,
                                          ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const SurfaceTextureCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    SurfaceTextureCharacteristicItemType::
    SurfaceTextureCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    SurfaceTextureCharacteristicItemType* SurfaceTextureCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceTextureCharacteristicItemType (*this, f, c);
    }

    SurfaceTextureCharacteristicItemType::
    ~SurfaceTextureCharacteristicItemType ()
    {
    }

    // OrientationDiametricalZoneType
    //

    OrientationDiametricalZoneType::
    OrientationDiametricalZoneType ()
    : ::xml_schema::type (),
      ZoneOrientationVector_ (::xml_schema::flags (), this)
    {
    }

    OrientationDiametricalZoneType::
    OrientationDiametricalZoneType (const OrientationDiametricalZoneType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this)
    {
    }

    OrientationDiametricalZoneType::
    OrientationDiametricalZoneType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ZoneOrientationVector_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void OrientationDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneOrientationVector
        //
        if (n.name () == "ZoneOrientationVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OrientationDiametricalZoneType* OrientationDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationDiametricalZoneType (*this, f, c);
    }

    OrientationDiametricalZoneType::
    ~OrientationDiametricalZoneType ()
    {
    }

    // OrientationPlanarZoneType
    //

    OrientationPlanarZoneType::
    OrientationPlanarZoneType ()
    : ::xml_schema::type (),
      ZoneOrientationVector_ (::xml_schema::flags (), this)
    {
    }

    OrientationPlanarZoneType::
    OrientationPlanarZoneType (const OrientationPlanarZoneType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this)
    {
    }

    OrientationPlanarZoneType::
    OrientationPlanarZoneType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ZoneOrientationVector_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void OrientationPlanarZoneType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneOrientationVector
        //
        if (n.name () == "ZoneOrientationVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OrientationPlanarZoneType* OrientationPlanarZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationPlanarZoneType (*this, f, c);
    }

    OrientationPlanarZoneType::
    ~OrientationPlanarZoneType ()
    {
    }

    // OrientationZoneShapeType
    //

    OrientationZoneShapeType::
    OrientationZoneShapeType ()
    : ::xml_schema::type (),
      DiametricalZone_ (::xml_schema::flags (), this),
      PlanarZone_ (::xml_schema::flags (), this)
    {
    }

    OrientationZoneShapeType::
    OrientationZoneShapeType (const OrientationZoneShapeType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      PlanarZone_ (x.PlanarZone_, f, this)
    {
    }

    OrientationZoneShapeType::
    OrientationZoneShapeType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DiametricalZone_ (f, this),
      PlanarZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void OrientationZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DiametricalZone
        //
        if (n.name () == "DiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (r);
            continue;
          }
        }

        // PlanarZone
        //
        if (n.name () == "PlanarZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlanarZone_type > r (
            PlanarZone_traits::create (i, f, this));

          if (!this->PlanarZone_)
          {
            this->PlanarZone_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OrientationZoneShapeType* OrientationZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationZoneShapeType (*this, f, c);
    }

    OrientationZoneShapeType::
    ~OrientationZoneShapeType ()
    {
    }

    // OrientationCharacteristicItemBaseType
    //

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const OrientationCharacteristicItemBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    OrientationCharacteristicItemBaseType::
    OrientationCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    OrientationCharacteristicItemBaseType* OrientationCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationCharacteristicItemBaseType (*this, f, c);
    }

    OrientationCharacteristicItemBaseType::
    ~OrientationCharacteristicItemBaseType ()
    {
    }

    // OrientationCharacteristicDefinitionBaseType
    //

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const id_type& id,
                                                 const ToleranceValue_type& ToleranceValue,
                                                 const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                                 const MaterialCondition_type& MaterialCondition,
                                                 const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this),
      MaterialCondition_ (MaterialCondition, ::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this),
      TangentPlane_ (::xml_schema::flags (), this),
      MaximumToleranceValue_ (::xml_schema::flags (), this),
      ProjectedToleranceZoneValue_ (::xml_schema::flags (), this),
      EachRadialElement_ (::xml_schema::flags (), this),
      EachElement_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const id_type& id,
                                                 ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                                 ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                                 const MaterialCondition_type& MaterialCondition,
                                                 ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this),
      MaterialCondition_ (MaterialCondition, ::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this),
      TangentPlane_ (::xml_schema::flags (), this),
      MaximumToleranceValue_ (::xml_schema::flags (), this),
      ProjectedToleranceZoneValue_ (::xml_schema::flags (), this),
      EachRadialElement_ (::xml_schema::flags (), this),
      EachElement_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const OrientationCharacteristicDefinitionBaseType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      TangentPlane_ (x.TangentPlane_, f, this),
      MaximumToleranceValue_ (x.MaximumToleranceValue_, f, this),
      ProjectedToleranceZoneValue_ (x.ProjectedToleranceZoneValue_, f, this),
      EachRadialElement_ (x.EachRadialElement_, f, this),
      EachElement_ (x.EachElement_, f, this)
    {
    }

    OrientationCharacteristicDefinitionBaseType::
    OrientationCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      DatumReferenceFrameId_ (f, this),
      MaterialCondition_ (f, this),
      ZoneShape_ (f, this),
      TangentPlane_ (f, this),
      MaximumToleranceValue_ (f, this),
      ProjectedToleranceZoneValue_ (f, this),
      EachRadialElement_ (f, this),
      EachElement_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void OrientationCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == "DatumReferenceFrameId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!DatumReferenceFrameId_.present ())
          {
            this->DatumReferenceFrameId_.set (r);
            continue;
          }
        }

        // MaterialCondition
        //
        if (n.name () == "MaterialCondition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!MaterialCondition_.present ())
          {
            this->MaterialCondition_.set (r);
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == "ZoneShape" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (r);
            continue;
          }
        }

        // TangentPlane
        //
        if (n.name () == "TangentPlane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->TangentPlane_)
          {
            this->TangentPlane_.set (TangentPlane_traits::create (i, f, this));
            continue;
          }
        }

        // MaximumToleranceValue
        //
        if (n.name () == "MaximumToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaximumToleranceValue_type > r (
            MaximumToleranceValue_traits::create (i, f, this));

          if (!this->MaximumToleranceValue_)
          {
            this->MaximumToleranceValue_.set (r);
            continue;
          }
        }

        // ProjectedToleranceZoneValue
        //
        if (n.name () == "ProjectedToleranceZoneValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ProjectedToleranceZoneValue_type > r (
            ProjectedToleranceZoneValue_traits::create (i, f, this));

          if (!this->ProjectedToleranceZoneValue_)
          {
            this->ProjectedToleranceZoneValue_.set (r);
            continue;
          }
        }

        // EachRadialElement
        //
        if (n.name () == "EachRadialElement" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->EachRadialElement_)
          {
            this->EachRadialElement_.set (EachRadialElement_traits::create (i, f, this));
            continue;
          }
        }

        // EachElement
        //
        if (n.name () == "EachElement" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->EachElement_)
          {
            this->EachElement_.set (EachElement_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToleranceValue",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DatumReferenceFrameId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DatumReferenceFrameId",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!MaterialCondition_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MaterialCondition",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ZoneShape",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    OrientationCharacteristicDefinitionBaseType* OrientationCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationCharacteristicDefinitionBaseType (*this, f, c);
    }

    OrientationCharacteristicDefinitionBaseType::
    ~OrientationCharacteristicDefinitionBaseType ()
    {
    }

    // OrientationCharacteristicNominalBaseType
    //

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId),
      CircularZoneLimit_ (::xml_schema::flags (), this),
      DirectionalZoneLimit_ (::xml_schema::flags (), this),
      RectangularZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const OrientationCharacteristicNominalBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (x, f, c),
      CircularZoneLimit_ (x.CircularZoneLimit_, f, this),
      DirectionalZoneLimit_ (x.DirectionalZoneLimit_, f, this),
      RectangularZoneLimit_ (x.RectangularZoneLimit_, f, this)
    {
    }

    OrientationCharacteristicNominalBaseType::
    OrientationCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      CircularZoneLimit_ (f, this),
      DirectionalZoneLimit_ (f, this),
      RectangularZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void OrientationCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CircularZoneLimit
        //
        if (n.name () == "CircularZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CircularZoneLimit_type > r (
            CircularZoneLimit_traits::create (i, f, this));

          if (!this->CircularZoneLimit_)
          {
            this->CircularZoneLimit_.set (r);
            continue;
          }
        }

        // DirectionalZoneLimit
        //
        if (n.name () == "DirectionalZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirectionalZoneLimit_type > r (
            DirectionalZoneLimit_traits::create (i, f, this));

          if (!this->DirectionalZoneLimit_)
          {
            this->DirectionalZoneLimit_.set (r);
            continue;
          }
        }

        // RectangularZoneLimit
        //
        if (n.name () == "RectangularZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RectangularZoneLimit_type > r (
            RectangularZoneLimit_traits::create (i, f, this));

          if (!this->RectangularZoneLimit_)
          {
            this->RectangularZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OrientationCharacteristicNominalBaseType* OrientationCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationCharacteristicNominalBaseType (*this, f, c);
    }

    OrientationCharacteristicNominalBaseType::
    ~OrientationCharacteristicNominalBaseType ()
    {
    }

    // OrientationCharacteristicActualBaseType
    //

    OrientationCharacteristicActualBaseType::
    OrientationCharacteristicActualBaseType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      DatumsOk_ (::xml_schema::flags (), this),
      Bonus_ (::xml_schema::flags (), this),
      ReferenceLength_ (::xml_schema::flags (), this),
      DRFTransformActualId_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicActualBaseType::
    OrientationCharacteristicActualBaseType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      DatumsOk_ (::xml_schema::flags (), this),
      Bonus_ (::xml_schema::flags (), this),
      ReferenceLength_ (::xml_schema::flags (), this),
      DRFTransformActualId_ (::xml_schema::flags (), this)
    {
    }

    OrientationCharacteristicActualBaseType::
    OrientationCharacteristicActualBaseType (const OrientationCharacteristicActualBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (x, f, c),
      DatumsOk_ (x.DatumsOk_, f, this),
      Bonus_ (x.Bonus_, f, this),
      ReferenceLength_ (x.ReferenceLength_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this)
    {
    }

    OrientationCharacteristicActualBaseType::
    OrientationCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      DatumsOk_ (f, this),
      Bonus_ (f, this),
      ReferenceLength_ (f, this),
      DRFTransformActualId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void OrientationCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DatumsOk
        //
        if (n.name () == "DatumsOk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        // Bonus
        //
        if (n.name () == "Bonus" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Bonus_type > r (
            Bonus_traits::create (i, f, this));

          if (!this->Bonus_)
          {
            this->Bonus_.set (r);
            continue;
          }
        }

        // ReferenceLength
        //
        if (n.name () == "ReferenceLength" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ReferenceLength_type > r (
            ReferenceLength_traits::create (i, f, this));

          if (!this->ReferenceLength_)
          {
            this->ReferenceLength_.set (r);
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == "DRFTransformActualId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (r);
            continue;
          }
        }

        break;
      }
    }

    OrientationCharacteristicActualBaseType* OrientationCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OrientationCharacteristicActualBaseType (*this, f, c);
    }

    OrientationCharacteristicActualBaseType::
    ~OrientationCharacteristicActualBaseType ()
    {
    }

    // AngularityCharacteristicItemType
    //

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const id_type& id,
                                      const Name_type& Name,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const id_type& id,
                                      const Name_type& Name,
                                      ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const AngularityCharacteristicItemType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (x, f, c)
    {
    }

    AngularityCharacteristicItemType::
    AngularityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (e, f, c)
    {
    }

    AngularityCharacteristicItemType* AngularityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicItemType (*this, f, c);
    }

    AngularityCharacteristicItemType::
    ~AngularityCharacteristicItemType ()
    {
    }

    // AngularityCharacteristicDefinitionType
    //

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const id_type& id,
                                            const ToleranceValue_type& ToleranceValue,
                                            const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                            const MaterialCondition_type& MaterialCondition,
                                            const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (id,
                                                                ToleranceValue,
                                                                DatumReferenceFrameId,
                                                                MaterialCondition,
                                                                ZoneShape)
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const id_type& id,
                                            ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                            ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                            const MaterialCondition_type& MaterialCondition,
                                            ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (id,
                                                                ToleranceValue,
                                                                DatumReferenceFrameId,
                                                                MaterialCondition,
                                                                ZoneShape)
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const AngularityCharacteristicDefinitionType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngularityCharacteristicDefinitionType::
    AngularityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngularityCharacteristicDefinitionType* AngularityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicDefinitionType (*this, f, c);
    }

    AngularityCharacteristicDefinitionType::
    ~AngularityCharacteristicDefinitionType ()
    {
    }

    // AngularityCharacteristicNominalType
    //

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId),
      Angle_ (::xml_schema::flags (), this)
    {
    }

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const AngularityCharacteristicNominalType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (x, f, c),
      Angle_ (x.Angle_, f, this)
    {
    }

    AngularityCharacteristicNominalType::
    AngularityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Angle_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularityCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::OrientationCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Angle
        //
        if (n.name () == "Angle" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Angle_type > r (
            Angle_traits::create (i, f, this));

          if (!this->Angle_)
          {
            this->Angle_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularityCharacteristicNominalType* AngularityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicNominalType (*this, f, c);
    }

    AngularityCharacteristicNominalType::
    ~AngularityCharacteristicNominalType ()
    {
    }

    // AngularityCharacteristicActualType
    //

    AngularityCharacteristicActualType::
    AngularityCharacteristicActualType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    AngularityCharacteristicActualType::
    AngularityCharacteristicActualType (const id_type& id,
                                        ::std::auto_ptr< Status_type >& Status,
                                        ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    AngularityCharacteristicActualType::
    AngularityCharacteristicActualType (const AngularityCharacteristicActualType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (x, f, c)
    {
    }

    AngularityCharacteristicActualType::
    AngularityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (e, f, c)
    {
    }

    AngularityCharacteristicActualType* AngularityCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularityCharacteristicActualType (*this, f, c);
    }

    AngularityCharacteristicActualType::
    ~AngularityCharacteristicActualType ()
    {
    }

    // PerpendicularityCharacteristicItemType
    //

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const PerpendicularityCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicItemType::
    PerpendicularityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicItemType* PerpendicularityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicItemType (*this, f, c);
    }

    PerpendicularityCharacteristicItemType::
    ~PerpendicularityCharacteristicItemType ()
    {
    }

    // PerpendicularityCharacteristicDefinitionType
    //

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const id_type& id,
                                                  const ToleranceValue_type& ToleranceValue,
                                                  const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                                  const MaterialCondition_type& MaterialCondition,
                                                  const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (id,
                                                                ToleranceValue,
                                                                DatumReferenceFrameId,
                                                                MaterialCondition,
                                                                ZoneShape)
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const id_type& id,
                                                  ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                                  ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                                  const MaterialCondition_type& MaterialCondition,
                                                  ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (id,
                                                                ToleranceValue,
                                                                DatumReferenceFrameId,
                                                                MaterialCondition,
                                                                ZoneShape)
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const PerpendicularityCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicDefinitionType::
    PerpendicularityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicDefinitionType* PerpendicularityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicDefinitionType (*this, f, c);
    }

    PerpendicularityCharacteristicDefinitionType::
    ~PerpendicularityCharacteristicDefinitionType ()
    {
    }

    // PerpendicularityCharacteristicNominalType
    //

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId)
    {
    }

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const PerpendicularityCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicNominalType::
    PerpendicularityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicNominalType* PerpendicularityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicNominalType (*this, f, c);
    }

    PerpendicularityCharacteristicNominalType::
    ~PerpendicularityCharacteristicNominalType ()
    {
    }

    // PerpendicularityCharacteristicActualType
    //

    PerpendicularityCharacteristicActualType::
    PerpendicularityCharacteristicActualType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    PerpendicularityCharacteristicActualType::
    PerpendicularityCharacteristicActualType (const id_type& id,
                                              ::std::auto_ptr< Status_type >& Status,
                                              ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    PerpendicularityCharacteristicActualType::
    PerpendicularityCharacteristicActualType (const PerpendicularityCharacteristicActualType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (x, f, c)
    {
    }

    PerpendicularityCharacteristicActualType::
    PerpendicularityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (e, f, c)
    {
    }

    PerpendicularityCharacteristicActualType* PerpendicularityCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PerpendicularityCharacteristicActualType (*this, f, c);
    }

    PerpendicularityCharacteristicActualType::
    ~PerpendicularityCharacteristicActualType ()
    {
    }

    // ParallelismCharacteristicItemType
    //

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (id,
                                                          Name,
                                                          CharacteristicNominalId)
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const ParallelismCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicItemType::
    ParallelismCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicItemBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicItemType* ParallelismCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicItemType (*this, f, c);
    }

    ParallelismCharacteristicItemType::
    ~ParallelismCharacteristicItemType ()
    {
    }

    // ParallelismCharacteristicDefinitionType
    //

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue,
                                             const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                             const MaterialCondition_type& MaterialCondition,
                                             const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (id,
                                                                ToleranceValue,
                                                                DatumReferenceFrameId,
                                                                MaterialCondition,
                                                                ZoneShape)
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const id_type& id,
                                             ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                             ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                             const MaterialCondition_type& MaterialCondition,
                                             ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (id,
                                                                ToleranceValue,
                                                                DatumReferenceFrameId,
                                                                MaterialCondition,
                                                                ZoneShape)
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const ParallelismCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicDefinitionType::
    ParallelismCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicDefinitionType* ParallelismCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicDefinitionType (*this, f, c);
    }

    ParallelismCharacteristicDefinitionType::
    ~ParallelismCharacteristicDefinitionType ()
    {
    }

    // ParallelismCharacteristicNominalType
    //

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (id,
                                                             CharacteristicDefinitionId)
    {
    }

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const ParallelismCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicNominalType::
    ParallelismCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicNominalBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicNominalType* ParallelismCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicNominalType (*this, f, c);
    }

    ParallelismCharacteristicNominalType::
    ~ParallelismCharacteristicNominalType ()
    {
    }

    // ParallelismCharacteristicActualType
    //

    ParallelismCharacteristicActualType::
    ParallelismCharacteristicActualType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    ParallelismCharacteristicActualType::
    ParallelismCharacteristicActualType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (id,
                                                            Status,
                                                            CharacteristicItemId)
    {
    }

    ParallelismCharacteristicActualType::
    ParallelismCharacteristicActualType (const ParallelismCharacteristicActualType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (x, f, c)
    {
    }

    ParallelismCharacteristicActualType::
    ParallelismCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::OrientationCharacteristicActualBaseType (e, f, c)
    {
    }

    ParallelismCharacteristicActualType* ParallelismCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ParallelismCharacteristicActualType (*this, f, c);
    }

    ParallelismCharacteristicActualType::
    ~ParallelismCharacteristicActualType ()
    {
    }

    // FormCharacteristicDefinitionBaseType
    //

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType (const id_type& id)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id)
    {
    }

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType (const FormCharacteristicDefinitionBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    FormCharacteristicDefinitionBaseType::
    FormCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    FormCharacteristicDefinitionBaseType* FormCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FormCharacteristicDefinitionBaseType (*this, f, c);
    }

    FormCharacteristicDefinitionBaseType::
    ~FormCharacteristicDefinitionBaseType ()
    {
    }

    // FormCharacteristicNominalBaseType
    //

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId)
    {
    }

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const FormCharacteristicNominalBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (x, f, c)
    {
    }

    FormCharacteristicNominalBaseType::
    FormCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (e, f, c)
    {
    }

    FormCharacteristicNominalBaseType* FormCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FormCharacteristicNominalBaseType (*this, f, c);
    }

    FormCharacteristicNominalBaseType::
    ~FormCharacteristicNominalBaseType ()
    {
    }

    // FormCharacteristicActualBaseType
    //

    FormCharacteristicActualBaseType::
    FormCharacteristicActualBaseType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId)
    {
    }

    FormCharacteristicActualBaseType::
    FormCharacteristicActualBaseType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId)
    {
    }

    FormCharacteristicActualBaseType::
    FormCharacteristicActualBaseType (const FormCharacteristicActualBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (x, f, c)
    {
    }

    FormCharacteristicActualBaseType::
    FormCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (e, f, c)
    {
    }

    FormCharacteristicActualBaseType* FormCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FormCharacteristicActualBaseType (*this, f, c);
    }

    FormCharacteristicActualBaseType::
    ~FormCharacteristicActualBaseType ()
    {
    }

    // FormCharacteristicItemBaseType
    //

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const FormCharacteristicItemBaseType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    FormCharacteristicItemBaseType::
    FormCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    FormCharacteristicItemBaseType* FormCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FormCharacteristicItemBaseType (*this, f, c);
    }

    FormCharacteristicItemBaseType::
    ~FormCharacteristicItemBaseType ()
    {
    }

    // StraightnessDiametricalZoneType
    //

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const StraightnessDiametricalZoneType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const ::xercesc::DOMAttr& a,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    StraightnessDiametricalZoneType::
    StraightnessDiametricalZoneType (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    StraightnessDiametricalZoneType* StraightnessDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessDiametricalZoneType (*this, f, c);
    }

    StraightnessDiametricalZoneType::
    ~StraightnessDiametricalZoneType ()
    {
    }

    // StraightnessNonDiametricalZoneType
    //

    StraightnessNonDiametricalZoneType::
    StraightnessNonDiametricalZoneType ()
    : ::xml_schema::type (),
      ZoneOrientationVector_ (::xml_schema::flags (), this)
    {
    }

    StraightnessNonDiametricalZoneType::
    StraightnessNonDiametricalZoneType (const StraightnessNonDiametricalZoneType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this)
    {
    }

    StraightnessNonDiametricalZoneType::
    StraightnessNonDiametricalZoneType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ZoneOrientationVector_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StraightnessNonDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneOrientationVector
        //
        if (n.name () == "ZoneOrientationVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StraightnessNonDiametricalZoneType* StraightnessNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessNonDiametricalZoneType (*this, f, c);
    }

    StraightnessNonDiametricalZoneType::
    ~StraightnessNonDiametricalZoneType ()
    {
    }

    // StraightnessZoneShapeType
    //

    StraightnessZoneShapeType::
    StraightnessZoneShapeType ()
    : ::xml_schema::type (),
      DiametricalZone_ (::xml_schema::flags (), this),
      NonDiametricalZone_ (::xml_schema::flags (), this)
    {
    }

    StraightnessZoneShapeType::
    StraightnessZoneShapeType (const StraightnessZoneShapeType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    StraightnessZoneShapeType::
    StraightnessZoneShapeType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      DiametricalZone_ (f, this),
      NonDiametricalZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StraightnessZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DiametricalZone
        //
        if (n.name () == "DiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (r);
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == "NonDiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StraightnessZoneShapeType* StraightnessZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessZoneShapeType (*this, f, c);
    }

    StraightnessZoneShapeType::
    ~StraightnessZoneShapeType ()
    {
    }

    // StraightnessCharacteristicItemType
    //

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const StraightnessCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    StraightnessCharacteristicItemType::
    StraightnessCharacteristicItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    StraightnessCharacteristicItemType* StraightnessCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicItemType (*this, f, c);
    }

    StraightnessCharacteristicItemType::
    ~StraightnessCharacteristicItemType ()
    {
    }

    // StraightnessCharacteristicDefinitionType
    //

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const id_type& id,
                                              const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitLength_ (::xml_schema::flags (), this),
      MaterialCondition_ (::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const id_type& id,
                                              ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitLength_ (::xml_schema::flags (), this),
      MaterialCondition_ (::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const StraightnessCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceZonePerUnitLength_ (x.ToleranceZonePerUnitLength_, f, this),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this)
    {
    }

    StraightnessCharacteristicDefinitionType::
    StraightnessCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      ToleranceZonePerUnitLength_ (f, this),
      MaterialCondition_ (f, this),
      ZoneShape_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitLength
        //
        if (n.name () == "ToleranceZonePerUnitLength" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitLength_type > r (
            ToleranceZonePerUnitLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitLength_)
          {
            this->ToleranceZonePerUnitLength_.set (r);
            continue;
          }
        }

        // MaterialCondition
        //
        if (n.name () == "MaterialCondition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!this->MaterialCondition_)
          {
            this->MaterialCondition_.set (r);
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == "ZoneShape" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ZoneShape",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    StraightnessCharacteristicDefinitionType* StraightnessCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicDefinitionType (*this, f, c);
    }

    StraightnessCharacteristicDefinitionType::
    ~StraightnessCharacteristicDefinitionType ()
    {
    }

    // StraightnessCharacteristicNominalType
    //

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const StraightnessCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    StraightnessCharacteristicNominalType::
    StraightnessCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StraightnessCharacteristicNominalType* StraightnessCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicNominalType (*this, f, c);
    }

    StraightnessCharacteristicNominalType::
    ~StraightnessCharacteristicNominalType ()
    {
    }

    // StraightnessCharacteristicActualType
    //

    StraightnessCharacteristicActualType::
    StraightnessCharacteristicActualType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxStraightness_ (::xml_schema::flags (), this),
      ZoneOrientation_ (::xml_schema::flags (), this),
      ZoneLine_ (::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicActualType::
    StraightnessCharacteristicActualType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxStraightness_ (::xml_schema::flags (), this),
      ZoneOrientation_ (::xml_schema::flags (), this),
      ZoneLine_ (::xml_schema::flags (), this)
    {
    }

    StraightnessCharacteristicActualType::
    StraightnessCharacteristicActualType (const StraightnessCharacteristicActualType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (x, f, c),
      MaxStraightness_ (x.MaxStraightness_, f, this),
      ZoneOrientation_ (x.ZoneOrientation_, f, this),
      ZoneLine_ (x.ZoneLine_, f, this)
    {
    }

    StraightnessCharacteristicActualType::
    StraightnessCharacteristicActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      MaxStraightness_ (f, this),
      ZoneOrientation_ (f, this),
      ZoneLine_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void StraightnessCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxStraightness
        //
        if (n.name () == "MaxStraightness" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxStraightness_type > r (
            MaxStraightness_traits::create (i, f, this));

          if (!this->MaxStraightness_)
          {
            this->MaxStraightness_.set (r);
            continue;
          }
        }

        // ZoneOrientation
        //
        if (n.name () == "ZoneOrientation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneOrientation_type > r (
            ZoneOrientation_traits::create (i, f, this));

          if (!this->ZoneOrientation_)
          {
            this->ZoneOrientation_.set (r);
            continue;
          }
        }

        // ZoneLine
        //
        if (n.name () == "ZoneLine" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLine_type > r (
            ZoneLine_traits::create (i, f, this));

          if (!this->ZoneLine_)
          {
            this->ZoneLine_.set (r);
            continue;
          }
        }

        break;
      }
    }

    StraightnessCharacteristicActualType* StraightnessCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StraightnessCharacteristicActualType (*this, f, c);
    }

    StraightnessCharacteristicActualType::
    ~StraightnessCharacteristicActualType ()
    {
    }

    // FlatnessCharacteristicItemType
    //

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const FlatnessCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    FlatnessCharacteristicItemType::
    FlatnessCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    FlatnessCharacteristicItemType* FlatnessCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicItemType (*this, f, c);
    }

    FlatnessCharacteristicItemType::
    ~FlatnessCharacteristicItemType ()
    {
    }

    // FlatnessCharacteristicDefinitionType
    //

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitArea_ (::xml_schema::flags (), this),
      NotConvex_ (::xml_schema::flags (), this)
    {
    }

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType (const FlatnessCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceZonePerUnitArea_ (x.ToleranceZonePerUnitArea_, f, this),
      NotConvex_ (x.NotConvex_, f, this)
    {
    }

    FlatnessCharacteristicDefinitionType::
    FlatnessCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      ToleranceZonePerUnitArea_ (f, this),
      NotConvex_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void FlatnessCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitArea
        //
        if (n.name () == "ToleranceZonePerUnitArea" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitArea_type > r (
            ToleranceZonePerUnitArea_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArea_)
          {
            this->ToleranceZonePerUnitArea_.set (r);
            continue;
          }
        }

        // NotConvex
        //
        if (n.name () == "NotConvex" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->NotConvex_)
          {
            this->NotConvex_.set (NotConvex_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    FlatnessCharacteristicDefinitionType* FlatnessCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicDefinitionType (*this, f, c);
    }

    FlatnessCharacteristicDefinitionType::
    ~FlatnessCharacteristicDefinitionType ()
    {
    }

    // FlatnessCharacteristicNominalType
    //

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId),
      CircularZoneLimit_ (::xml_schema::flags (), this),
      DirectionalZoneLimit_ (::xml_schema::flags (), this),
      RectangularZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const FlatnessCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (x, f, c),
      CircularZoneLimit_ (x.CircularZoneLimit_, f, this),
      DirectionalZoneLimit_ (x.DirectionalZoneLimit_, f, this),
      RectangularZoneLimit_ (x.RectangularZoneLimit_, f, this)
    {
    }

    FlatnessCharacteristicNominalType::
    FlatnessCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      CircularZoneLimit_ (f, this),
      DirectionalZoneLimit_ (f, this),
      RectangularZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void FlatnessCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CircularZoneLimit
        //
        if (n.name () == "CircularZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CircularZoneLimit_type > r (
            CircularZoneLimit_traits::create (i, f, this));

          if (!this->CircularZoneLimit_)
          {
            this->CircularZoneLimit_.set (r);
            continue;
          }
        }

        // DirectionalZoneLimit
        //
        if (n.name () == "DirectionalZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirectionalZoneLimit_type > r (
            DirectionalZoneLimit_traits::create (i, f, this));

          if (!this->DirectionalZoneLimit_)
          {
            this->DirectionalZoneLimit_.set (r);
            continue;
          }
        }

        // RectangularZoneLimit
        //
        if (n.name () == "RectangularZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RectangularZoneLimit_type > r (
            RectangularZoneLimit_traits::create (i, f, this));

          if (!this->RectangularZoneLimit_)
          {
            this->RectangularZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    FlatnessCharacteristicNominalType* FlatnessCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicNominalType (*this, f, c);
    }

    FlatnessCharacteristicNominalType::
    ~FlatnessCharacteristicNominalType ()
    {
    }

    // FlatnessCharacteristicActualType
    //

    FlatnessCharacteristicActualType::
    FlatnessCharacteristicActualType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxFlatness_ (::xml_schema::flags (), this),
      ZonePlane_ (::xml_schema::flags (), this)
    {
    }

    FlatnessCharacteristicActualType::
    FlatnessCharacteristicActualType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxFlatness_ (::xml_schema::flags (), this),
      ZonePlane_ (::xml_schema::flags (), this)
    {
    }

    FlatnessCharacteristicActualType::
    FlatnessCharacteristicActualType (const FlatnessCharacteristicActualType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (x, f, c),
      MaxFlatness_ (x.MaxFlatness_, f, this),
      ZonePlane_ (x.ZonePlane_, f, this)
    {
    }

    FlatnessCharacteristicActualType::
    FlatnessCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      MaxFlatness_ (f, this),
      ZonePlane_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void FlatnessCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxFlatness
        //
        if (n.name () == "MaxFlatness" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxFlatness_type > r (
            MaxFlatness_traits::create (i, f, this));

          if (!this->MaxFlatness_)
          {
            this->MaxFlatness_.set (r);
            continue;
          }
        }

        // ZonePlane
        //
        if (n.name () == "ZonePlane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZonePlane_type > r (
            ZonePlane_traits::create (i, f, this));

          if (!this->ZonePlane_)
          {
            this->ZonePlane_.set (r);
            continue;
          }
        }

        break;
      }
    }

    FlatnessCharacteristicActualType* FlatnessCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FlatnessCharacteristicActualType (*this, f, c);
    }

    FlatnessCharacteristicActualType::
    ~FlatnessCharacteristicActualType ()
    {
    }

    // CircularityCharacteristicItemType
    //

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const CircularityCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    CircularityCharacteristicItemType::
    CircularityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    CircularityCharacteristicItemType* CircularityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicItemType (*this, f, c);
    }

    CircularityCharacteristicItemType::
    ~CircularityCharacteristicItemType ()
    {
    }

    // CircularityCharacteristicDefinitionType
    //

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitAngle_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitArcLength_ (::xml_schema::flags (), this)
    {
    }

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType (const CircularityCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceZonePerUnitAngle_ (x.ToleranceZonePerUnitAngle_, f, this),
      ToleranceZonePerUnitArcLength_ (x.ToleranceZonePerUnitArcLength_, f, this)
    {
    }

    CircularityCharacteristicDefinitionType::
    CircularityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      ToleranceZonePerUnitAngle_ (f, this),
      ToleranceZonePerUnitArcLength_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitAngle
        //
        if (n.name () == "ToleranceZonePerUnitAngle" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitAngle_type > r (
            ToleranceZonePerUnitAngle_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitAngle_)
          {
            this->ToleranceZonePerUnitAngle_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitArcLength
        //
        if (n.name () == "ToleranceZonePerUnitArcLength" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitArcLength_type > r (
            ToleranceZonePerUnitArcLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArcLength_)
          {
            this->ToleranceZonePerUnitArcLength_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicDefinitionType* CircularityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicDefinitionType (*this, f, c);
    }

    CircularityCharacteristicDefinitionType::
    ~CircularityCharacteristicDefinitionType ()
    {
    }

    // CircularityCharacteristicNominalType
    //

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const CircularityCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    CircularityCharacteristicNominalType::
    CircularityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicNominalType* CircularityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicNominalType (*this, f, c);
    }

    CircularityCharacteristicNominalType::
    ~CircularityCharacteristicNominalType ()
    {
    }

    // CircularityCharacteristicActualType
    //

    CircularityCharacteristicActualType::
    CircularityCharacteristicActualType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxCircularity_ (::xml_schema::flags (), this),
      ZoneRadii_ (::xml_schema::flags (), this),
      ZonePlane_ (::xml_schema::flags (), this)
    {
    }

    CircularityCharacteristicActualType::
    CircularityCharacteristicActualType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxCircularity_ (::xml_schema::flags (), this),
      ZoneRadii_ (::xml_schema::flags (), this),
      ZonePlane_ (::xml_schema::flags (), this)
    {
    }

    CircularityCharacteristicActualType::
    CircularityCharacteristicActualType (const CircularityCharacteristicActualType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (x, f, c),
      MaxCircularity_ (x.MaxCircularity_, f, this),
      ZoneRadii_ (x.ZoneRadii_, f, this),
      ZonePlane_ (x.ZonePlane_, f, this)
    {
    }

    CircularityCharacteristicActualType::
    CircularityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      MaxCircularity_ (f, this),
      ZoneRadii_ (f, this),
      ZonePlane_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CircularityCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxCircularity
        //
        if (n.name () == "MaxCircularity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxCircularity_type > r (
            MaxCircularity_traits::create (i, f, this));

          if (!this->MaxCircularity_)
          {
            this->MaxCircularity_.set (r);
            continue;
          }
        }

        // ZoneRadii
        //
        if (n.name () == "ZoneRadii" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneRadii_type > r (
            ZoneRadii_traits::create (i, f, this));

          if (!this->ZoneRadii_)
          {
            this->ZoneRadii_.set (r);
            continue;
          }
        }

        // ZonePlane
        //
        if (n.name () == "ZonePlane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZonePlane_type > r (
            ZonePlane_traits::create (i, f, this));

          if (!this->ZonePlane_)
          {
            this->ZonePlane_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CircularityCharacteristicActualType* CircularityCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularityCharacteristicActualType (*this, f, c);
    }

    CircularityCharacteristicActualType::
    ~CircularityCharacteristicActualType ()
    {
    }

    // CylindricityCharacteristicItemType
    //

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::FormCharacteristicItemBaseType (id,
                                                   Name,
                                                   CharacteristicNominalId)
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const CylindricityCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (x, f, c)
    {
    }

    CylindricityCharacteristicItemType::
    CylindricityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicItemBaseType (e, f, c)
    {
    }

    CylindricityCharacteristicItemType* CylindricityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicItemType (*this, f, c);
    }

    CylindricityCharacteristicItemType::
    ~CylindricityCharacteristicItemType ()
    {
    }

    // CylindricityCharacteristicDefinitionType
    //

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitAngle_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitArcLength_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitPolarArea_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitArea_ (::xml_schema::flags (), this),
      ToleranceZonePerUnitLength_ (::xml_schema::flags (), this)
    {
    }

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType (const CylindricityCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      ToleranceZonePerUnitAngle_ (x.ToleranceZonePerUnitAngle_, f, this),
      ToleranceZonePerUnitArcLength_ (x.ToleranceZonePerUnitArcLength_, f, this),
      ToleranceZonePerUnitPolarArea_ (x.ToleranceZonePerUnitPolarArea_, f, this),
      ToleranceZonePerUnitArea_ (x.ToleranceZonePerUnitArea_, f, this),
      ToleranceZonePerUnitLength_ (x.ToleranceZonePerUnitLength_, f, this)
    {
    }

    CylindricityCharacteristicDefinitionType::
    CylindricityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      ToleranceZonePerUnitAngle_ (f, this),
      ToleranceZonePerUnitArcLength_ (f, this),
      ToleranceZonePerUnitPolarArea_ (f, this),
      ToleranceZonePerUnitArea_ (f, this),
      ToleranceZonePerUnitLength_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CylindricityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!this->ToleranceValue_)
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitAngle
        //
        if (n.name () == "ToleranceZonePerUnitAngle" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitAngle_type > r (
            ToleranceZonePerUnitAngle_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitAngle_)
          {
            this->ToleranceZonePerUnitAngle_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitArcLength
        //
        if (n.name () == "ToleranceZonePerUnitArcLength" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitArcLength_type > r (
            ToleranceZonePerUnitArcLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArcLength_)
          {
            this->ToleranceZonePerUnitArcLength_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitPolarArea
        //
        if (n.name () == "ToleranceZonePerUnitPolarArea" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitPolarArea_type > r (
            ToleranceZonePerUnitPolarArea_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitPolarArea_)
          {
            this->ToleranceZonePerUnitPolarArea_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitArea
        //
        if (n.name () == "ToleranceZonePerUnitArea" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitArea_type > r (
            ToleranceZonePerUnitArea_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitArea_)
          {
            this->ToleranceZonePerUnitArea_.set (r);
            continue;
          }
        }

        // ToleranceZonePerUnitLength
        //
        if (n.name () == "ToleranceZonePerUnitLength" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceZonePerUnitLength_type > r (
            ToleranceZonePerUnitLength_traits::create (i, f, this));

          if (!this->ToleranceZonePerUnitLength_)
          {
            this->ToleranceZonePerUnitLength_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CylindricityCharacteristicDefinitionType* CylindricityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicDefinitionType (*this, f, c);
    }

    CylindricityCharacteristicDefinitionType::
    ~CylindricityCharacteristicDefinitionType ()
    {
    }

    // CylindricityCharacteristicNominalType
    //

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (id,
                                                      CharacteristicDefinitionId),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const CylindricityCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    CylindricityCharacteristicNominalType::
    CylindricityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CylindricityCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CylindricityCharacteristicNominalType* CylindricityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicNominalType (*this, f, c);
    }

    CylindricityCharacteristicNominalType::
    ~CylindricityCharacteristicNominalType ()
    {
    }

    // CylindricityCharacteristicActualType
    //

    CylindricityCharacteristicActualType::
    CylindricityCharacteristicActualType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxCylindricity_ (::xml_schema::flags (), this),
      ZoneRadii_ (::xml_schema::flags (), this),
      ZoneAxis_ (::xml_schema::flags (), this)
    {
    }

    CylindricityCharacteristicActualType::
    CylindricityCharacteristicActualType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::FormCharacteristicActualBaseType (id,
                                                     Status,
                                                     CharacteristicItemId),
      MaxCylindricity_ (::xml_schema::flags (), this),
      ZoneRadii_ (::xml_schema::flags (), this),
      ZoneAxis_ (::xml_schema::flags (), this)
    {
    }

    CylindricityCharacteristicActualType::
    CylindricityCharacteristicActualType (const CylindricityCharacteristicActualType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (x, f, c),
      MaxCylindricity_ (x.MaxCylindricity_, f, this),
      ZoneRadii_ (x.ZoneRadii_, f, this),
      ZoneAxis_ (x.ZoneAxis_, f, this)
    {
    }

    CylindricityCharacteristicActualType::
    CylindricityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::FormCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      MaxCylindricity_ (f, this),
      ZoneRadii_ (f, this),
      ZoneAxis_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CylindricityCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::FormCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaxCylindricity
        //
        if (n.name () == "MaxCylindricity" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxCylindricity_type > r (
            MaxCylindricity_traits::create (i, f, this));

          if (!this->MaxCylindricity_)
          {
            this->MaxCylindricity_.set (r);
            continue;
          }
        }

        // ZoneRadii
        //
        if (n.name () == "ZoneRadii" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneRadii_type > r (
            ZoneRadii_traits::create (i, f, this));

          if (!this->ZoneRadii_)
          {
            this->ZoneRadii_.set (r);
            continue;
          }
        }

        // ZoneAxis
        //
        if (n.name () == "ZoneAxis" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneAxis_type > r (
            ZoneAxis_traits::create (i, f, this));

          if (!this->ZoneAxis_)
          {
            this->ZoneAxis_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CylindricityCharacteristicActualType* CylindricityCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CylindricityCharacteristicActualType (*this, f, c);
    }

    CylindricityCharacteristicActualType::
    ~CylindricityCharacteristicActualType ()
    {
    }

    // LocationCharacteristicItemBaseType
    //

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const LocationCharacteristicItemBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    LocationCharacteristicItemBaseType::
    LocationCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    LocationCharacteristicItemBaseType* LocationCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationCharacteristicItemBaseType (*this, f, c);
    }

    LocationCharacteristicItemBaseType::
    ~LocationCharacteristicItemBaseType ()
    {
    }

    // LocationCharacteristicDefinitionBaseType
    //

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const id_type& id,
                                              const ToleranceValue_type& ToleranceValue,
                                              const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const id_type& id,
                                              ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                              ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const LocationCharacteristicDefinitionBaseType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this)
    {
    }

    LocationCharacteristicDefinitionBaseType::
    LocationCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      DatumReferenceFrameId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LocationCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == "DatumReferenceFrameId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!DatumReferenceFrameId_.present ())
          {
            this->DatumReferenceFrameId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToleranceValue",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DatumReferenceFrameId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DatumReferenceFrameId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LocationCharacteristicDefinitionBaseType* LocationCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationCharacteristicDefinitionBaseType (*this, f, c);
    }

    LocationCharacteristicDefinitionBaseType::
    ~LocationCharacteristicDefinitionBaseType ()
    {
    }

    // LocationCharacteristicNominalBaseType
    //

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId)
    {
    }

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const LocationCharacteristicNominalBaseType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (x, f, c)
    {
    }

    LocationCharacteristicNominalBaseType::
    LocationCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (e, f, c)
    {
    }

    LocationCharacteristicNominalBaseType* LocationCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationCharacteristicNominalBaseType (*this, f, c);
    }

    LocationCharacteristicNominalBaseType::
    ~LocationCharacteristicNominalBaseType ()
    {
    }

    // LocationCharacteristicActualBaseType
    //

    LocationCharacteristicActualBaseType::
    LocationCharacteristicActualBaseType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      ZoneData_ (::xml_schema::flags (), this),
      DatumsOk_ (::xml_schema::flags (), this)
    {
    }

    LocationCharacteristicActualBaseType::
    LocationCharacteristicActualBaseType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      ZoneData_ (::xml_schema::flags (), this),
      DatumsOk_ (::xml_schema::flags (), this)
    {
    }

    LocationCharacteristicActualBaseType::
    LocationCharacteristicActualBaseType (const LocationCharacteristicActualBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (x, f, c),
      ZoneData_ (x.ZoneData_, f, this),
      DatumsOk_ (x.DatumsOk_, f, this)
    {
    }

    LocationCharacteristicActualBaseType::
    LocationCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneData_ (f, this),
      DatumsOk_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LocationCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneData
        //
        if (n.name () == "ZoneData" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneData_type > r (
            ZoneData_traits::create (i, f, this));

          this->ZoneData_.push_back (r);
          continue;
        }

        // DatumsOk
        //
        if (n.name () == "DatumsOk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    LocationCharacteristicActualBaseType* LocationCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LocationCharacteristicActualBaseType (*this, f, c);
    }

    LocationCharacteristicActualBaseType::
    ~LocationCharacteristicActualBaseType ()
    {
    }

    // PositionCharacteristicItemType
    //

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const PositionCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    PositionCharacteristicItemType::
    PositionCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    PositionCharacteristicItemType* PositionCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicItemType (*this, f, c);
    }

    PositionCharacteristicItemType::
    ~PositionCharacteristicItemType ()
    {
    }

    // PositionSphericalZoneType
    //

    const PositionSphericalZoneType::Dimensionality_type PositionSphericalZoneType::Dimensionality_default_value_ (
      "THREEDIMENSIONAL");

    PositionSphericalZoneType::
    PositionSphericalZoneType ()
    : ::xml_schema::type (),
      Dimensionality_ (::xml_schema::flags (), this)
    {
    }

    PositionSphericalZoneType::
    PositionSphericalZoneType (const PositionSphericalZoneType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Dimensionality_ (x.Dimensionality_, f, this)
    {
    }

    PositionSphericalZoneType::
    PositionSphericalZoneType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Dimensionality_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PositionSphericalZoneType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Dimensionality
        //
        if (n.name () == "Dimensionality" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Dimensionality_type > r (
            Dimensionality_traits::create (i, f, this));

          if (!this->Dimensionality_)
          {
            this->Dimensionality_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PositionSphericalZoneType* PositionSphericalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionSphericalZoneType (*this, f, c);
    }

    PositionSphericalZoneType::
    ~PositionSphericalZoneType ()
    {
    }

    // PositionDiametricalZoneType
    //

    PositionDiametricalZoneType::
    PositionDiametricalZoneType ()
    : ::xml_schema::type (),
      Dimensionality_ (::xml_schema::flags (), this),
      ZoneOrientationVector_ (::xml_schema::flags (), this),
      ElongatedZone_ (::xml_schema::flags (), this)
    {
    }

    PositionDiametricalZoneType::
    PositionDiametricalZoneType (const PositionDiametricalZoneType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Dimensionality_ (x.Dimensionality_, f, this),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this),
      ElongatedZone_ (x.ElongatedZone_, f, this)
    {
    }

    PositionDiametricalZoneType::
    PositionDiametricalZoneType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Dimensionality_ (f, this),
      ZoneOrientationVector_ (f, this),
      ElongatedZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PositionDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Dimensionality
        //
        if (n.name () == "Dimensionality" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Dimensionality_type > r (
            Dimensionality_traits::create (i, f, this));

          if (!this->Dimensionality_)
          {
            this->Dimensionality_.set (r);
            continue;
          }
        }

        // ZoneOrientationVector
        //
        if (n.name () == "ZoneOrientationVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (r);
            continue;
          }
        }

        // ElongatedZone
        //
        if (n.name () == "ElongatedZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->ElongatedZone_)
          {
            this->ElongatedZone_.set (ElongatedZone_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    PositionDiametricalZoneType* PositionDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionDiametricalZoneType (*this, f, c);
    }

    PositionDiametricalZoneType::
    ~PositionDiametricalZoneType ()
    {
    }

    // PositionNonDiametricalZoneType
    //

    PositionNonDiametricalZoneType::
    PositionNonDiametricalZoneType ()
    : ::xml_schema::type (),
      Dimensionality_ (::xml_schema::flags (), this),
      ZoneOrientationVector_ (::xml_schema::flags (), this),
      BoundaryZone_ (::xml_schema::flags (), this)
    {
    }

    PositionNonDiametricalZoneType::
    PositionNonDiametricalZoneType (const PositionNonDiametricalZoneType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Dimensionality_ (x.Dimensionality_, f, this),
      ZoneOrientationVector_ (x.ZoneOrientationVector_, f, this),
      BoundaryZone_ (x.BoundaryZone_, f, this)
    {
    }

    PositionNonDiametricalZoneType::
    PositionNonDiametricalZoneType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Dimensionality_ (f, this),
      ZoneOrientationVector_ (f, this),
      BoundaryZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PositionNonDiametricalZoneType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Dimensionality
        //
        if (n.name () == "Dimensionality" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Dimensionality_type > r (
            Dimensionality_traits::create (i, f, this));

          if (!this->Dimensionality_)
          {
            this->Dimensionality_.set (r);
            continue;
          }
        }

        // ZoneOrientationVector
        //
        if (n.name () == "ZoneOrientationVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneOrientationVector_type > r (
            ZoneOrientationVector_traits::create (i, f, this));

          if (!this->ZoneOrientationVector_)
          {
            this->ZoneOrientationVector_.set (r);
            continue;
          }
        }

        // BoundaryZone
        //
        if (n.name () == "BoundaryZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->BoundaryZone_)
          {
            this->BoundaryZone_.set (BoundaryZone_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    PositionNonDiametricalZoneType* PositionNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionNonDiametricalZoneType (*this, f, c);
    }

    PositionNonDiametricalZoneType::
    ~PositionNonDiametricalZoneType ()
    {
    }

    // PositionZoneShapeType
    //

    PositionZoneShapeType::
    PositionZoneShapeType ()
    : ::xml_schema::type (),
      SphericalZone_ (::xml_schema::flags (), this),
      DiametricalZone_ (::xml_schema::flags (), this),
      NonDiametricalZone_ (::xml_schema::flags (), this)
    {
    }

    PositionZoneShapeType::
    PositionZoneShapeType (const PositionZoneShapeType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SphericalZone_ (x.SphericalZone_, f, this),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    PositionZoneShapeType::
    PositionZoneShapeType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SphericalZone_ (f, this),
      DiametricalZone_ (f, this),
      NonDiametricalZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PositionZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SphericalZone
        //
        if (n.name () == "SphericalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SphericalZone_type > r (
            SphericalZone_traits::create (i, f, this));

          if (!this->SphericalZone_)
          {
            this->SphericalZone_.set (r);
            continue;
          }
        }

        // DiametricalZone
        //
        if (n.name () == "DiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (r);
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == "NonDiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PositionZoneShapeType* PositionZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionZoneShapeType (*this, f, c);
    }

    PositionZoneShapeType::
    ~PositionZoneShapeType ()
    {
    }

    // PositionCharacteristicDefinitionType
    //

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const id_type& id,
                                          const ToleranceValue_type& ToleranceValue,
                                          const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                          const MaterialCondition_type& MaterialCondition,
                                          const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue,
                                                             DatumReferenceFrameId),
      MaterialCondition_ (MaterialCondition, ::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this),
      ProjectedToleranceZoneValue_ (::xml_schema::flags (), this),
      SecondCompositeSegmentPositionDefinition_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentPositionDefinition_ (::xml_schema::flags (), this),
      FourthCompositeSegmentPositionDefinition_ (::xml_schema::flags (), this),
      ToPointToleranceValue_ (::xml_schema::flags (), this),
      OrientationOnly_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const id_type& id,
                                          ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                          ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                          const MaterialCondition_type& MaterialCondition,
                                          ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue,
                                                             DatumReferenceFrameId),
      MaterialCondition_ (MaterialCondition, ::xml_schema::flags (), this),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this),
      ProjectedToleranceZoneValue_ (::xml_schema::flags (), this),
      SecondCompositeSegmentPositionDefinition_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentPositionDefinition_ (::xml_schema::flags (), this),
      FourthCompositeSegmentPositionDefinition_ (::xml_schema::flags (), this),
      ToPointToleranceValue_ (::xml_schema::flags (), this),
      OrientationOnly_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const PositionCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (x, f, c),
      MaterialCondition_ (x.MaterialCondition_, f, this),
      ZoneShape_ (x.ZoneShape_, f, this),
      ProjectedToleranceZoneValue_ (x.ProjectedToleranceZoneValue_, f, this),
      SecondCompositeSegmentPositionDefinition_ (x.SecondCompositeSegmentPositionDefinition_, f, this),
      ThirdCompositeSegmentPositionDefinition_ (x.ThirdCompositeSegmentPositionDefinition_, f, this),
      FourthCompositeSegmentPositionDefinition_ (x.FourthCompositeSegmentPositionDefinition_, f, this),
      ToPointToleranceValue_ (x.ToPointToleranceValue_, f, this),
      OrientationOnly_ (x.OrientationOnly_, f, this)
    {
    }

    PositionCharacteristicDefinitionType::
    PositionCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      MaterialCondition_ (f, this),
      ZoneShape_ (f, this),
      ProjectedToleranceZoneValue_ (f, this),
      SecondCompositeSegmentPositionDefinition_ (f, this),
      ThirdCompositeSegmentPositionDefinition_ (f, this),
      FourthCompositeSegmentPositionDefinition_ (f, this),
      ToPointToleranceValue_ (f, this),
      OrientationOnly_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MaterialCondition
        //
        if (n.name () == "MaterialCondition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaterialCondition_type > r (
            MaterialCondition_traits::create (i, f, this));

          if (!MaterialCondition_.present ())
          {
            this->MaterialCondition_.set (r);
            continue;
          }
        }

        // ZoneShape
        //
        if (n.name () == "ZoneShape" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (r);
            continue;
          }
        }

        // ProjectedToleranceZoneValue
        //
        if (n.name () == "ProjectedToleranceZoneValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ProjectedToleranceZoneValue_type > r (
            ProjectedToleranceZoneValue_traits::create (i, f, this));

          if (!this->ProjectedToleranceZoneValue_)
          {
            this->ProjectedToleranceZoneValue_.set (r);
            continue;
          }
        }

        // SecondCompositeSegmentPositionDefinition
        //
        if (n.name () == "SecondCompositeSegmentPositionDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentPositionDefinition_type > r (
            SecondCompositeSegmentPositionDefinition_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentPositionDefinition_)
          {
            this->SecondCompositeSegmentPositionDefinition_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentPositionDefinition
        //
        if (n.name () == "ThirdCompositeSegmentPositionDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentPositionDefinition_type > r (
            ThirdCompositeSegmentPositionDefinition_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentPositionDefinition_)
          {
            this->ThirdCompositeSegmentPositionDefinition_.set (r);
            continue;
          }
        }

        // FourthCompositeSegmentPositionDefinition
        //
        if (n.name () == "FourthCompositeSegmentPositionDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FourthCompositeSegmentPositionDefinition_type > r (
            FourthCompositeSegmentPositionDefinition_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentPositionDefinition_)
          {
            this->FourthCompositeSegmentPositionDefinition_.set (r);
            continue;
          }
        }

        // ToPointToleranceValue
        //
        if (n.name () == "ToPointToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToPointToleranceValue_type > r (
            ToPointToleranceValue_traits::create (i, f, this));

          if (!this->ToPointToleranceValue_)
          {
            this->ToPointToleranceValue_.set (r);
            continue;
          }
        }

        // OrientationOnly
        //
        if (n.name () == "OrientationOnly" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->OrientationOnly_)
          {
            this->OrientationOnly_.set (OrientationOnly_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!MaterialCondition_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MaterialCondition",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ZoneShape",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PositionCharacteristicDefinitionType* PositionCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicDefinitionType (*this, f, c);
    }

    PositionCharacteristicDefinitionType::
    ~PositionCharacteristicDefinitionType ()
    {
    }

    // PositionCharacteristicNominalType
    //

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const PositionCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    PositionCharacteristicNominalType::
    PositionCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PositionCharacteristicNominalType* PositionCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicNominalType (*this, f, c);
    }

    PositionCharacteristicNominalType::
    ~PositionCharacteristicNominalType ()
    {
    }

    // PositionCharacteristicActualType
    //

    PositionCharacteristicActualType::
    PositionCharacteristicActualType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId),
      DRFTransformActualId_ (::xml_schema::flags (), this),
      SecondCompositeSegmentPositionActual_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentPositionActual_ (::xml_schema::flags (), this),
      FourthCompositeSegmentPositionActual_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicActualType::
    PositionCharacteristicActualType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId),
      DRFTransformActualId_ (::xml_schema::flags (), this),
      SecondCompositeSegmentPositionActual_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentPositionActual_ (::xml_schema::flags (), this),
      FourthCompositeSegmentPositionActual_ (::xml_schema::flags (), this)
    {
    }

    PositionCharacteristicActualType::
    PositionCharacteristicActualType (const PositionCharacteristicActualType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (x, f, c),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this),
      SecondCompositeSegmentPositionActual_ (x.SecondCompositeSegmentPositionActual_, f, this),
      ThirdCompositeSegmentPositionActual_ (x.ThirdCompositeSegmentPositionActual_, f, this),
      FourthCompositeSegmentPositionActual_ (x.FourthCompositeSegmentPositionActual_, f, this)
    {
    }

    PositionCharacteristicActualType::
    PositionCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      DRFTransformActualId_ (f, this),
      SecondCompositeSegmentPositionActual_ (f, this),
      ThirdCompositeSegmentPositionActual_ (f, this),
      FourthCompositeSegmentPositionActual_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PositionCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DRFTransformActualId
        //
        if (n.name () == "DRFTransformActualId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (r);
            continue;
          }
        }

        // SecondCompositeSegmentPositionActual
        //
        if (n.name () == "SecondCompositeSegmentPositionActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentPositionActual_type > r (
            SecondCompositeSegmentPositionActual_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentPositionActual_)
          {
            this->SecondCompositeSegmentPositionActual_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentPositionActual
        //
        if (n.name () == "ThirdCompositeSegmentPositionActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentPositionActual_type > r (
            ThirdCompositeSegmentPositionActual_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentPositionActual_)
          {
            this->ThirdCompositeSegmentPositionActual_.set (r);
            continue;
          }
        }

        // FourthCompositeSegmentPositionActual
        //
        if (n.name () == "FourthCompositeSegmentPositionActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FourthCompositeSegmentPositionActual_type > r (
            FourthCompositeSegmentPositionActual_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentPositionActual_)
          {
            this->FourthCompositeSegmentPositionActual_.set (r);
            continue;
          }
        }

        break;
      }
    }

    PositionCharacteristicActualType* PositionCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PositionCharacteristicActualType (*this, f, c);
    }

    PositionCharacteristicActualType::
    ~PositionCharacteristicActualType ()
    {
    }

    // AngleCharacteristicItemType
    //

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const AngleCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    AngleCharacteristicItemType::
    AngleCharacteristicItemType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    AngleCharacteristicItemType* AngleCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicItemType (*this, f, c);
    }

    AngleCharacteristicItemType::
    ~AngleCharacteristicItemType ()
    {
    }

    // AngleCharacteristicDefinitionType
    //

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (id)
    {
    }

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType (const AngleCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngleCharacteristicDefinitionType::
    AngleCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngleCharacteristicDefinitionType* AngleCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicDefinitionType (*this, f, c);
    }

    AngleCharacteristicDefinitionType::
    ~AngleCharacteristicDefinitionType ()
    {
    }

    // AngleCharacteristicNominalType
    //

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const AngleCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (x, f, c)
    {
    }

    AngleCharacteristicNominalType::
    AngleCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (e, f, c)
    {
    }

    AngleCharacteristicNominalType* AngleCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicNominalType (*this, f, c);
    }

    AngleCharacteristicNominalType::
    ~AngleCharacteristicNominalType ()
    {
    }

    // AngleCharacteristicActualType
    //

    AngleCharacteristicActualType::
    AngleCharacteristicActualType (const id_type& id,
                                   const Status_type& Status,
                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    AngleCharacteristicActualType::
    AngleCharacteristicActualType (const id_type& id,
                                   ::std::auto_ptr< Status_type >& Status,
                                   ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    AngleCharacteristicActualType::
    AngleCharacteristicActualType (const AngleCharacteristicActualType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (x, f, c)
    {
    }

    AngleCharacteristicActualType::
    AngleCharacteristicActualType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (e, f, c)
    {
    }

    AngleCharacteristicActualType* AngleCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleCharacteristicActualType (*this, f, c);
    }

    AngleCharacteristicActualType::
    ~AngleCharacteristicActualType ()
    {
    }

    // AngleFromCharacteristicItemType
    //

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const id_type& id,
                                     const Name_type& Name,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const id_type& id,
                                     const Name_type& Name,
                                     ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const AngleFromCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    AngleFromCharacteristicItemType::
    AngleFromCharacteristicItemType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    AngleFromCharacteristicItemType* AngleFromCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicItemType (*this, f, c);
    }

    AngleFromCharacteristicItemType::
    ~AngleFromCharacteristicItemType ()
    {
    }

    // AngleFromCharacteristicDefinitionType
    //

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (id)
    {
    }

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType (const AngleFromCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngleFromCharacteristicDefinitionType::
    AngleFromCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngleFromCharacteristicDefinitionType* AngleFromCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicDefinitionType (*this, f, c);
    }

    AngleFromCharacteristicDefinitionType::
    ~AngleFromCharacteristicDefinitionType ()
    {
    }

    // AngleFromCharacteristicNominalType
    //

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                        const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      OriginReference_ (::xml_schema::flags (), this),
      AnalysisVector_ (::xml_schema::flags (), this),
      AnalysisMode_ (AnalysisMode, ::xml_schema::flags (), this),
      CoordinateSystemId_ (::xml_schema::flags (), this),
      MeasurementDirective_ (::xml_schema::flags (), this),
      Vertex_ (::xml_schema::flags (), this),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const AngleFromCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (x, f, c),
      OriginReference_ (x.OriginReference_, f, this),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      Vertex_ (x.Vertex_, f, this),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    AngleFromCharacteristicNominalType::
    AngleFromCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      OriginReference_ (f, this),
      AnalysisVector_ (f, this),
      AnalysisMode_ (f, this),
      CoordinateSystemId_ (f, this),
      MeasurementDirective_ (f, this),
      Vertex_ (f, this),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngleFromCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AngularCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // OriginReference
        //
        if (n.name () == "OriginReference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OriginReference_type > r (
            OriginReference_traits::create (i, f, this));

          if (!this->OriginReference_)
          {
            this->OriginReference_.set (r);
            continue;
          }
        }

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == "AnalysisMode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (r);
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == "CoordinateSystemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (r);
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == "MeasurementDirective" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (r);
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == "Vertex" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (r);
            continue;
          }
        }

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "AnalysisMode",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    AngleFromCharacteristicNominalType* AngleFromCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicNominalType (*this, f, c);
    }

    AngleFromCharacteristicNominalType::
    ~AngleFromCharacteristicNominalType ()
    {
    }

    // AngleFromCharacteristicActualType
    //

    AngleFromCharacteristicActualType::
    AngleFromCharacteristicActualType (const id_type& id,
                                       const Status_type& Status,
                                       const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this),
      Vertex_ (::xml_schema::flags (), this)
    {
    }

    AngleFromCharacteristicActualType::
    AngleFromCharacteristicActualType (const id_type& id,
                                       ::std::auto_ptr< Status_type >& Status,
                                       ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this),
      Vertex_ (::xml_schema::flags (), this)
    {
    }

    AngleFromCharacteristicActualType::
    AngleFromCharacteristicActualType (const AngleFromCharacteristicActualType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      Vertex_ (x.Vertex_, f, this)
    {
    }

    AngleFromCharacteristicActualType::
    AngleFromCharacteristicActualType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (f, this),
      Vertex_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngleFromCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AngularCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == "Vertex" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngleFromCharacteristicActualType* AngleFromCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleFromCharacteristicActualType (*this, f, c);
    }

    AngleFromCharacteristicActualType::
    ~AngleFromCharacteristicActualType ()
    {
    }

    // AngleBetweenCharacteristicItemType
    //

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const AngleBetweenCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (x, f, c)
    {
    }

    AngleBetweenCharacteristicItemType::
    AngleBetweenCharacteristicItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicItemBaseType (e, f, c)
    {
    }

    AngleBetweenCharacteristicItemType* AngleBetweenCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicItemType (*this, f, c);
    }

    AngleBetweenCharacteristicItemType::
    ~AngleBetweenCharacteristicItemType ()
    {
    }

    // AngleBetweenCharacteristicDefinitionType
    //

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (id)
    {
    }

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType (const AngleBetweenCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    AngleBetweenCharacteristicDefinitionType::
    AngleBetweenCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    AngleBetweenCharacteristicDefinitionType* AngleBetweenCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicDefinitionType (*this, f, c);
    }

    AngleBetweenCharacteristicDefinitionType::
    ~AngleBetweenCharacteristicDefinitionType ()
    {
    }

    // AngleBetweenCharacteristicNominalType
    //

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                           const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      AnalysisVector_ (::xml_schema::flags (), this),
      AnalysisMode_ (AnalysisMode, ::xml_schema::flags (), this),
      CoordinateSystemId_ (::xml_schema::flags (), this),
      MeasurementDirective_ (::xml_schema::flags (), this),
      Vertex_ (::xml_schema::flags (), this),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const AngleBetweenCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      Vertex_ (x.Vertex_, f, this),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    AngleBetweenCharacteristicNominalType::
    AngleBetweenCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (f, this),
      AnalysisMode_ (f, this),
      CoordinateSystemId_ (f, this),
      MeasurementDirective_ (f, this),
      Vertex_ (f, this),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngleBetweenCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AngularCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == "AnalysisMode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (r);
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == "CoordinateSystemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (r);
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == "MeasurementDirective" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (r);
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == "Vertex" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (r);
            continue;
          }
        }

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "AnalysisMode",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    AngleBetweenCharacteristicNominalType* AngleBetweenCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicNominalType (*this, f, c);
    }

    AngleBetweenCharacteristicNominalType::
    ~AngleBetweenCharacteristicNominalType ()
    {
    }

    // AngleBetweenCharacteristicActualType
    //

    AngleBetweenCharacteristicActualType::
    AngleBetweenCharacteristicActualType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this),
      Vertex_ (::xml_schema::flags (), this)
    {
    }

    AngleBetweenCharacteristicActualType::
    AngleBetweenCharacteristicActualType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this),
      Vertex_ (::xml_schema::flags (), this)
    {
    }

    AngleBetweenCharacteristicActualType::
    AngleBetweenCharacteristicActualType (const AngleBetweenCharacteristicActualType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      Vertex_ (x.Vertex_, f, this)
    {
    }

    AngleBetweenCharacteristicActualType::
    AngleBetweenCharacteristicActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::AngularCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (f, this),
      Vertex_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngleBetweenCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AngularCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        // Vertex
        //
        if (n.name () == "Vertex" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Vertex_type > r (
            Vertex_traits::create (i, f, this));

          if (!this->Vertex_)
          {
            this->Vertex_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngleBetweenCharacteristicActualType* AngleBetweenCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngleBetweenCharacteristicActualType (*this, f, c);
    }

    AngleBetweenCharacteristicActualType::
    ~AngleBetweenCharacteristicActualType ()
    {
    }

    // LinearCoordinateCharacteristicItemType
    //

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (id,
                                                         Name,
                                                         CharacteristicNominalId)
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const id_type& id,
                                            const Name_type& Name,
                                            ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (id,
                                                         Name,
                                                         CharacteristicNominalId)
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const LinearCoordinateCharacteristicItemType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (x, f, c)
    {
    }

    LinearCoordinateCharacteristicItemType::
    LinearCoordinateCharacteristicItemType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (e, f, c)
    {
    }

    LinearCoordinateCharacteristicItemType* LinearCoordinateCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicItemType (*this, f, c);
    }

    LinearCoordinateCharacteristicItemType::
    ~LinearCoordinateCharacteristicItemType ()
    {
    }

    // LinearCoordinateCharacteristicDefinitionType
    //

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType (const LinearCoordinateCharacteristicDefinitionType& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    LinearCoordinateCharacteristicDefinitionType::
    LinearCoordinateCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LinearCoordinateCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CoordinateCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LinearCoordinateCharacteristicDefinitionType* LinearCoordinateCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicDefinitionType (*this, f, c);
    }

    LinearCoordinateCharacteristicDefinitionType::
    ~LinearCoordinateCharacteristicDefinitionType ()
    {
    }

    // LinearCoordinateCharacteristicNominalType
    //

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const id_type& id,
                                               const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                               const Direction_type& Direction)
    : ::xsd::qif2::CoordinateCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this),
      Direction_ (Direction, ::xml_schema::flags (), this),
      CoordinateSystemId_ (::xml_schema::flags (), this)
    {
    }

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const LinearCoordinateCharacteristicNominalType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      Direction_ (x.Direction_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    LinearCoordinateCharacteristicNominalType::
    LinearCoordinateCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this),
      Direction_ (f, this),
      CoordinateSystemId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LinearCoordinateCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CoordinateCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        // Direction
        //
        if (n.name () == "Direction" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Direction_type > r (
            Direction_traits::create (i, f, this));

          if (!Direction_.present ())
          {
            this->Direction_.set (r);
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == "CoordinateSystemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Direction",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LinearCoordinateCharacteristicNominalType* LinearCoordinateCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicNominalType (*this, f, c);
    }

    LinearCoordinateCharacteristicNominalType::
    ~LinearCoordinateCharacteristicNominalType ()
    {
    }

    // LinearCoordinateCharacteristicActualType
    //

    LinearCoordinateCharacteristicActualType::
    LinearCoordinateCharacteristicActualType (const id_type& id,
                                              const Status_type& Status,
                                              const CharacteristicItemId_type& CharacteristicItemId,
                                              const TypeOfCoordinates_type& TypeOfCoordinates)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (id,
                                                           Status,
                                                           CharacteristicItemId,
                                                           TypeOfCoordinates),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    LinearCoordinateCharacteristicActualType::
    LinearCoordinateCharacteristicActualType (const id_type& id,
                                              ::std::auto_ptr< Status_type >& Status,
                                              ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId,
                                              ::std::auto_ptr< TypeOfCoordinates_type >& TypeOfCoordinates)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (id,
                                                           Status,
                                                           CharacteristicItemId,
                                                           TypeOfCoordinates),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    LinearCoordinateCharacteristicActualType::
    LinearCoordinateCharacteristicActualType (const LinearCoordinateCharacteristicActualType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    LinearCoordinateCharacteristicActualType::
    LinearCoordinateCharacteristicActualType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LinearCoordinateCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CoordinateCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LinearCoordinateCharacteristicActualType* LinearCoordinateCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LinearCoordinateCharacteristicActualType (*this, f, c);
    }

    LinearCoordinateCharacteristicActualType::
    ~LinearCoordinateCharacteristicActualType ()
    {
    }

    // AngularCoordinateCharacteristicItemType
    //

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const id_type& id,
                                             const Name_type& Name,
                                             const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (id,
                                                         Name,
                                                         CharacteristicNominalId)
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const id_type& id,
                                             const Name_type& Name,
                                             ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (id,
                                                         Name,
                                                         CharacteristicNominalId)
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const AngularCoordinateCharacteristicItemType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (x, f, c)
    {
    }

    AngularCoordinateCharacteristicItemType::
    AngularCoordinateCharacteristicItemType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicItemBaseType (e, f, c)
    {
    }

    AngularCoordinateCharacteristicItemType* AngularCoordinateCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicItemType (*this, f, c);
    }

    AngularCoordinateCharacteristicItemType::
    ~AngularCoordinateCharacteristicItemType ()
    {
    }

    // AngularCoordinateCharacteristicDefinitionType
    //

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType (id),
      Tolerance_ (::xml_schema::flags (), this),
      NonTolerance_ (::xml_schema::flags (), this)
    {
    }

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType (const AngularCoordinateCharacteristicDefinitionType& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType (x, f, c),
      Tolerance_ (x.Tolerance_, f, this),
      NonTolerance_ (x.NonTolerance_, f, this)
    {
    }

    AngularCoordinateCharacteristicDefinitionType::
    AngularCoordinateCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Tolerance_ (f, this),
      NonTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularCoordinateCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CoordinateCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Tolerance
        //
        if (n.name () == "Tolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Tolerance_type > r (
            Tolerance_traits::create (i, f, this));

          if (!this->Tolerance_)
          {
            this->Tolerance_.set (r);
            continue;
          }
        }

        // NonTolerance
        //
        if (n.name () == "NonTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonTolerance_type > r (
            NonTolerance_traits::create (i, f, this));

          if (!this->NonTolerance_)
          {
            this->NonTolerance_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularCoordinateCharacteristicDefinitionType* AngularCoordinateCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicDefinitionType (*this, f, c);
    }

    AngularCoordinateCharacteristicDefinitionType::
    ~AngularCoordinateCharacteristicDefinitionType ()
    {
    }

    // AngularCoordinateCharacteristicNominalType
    //

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const id_type& id,
                                                const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                                const Direction_type& Direction)
    : ::xsd::qif2::CoordinateCharacteristicNominalBaseType (id,
                                                            CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this),
      Direction_ (Direction, ::xml_schema::flags (), this),
      CoordinateSystemId_ (::xml_schema::flags (), this)
    {
    }

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const AngularCoordinateCharacteristicNominalType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this),
      Direction_ (x.Direction_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this)
    {
    }

    AngularCoordinateCharacteristicNominalType::
    AngularCoordinateCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this),
      Direction_ (f, this),
      CoordinateSystemId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularCoordinateCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CoordinateCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        // Direction
        //
        if (n.name () == "Direction" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Direction_type > r (
            Direction_traits::create (i, f, this));

          if (!Direction_.present ())
          {
            this->Direction_.set (r);
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == "CoordinateSystemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Direction_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Direction",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    AngularCoordinateCharacteristicNominalType* AngularCoordinateCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicNominalType (*this, f, c);
    }

    AngularCoordinateCharacteristicNominalType::
    ~AngularCoordinateCharacteristicNominalType ()
    {
    }

    // AngularCoordinateCharacteristicActualType
    //

    AngularCoordinateCharacteristicActualType::
    AngularCoordinateCharacteristicActualType (const id_type& id,
                                               const Status_type& Status,
                                               const CharacteristicItemId_type& CharacteristicItemId,
                                               const TypeOfCoordinates_type& TypeOfCoordinates)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (id,
                                                           Status,
                                                           CharacteristicItemId,
                                                           TypeOfCoordinates),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    AngularCoordinateCharacteristicActualType::
    AngularCoordinateCharacteristicActualType (const id_type& id,
                                               ::std::auto_ptr< Status_type >& Status,
                                               ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId,
                                               ::std::auto_ptr< TypeOfCoordinates_type >& TypeOfCoordinates)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (id,
                                                           Status,
                                                           CharacteristicItemId,
                                                           TypeOfCoordinates),
      Value_ (::xml_schema::flags (), this),
      MaxValue_ (::xml_schema::flags (), this),
      MinValue_ (::xml_schema::flags (), this)
    {
    }

    AngularCoordinateCharacteristicActualType::
    AngularCoordinateCharacteristicActualType (const AngularCoordinateCharacteristicActualType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (x, f, c),
      Value_ (x.Value_, f, this),
      MaxValue_ (x.MaxValue_, f, this),
      MinValue_ (x.MinValue_, f, this)
    {
    }

    AngularCoordinateCharacteristicActualType::
    AngularCoordinateCharacteristicActualType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::CoordinateCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      Value_ (f, this),
      MaxValue_ (f, this),
      MinValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AngularCoordinateCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CoordinateCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Value
        //
        if (n.name () == "Value" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Value_type > r (
            Value_traits::create (i, f, this));

          if (!this->Value_)
          {
            this->Value_.set (r);
            continue;
          }
        }

        // MaxValue
        //
        if (n.name () == "MaxValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxValue_type > r (
            MaxValue_traits::create (i, f, this));

          if (!this->MaxValue_)
          {
            this->MaxValue_.set (r);
            continue;
          }
        }

        // MinValue
        //
        if (n.name () == "MinValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinValue_type > r (
            MinValue_traits::create (i, f, this));

          if (!this->MinValue_)
          {
            this->MinValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    AngularCoordinateCharacteristicActualType* AngularCoordinateCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AngularCoordinateCharacteristicActualType (*this, f, c);
    }

    AngularCoordinateCharacteristicActualType::
    ~AngularCoordinateCharacteristicActualType ()
    {
    }

    // CurveLengthCharacteristicItemType
    //

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const CurveLengthCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicItemType::
    CurveLengthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicItemType* CurveLengthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicItemType (*this, f, c);
    }

    CurveLengthCharacteristicItemType::
    ~CurveLengthCharacteristicItemType ()
    {
    }

    // CurveLengthCharacteristicDefinitionType
    //

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType (const CurveLengthCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicDefinitionType::
    CurveLengthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicDefinitionType* CurveLengthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicDefinitionType (*this, f, c);
    }

    CurveLengthCharacteristicDefinitionType::
    ~CurveLengthCharacteristicDefinitionType ()
    {
    }

    // CurveLengthCharacteristicNominalType
    //

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const CurveLengthCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicNominalType::
    CurveLengthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicNominalType* CurveLengthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicNominalType (*this, f, c);
    }

    CurveLengthCharacteristicNominalType::
    ~CurveLengthCharacteristicNominalType ()
    {
    }

    // CurveLengthCharacteristicActualType
    //

    CurveLengthCharacteristicActualType::
    CurveLengthCharacteristicActualType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    CurveLengthCharacteristicActualType::
    CurveLengthCharacteristicActualType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    CurveLengthCharacteristicActualType::
    CurveLengthCharacteristicActualType (const CurveLengthCharacteristicActualType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    CurveLengthCharacteristicActualType::
    CurveLengthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    CurveLengthCharacteristicActualType* CurveLengthCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CurveLengthCharacteristicActualType (*this, f, c);
    }

    CurveLengthCharacteristicActualType::
    ~CurveLengthCharacteristicActualType ()
    {
    }

    // DiameterCharacteristicItemType
    //

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const DiameterCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DiameterCharacteristicItemType::
    DiameterCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DiameterCharacteristicItemType* DiameterCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicItemType (*this, f, c);
    }

    DiameterCharacteristicItemType::
    ~DiameterCharacteristicItemType ()
    {
    }

    // DiameterCharacteristicDefinitionType
    //

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType (const DiameterCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DiameterCharacteristicDefinitionType::
    DiameterCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DiameterCharacteristicDefinitionType* DiameterCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicDefinitionType (*this, f, c);
    }

    DiameterCharacteristicDefinitionType::
    ~DiameterCharacteristicDefinitionType ()
    {
    }

    // DiameterCharacteristicNominalType
    //

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const DiameterCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    DiameterCharacteristicNominalType::
    DiameterCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    DiameterCharacteristicNominalType* DiameterCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicNominalType (*this, f, c);
    }

    DiameterCharacteristicNominalType::
    ~DiameterCharacteristicNominalType ()
    {
    }

    // DiameterCharacteristicActualType
    //

    DiameterCharacteristicActualType::
    DiameterCharacteristicActualType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    DiameterCharacteristicActualType::
    DiameterCharacteristicActualType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    DiameterCharacteristicActualType::
    DiameterCharacteristicActualType (const DiameterCharacteristicActualType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    DiameterCharacteristicActualType::
    DiameterCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    DiameterCharacteristicActualType* DiameterCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DiameterCharacteristicActualType (*this, f, c);
    }

    DiameterCharacteristicActualType::
    ~DiameterCharacteristicActualType ()
    {
    }

    // LengthCharacteristicItemType
    //

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const LengthCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    LengthCharacteristicItemType::
    LengthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    LengthCharacteristicItemType* LengthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicItemType (*this, f, c);
    }

    LengthCharacteristicItemType::
    ~LengthCharacteristicItemType ()
    {
    }

    // LengthCharacteristicDefinitionType
    //

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType (const LengthCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    LengthCharacteristicDefinitionType::
    LengthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    LengthCharacteristicDefinitionType* LengthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicDefinitionType (*this, f, c);
    }

    LengthCharacteristicDefinitionType::
    ~LengthCharacteristicDefinitionType ()
    {
    }

    // LengthCharacteristicNominalType
    //

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const LengthCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    LengthCharacteristicNominalType::
    LengthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    LengthCharacteristicNominalType* LengthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicNominalType (*this, f, c);
    }

    LengthCharacteristicNominalType::
    ~LengthCharacteristicNominalType ()
    {
    }

    // LengthCharacteristicActualType
    //

    LengthCharacteristicActualType::
    LengthCharacteristicActualType (const id_type& id,
                                    const Status_type& Status,
                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    LengthCharacteristicActualType::
    LengthCharacteristicActualType (const id_type& id,
                                    ::std::auto_ptr< Status_type >& Status,
                                    ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    LengthCharacteristicActualType::
    LengthCharacteristicActualType (const LengthCharacteristicActualType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    LengthCharacteristicActualType::
    LengthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    LengthCharacteristicActualType* LengthCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LengthCharacteristicActualType (*this, f, c);
    }

    LengthCharacteristicActualType::
    ~LengthCharacteristicActualType ()
    {
    }

    // WidthCharacteristicItemType
    //

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const WidthCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    WidthCharacteristicItemType::
    WidthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    WidthCharacteristicItemType* WidthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicItemType (*this, f, c);
    }

    WidthCharacteristicItemType::
    ~WidthCharacteristicItemType ()
    {
    }

    // WidthCharacteristicDefinitionType
    //

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType (const WidthCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    WidthCharacteristicDefinitionType::
    WidthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    WidthCharacteristicDefinitionType* WidthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicDefinitionType (*this, f, c);
    }

    WidthCharacteristicDefinitionType::
    ~WidthCharacteristicDefinitionType ()
    {
    }

    // WidthCharacteristicNominalType
    //

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const WidthCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    WidthCharacteristicNominalType::
    WidthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    WidthCharacteristicNominalType* WidthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicNominalType (*this, f, c);
    }

    WidthCharacteristicNominalType::
    ~WidthCharacteristicNominalType ()
    {
    }

    // WidthCharacteristicActualType
    //

    WidthCharacteristicActualType::
    WidthCharacteristicActualType (const id_type& id,
                                   const Status_type& Status,
                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    WidthCharacteristicActualType::
    WidthCharacteristicActualType (const id_type& id,
                                   ::std::auto_ptr< Status_type >& Status,
                                   ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    WidthCharacteristicActualType::
    WidthCharacteristicActualType (const WidthCharacteristicActualType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    WidthCharacteristicActualType::
    WidthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    WidthCharacteristicActualType* WidthCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class WidthCharacteristicActualType (*this, f, c);
    }

    WidthCharacteristicActualType::
    ~WidthCharacteristicActualType ()
    {
    }

    // HeightCharacteristicItemType
    //

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const HeightCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    HeightCharacteristicItemType::
    HeightCharacteristicItemType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    HeightCharacteristicItemType* HeightCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicItemType (*this, f, c);
    }

    HeightCharacteristicItemType::
    ~HeightCharacteristicItemType ()
    {
    }

    // HeightCharacteristicDefinitionType
    //

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType (const HeightCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    HeightCharacteristicDefinitionType::
    HeightCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    HeightCharacteristicDefinitionType* HeightCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicDefinitionType (*this, f, c);
    }

    HeightCharacteristicDefinitionType::
    ~HeightCharacteristicDefinitionType ()
    {
    }

    // HeightCharacteristicNominalType
    //

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const HeightCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    HeightCharacteristicNominalType::
    HeightCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    HeightCharacteristicNominalType* HeightCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicNominalType (*this, f, c);
    }

    HeightCharacteristicNominalType::
    ~HeightCharacteristicNominalType ()
    {
    }

    // HeightCharacteristicActualType
    //

    HeightCharacteristicActualType::
    HeightCharacteristicActualType (const id_type& id,
                                    const Status_type& Status,
                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    HeightCharacteristicActualType::
    HeightCharacteristicActualType (const id_type& id,
                                    ::std::auto_ptr< Status_type >& Status,
                                    ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    HeightCharacteristicActualType::
    HeightCharacteristicActualType (const HeightCharacteristicActualType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    HeightCharacteristicActualType::
    HeightCharacteristicActualType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    HeightCharacteristicActualType* HeightCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HeightCharacteristicActualType (*this, f, c);
    }

    HeightCharacteristicActualType::
    ~HeightCharacteristicActualType ()
    {
    }

    // DepthCharacteristicItemType
    //

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const DepthCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DepthCharacteristicItemType::
    DepthCharacteristicItemType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DepthCharacteristicItemType* DepthCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicItemType (*this, f, c);
    }

    DepthCharacteristicItemType::
    ~DepthCharacteristicItemType ()
    {
    }

    // DepthCharacteristicDefinitionType
    //

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType (const DepthCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DepthCharacteristicDefinitionType::
    DepthCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DepthCharacteristicDefinitionType* DepthCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicDefinitionType (*this, f, c);
    }

    DepthCharacteristicDefinitionType::
    ~DepthCharacteristicDefinitionType ()
    {
    }

    // DepthCharacteristicNominalType
    //

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const DepthCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    DepthCharacteristicNominalType::
    DepthCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    DepthCharacteristicNominalType* DepthCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicNominalType (*this, f, c);
    }

    DepthCharacteristicNominalType::
    ~DepthCharacteristicNominalType ()
    {
    }

    // DepthCharacteristicActualType
    //

    DepthCharacteristicActualType::
    DepthCharacteristicActualType (const id_type& id,
                                   const Status_type& Status,
                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    DepthCharacteristicActualType::
    DepthCharacteristicActualType (const id_type& id,
                                   ::std::auto_ptr< Status_type >& Status,
                                   ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    DepthCharacteristicActualType::
    DepthCharacteristicActualType (const DepthCharacteristicActualType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    DepthCharacteristicActualType::
    DepthCharacteristicActualType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    DepthCharacteristicActualType* DepthCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DepthCharacteristicActualType (*this, f, c);
    }

    DepthCharacteristicActualType::
    ~DepthCharacteristicActualType ()
    {
    }

    // ThicknessCharacteristicItemType
    //

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const id_type& id,
                                     const Name_type& Name,
                                     const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const id_type& id,
                                     const Name_type& Name,
                                     ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const ThicknessCharacteristicItemType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicItemType::
    ThicknessCharacteristicItemType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicItemType* ThicknessCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicItemType (*this, f, c);
    }

    ThicknessCharacteristicItemType::
    ~ThicknessCharacteristicItemType ()
    {
    }

    // ThicknessCharacteristicDefinitionType
    //

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType (const ThicknessCharacteristicDefinitionType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicDefinitionType::
    ThicknessCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicDefinitionType* ThicknessCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicDefinitionType (*this, f, c);
    }

    ThicknessCharacteristicDefinitionType::
    ~ThicknessCharacteristicDefinitionType ()
    {
    }

    // ThicknessCharacteristicNominalType
    //

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const id_type& id,
                                        const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const ThicknessCharacteristicNominalType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicNominalType::
    ThicknessCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicNominalType* ThicknessCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicNominalType (*this, f, c);
    }

    ThicknessCharacteristicNominalType::
    ~ThicknessCharacteristicNominalType ()
    {
    }

    // ThicknessCharacteristicActualType
    //

    ThicknessCharacteristicActualType::
    ThicknessCharacteristicActualType (const id_type& id,
                                       const Status_type& Status,
                                       const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    ThicknessCharacteristicActualType::
    ThicknessCharacteristicActualType (const id_type& id,
                                       ::std::auto_ptr< Status_type >& Status,
                                       ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    ThicknessCharacteristicActualType::
    ThicknessCharacteristicActualType (const ThicknessCharacteristicActualType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    ThicknessCharacteristicActualType::
    ThicknessCharacteristicActualType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    ThicknessCharacteristicActualType* ThicknessCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThicknessCharacteristicActualType (*this, f, c);
    }

    ThicknessCharacteristicActualType::
    ~ThicknessCharacteristicActualType ()
    {
    }

    // SquareCharacteristicItemType
    //

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const SquareCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    SquareCharacteristicItemType::
    SquareCharacteristicItemType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    SquareCharacteristicItemType* SquareCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicItemType (*this, f, c);
    }

    SquareCharacteristicItemType::
    ~SquareCharacteristicItemType ()
    {
    }

    // SquareCharacteristicDefinitionType
    //

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType (const SquareCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    SquareCharacteristicDefinitionType::
    SquareCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    SquareCharacteristicDefinitionType* SquareCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicDefinitionType (*this, f, c);
    }

    SquareCharacteristicDefinitionType::
    ~SquareCharacteristicDefinitionType ()
    {
    }

    // SquareCharacteristicNominalType
    //

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const SquareCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    SquareCharacteristicNominalType::
    SquareCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    SquareCharacteristicNominalType* SquareCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicNominalType (*this, f, c);
    }

    SquareCharacteristicNominalType::
    ~SquareCharacteristicNominalType ()
    {
    }

    // SquareCharacteristicActualType
    //

    SquareCharacteristicActualType::
    SquareCharacteristicActualType (const id_type& id,
                                    const Status_type& Status,
                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    SquareCharacteristicActualType::
    SquareCharacteristicActualType (const id_type& id,
                                    ::std::auto_ptr< Status_type >& Status,
                                    ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    SquareCharacteristicActualType::
    SquareCharacteristicActualType (const SquareCharacteristicActualType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    SquareCharacteristicActualType::
    SquareCharacteristicActualType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    SquareCharacteristicActualType* SquareCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SquareCharacteristicActualType (*this, f, c);
    }

    SquareCharacteristicActualType::
    ~SquareCharacteristicActualType ()
    {
    }

    // DistanceFromCharacteristicItemType
    //

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const DistanceFromCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DistanceFromCharacteristicItemType::
    DistanceFromCharacteristicItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DistanceFromCharacteristicItemType* DistanceFromCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicItemType (*this, f, c);
    }

    DistanceFromCharacteristicItemType::
    ~DistanceFromCharacteristicItemType ()
    {
    }

    // DistanceFromCharacteristicDefinitionType
    //

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType (const DistanceFromCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DistanceFromCharacteristicDefinitionType::
    DistanceFromCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DistanceFromCharacteristicDefinitionType* DistanceFromCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicDefinitionType (*this, f, c);
    }

    DistanceFromCharacteristicDefinitionType::
    ~DistanceFromCharacteristicDefinitionType ()
    {
    }

    // DistanceFromCharacteristicNominalType
    //

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                           const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId),
      OriginReference_ (::xml_schema::flags (), this),
      AnalysisVector_ (::xml_schema::flags (), this),
      AnalysisMode_ (AnalysisMode, ::xml_schema::flags (), this),
      MeasurementDirective_ (::xml_schema::flags (), this),
      CoordinateSystemId_ (::xml_schema::flags (), this),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const DistanceFromCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c),
      OriginReference_ (x.OriginReference_, f, this),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    DistanceFromCharacteristicNominalType::
    DistanceFromCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      OriginReference_ (f, this),
      AnalysisVector_ (f, this),
      AnalysisMode_ (f, this),
      MeasurementDirective_ (f, this),
      CoordinateSystemId_ (f, this),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void DistanceFromCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LinearCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // OriginReference
        //
        if (n.name () == "OriginReference" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OriginReference_type > r (
            OriginReference_traits::create (i, f, this));

          if (!this->OriginReference_)
          {
            this->OriginReference_.set (r);
            continue;
          }
        }

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == "AnalysisMode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (r);
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == "MeasurementDirective" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (r);
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == "CoordinateSystemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (r);
            continue;
          }
        }

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "AnalysisMode",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    DistanceFromCharacteristicNominalType* DistanceFromCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicNominalType (*this, f, c);
    }

    DistanceFromCharacteristicNominalType::
    ~DistanceFromCharacteristicNominalType ()
    {
    }

    // DistanceFromCharacteristicActualType
    //

    DistanceFromCharacteristicActualType::
    DistanceFromCharacteristicActualType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this)
    {
    }

    DistanceFromCharacteristicActualType::
    DistanceFromCharacteristicActualType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this)
    {
    }

    DistanceFromCharacteristicActualType::
    DistanceFromCharacteristicActualType (const DistanceFromCharacteristicActualType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this)
    {
    }

    DistanceFromCharacteristicActualType::
    DistanceFromCharacteristicActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void DistanceFromCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LinearCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        break;
      }
    }

    DistanceFromCharacteristicActualType* DistanceFromCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceFromCharacteristicActualType (*this, f, c);
    }

    DistanceFromCharacteristicActualType::
    ~DistanceFromCharacteristicActualType ()
    {
    }

    // DistanceBetweenCharacteristicItemType
    //

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const id_type& id,
                                           const Name_type& Name,
                                           ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const DistanceBetweenCharacteristicItemType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    DistanceBetweenCharacteristicItemType::
    DistanceBetweenCharacteristicItemType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    DistanceBetweenCharacteristicItemType* DistanceBetweenCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicItemType (*this, f, c);
    }

    DistanceBetweenCharacteristicItemType::
    ~DistanceBetweenCharacteristicItemType ()
    {
    }

    // DistanceBetweenCharacteristicDefinitionType
    //

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType (const DistanceBetweenCharacteristicDefinitionType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    DistanceBetweenCharacteristicDefinitionType::
    DistanceBetweenCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    DistanceBetweenCharacteristicDefinitionType* DistanceBetweenCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicDefinitionType (*this, f, c);
    }

    DistanceBetweenCharacteristicDefinitionType::
    ~DistanceBetweenCharacteristicDefinitionType ()
    {
    }

    // DistanceBetweenCharacteristicNominalType
    //

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const id_type& id,
                                              const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                              const AnalysisMode_type& AnalysisMode)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId),
      AnalysisVector_ (::xml_schema::flags (), this),
      AnalysisMode_ (AnalysisMode, ::xml_schema::flags (), this),
      MeasurementDirective_ (::xml_schema::flags (), this),
      CoordinateSystemId_ (::xml_schema::flags (), this),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const DistanceBetweenCharacteristicNominalType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this),
      AnalysisMode_ (x.AnalysisMode_, f, this),
      MeasurementDirective_ (x.MeasurementDirective_, f, this),
      CoordinateSystemId_ (x.CoordinateSystemId_, f, this),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    DistanceBetweenCharacteristicNominalType::
    DistanceBetweenCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (f, this),
      AnalysisMode_ (f, this),
      MeasurementDirective_ (f, this),
      CoordinateSystemId_ (f, this),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void DistanceBetweenCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LinearCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        // AnalysisMode
        //
        if (n.name () == "AnalysisMode" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisMode_type > r (
            AnalysisMode_traits::create (i, f, this));

          if (!AnalysisMode_.present ())
          {
            this->AnalysisMode_.set (r);
            continue;
          }
        }

        // MeasurementDirective
        //
        if (n.name () == "MeasurementDirective" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurementDirective_type > r (
            MeasurementDirective_traits::create (i, f, this));

          if (!this->MeasurementDirective_)
          {
            this->MeasurementDirective_.set (r);
            continue;
          }
        }

        // CoordinateSystemId
        //
        if (n.name () == "CoordinateSystemId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemId_type > r (
            CoordinateSystemId_traits::create (i, f, this));

          if (!this->CoordinateSystemId_)
          {
            this->CoordinateSystemId_.set (r);
            continue;
          }
        }

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!AnalysisMode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "AnalysisMode",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    DistanceBetweenCharacteristicNominalType* DistanceBetweenCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicNominalType (*this, f, c);
    }

    DistanceBetweenCharacteristicNominalType::
    ~DistanceBetweenCharacteristicNominalType ()
    {
    }

    // DistanceBetweenCharacteristicActualType
    //

    DistanceBetweenCharacteristicActualType::
    DistanceBetweenCharacteristicActualType (const id_type& id,
                                             const Status_type& Status,
                                             const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this)
    {
    }

    DistanceBetweenCharacteristicActualType::
    DistanceBetweenCharacteristicActualType (const id_type& id,
                                             ::std::auto_ptr< Status_type >& Status,
                                             ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId),
      AnalysisVector_ (::xml_schema::flags (), this)
    {
    }

    DistanceBetweenCharacteristicActualType::
    DistanceBetweenCharacteristicActualType (const DistanceBetweenCharacteristicActualType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c),
      AnalysisVector_ (x.AnalysisVector_, f, this)
    {
    }

    DistanceBetweenCharacteristicActualType::
    DistanceBetweenCharacteristicActualType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      AnalysisVector_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void DistanceBetweenCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LinearCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // AnalysisVector
        //
        if (n.name () == "AnalysisVector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AnalysisVector_type > r (
            AnalysisVector_traits::create (i, f, this));

          if (!this->AnalysisVector_)
          {
            this->AnalysisVector_.set (r);
            continue;
          }
        }

        break;
      }
    }

    DistanceBetweenCharacteristicActualType* DistanceBetweenCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DistanceBetweenCharacteristicActualType (*this, f, c);
    }

    DistanceBetweenCharacteristicActualType::
    ~DistanceBetweenCharacteristicActualType ()
    {
    }

    // RadiusCharacteristicItemType
    //

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const RadiusCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    RadiusCharacteristicItemType::
    RadiusCharacteristicItemType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    RadiusCharacteristicItemType* RadiusCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicItemType (*this, f, c);
    }

    RadiusCharacteristicItemType::
    ~RadiusCharacteristicItemType ()
    {
    }

    // RadiusCharacteristicDefinitionType
    //

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id),
      ControlledRadius_ (::xml_schema::flags (), this)
    {
    }

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType (const RadiusCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c),
      ControlledRadius_ (x.ControlledRadius_, f, this)
    {
    }

    RadiusCharacteristicDefinitionType::
    RadiusCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ControlledRadius_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RadiusCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LinearCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ControlledRadius
        //
        if (n.name () == "ControlledRadius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->ControlledRadius_)
          {
            this->ControlledRadius_.set (ControlledRadius_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    RadiusCharacteristicDefinitionType* RadiusCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicDefinitionType (*this, f, c);
    }

    RadiusCharacteristicDefinitionType::
    ~RadiusCharacteristicDefinitionType ()
    {
    }

    // RadiusCharacteristicNominalType
    //

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const RadiusCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    RadiusCharacteristicNominalType::
    RadiusCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    RadiusCharacteristicNominalType* RadiusCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicNominalType (*this, f, c);
    }

    RadiusCharacteristicNominalType::
    ~RadiusCharacteristicNominalType ()
    {
    }

    // RadiusCharacteristicActualType
    //

    RadiusCharacteristicActualType::
    RadiusCharacteristicActualType (const id_type& id,
                                    const Status_type& Status,
                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    RadiusCharacteristicActualType::
    RadiusCharacteristicActualType (const id_type& id,
                                    ::std::auto_ptr< Status_type >& Status,
                                    ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    RadiusCharacteristicActualType::
    RadiusCharacteristicActualType (const RadiusCharacteristicActualType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    RadiusCharacteristicActualType::
    RadiusCharacteristicActualType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    RadiusCharacteristicActualType* RadiusCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RadiusCharacteristicActualType (*this, f, c);
    }

    RadiusCharacteristicActualType::
    ~RadiusCharacteristicActualType ()
    {
    }

    // ChordCharacteristicItemType
    //

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const id_type& id,
                                 const Name_type& Name,
                                 ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const ChordCharacteristicItemType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (x, f, c)
    {
    }

    ChordCharacteristicItemType::
    ChordCharacteristicItemType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicItemBaseType (e, f, c)
    {
    }

    ChordCharacteristicItemType* ChordCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicItemType (*this, f, c);
    }

    ChordCharacteristicItemType::
    ~ChordCharacteristicItemType ()
    {
    }

    // ChordCharacteristicDefinitionType
    //

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType (const id_type& id)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (id)
    {
    }

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType (const ChordCharacteristicDefinitionType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    ChordCharacteristicDefinitionType::
    ChordCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    ChordCharacteristicDefinitionType* ChordCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicDefinitionType (*this, f, c);
    }

    ChordCharacteristicDefinitionType::
    ~ChordCharacteristicDefinitionType ()
    {
    }

    // ChordCharacteristicNominalType
    //

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const id_type& id,
                                    const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const ChordCharacteristicNominalType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (x, f, c)
    {
    }

    ChordCharacteristicNominalType::
    ChordCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicNominalBaseType (e, f, c)
    {
    }

    ChordCharacteristicNominalType* ChordCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicNominalType (*this, f, c);
    }

    ChordCharacteristicNominalType::
    ~ChordCharacteristicNominalType ()
    {
    }

    // ChordCharacteristicActualType
    //

    ChordCharacteristicActualType::
    ChordCharacteristicActualType (const id_type& id,
                                   const Status_type& Status,
                                   const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    ChordCharacteristicActualType::
    ChordCharacteristicActualType (const id_type& id,
                                   ::std::auto_ptr< Status_type >& Status,
                                   ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    ChordCharacteristicActualType::
    ChordCharacteristicActualType (const ChordCharacteristicActualType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (x, f, c)
    {
    }

    ChordCharacteristicActualType::
    ChordCharacteristicActualType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xsd::qif2::LinearCharacteristicActualBaseType (e, f, c)
    {
    }

    ChordCharacteristicActualType* ChordCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ChordCharacteristicActualType (*this, f, c);
    }

    ChordCharacteristicActualType::
    ~ChordCharacteristicActualType ()
    {
    }

    // RunoutCharacteristicItemBaseType
    //

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const id_type& id,
                                      const Name_type& Name,
                                      const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const id_type& id,
                                      const Name_type& Name,
                                      ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const RunoutCharacteristicItemBaseType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    RunoutCharacteristicItemBaseType::
    RunoutCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    RunoutCharacteristicItemBaseType* RunoutCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RunoutCharacteristicItemBaseType (*this, f, c);
    }

    RunoutCharacteristicItemBaseType::
    ~RunoutCharacteristicItemBaseType ()
    {
    }

    // RunoutCharacteristicDefinitionBaseType
    //

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const id_type& id,
                                            const ToleranceValue_type& ToleranceValue,
                                            const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const id_type& id,
                                            ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                            ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const RunoutCharacteristicDefinitionBaseType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this)
    {
    }

    RunoutCharacteristicDefinitionBaseType::
    RunoutCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      DatumReferenceFrameId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RunoutCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == "DatumReferenceFrameId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!DatumReferenceFrameId_.present ())
          {
            this->DatumReferenceFrameId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToleranceValue",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DatumReferenceFrameId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DatumReferenceFrameId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    RunoutCharacteristicDefinitionBaseType* RunoutCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RunoutCharacteristicDefinitionBaseType (*this, f, c);
    }

    RunoutCharacteristicDefinitionBaseType::
    ~RunoutCharacteristicDefinitionBaseType ()
    {
    }

    // RunoutCharacteristicNominalBaseType
    //

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const id_type& id,
                                         const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const RunoutCharacteristicNominalBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    RunoutCharacteristicNominalBaseType::
    RunoutCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RunoutCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    RunoutCharacteristicNominalBaseType* RunoutCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RunoutCharacteristicNominalBaseType (*this, f, c);
    }

    RunoutCharacteristicNominalBaseType::
    ~RunoutCharacteristicNominalBaseType ()
    {
    }

    // RunoutCharacteristicActualBaseType
    //

    RunoutCharacteristicActualBaseType::
    RunoutCharacteristicActualBaseType (const id_type& id,
                                        const Status_type& Status,
                                        const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      DatumsOk_ (::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicActualBaseType::
    RunoutCharacteristicActualBaseType (const id_type& id,
                                        ::std::auto_ptr< Status_type >& Status,
                                        ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      DatumsOk_ (::xml_schema::flags (), this)
    {
    }

    RunoutCharacteristicActualBaseType::
    RunoutCharacteristicActualBaseType (const RunoutCharacteristicActualBaseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (x, f, c),
      DatumsOk_ (x.DatumsOk_, f, this)
    {
    }

    RunoutCharacteristicActualBaseType::
    RunoutCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      DatumsOk_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RunoutCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // DatumsOk
        //
        if (n.name () == "DatumsOk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }
    }

    RunoutCharacteristicActualBaseType* RunoutCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RunoutCharacteristicActualBaseType (*this, f, c);
    }

    RunoutCharacteristicActualBaseType::
    ~RunoutCharacteristicActualBaseType ()
    {
    }

    // CircularRunoutCharacteristicItemType
    //

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const id_type& id,
                                          const Name_type& Name,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const id_type& id,
                                          const Name_type& Name,
                                          ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const CircularRunoutCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicItemType::
    CircularRunoutCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicItemType* CircularRunoutCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicItemType (*this, f, c);
    }

    CircularRunoutCharacteristicItemType::
    ~CircularRunoutCharacteristicItemType ()
    {
    }

    // CircularRunoutCharacteristicDefinitionType
    //

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const id_type& id,
                                                const ToleranceValue_type& ToleranceValue,
                                                const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (id,
                                                           ToleranceValue,
                                                           DatumReferenceFrameId)
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const id_type& id,
                                                ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                                ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (id,
                                                           ToleranceValue,
                                                           DatumReferenceFrameId)
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const CircularRunoutCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicDefinitionType::
    CircularRunoutCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicDefinitionType* CircularRunoutCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicDefinitionType (*this, f, c);
    }

    CircularRunoutCharacteristicDefinitionType::
    ~CircularRunoutCharacteristicDefinitionType ()
    {
    }

    // CircularRunoutCharacteristicNominalType
    //

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::RunoutCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId),
      ZoneDirection_ (::xml_schema::flags (), this)
    {
    }

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const CircularRunoutCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicNominalBaseType (x, f, c),
      ZoneDirection_ (x.ZoneDirection_, f, this)
    {
    }

    CircularRunoutCharacteristicNominalType::
    CircularRunoutCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneDirection_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CircularRunoutCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::RunoutCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneDirection
        //
        if (n.name () == "ZoneDirection" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneDirection_type > r (
            ZoneDirection_traits::create (i, f, this));

          if (!this->ZoneDirection_)
          {
            this->ZoneDirection_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CircularRunoutCharacteristicNominalType* CircularRunoutCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicNominalType (*this, f, c);
    }

    CircularRunoutCharacteristicNominalType::
    ~CircularRunoutCharacteristicNominalType ()
    {
    }

    // CircularRunoutCharacteristicActualType
    //

    CircularRunoutCharacteristicActualType::
    CircularRunoutCharacteristicActualType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    CircularRunoutCharacteristicActualType::
    CircularRunoutCharacteristicActualType (const id_type& id,
                                            ::std::auto_ptr< Status_type >& Status,
                                            ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    CircularRunoutCharacteristicActualType::
    CircularRunoutCharacteristicActualType (const CircularRunoutCharacteristicActualType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (x, f, c)
    {
    }

    CircularRunoutCharacteristicActualType::
    CircularRunoutCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (e, f, c)
    {
    }

    CircularRunoutCharacteristicActualType* CircularRunoutCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CircularRunoutCharacteristicActualType (*this, f, c);
    }

    CircularRunoutCharacteristicActualType::
    ~CircularRunoutCharacteristicActualType ()
    {
    }

    // TotalRunoutCharacteristicItemType
    //

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (id,
                                                     Name,
                                                     CharacteristicNominalId)
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const TotalRunoutCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicItemType::
    TotalRunoutCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicItemBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicItemType* TotalRunoutCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicItemType (*this, f, c);
    }

    TotalRunoutCharacteristicItemType::
    ~TotalRunoutCharacteristicItemType ()
    {
    }

    // TotalRunoutCharacteristicDefinitionType
    //

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue,
                                             const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (id,
                                                           ToleranceValue,
                                                           DatumReferenceFrameId)
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const id_type& id,
                                             ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                             ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (id,
                                                           ToleranceValue,
                                                           DatumReferenceFrameId)
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const TotalRunoutCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicDefinitionType::
    TotalRunoutCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicDefinitionType* TotalRunoutCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicDefinitionType (*this, f, c);
    }

    TotalRunoutCharacteristicDefinitionType::
    ~TotalRunoutCharacteristicDefinitionType ()
    {
    }

    // TotalRunoutCharacteristicNominalType
    //

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::RunoutCharacteristicNominalBaseType (id,
                                                        CharacteristicDefinitionId)
    {
    }

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const TotalRunoutCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicNominalBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicNominalType::
    TotalRunoutCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicNominalBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicNominalType* TotalRunoutCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicNominalType (*this, f, c);
    }

    TotalRunoutCharacteristicNominalType::
    ~TotalRunoutCharacteristicNominalType ()
    {
    }

    // TotalRunoutCharacteristicActualType
    //

    TotalRunoutCharacteristicActualType::
    TotalRunoutCharacteristicActualType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    TotalRunoutCharacteristicActualType::
    TotalRunoutCharacteristicActualType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (id,
                                                       Status,
                                                       CharacteristicItemId)
    {
    }

    TotalRunoutCharacteristicActualType::
    TotalRunoutCharacteristicActualType (const TotalRunoutCharacteristicActualType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (x, f, c)
    {
    }

    TotalRunoutCharacteristicActualType::
    TotalRunoutCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::RunoutCharacteristicActualBaseType (e, f, c)
    {
    }

    TotalRunoutCharacteristicActualType* TotalRunoutCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TotalRunoutCharacteristicActualType (*this, f, c);
    }

    TotalRunoutCharacteristicActualType::
    ~TotalRunoutCharacteristicActualType ()
    {
    }

    // ConcentricitySphericalZoneType
    //

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType ()
    : ::xml_schema::type ()
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const ConcentricitySphericalZoneType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ConcentricitySphericalZoneType::
    ConcentricitySphericalZoneType (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ConcentricitySphericalZoneType* ConcentricitySphericalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricitySphericalZoneType (*this, f, c);
    }

    ConcentricitySphericalZoneType::
    ~ConcentricitySphericalZoneType ()
    {
    }

    // ConcentricityDiametricalZoneType
    //

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const ConcentricityDiametricalZoneType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ConcentricityDiametricalZoneType::
    ConcentricityDiametricalZoneType (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ConcentricityDiametricalZoneType* ConcentricityDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityDiametricalZoneType (*this, f, c);
    }

    ConcentricityDiametricalZoneType::
    ~ConcentricityDiametricalZoneType ()
    {
    }

    // ConcentricityNonDiametricalZoneType
    //

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType ()
    : ::xml_schema::type ()
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const ConcentricityNonDiametricalZoneType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType::
    ConcentricityNonDiametricalZoneType (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ConcentricityNonDiametricalZoneType* ConcentricityNonDiametricalZoneType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityNonDiametricalZoneType (*this, f, c);
    }

    ConcentricityNonDiametricalZoneType::
    ~ConcentricityNonDiametricalZoneType ()
    {
    }

    // ConcentricityZoneShapeType
    //

    ConcentricityZoneShapeType::
    ConcentricityZoneShapeType ()
    : ::xml_schema::type (),
      SphericalZone_ (::xml_schema::flags (), this),
      DiametricalZone_ (::xml_schema::flags (), this),
      NonDiametricalZone_ (::xml_schema::flags (), this)
    {
    }

    ConcentricityZoneShapeType::
    ConcentricityZoneShapeType (const ConcentricityZoneShapeType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      SphericalZone_ (x.SphericalZone_, f, this),
      DiametricalZone_ (x.DiametricalZone_, f, this),
      NonDiametricalZone_ (x.NonDiametricalZone_, f, this)
    {
    }

    ConcentricityZoneShapeType::
    ConcentricityZoneShapeType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SphericalZone_ (f, this),
      DiametricalZone_ (f, this),
      NonDiametricalZone_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ConcentricityZoneShapeType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SphericalZone
        //
        if (n.name () == "SphericalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SphericalZone_type > r (
            SphericalZone_traits::create (i, f, this));

          if (!this->SphericalZone_)
          {
            this->SphericalZone_.set (r);
            continue;
          }
        }

        // DiametricalZone
        //
        if (n.name () == "DiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DiametricalZone_type > r (
            DiametricalZone_traits::create (i, f, this));

          if (!this->DiametricalZone_)
          {
            this->DiametricalZone_.set (r);
            continue;
          }
        }

        // NonDiametricalZone
        //
        if (n.name () == "NonDiametricalZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< NonDiametricalZone_type > r (
            NonDiametricalZone_traits::create (i, f, this));

          if (!this->NonDiametricalZone_)
          {
            this->NonDiametricalZone_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ConcentricityZoneShapeType* ConcentricityZoneShapeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityZoneShapeType (*this, f, c);
    }

    ConcentricityZoneShapeType::
    ~ConcentricityZoneShapeType ()
    {
    }

    // ConcentricityCharacteristicItemType
    //

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const id_type& id,
                                         const Name_type& Name,
                                         const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const id_type& id,
                                         const Name_type& Name,
                                         ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const ConcentricityCharacteristicItemType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    ConcentricityCharacteristicItemType::
    ConcentricityCharacteristicItemType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    ConcentricityCharacteristicItemType* ConcentricityCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicItemType (*this, f, c);
    }

    ConcentricityCharacteristicItemType::
    ~ConcentricityCharacteristicItemType ()
    {
    }

    // ConcentricityCharacteristicDefinitionType
    //

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const id_type& id,
                                               const ToleranceValue_type& ToleranceValue,
                                               const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                               const ZoneShape_type& ZoneShape)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue,
                                                             DatumReferenceFrameId),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const id_type& id,
                                               ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                               ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                               ::std::auto_ptr< ZoneShape_type >& ZoneShape)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue,
                                                             DatumReferenceFrameId),
      ZoneShape_ (ZoneShape, ::xml_schema::flags (), this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const ConcentricityCharacteristicDefinitionType& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (x, f, c),
      ZoneShape_ (x.ZoneShape_, f, this)
    {
    }

    ConcentricityCharacteristicDefinitionType::
    ConcentricityCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneShape_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ConcentricityCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneShape
        //
        if (n.name () == "ZoneShape" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneShape_type > r (
            ZoneShape_traits::create (i, f, this));

          if (!ZoneShape_.present ())
          {
            this->ZoneShape_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ZoneShape_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ZoneShape",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ConcentricityCharacteristicDefinitionType* ConcentricityCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicDefinitionType (*this, f, c);
    }

    ConcentricityCharacteristicDefinitionType::
    ~ConcentricityCharacteristicDefinitionType ()
    {
    }

    // ConcentricityCharacteristicNominalType
    //

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const id_type& id,
                                            const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const ConcentricityCharacteristicNominalType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    ConcentricityCharacteristicNominalType::
    ConcentricityCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ConcentricityCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ConcentricityCharacteristicNominalType* ConcentricityCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicNominalType (*this, f, c);
    }

    ConcentricityCharacteristicNominalType::
    ~ConcentricityCharacteristicNominalType ()
    {
    }

    // ConcentricityCharacteristicActualType
    //

    ConcentricityCharacteristicActualType::
    ConcentricityCharacteristicActualType (const id_type& id,
                                           const Status_type& Status,
                                           const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId)
    {
    }

    ConcentricityCharacteristicActualType::
    ConcentricityCharacteristicActualType (const id_type& id,
                                           ::std::auto_ptr< Status_type >& Status,
                                           ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId)
    {
    }

    ConcentricityCharacteristicActualType::
    ConcentricityCharacteristicActualType (const ConcentricityCharacteristicActualType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (x, f, c)
    {
    }

    ConcentricityCharacteristicActualType::
    ConcentricityCharacteristicActualType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (e, f, c)
    {
    }

    ConcentricityCharacteristicActualType* ConcentricityCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConcentricityCharacteristicActualType (*this, f, c);
    }

    ConcentricityCharacteristicActualType::
    ~ConcentricityCharacteristicActualType ()
    {
    }

    // SymmetryCharacteristicItemType
    //

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const id_type& id,
                                    const Name_type& Name,
                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (id,
                                                       Name,
                                                       CharacteristicNominalId)
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const SymmetryCharacteristicItemType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (x, f, c)
    {
    }

    SymmetryCharacteristicItemType::
    SymmetryCharacteristicItemType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicItemBaseType (e, f, c)
    {
    }

    SymmetryCharacteristicItemType* SymmetryCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicItemType (*this, f, c);
    }

    SymmetryCharacteristicItemType::
    ~SymmetryCharacteristicItemType ()
    {
    }

    // SymmetryCharacteristicDefinitionType
    //

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const id_type& id,
                                          const ToleranceValue_type& ToleranceValue,
                                          const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue,
                                                             DatumReferenceFrameId),
      SecondCompositeSegmentSymmetryDefinition_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentSymmetryDefinition_ (::xml_schema::flags (), this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const id_type& id,
                                          ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                          ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (id,
                                                             ToleranceValue,
                                                             DatumReferenceFrameId),
      SecondCompositeSegmentSymmetryDefinition_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentSymmetryDefinition_ (::xml_schema::flags (), this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const SymmetryCharacteristicDefinitionType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (x, f, c),
      SecondCompositeSegmentSymmetryDefinition_ (x.SecondCompositeSegmentSymmetryDefinition_, f, this),
      ThirdCompositeSegmentSymmetryDefinition_ (x.ThirdCompositeSegmentSymmetryDefinition_, f, this)
    {
    }

    SymmetryCharacteristicDefinitionType::
    SymmetryCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentSymmetryDefinition_ (f, this),
      ThirdCompositeSegmentSymmetryDefinition_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SymmetryCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SecondCompositeSegmentSymmetryDefinition
        //
        if (n.name () == "SecondCompositeSegmentSymmetryDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentSymmetryDefinition_type > r (
            SecondCompositeSegmentSymmetryDefinition_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentSymmetryDefinition_)
          {
            this->SecondCompositeSegmentSymmetryDefinition_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentSymmetryDefinition
        //
        if (n.name () == "ThirdCompositeSegmentSymmetryDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentSymmetryDefinition_type > r (
            ThirdCompositeSegmentSymmetryDefinition_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentSymmetryDefinition_)
          {
            this->ThirdCompositeSegmentSymmetryDefinition_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SymmetryCharacteristicDefinitionType* SymmetryCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicDefinitionType (*this, f, c);
    }

    SymmetryCharacteristicDefinitionType::
    ~SymmetryCharacteristicDefinitionType ()
    {
    }

    // SymmetryCharacteristicNominalType
    //

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const id_type& id,
                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (id,
                                                          CharacteristicDefinitionId)
    {
    }

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const SymmetryCharacteristicNominalType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (x, f, c)
    {
    }

    SymmetryCharacteristicNominalType::
    SymmetryCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicNominalBaseType (e, f, c)
    {
    }

    SymmetryCharacteristicNominalType* SymmetryCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicNominalType (*this, f, c);
    }

    SymmetryCharacteristicNominalType::
    ~SymmetryCharacteristicNominalType ()
    {
    }

    // SymmetryCharacteristicActualType
    //

    SymmetryCharacteristicActualType::
    SymmetryCharacteristicActualType (const id_type& id,
                                      const Status_type& Status,
                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId),
      SecondCompositeSegmentSymmetryActual_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentSymmetryActual_ (::xml_schema::flags (), this)
    {
    }

    SymmetryCharacteristicActualType::
    SymmetryCharacteristicActualType (const id_type& id,
                                      ::std::auto_ptr< Status_type >& Status,
                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (id,
                                                         Status,
                                                         CharacteristicItemId),
      SecondCompositeSegmentSymmetryActual_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentSymmetryActual_ (::xml_schema::flags (), this)
    {
    }

    SymmetryCharacteristicActualType::
    SymmetryCharacteristicActualType (const SymmetryCharacteristicActualType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (x, f, c),
      SecondCompositeSegmentSymmetryActual_ (x.SecondCompositeSegmentSymmetryActual_, f, this),
      ThirdCompositeSegmentSymmetryActual_ (x.ThirdCompositeSegmentSymmetryActual_, f, this)
    {
    }

    SymmetryCharacteristicActualType::
    SymmetryCharacteristicActualType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
    : ::xsd::qif2::LocationCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      SecondCompositeSegmentSymmetryActual_ (f, this),
      ThirdCompositeSegmentSymmetryActual_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SymmetryCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::LocationCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SecondCompositeSegmentSymmetryActual
        //
        if (n.name () == "SecondCompositeSegmentSymmetryActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentSymmetryActual_type > r (
            SecondCompositeSegmentSymmetryActual_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentSymmetryActual_)
          {
            this->SecondCompositeSegmentSymmetryActual_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentSymmetryActual
        //
        if (n.name () == "ThirdCompositeSegmentSymmetryActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentSymmetryActual_type > r (
            ThirdCompositeSegmentSymmetryActual_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentSymmetryActual_)
          {
            this->ThirdCompositeSegmentSymmetryActual_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SymmetryCharacteristicActualType* SymmetryCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SymmetryCharacteristicActualType (*this, f, c);
    }

    SymmetryCharacteristicActualType::
    ~SymmetryCharacteristicActualType ()
    {
    }

    // ProfileCharacteristicItemBaseType
    //

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (id,
                                                        Name,
                                                        CharacteristicNominalId)
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const ProfileCharacteristicItemBaseType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (x, f, c)
    {
    }

    ProfileCharacteristicItemBaseType::
    ProfileCharacteristicItemBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicItemBaseType (e, f, c)
    {
    }

    ProfileCharacteristicItemBaseType* ProfileCharacteristicItemBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProfileCharacteristicItemBaseType (*this, f, c);
    }

    ProfileCharacteristicItemBaseType::
    ~ProfileCharacteristicItemBaseType ()
    {
    }

    // ProfileCharacteristicDefinitionBaseType
    //

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue,
                                             const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      OuterDisposition_ (::xml_schema::flags (), this),
      UnequallyDisposedZone_ (::xml_schema::flags (), this),
      OffsetZone_ (::xml_schema::flags (), this),
      SecondCompositeSegmentProfileDefinition_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentProfileDefinition_ (::xml_schema::flags (), this),
      FourthCompositeSegmentProfileDefinition_ (::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this),
      OrientationOnly_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const id_type& id,
                                             ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                             ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (id),
      ToleranceValue_ (ToleranceValue, ::xml_schema::flags (), this),
      OuterDisposition_ (::xml_schema::flags (), this),
      UnequallyDisposedZone_ (::xml_schema::flags (), this),
      OffsetZone_ (::xml_schema::flags (), this),
      SecondCompositeSegmentProfileDefinition_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentProfileDefinition_ (::xml_schema::flags (), this),
      FourthCompositeSegmentProfileDefinition_ (::xml_schema::flags (), this),
      DatumReferenceFrameId_ (DatumReferenceFrameId, ::xml_schema::flags (), this),
      OrientationOnly_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const ProfileCharacteristicDefinitionBaseType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (x, f, c),
      ToleranceValue_ (x.ToleranceValue_, f, this),
      OuterDisposition_ (x.OuterDisposition_, f, this),
      UnequallyDisposedZone_ (x.UnequallyDisposedZone_, f, this),
      OffsetZone_ (x.OffsetZone_, f, this),
      SecondCompositeSegmentProfileDefinition_ (x.SecondCompositeSegmentProfileDefinition_, f, this),
      ThirdCompositeSegmentProfileDefinition_ (x.ThirdCompositeSegmentProfileDefinition_, f, this),
      FourthCompositeSegmentProfileDefinition_ (x.FourthCompositeSegmentProfileDefinition_, f, this),
      DatumReferenceFrameId_ (x.DatumReferenceFrameId_, f, this),
      OrientationOnly_ (x.OrientationOnly_, f, this)
    {
    }

    ProfileCharacteristicDefinitionBaseType::
    ProfileCharacteristicDefinitionBaseType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToleranceValue_ (f, this),
      OuterDisposition_ (f, this),
      UnequallyDisposedZone_ (f, this),
      OffsetZone_ (f, this),
      SecondCompositeSegmentProfileDefinition_ (f, this),
      ThirdCompositeSegmentProfileDefinition_ (f, this),
      FourthCompositeSegmentProfileDefinition_ (f, this),
      DatumReferenceFrameId_ (f, this),
      OrientationOnly_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicDefinitionBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToleranceValue
        //
        if (n.name () == "ToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToleranceValue_type > r (
            ToleranceValue_traits::create (i, f, this));

          if (!ToleranceValue_.present ())
          {
            this->ToleranceValue_.set (r);
            continue;
          }
        }

        // OuterDisposition
        //
        if (n.name () == "OuterDisposition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OuterDisposition_type > r (
            OuterDisposition_traits::create (i, f, this));

          if (!this->OuterDisposition_)
          {
            this->OuterDisposition_.set (r);
            continue;
          }
        }

        // UnequallyDisposedZone
        //
        if (n.name () == "UnequallyDisposedZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< UnequallyDisposedZone_type > r (
            UnequallyDisposedZone_traits::create (i, f, this));

          if (!this->UnequallyDisposedZone_)
          {
            this->UnequallyDisposedZone_.set (r);
            continue;
          }
        }

        // OffsetZone
        //
        if (n.name () == "OffsetZone" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->OffsetZone_)
          {
            this->OffsetZone_.set (OffsetZone_traits::create (i, f, this));
            continue;
          }
        }

        // SecondCompositeSegmentProfileDefinition
        //
        if (n.name () == "SecondCompositeSegmentProfileDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentProfileDefinition_type > r (
            SecondCompositeSegmentProfileDefinition_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentProfileDefinition_)
          {
            this->SecondCompositeSegmentProfileDefinition_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentProfileDefinition
        //
        if (n.name () == "ThirdCompositeSegmentProfileDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentProfileDefinition_type > r (
            ThirdCompositeSegmentProfileDefinition_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentProfileDefinition_)
          {
            this->ThirdCompositeSegmentProfileDefinition_.set (r);
            continue;
          }
        }

        // FourthCompositeSegmentProfileDefinition
        //
        if (n.name () == "FourthCompositeSegmentProfileDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FourthCompositeSegmentProfileDefinition_type > r (
            FourthCompositeSegmentProfileDefinition_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentProfileDefinition_)
          {
            this->FourthCompositeSegmentProfileDefinition_.set (r);
            continue;
          }
        }

        // DatumReferenceFrameId
        //
        if (n.name () == "DatumReferenceFrameId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DatumReferenceFrameId_type > r (
            DatumReferenceFrameId_traits::create (i, f, this));

          if (!DatumReferenceFrameId_.present ())
          {
            this->DatumReferenceFrameId_.set (r);
            continue;
          }
        }

        // OrientationOnly
        //
        if (n.name () == "OrientationOnly" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->OrientationOnly_)
          {
            this->OrientationOnly_.set (OrientationOnly_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!ToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToleranceValue",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!DatumReferenceFrameId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "DatumReferenceFrameId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ProfileCharacteristicDefinitionBaseType* ProfileCharacteristicDefinitionBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProfileCharacteristicDefinitionBaseType (*this, f, c);
    }

    ProfileCharacteristicDefinitionBaseType::
    ~ProfileCharacteristicDefinitionBaseType ()
    {
    }

    // ProfileCharacteristicNominalBaseType
    //

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (id,
                                                           CharacteristicDefinitionId),
      TargetValue_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const ProfileCharacteristicNominalBaseType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (x, f, c),
      TargetValue_ (x.TargetValue_, f, this)
    {
    }

    ProfileCharacteristicNominalBaseType::
    ProfileCharacteristicNominalBaseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      TargetValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicNominalBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // TargetValue
        //
        if (n.name () == "TargetValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TargetValue_type > r (
            TargetValue_traits::create (i, f, this));

          if (!this->TargetValue_)
          {
            this->TargetValue_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ProfileCharacteristicNominalBaseType* ProfileCharacteristicNominalBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProfileCharacteristicNominalBaseType (*this, f, c);
    }

    ProfileCharacteristicNominalBaseType::
    ~ProfileCharacteristicNominalBaseType ()
    {
    }

    // ProfileCharacteristicActualBaseType
    //

    ProfileCharacteristicActualBaseType::
    ProfileCharacteristicActualBaseType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      WorstPositiveDeviation_ (::xml_schema::flags (), this),
      WorstNegativeDeviation_ (::xml_schema::flags (), this),
      PointDeviations_ (::xml_schema::flags (), this),
      DatumsOk_ (::xml_schema::flags (), this),
      DRFTransformActualId_ (::xml_schema::flags (), this),
      SecondCompositeSegmentProfileActual_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentProfileActual_ (::xml_schema::flags (), this),
      FourthCompositeSegmentProfileActual_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicActualBaseType::
    ProfileCharacteristicActualBaseType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (id,
                                                          Status,
                                                          CharacteristicItemId),
      WorstPositiveDeviation_ (::xml_schema::flags (), this),
      WorstNegativeDeviation_ (::xml_schema::flags (), this),
      PointDeviations_ (::xml_schema::flags (), this),
      DatumsOk_ (::xml_schema::flags (), this),
      DRFTransformActualId_ (::xml_schema::flags (), this),
      SecondCompositeSegmentProfileActual_ (::xml_schema::flags (), this),
      ThirdCompositeSegmentProfileActual_ (::xml_schema::flags (), this),
      FourthCompositeSegmentProfileActual_ (::xml_schema::flags (), this)
    {
    }

    ProfileCharacteristicActualBaseType::
    ProfileCharacteristicActualBaseType (const ProfileCharacteristicActualBaseType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (x, f, c),
      WorstPositiveDeviation_ (x.WorstPositiveDeviation_, f, this),
      WorstNegativeDeviation_ (x.WorstNegativeDeviation_, f, this),
      PointDeviations_ (x.PointDeviations_, f, this),
      DatumsOk_ (x.DatumsOk_, f, this),
      DRFTransformActualId_ (x.DRFTransformActualId_, f, this),
      SecondCompositeSegmentProfileActual_ (x.SecondCompositeSegmentProfileActual_, f, this),
      ThirdCompositeSegmentProfileActual_ (x.ThirdCompositeSegmentProfileActual_, f, this),
      FourthCompositeSegmentProfileActual_ (x.FourthCompositeSegmentProfileActual_, f, this)
    {
    }

    ProfileCharacteristicActualBaseType::
    ProfileCharacteristicActualBaseType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::GeometricCharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      WorstPositiveDeviation_ (f, this),
      WorstNegativeDeviation_ (f, this),
      PointDeviations_ (f, this),
      DatumsOk_ (f, this),
      DRFTransformActualId_ (f, this),
      SecondCompositeSegmentProfileActual_ (f, this),
      ThirdCompositeSegmentProfileActual_ (f, this),
      FourthCompositeSegmentProfileActual_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ProfileCharacteristicActualBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::GeometricCharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // WorstPositiveDeviation
        //
        if (n.name () == "WorstPositiveDeviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WorstPositiveDeviation_type > r (
            WorstPositiveDeviation_traits::create (i, f, this));

          if (!this->WorstPositiveDeviation_)
          {
            this->WorstPositiveDeviation_.set (r);
            continue;
          }
        }

        // WorstNegativeDeviation
        //
        if (n.name () == "WorstNegativeDeviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< WorstNegativeDeviation_type > r (
            WorstNegativeDeviation_traits::create (i, f, this));

          if (!this->WorstNegativeDeviation_)
          {
            this->WorstNegativeDeviation_.set (r);
            continue;
          }
        }

        // PointDeviations
        //
        if (n.name () == "PointDeviations" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointDeviations_type > r (
            PointDeviations_traits::create (i, f, this));

          if (!this->PointDeviations_)
          {
            this->PointDeviations_.set (r);
            continue;
          }
        }

        // DatumsOk
        //
        if (n.name () == "DatumsOk" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          if (!this->DatumsOk_)
          {
            this->DatumsOk_.set (DatumsOk_traits::create (i, f, this));
            continue;
          }
        }

        // DRFTransformActualId
        //
        if (n.name () == "DRFTransformActualId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DRFTransformActualId_type > r (
            DRFTransformActualId_traits::create (i, f, this));

          if (!this->DRFTransformActualId_)
          {
            this->DRFTransformActualId_.set (r);
            continue;
          }
        }

        // SecondCompositeSegmentProfileActual
        //
        if (n.name () == "SecondCompositeSegmentProfileActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< SecondCompositeSegmentProfileActual_type > r (
            SecondCompositeSegmentProfileActual_traits::create (i, f, this));

          if (!this->SecondCompositeSegmentProfileActual_)
          {
            this->SecondCompositeSegmentProfileActual_.set (r);
            continue;
          }
        }

        // ThirdCompositeSegmentProfileActual
        //
        if (n.name () == "ThirdCompositeSegmentProfileActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThirdCompositeSegmentProfileActual_type > r (
            ThirdCompositeSegmentProfileActual_traits::create (i, f, this));

          if (!this->ThirdCompositeSegmentProfileActual_)
          {
            this->ThirdCompositeSegmentProfileActual_.set (r);
            continue;
          }
        }

        // FourthCompositeSegmentProfileActual
        //
        if (n.name () == "FourthCompositeSegmentProfileActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FourthCompositeSegmentProfileActual_type > r (
            FourthCompositeSegmentProfileActual_traits::create (i, f, this));

          if (!this->FourthCompositeSegmentProfileActual_)
          {
            this->FourthCompositeSegmentProfileActual_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ProfileCharacteristicActualBaseType* ProfileCharacteristicActualBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ProfileCharacteristicActualBaseType (*this, f, c);
    }

    ProfileCharacteristicActualBaseType::
    ~ProfileCharacteristicActualBaseType ()
    {
    }

    // LineProfileCharacteristicItemType
    //

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const id_type& id,
                                       const Name_type& Name,
                                       ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const LineProfileCharacteristicItemType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    LineProfileCharacteristicItemType::
    LineProfileCharacteristicItemType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    LineProfileCharacteristicItemType* LineProfileCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicItemType (*this, f, c);
    }

    LineProfileCharacteristicItemType::
    ~LineProfileCharacteristicItemType ()
    {
    }

    // LineProfileCharacteristicDefinitionType
    //

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const id_type& id,
                                             const ToleranceValue_type& ToleranceValue,
                                             const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId),
      Extent_ (::xml_schema::flags (), this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const id_type& id,
                                             ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                             ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId),
      Extent_ (::xml_schema::flags (), this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const LineProfileCharacteristicDefinitionType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (x, f, c),
      Extent_ (x.Extent_, f, this)
    {
    }

    LineProfileCharacteristicDefinitionType::
    LineProfileCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Extent_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LineProfileCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ProfileCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Extent
        //
        if (n.name () == "Extent" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Extent_type > r (
            Extent_traits::create (i, f, this));

          if (!this->Extent_)
          {
            this->Extent_.set (r);
            continue;
          }
        }

        break;
      }
    }

    LineProfileCharacteristicDefinitionType* LineProfileCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicDefinitionType (*this, f, c);
    }

    LineProfileCharacteristicDefinitionType::
    ~LineProfileCharacteristicDefinitionType ()
    {
    }

    // LineProfileCharacteristicNominalType
    //

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                          const Vector_type& Vector)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      Vector_ (Vector, ::xml_schema::flags (), this),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const id_type& id,
                                          const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                          ::std::auto_ptr< Vector_type >& Vector)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      Vector_ (Vector, ::xml_schema::flags (), this),
      ZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const LineProfileCharacteristicNominalType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (x, f, c),
      Vector_ (x.Vector_, f, this),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    LineProfileCharacteristicNominalType::
    LineProfileCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      Vector_ (f, this),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LineProfileCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ProfileCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Vector
        //
        if (n.name () == "Vector" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Vector_type > r (
            Vector_traits::create (i, f, this));

          if (!Vector_.present ())
          {
            this->Vector_.set (r);
            continue;
          }
        }

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!this->ZoneLimit_)
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Vector_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Vector",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LineProfileCharacteristicNominalType* LineProfileCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicNominalType (*this, f, c);
    }

    LineProfileCharacteristicNominalType::
    ~LineProfileCharacteristicNominalType ()
    {
    }

    // LineProfileCharacteristicActualType
    //

    LineProfileCharacteristicActualType::
    LineProfileCharacteristicActualType (const id_type& id,
                                         const Status_type& Status,
                                         const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    LineProfileCharacteristicActualType::
    LineProfileCharacteristicActualType (const id_type& id,
                                         ::std::auto_ptr< Status_type >& Status,
                                         ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    LineProfileCharacteristicActualType::
    LineProfileCharacteristicActualType (const LineProfileCharacteristicActualType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (x, f, c)
    {
    }

    LineProfileCharacteristicActualType::
    LineProfileCharacteristicActualType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (e, f, c)
    {
    }

    LineProfileCharacteristicActualType* LineProfileCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineProfileCharacteristicActualType (*this, f, c);
    }

    LineProfileCharacteristicActualType::
    ~LineProfileCharacteristicActualType ()
    {
    }

    // PointProfileCharacteristicItemType
    //

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const id_type& id,
                                        const Name_type& Name,
                                        ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const PointProfileCharacteristicItemType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicItemType::
    PointProfileCharacteristicItemType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicItemType* PointProfileCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicItemType (*this, f, c);
    }

    PointProfileCharacteristicItemType::
    ~PointProfileCharacteristicItemType ()
    {
    }

    // PointProfileCharacteristicDefinitionType
    //

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const id_type& id,
                                              const ToleranceValue_type& ToleranceValue,
                                              const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId)
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const id_type& id,
                                              ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                              ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId)
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const PointProfileCharacteristicDefinitionType& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicDefinitionType::
    PointProfileCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicDefinitionType* PointProfileCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicDefinitionType (*this, f, c);
    }

    PointProfileCharacteristicDefinitionType::
    ~PointProfileCharacteristicDefinitionType ()
    {
    }

    // PointProfileCharacteristicNominalType
    //

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const id_type& id,
                                           const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId)
    {
    }

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const PointProfileCharacteristicNominalType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicNominalType::
    PointProfileCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicNominalType* PointProfileCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicNominalType (*this, f, c);
    }

    PointProfileCharacteristicNominalType::
    ~PointProfileCharacteristicNominalType ()
    {
    }

    // PointProfileCharacteristicActualType
    //

    PointProfileCharacteristicActualType::
    PointProfileCharacteristicActualType (const id_type& id,
                                          const Status_type& Status,
                                          const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    PointProfileCharacteristicActualType::
    PointProfileCharacteristicActualType (const id_type& id,
                                          ::std::auto_ptr< Status_type >& Status,
                                          ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    PointProfileCharacteristicActualType::
    PointProfileCharacteristicActualType (const PointProfileCharacteristicActualType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (x, f, c)
    {
    }

    PointProfileCharacteristicActualType::
    PointProfileCharacteristicActualType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (e, f, c)
    {
    }

    PointProfileCharacteristicActualType* PointProfileCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointProfileCharacteristicActualType (*this, f, c);
    }

    PointProfileCharacteristicActualType::
    ~PointProfileCharacteristicActualType ()
    {
    }

    // SurfaceProfileCharacteristicItemType
    //

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const id_type& id,
                                          const Name_type& Name,
                                          const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const id_type& id,
                                          const Name_type& Name,
                                          ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const SurfaceProfileCharacteristicItemType& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    SurfaceProfileCharacteristicItemType::
    SurfaceProfileCharacteristicItemType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    SurfaceProfileCharacteristicItemType* SurfaceProfileCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicItemType (*this, f, c);
    }

    SurfaceProfileCharacteristicItemType::
    ~SurfaceProfileCharacteristicItemType ()
    {
    }

    // SurfaceProfileCharacteristicDefinitionType
    //

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const id_type& id,
                                                const ToleranceValue_type& ToleranceValue,
                                                const DatumReferenceFrameId_type& DatumReferenceFrameId)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId),
      Extent_ (::xml_schema::flags (), this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const id_type& id,
                                                ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                                ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId),
      Extent_ (::xml_schema::flags (), this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const SurfaceProfileCharacteristicDefinitionType& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (x, f, c),
      Extent_ (x.Extent_, f, this)
    {
    }

    SurfaceProfileCharacteristicDefinitionType::
    SurfaceProfileCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      Extent_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceProfileCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ProfileCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Extent
        //
        if (n.name () == "Extent" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Extent_type > r (
            Extent_traits::create (i, f, this));

          if (!this->Extent_)
          {
            this->Extent_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SurfaceProfileCharacteristicDefinitionType* SurfaceProfileCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicDefinitionType (*this, f, c);
    }

    SurfaceProfileCharacteristicDefinitionType::
    ~SurfaceProfileCharacteristicDefinitionType ()
    {
    }

    // SurfaceProfileCharacteristicNominalType
    //

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const id_type& id,
                                             const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      CircularZoneLimit_ (::xml_schema::flags (), this),
      DirectionalZoneLimit_ (::xml_schema::flags (), this),
      RectangularZoneLimit_ (::xml_schema::flags (), this)
    {
    }

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const SurfaceProfileCharacteristicNominalType& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (x, f, c),
      CircularZoneLimit_ (x.CircularZoneLimit_, f, this),
      DirectionalZoneLimit_ (x.DirectionalZoneLimit_, f, this),
      RectangularZoneLimit_ (x.RectangularZoneLimit_, f, this)
    {
    }

    SurfaceProfileCharacteristicNominalType::
    SurfaceProfileCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      CircularZoneLimit_ (f, this),
      DirectionalZoneLimit_ (f, this),
      RectangularZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceProfileCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ProfileCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CircularZoneLimit
        //
        if (n.name () == "CircularZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CircularZoneLimit_type > r (
            CircularZoneLimit_traits::create (i, f, this));

          if (!this->CircularZoneLimit_)
          {
            this->CircularZoneLimit_.set (r);
            continue;
          }
        }

        // DirectionalZoneLimit
        //
        if (n.name () == "DirectionalZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DirectionalZoneLimit_type > r (
            DirectionalZoneLimit_traits::create (i, f, this));

          if (!this->DirectionalZoneLimit_)
          {
            this->DirectionalZoneLimit_.set (r);
            continue;
          }
        }

        // RectangularZoneLimit
        //
        if (n.name () == "RectangularZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< RectangularZoneLimit_type > r (
            RectangularZoneLimit_traits::create (i, f, this));

          if (!this->RectangularZoneLimit_)
          {
            this->RectangularZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }
    }

    SurfaceProfileCharacteristicNominalType* SurfaceProfileCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicNominalType (*this, f, c);
    }

    SurfaceProfileCharacteristicNominalType::
    ~SurfaceProfileCharacteristicNominalType ()
    {
    }

    // SurfaceProfileCharacteristicActualType
    //

    SurfaceProfileCharacteristicActualType::
    SurfaceProfileCharacteristicActualType (const id_type& id,
                                            const Status_type& Status,
                                            const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    SurfaceProfileCharacteristicActualType::
    SurfaceProfileCharacteristicActualType (const id_type& id,
                                            ::std::auto_ptr< Status_type >& Status,
                                            ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    SurfaceProfileCharacteristicActualType::
    SurfaceProfileCharacteristicActualType (const SurfaceProfileCharacteristicActualType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (x, f, c)
    {
    }

    SurfaceProfileCharacteristicActualType::
    SurfaceProfileCharacteristicActualType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (e, f, c)
    {
    }

    SurfaceProfileCharacteristicActualType* SurfaceProfileCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileCharacteristicActualType (*this, f, c);
    }

    SurfaceProfileCharacteristicActualType::
    ~SurfaceProfileCharacteristicActualType ()
    {
    }

    // SurfaceProfileNonUniformCharacteristicItemType
    //

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const id_type& id,
                                                    const Name_type& Name,
                                                    const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const id_type& id,
                                                    const Name_type& Name,
                                                    ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (id,
                                                      Name,
                                                      CharacteristicNominalId)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const SurfaceProfileNonUniformCharacteristicItemType& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (x, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    SurfaceProfileNonUniformCharacteristicItemType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicItemBaseType (e, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicItemType* SurfaceProfileNonUniformCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicItemType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicItemType::
    ~SurfaceProfileNonUniformCharacteristicItemType ()
    {
    }

    // SurfaceProfileNonUniformCharacteristicDefinitionType
    //

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const id_type& id,
                                                          const ToleranceValue_type& ToleranceValue,
                                                          const DatumReferenceFrameId_type& DatumReferenceFrameId,
                                                          const ToPointToleranceValue_type& ToPointToleranceValue)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId),
      ToPointToleranceValue_ (ToPointToleranceValue, ::xml_schema::flags (), this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const id_type& id,
                                                          ::std::auto_ptr< ToleranceValue_type >& ToleranceValue,
                                                          ::std::auto_ptr< DatumReferenceFrameId_type >& DatumReferenceFrameId,
                                                          ::std::auto_ptr< ToPointToleranceValue_type >& ToPointToleranceValue)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (id,
                                                            ToleranceValue,
                                                            DatumReferenceFrameId),
      ToPointToleranceValue_ (ToPointToleranceValue, ::xml_schema::flags (), this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const SurfaceProfileNonUniformCharacteristicDefinitionType& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (x, f, c),
      ToPointToleranceValue_ (x.ToPointToleranceValue_, f, this)
    {
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    SurfaceProfileNonUniformCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ToPointToleranceValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceProfileNonUniformCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ProfileCharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ToPointToleranceValue
        //
        if (n.name () == "ToPointToleranceValue" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToPointToleranceValue_type > r (
            ToPointToleranceValue_traits::create (i, f, this));

          if (!ToPointToleranceValue_.present ())
          {
            this->ToPointToleranceValue_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ToPointToleranceValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToPointToleranceValue",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType* SurfaceProfileNonUniformCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicDefinitionType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicDefinitionType::
    ~SurfaceProfileNonUniformCharacteristicDefinitionType ()
    {
    }

    // SurfaceProfileNonUniformCharacteristicNominalType
    //

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const id_type& id,
                                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                                       const ZoneLimit_type& ZoneLimit)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      ZoneLimit_ (ZoneLimit, ::xml_schema::flags (), this)
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const id_type& id,
                                                       const CharacteristicDefinitionId_type& CharacteristicDefinitionId,
                                                       ::std::auto_ptr< ZoneLimit_type >& ZoneLimit)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (id,
                                                         CharacteristicDefinitionId),
      ZoneLimit_ (ZoneLimit, ::xml_schema::flags (), this)
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const SurfaceProfileNonUniformCharacteristicNominalType& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (x, f, c),
      ZoneLimit_ (x.ZoneLimit_, f, this)
    {
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    SurfaceProfileNonUniformCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicNominalBaseType (e, f | ::xml_schema::flags::base, c),
      ZoneLimit_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SurfaceProfileNonUniformCharacteristicNominalType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::ProfileCharacteristicNominalBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ZoneLimit
        //
        if (n.name () == "ZoneLimit" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ZoneLimit_type > r (
            ZoneLimit_traits::create (i, f, this));

          if (!ZoneLimit_.present ())
          {
            this->ZoneLimit_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ZoneLimit_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ZoneLimit",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    SurfaceProfileNonUniformCharacteristicNominalType* SurfaceProfileNonUniformCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicNominalType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicNominalType::
    ~SurfaceProfileNonUniformCharacteristicNominalType ()
    {
    }

    // SurfaceProfileNonUniformCharacteristicActualType
    //

    SurfaceProfileNonUniformCharacteristicActualType::
    SurfaceProfileNonUniformCharacteristicActualType (const id_type& id,
                                                      const Status_type& Status,
                                                      const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    SurfaceProfileNonUniformCharacteristicActualType::
    SurfaceProfileNonUniformCharacteristicActualType (const id_type& id,
                                                      ::std::auto_ptr< Status_type >& Status,
                                                      ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (id,
                                                        Status,
                                                        CharacteristicItemId)
    {
    }

    SurfaceProfileNonUniformCharacteristicActualType::
    SurfaceProfileNonUniformCharacteristicActualType (const SurfaceProfileNonUniformCharacteristicActualType& x,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (x, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicActualType::
    SurfaceProfileNonUniformCharacteristicActualType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::ProfileCharacteristicActualBaseType (e, f, c)
    {
    }

    SurfaceProfileNonUniformCharacteristicActualType* SurfaceProfileNonUniformCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceProfileNonUniformCharacteristicActualType (*this, f, c);
    }

    SurfaceProfileNonUniformCharacteristicActualType::
    ~SurfaceProfileNonUniformCharacteristicActualType ()
    {
    }

    // ZoneRadiiType
    //

    ZoneRadiiType::
    ZoneRadiiType (const MinRadius_type& MinRadius,
                   const MaxRadius_type& MaxRadius)
    : ::xml_schema::type (),
      MinRadius_ (MinRadius, ::xml_schema::flags (), this),
      MaxRadius_ (MaxRadius, ::xml_schema::flags (), this)
    {
    }

    ZoneRadiiType::
    ZoneRadiiType (::std::auto_ptr< MinRadius_type >& MinRadius,
                   ::std::auto_ptr< MaxRadius_type >& MaxRadius)
    : ::xml_schema::type (),
      MinRadius_ (MinRadius, ::xml_schema::flags (), this),
      MaxRadius_ (MaxRadius, ::xml_schema::flags (), this)
    {
    }

    ZoneRadiiType::
    ZoneRadiiType (const ZoneRadiiType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MinRadius_ (x.MinRadius_, f, this),
      MaxRadius_ (x.MaxRadius_, f, this)
    {
    }

    ZoneRadiiType::
    ZoneRadiiType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MinRadius_ (f, this),
      MaxRadius_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ZoneRadiiType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MinRadius
        //
        if (n.name () == "MinRadius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinRadius_type > r (
            MinRadius_traits::create (i, f, this));

          if (!MinRadius_.present ())
          {
            this->MinRadius_.set (r);
            continue;
          }
        }

        // MaxRadius
        //
        if (n.name () == "MaxRadius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxRadius_type > r (
            MaxRadius_traits::create (i, f, this));

          if (!MaxRadius_.present ())
          {
            this->MaxRadius_.set (r);
            continue;
          }
        }

        break;
      }

      if (!MinRadius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MinRadius",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!MaxRadius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MaxRadius",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ZoneRadiiType* ZoneRadiiType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ZoneRadiiType (*this, f, c);
    }

    ZoneRadiiType::
    ~ZoneRadiiType ()
    {
    }

    // ActualZoneRadiiType
    //

    ActualZoneRadiiType::
    ActualZoneRadiiType (const MinRadius_type& MinRadius,
                         const MaxRadius_type& MaxRadius)
    : ::xml_schema::type (),
      MinRadius_ (MinRadius, ::xml_schema::flags (), this),
      MaxRadius_ (MaxRadius, ::xml_schema::flags (), this)
    {
    }

    ActualZoneRadiiType::
    ActualZoneRadiiType (::std::auto_ptr< MinRadius_type >& MinRadius,
                         ::std::auto_ptr< MaxRadius_type >& MaxRadius)
    : ::xml_schema::type (),
      MinRadius_ (MinRadius, ::xml_schema::flags (), this),
      MaxRadius_ (MaxRadius, ::xml_schema::flags (), this)
    {
    }

    ActualZoneRadiiType::
    ActualZoneRadiiType (const ActualZoneRadiiType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MinRadius_ (x.MinRadius_, f, this),
      MaxRadius_ (x.MaxRadius_, f, this)
    {
    }

    ActualZoneRadiiType::
    ActualZoneRadiiType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MinRadius_ (f, this),
      MaxRadius_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ActualZoneRadiiType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MinRadius
        //
        if (n.name () == "MinRadius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MinRadius_type > r (
            MinRadius_traits::create (i, f, this));

          if (!MinRadius_.present ())
          {
            this->MinRadius_.set (r);
            continue;
          }
        }

        // MaxRadius
        //
        if (n.name () == "MaxRadius" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MaxRadius_type > r (
            MaxRadius_traits::create (i, f, this));

          if (!MaxRadius_.present ())
          {
            this->MaxRadius_.set (r);
            continue;
          }
        }

        break;
      }

      if (!MinRadius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MinRadius",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!MaxRadius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MaxRadius",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ActualZoneRadiiType* ActualZoneRadiiType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActualZoneRadiiType (*this, f, c);
    }

    ActualZoneRadiiType::
    ~ActualZoneRadiiType ()
    {
    }

    // CharacteristicGroupType
    //

    CharacteristicGroupType::
    CharacteristicGroupType (const CharacteristicItemIds_type& CharacteristicItemIds,
                             const id_type& id)
    : ::xml_schema::type (),
      CharacteristicItemIds_ (CharacteristicItemIds, ::xml_schema::flags (), this),
      Description_ (::xml_schema::flags (), this),
      Name_ (::xml_schema::flags (), this),
      TransformId_ (::xml_schema::flags (), this),
      Units_ (::xml_schema::flags (), this),
      Scale_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (::std::auto_ptr< CharacteristicItemIds_type >& CharacteristicItemIds,
                             const id_type& id)
    : ::xml_schema::type (),
      CharacteristicItemIds_ (CharacteristicItemIds, ::xml_schema::flags (), this),
      Description_ (::xml_schema::flags (), this),
      Name_ (::xml_schema::flags (), this),
      TransformId_ (::xml_schema::flags (), this),
      Units_ (::xml_schema::flags (), this),
      Scale_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (const CharacteristicGroupType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicItemIds_ (x.CharacteristicItemIds_, f, this),
      Description_ (x.Description_, f, this),
      Name_ (x.Name_, f, this),
      TransformId_ (x.TransformId_, f, this),
      Units_ (x.Units_, f, this),
      Scale_ (x.Scale_, f, this),
      id_ (x.id_, f, this)
    {
    }

    CharacteristicGroupType::
    CharacteristicGroupType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicItemIds_ (f, this),
      Description_ (f, this),
      Name_ (f, this),
      TransformId_ (f, this),
      Units_ (f, this),
      Scale_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicItemIds
        //
        if (n.name () == "CharacteristicItemIds" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicItemIds_type > r (
            CharacteristicItemIds_traits::create (i, f, this));

          if (!CharacteristicItemIds_.present ())
          {
            this->CharacteristicItemIds_.set (r);
            continue;
          }
        }

        // Description
        //
        if (n.name () == "Description" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Description_type > r (
            Description_traits::create (i, f, this));

          if (!this->Description_)
          {
            this->Description_.set (r);
            continue;
          }
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (r);
            continue;
          }
        }

        // TransformId
        //
        if (n.name () == "TransformId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< TransformId_type > r (
            TransformId_traits::create (i, f, this));

          if (!this->TransformId_)
          {
            this->TransformId_.set (r);
            continue;
          }
        }

        // Units
        //
        if (n.name () == "Units" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Units_type > r (
            Units_traits::create (i, f, this));

          if (!this->Units_)
          {
            this->Units_.set (r);
            continue;
          }
        }

        // Scale
        //
        if (n.name () == "Scale" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Scale_type > r (
            Scale_traits::create (i, f, this));

          if (!this->Scale_)
          {
            this->Scale_.set (r);
            continue;
          }
        }

        break;
      }

      if (!CharacteristicItemIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicItemIds",
          "http://qifstandards.org/xsd/qif2");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    CharacteristicGroupType* CharacteristicGroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupType (*this, f, c);
    }

    CharacteristicGroupType::
    ~CharacteristicGroupType ()
    {
    }

    // CharacteristicManufacturingProcessGroupType
    //

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (const CharacteristicItemIds_type& CharacteristicItemIds,
                                                 const id_type& id)
    : ::xsd::qif2::CharacteristicGroupType (CharacteristicItemIds,
                                            id),
      ManufacturingProcessId_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (::std::auto_ptr< CharacteristicItemIds_type >& CharacteristicItemIds,
                                                 const id_type& id)
    : ::xsd::qif2::CharacteristicGroupType (CharacteristicItemIds,
                                            id),
      ManufacturingProcessId_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (const CharacteristicManufacturingProcessGroupType& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicGroupType (x, f, c),
      ManufacturingProcessId_ (x.ManufacturingProcessId_, f, this)
    {
    }

    CharacteristicManufacturingProcessGroupType::
    CharacteristicManufacturingProcessGroupType (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicGroupType (e, f | ::xml_schema::flags::base, c),
      ManufacturingProcessId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CharacteristicManufacturingProcessGroupType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicGroupType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ManufacturingProcessId
        //
        if (n.name () == "ManufacturingProcessId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ManufacturingProcessId_type > r (
            ManufacturingProcessId_traits::create (i, f, this));

          if (!this->ManufacturingProcessId_)
          {
            this->ManufacturingProcessId_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CharacteristicManufacturingProcessGroupType* CharacteristicManufacturingProcessGroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicManufacturingProcessGroupType (*this, f, c);
    }

    CharacteristicManufacturingProcessGroupType::
    ~CharacteristicManufacturingProcessGroupType ()
    {
    }

    // CharacteristicSimultaneityGroupType
    //

    CharacteristicSimultaneityGroupType::
    CharacteristicSimultaneityGroupType (const CharacteristicItemIds_type& CharacteristicItemIds,
                                         const id_type& id)
    : ::xsd::qif2::CharacteristicGroupType (CharacteristicItemIds,
                                            id)
    {
    }

    CharacteristicSimultaneityGroupType::
    CharacteristicSimultaneityGroupType (::std::auto_ptr< CharacteristicItemIds_type >& CharacteristicItemIds,
                                         const id_type& id)
    : ::xsd::qif2::CharacteristicGroupType (CharacteristicItemIds,
                                            id)
    {
    }

    CharacteristicSimultaneityGroupType::
    CharacteristicSimultaneityGroupType (const CharacteristicSimultaneityGroupType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicGroupType (x, f, c)
    {
    }

    CharacteristicSimultaneityGroupType::
    CharacteristicSimultaneityGroupType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicGroupType (e, f, c)
    {
    }

    CharacteristicSimultaneityGroupType* CharacteristicSimultaneityGroupType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicSimultaneityGroupType (*this, f, c);
    }

    CharacteristicSimultaneityGroupType::
    ~CharacteristicSimultaneityGroupType ()
    {
    }

    // CharacteristicStatusEnumType
    //

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CharacteristicStatusEnumType_convert ();
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CharacteristicStatusEnumType_convert ();
    }

    CharacteristicStatusEnumType::
    CharacteristicStatusEnumType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CharacteristicStatusEnumType_convert ();
    }

    CharacteristicStatusEnumType* CharacteristicStatusEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicStatusEnumType (*this, f, c);
    }

    CharacteristicStatusEnumType::value CharacteristicStatusEnumType::
    _xsd_CharacteristicStatusEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CharacteristicStatusEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CharacteristicStatusEnumType_indexes_,
                        _xsd_CharacteristicStatusEnumType_indexes_ + 8,
                        *this,
                        c));

      if (i == _xsd_CharacteristicStatusEnumType_indexes_ + 8 || _xsd_CharacteristicStatusEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const CharacteristicStatusEnumType::
    _xsd_CharacteristicStatusEnumType_literals_[8] =
    {
      "PASS",
      "FAIL",
      "REWORK",
      "SYSERROR",
      "INDETERMINATE",
      "NOT_ANALYZED",
      "BASIC",
      "UNDEFINED"
    };

    const CharacteristicStatusEnumType::value CharacteristicStatusEnumType::
    _xsd_CharacteristicStatusEnumType_indexes_[8] =
    {
      ::xsd::qif2::CharacteristicStatusEnumType::BASIC,
      ::xsd::qif2::CharacteristicStatusEnumType::FAIL,
      ::xsd::qif2::CharacteristicStatusEnumType::INDETERMINATE,
      ::xsd::qif2::CharacteristicStatusEnumType::NOT_ANALYZED,
      ::xsd::qif2::CharacteristicStatusEnumType::PASS,
      ::xsd::qif2::CharacteristicStatusEnumType::REWORK,
      ::xsd::qif2::CharacteristicStatusEnumType::SYSERROR,
      ::xsd::qif2::CharacteristicStatusEnumType::UNDEFINED
    };

    // CharacteristicStatusType
    //

    CharacteristicStatusType::
    CharacteristicStatusType ()
    : ::xml_schema::type (),
      CharacteristicStatusEnum_ (::xml_schema::flags (), this),
      OtherCharacteristicStatus_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicStatusType::
    CharacteristicStatusType (const CharacteristicStatusType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicStatusEnum_ (x.CharacteristicStatusEnum_, f, this),
      OtherCharacteristicStatus_ (x.OtherCharacteristicStatus_, f, this)
    {
    }

    CharacteristicStatusType::
    CharacteristicStatusType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicStatusEnum_ (f, this),
      OtherCharacteristicStatus_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicStatusType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicStatusEnum
        //
        if (n.name () == "CharacteristicStatusEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicStatusEnum_type > r (
            CharacteristicStatusEnum_traits::create (i, f, this));

          if (!this->CharacteristicStatusEnum_)
          {
            this->CharacteristicStatusEnum_.set (r);
            continue;
          }
        }

        // OtherCharacteristicStatus
        //
        if (n.name () == "OtherCharacteristicStatus" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherCharacteristicStatus_type > r (
            OtherCharacteristicStatus_traits::create (i, f, this));

          if (!this->OtherCharacteristicStatus_)
          {
            this->OtherCharacteristicStatus_.set (r);
            continue;
          }
        }

        break;
      }
    }

    CharacteristicStatusType* CharacteristicStatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicStatusType (*this, f, c);
    }

    CharacteristicStatusType::
    ~CharacteristicStatusType ()
    {
    }

    // CharacteristicGroupStatusType
    //

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (const Status_type& Status,
                                   const GroupId_type& GroupId)
    : ::xml_schema::type (),
      Status_ (Status, ::xml_schema::flags (), this),
      GroupId_ (GroupId, ::xml_schema::flags (), this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (::std::auto_ptr< Status_type >& Status,
                                   ::std::auto_ptr< GroupId_type >& GroupId)
    : ::xml_schema::type (),
      Status_ (Status, ::xml_schema::flags (), this),
      GroupId_ (GroupId, ::xml_schema::flags (), this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (const CharacteristicGroupStatusType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Status_ (x.Status_, f, this),
      GroupId_ (x.GroupId_, f, this)
    {
    }

    CharacteristicGroupStatusType::
    CharacteristicGroupStatusType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Status_ (f, this),
      GroupId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupStatusType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Status
        //
        if (n.name () == "Status" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Status_type > r (
            Status_traits::create (i, f, this));

          if (!Status_.present ())
          {
            this->Status_.set (r);
            continue;
          }
        }

        // GroupId
        //
        if (n.name () == "GroupId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< GroupId_type > r (
            GroupId_traits::create (i, f, this));

          if (!GroupId_.present ())
          {
            this->GroupId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Status",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!GroupId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "GroupId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicGroupStatusType* CharacteristicGroupStatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupStatusType (*this, f, c);
    }

    CharacteristicGroupStatusType::
    ~CharacteristicGroupStatusType ()
    {
    }

    // PointDeviationType
    //

    PointDeviationType::
    PointDeviationType (const MeasurePointActualId_type& MeasurePointActualId,
                        const Deviation_type& Deviation)
    : ::xml_schema::type (),
      MeasurePointActualId_ (MeasurePointActualId, ::xml_schema::flags (), this),
      Deviation_ (Deviation, ::xml_schema::flags (), this)
    {
    }

    PointDeviationType::
    PointDeviationType (::std::auto_ptr< MeasurePointActualId_type >& MeasurePointActualId,
                        ::std::auto_ptr< Deviation_type >& Deviation)
    : ::xml_schema::type (),
      MeasurePointActualId_ (MeasurePointActualId, ::xml_schema::flags (), this),
      Deviation_ (Deviation, ::xml_schema::flags (), this)
    {
    }

    PointDeviationType::
    PointDeviationType (const PointDeviationType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      MeasurePointActualId_ (x.MeasurePointActualId_, f, this),
      Deviation_ (x.Deviation_, f, this)
    {
    }

    PointDeviationType::
    PointDeviationType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      MeasurePointActualId_ (f, this),
      Deviation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PointDeviationType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // MeasurePointActualId
        //
        if (n.name () == "MeasurePointActualId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< MeasurePointActualId_type > r (
            MeasurePointActualId_traits::create (i, f, this));

          if (!MeasurePointActualId_.present ())
          {
            this->MeasurePointActualId_.set (r);
            continue;
          }
        }

        // Deviation
        //
        if (n.name () == "Deviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Deviation_type > r (
            Deviation_traits::create (i, f, this));

          if (!Deviation_.present ())
          {
            this->Deviation_.set (r);
            continue;
          }
        }

        break;
      }

      if (!MeasurePointActualId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "MeasurePointActualId",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Deviation_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Deviation",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PointDeviationType* PointDeviationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDeviationType (*this, f, c);
    }

    PointDeviationType::
    ~PointDeviationType ()
    {
    }

    // PointDeviationsType
    //

    PointDeviationsType::
    PointDeviationsType ()
    : ::xml_schema::type (),
      PointDeviation_ (::xml_schema::flags (), this)
    {
    }

    PointDeviationsType::
    PointDeviationsType (const PointDeviationsType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      PointDeviation_ (x.PointDeviation_, f, this)
    {
    }

    PointDeviationsType::
    PointDeviationsType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      PointDeviation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PointDeviationsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PointDeviation
        //
        if (n.name () == "PointDeviation" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PointDeviation_type > r (
            PointDeviation_traits::create (i, f, this));

          this->PointDeviation_.push_back (r);
          continue;
        }

        break;
      }
    }

    PointDeviationsType* PointDeviationsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDeviationsType (*this, f, c);
    }

    PointDeviationsType::
    ~PointDeviationsType ()
    {
    }

    // ExtentEnumType
    //

    ExtentEnumType::
    ExtentEnumType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ExtentEnumType_convert ();
    }

    ExtentEnumType::
    ExtentEnumType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ExtentEnumType_convert ();
    }

    ExtentEnumType::
    ExtentEnumType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ExtentEnumType_convert ();
    }

    ExtentEnumType* ExtentEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExtentEnumType (*this, f, c);
    }

    ExtentEnumType::value ExtentEnumType::
    _xsd_ExtentEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ExtentEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ExtentEnumType_indexes_,
                        _xsd_ExtentEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_ExtentEnumType_indexes_ + 5 || _xsd_ExtentEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ExtentEnumType::
    _xsd_ExtentEnumType_literals_[5] =
    {
      "ALLOVER",
      "ALLAROUND",
      "ALLOVERTHISSIDE",
      "ALLAROUNDTHISSIDE",
      "UNDEFINED"
    };

    const ExtentEnumType::value ExtentEnumType::
    _xsd_ExtentEnumType_indexes_[5] =
    {
      ::xsd::qif2::ExtentEnumType::ALLAROUND,
      ::xsd::qif2::ExtentEnumType::ALLAROUNDTHISSIDE,
      ::xsd::qif2::ExtentEnumType::ALLOVER,
      ::xsd::qif2::ExtentEnumType::ALLOVERTHISSIDE,
      ::xsd::qif2::ExtentEnumType::UNDEFINED
    };

    // ExtentType
    //

    ExtentType::
    ExtentType ()
    : ::xml_schema::type (),
      ExtentEnum_ (::xml_schema::flags (), this),
      OtherExtent_ (::xml_schema::flags (), this)
    {
    }

    ExtentType::
    ExtentType (const ExtentType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      ExtentEnum_ (x.ExtentEnum_, f, this),
      OtherExtent_ (x.OtherExtent_, f, this)
    {
    }

    ExtentType::
    ExtentType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      ExtentEnum_ (f, this),
      OtherExtent_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ExtentType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ExtentEnum
        //
        if (n.name () == "ExtentEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ExtentEnum_type > r (
            ExtentEnum_traits::create (i, f, this));

          if (!this->ExtentEnum_)
          {
            this->ExtentEnum_.set (r);
            continue;
          }
        }

        // OtherExtent
        //
        if (n.name () == "OtherExtent" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< OtherExtent_type > r (
            OtherExtent_traits::create (i, f, this));

          if (!this->OtherExtent_)
          {
            this->OtherExtent_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ExtentType* ExtentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExtentType (*this, f, c);
    }

    ExtentType::
    ~ExtentType ()
    {
    }

    // PointWithNameType
    //

    PointWithNameType::
    PointWithNameType (const Point_type& Point)
    : ::xml_schema::type (),
      Point_ (Point, ::xml_schema::flags (), this),
      Name_ (::xml_schema::flags (), this)
    {
    }

    PointWithNameType::
    PointWithNameType (::std::auto_ptr< Point_type >& Point)
    : ::xml_schema::type (),
      Point_ (Point, ::xml_schema::flags (), this),
      Name_ (::xml_schema::flags (), this)
    {
    }

    PointWithNameType::
    PointWithNameType (const PointWithNameType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Point_ (x.Point_, f, this),
      Name_ (x.Name_, f, this)
    {
    }

    PointWithNameType::
    PointWithNameType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Point_ (f, this),
      Name_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PointWithNameType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Point
        //
        if (n.name () == "Point" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Point_type > r (
            Point_traits::create (i, f, this));

          if (!Point_.present ())
          {
            this->Point_.set (r);
            continue;
          }
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          if (!this->Name_)
          {
            this->Name_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Point_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Point",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PointWithNameType* PointWithNameType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointWithNameType (*this, f, c);
    }

    PointWithNameType::
    ~PointWithNameType ()
    {
    }

    // CharacteristicDirectionalZoneLimitType
    //

    CharacteristicDirectionalZoneLimitType::
    CharacteristicDirectionalZoneLimitType (const FromPoint_type& FromPoint,
                                            const ToPoint_type& ToPoint)
    : ::xml_schema::type (),
      FromPoint_ (FromPoint, ::xml_schema::flags (), this),
      ToPoint_ (ToPoint, ::xml_schema::flags (), this),
      StartDirection_ (::xml_schema::flags (), this),
      PlaneNormal_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicDirectionalZoneLimitType::
    CharacteristicDirectionalZoneLimitType (::std::auto_ptr< FromPoint_type >& FromPoint,
                                            ::std::auto_ptr< ToPoint_type >& ToPoint)
    : ::xml_schema::type (),
      FromPoint_ (FromPoint, ::xml_schema::flags (), this),
      ToPoint_ (ToPoint, ::xml_schema::flags (), this),
      StartDirection_ (::xml_schema::flags (), this),
      PlaneNormal_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicDirectionalZoneLimitType::
    CharacteristicDirectionalZoneLimitType (const CharacteristicDirectionalZoneLimitType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FromPoint_ (x.FromPoint_, f, this),
      ToPoint_ (x.ToPoint_, f, this),
      StartDirection_ (x.StartDirection_, f, this),
      PlaneNormal_ (x.PlaneNormal_, f, this)
    {
    }

    CharacteristicDirectionalZoneLimitType::
    CharacteristicDirectionalZoneLimitType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FromPoint_ (f, this),
      ToPoint_ (f, this),
      StartDirection_ (f, this),
      PlaneNormal_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicDirectionalZoneLimitType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // FromPoint
        //
        if (n.name () == "FromPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FromPoint_type > r (
            FromPoint_traits::create (i, f, this));

          if (!FromPoint_.present ())
          {
            this->FromPoint_.set (r);
            continue;
          }
        }

        // ToPoint
        //
        if (n.name () == "ToPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ToPoint_type > r (
            ToPoint_traits::create (i, f, this));

          if (!ToPoint_.present ())
          {
            this->ToPoint_.set (r);
            continue;
          }
        }

        // StartDirection
        //
        if (n.name () == "StartDirection" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StartDirection_type > r (
            StartDirection_traits::create (i, f, this));

          if (!this->StartDirection_)
          {
            this->StartDirection_.set (r);
            continue;
          }
        }

        // PlaneNormal
        //
        if (n.name () == "PlaneNormal" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PlaneNormal_type > r (
            PlaneNormal_traits::create (i, f, this));

          if (!this->PlaneNormal_)
          {
            this->PlaneNormal_.set (r);
            continue;
          }
        }

        break;
      }

      if (!FromPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FromPoint",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!ToPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ToPoint",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicDirectionalZoneLimitType* CharacteristicDirectionalZoneLimitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicDirectionalZoneLimitType (*this, f, c);
    }

    CharacteristicDirectionalZoneLimitType::
    ~CharacteristicDirectionalZoneLimitType ()
    {
    }

    // CharacteristicRectangularZoneLimitType
    //

    CharacteristicRectangularZoneLimitType::
    CharacteristicRectangularZoneLimitType (const Length_type& Length,
                                            const CornerPoint_type& CornerPoint,
                                            const Width_type& Width,
                                            const WidthDirection_type& WidthDirection,
                                            const LengthDirection_type& LengthDirection)
    : ::xsd::qif2::RectangleType (Length,
                                  CornerPoint,
                                  Width,
                                  WidthDirection,
                                  LengthDirection)
    {
    }

    CharacteristicRectangularZoneLimitType::
    CharacteristicRectangularZoneLimitType (::std::auto_ptr< Length_type >& Length,
                                            ::std::auto_ptr< CornerPoint_type >& CornerPoint,
                                            ::std::auto_ptr< Width_type >& Width,
                                            ::std::auto_ptr< WidthDirection_type >& WidthDirection,
                                            ::std::auto_ptr< LengthDirection_type >& LengthDirection)
    : ::xsd::qif2::RectangleType (Length,
                                  CornerPoint,
                                  Width,
                                  WidthDirection,
                                  LengthDirection)
    {
    }

    CharacteristicRectangularZoneLimitType::
    CharacteristicRectangularZoneLimitType (const CharacteristicRectangularZoneLimitType& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::RectangleType (x, f, c)
    {
    }

    CharacteristicRectangularZoneLimitType::
    CharacteristicRectangularZoneLimitType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::RectangleType (e, f, c)
    {
    }

    CharacteristicRectangularZoneLimitType* CharacteristicRectangularZoneLimitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicRectangularZoneLimitType (*this, f, c);
    }

    CharacteristicRectangularZoneLimitType::
    ~CharacteristicRectangularZoneLimitType ()
    {
    }

    // CharacteristicCircularZoneLimitType
    //

    CharacteristicCircularZoneLimitType::
    CharacteristicCircularZoneLimitType (const CenterPoint_type& CenterPoint,
                                         const Diameter_type& Diameter,
                                         const Normal_type& Normal)
    : ::xsd::qif2::CircleType (CenterPoint,
                               Diameter,
                               Normal)
    {
    }

    CharacteristicCircularZoneLimitType::
    CharacteristicCircularZoneLimitType (::std::auto_ptr< CenterPoint_type >& CenterPoint,
                                         ::std::auto_ptr< Diameter_type >& Diameter,
                                         ::std::auto_ptr< Normal_type >& Normal)
    : ::xsd::qif2::CircleType (CenterPoint,
                               Diameter,
                               Normal)
    {
    }

    CharacteristicCircularZoneLimitType::
    CharacteristicCircularZoneLimitType (const CharacteristicCircularZoneLimitType& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::CircleType (x, f, c)
    {
    }

    CharacteristicCircularZoneLimitType::
    CharacteristicCircularZoneLimitType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::CircleType (e, f, c)
    {
    }

    CharacteristicCircularZoneLimitType* CharacteristicCircularZoneLimitType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicCircularZoneLimitType (*this, f, c);
    }

    CharacteristicCircularZoneLimitType::
    ~CharacteristicCircularZoneLimitType ()
    {
    }

    // ThreadCharacteristicItemType
    //

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  const CharacteristicNominalId_type& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const id_type& id,
                                  const Name_type& Name,
                                  ::std::auto_ptr< CharacteristicNominalId_type >& CharacteristicNominalId)
    : ::xsd::qif2::CharacteristicItemBaseType (id,
                                               Name,
                                               CharacteristicNominalId)
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const ThreadCharacteristicItemType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (x, f, c)
    {
    }

    ThreadCharacteristicItemType::
    ThreadCharacteristicItemType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicItemBaseType (e, f, c)
    {
    }

    ThreadCharacteristicItemType* ThreadCharacteristicItemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicItemType (*this, f, c);
    }

    ThreadCharacteristicItemType::
    ~ThreadCharacteristicItemType ()
    {
    }

    // ThreadCharacteristicDefinitionType
    //

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const id_type& id,
                                        const ThreadSpecificationId_type& ThreadSpecificationId)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      ThreadSpecificationId_ (ThreadSpecificationId, ::xml_schema::flags (), this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const id_type& id,
                                        ::std::auto_ptr< ThreadSpecificationId_type >& ThreadSpecificationId)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (id),
      ThreadSpecificationId_ (ThreadSpecificationId, ::xml_schema::flags (), this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const ThreadCharacteristicDefinitionType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (x, f, c),
      ThreadSpecificationId_ (x.ThreadSpecificationId_, f, this)
    {
    }

    ThreadCharacteristicDefinitionType::
    ThreadCharacteristicDefinitionType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicDefinitionBaseType (e, f | ::xml_schema::flags::base, c),
      ThreadSpecificationId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ThreadCharacteristicDefinitionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicDefinitionBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ThreadSpecificationId
        //
        if (n.name () == "ThreadSpecificationId" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< ThreadSpecificationId_type > r (
            ThreadSpecificationId_traits::create (i, f, this));

          if (!ThreadSpecificationId_.present ())
          {
            this->ThreadSpecificationId_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ThreadSpecificationId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ThreadSpecificationId",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ThreadCharacteristicDefinitionType* ThreadCharacteristicDefinitionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicDefinitionType (*this, f, c);
    }

    ThreadCharacteristicDefinitionType::
    ~ThreadCharacteristicDefinitionType ()
    {
    }

    // ThreadCharacteristicNominalType
    //

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const id_type& id,
                                     const CharacteristicDefinitionId_type& CharacteristicDefinitionId)
    : ::xsd::qif2::CharacteristicNominalBaseType (id,
                                                  CharacteristicDefinitionId)
    {
    }

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const ThreadCharacteristicNominalType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (x, f, c)
    {
    }

    ThreadCharacteristicNominalType::
    ThreadCharacteristicNominalType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicNominalBaseType (e, f, c)
    {
    }

    ThreadCharacteristicNominalType* ThreadCharacteristicNominalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicNominalType (*this, f, c);
    }

    ThreadCharacteristicNominalType::
    ~ThreadCharacteristicNominalType ()
    {
    }

    // ThreadCharacteristicActualType
    //

    ThreadCharacteristicActualType::
    ThreadCharacteristicActualType (const id_type& id,
                                    const Status_type& Status,
                                    const CharacteristicItemId_type& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      PitchDiameter_ (::xml_schema::flags (), this),
      FunctionalSize_ (::xml_schema::flags (), this)
    {
    }

    ThreadCharacteristicActualType::
    ThreadCharacteristicActualType (const id_type& id,
                                    ::std::auto_ptr< Status_type >& Status,
                                    ::std::auto_ptr< CharacteristicItemId_type >& CharacteristicItemId)
    : ::xsd::qif2::CharacteristicActualBaseType (id,
                                                 Status,
                                                 CharacteristicItemId),
      PitchDiameter_ (::xml_schema::flags (), this),
      FunctionalSize_ (::xml_schema::flags (), this)
    {
    }

    ThreadCharacteristicActualType::
    ThreadCharacteristicActualType (const ThreadCharacteristicActualType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (x, f, c),
      PitchDiameter_ (x.PitchDiameter_, f, this),
      FunctionalSize_ (x.FunctionalSize_, f, this)
    {
    }

    ThreadCharacteristicActualType::
    ThreadCharacteristicActualType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::CharacteristicActualBaseType (e, f | ::xml_schema::flags::base, c),
      PitchDiameter_ (f, this),
      FunctionalSize_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ThreadCharacteristicActualType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::CharacteristicActualBaseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // PitchDiameter
        //
        if (n.name () == "PitchDiameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< PitchDiameter_type > r (
            PitchDiameter_traits::create (i, f, this));

          if (!this->PitchDiameter_)
          {
            this->PitchDiameter_.set (r);
            continue;
          }
        }

        // FunctionalSize
        //
        if (n.name () == "FunctionalSize" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FunctionalSize_type > r (
            FunctionalSize_traits::create (i, f, this));

          if (!this->FunctionalSize_)
          {
            this->FunctionalSize_.set (r);
            continue;
          }
        }

        break;
      }
    }

    ThreadCharacteristicActualType* ThreadCharacteristicActualType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ThreadCharacteristicActualType (*this, f, c);
    }

    ThreadCharacteristicActualType::
    ~ThreadCharacteristicActualType ()
    {
    }

    // CharacteristicAspectsListsType
    //

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (const FormalStandard_type& FormalStandard,
                                    const CharacteristicDefinitions_type& CharacteristicDefinitions,
                                    const CharacteristicNominals_type& CharacteristicNominals)
    : ::xml_schema::type (),
      FormalStandard_ (FormalStandard, ::xml_schema::flags (), this),
      CharacteristicDefinitions_ (CharacteristicDefinitions, ::xml_schema::flags (), this),
      DefaultCharacteristicDefinitions_ (::xml_schema::flags (), this),
      DefaultToleranceDefinitions_ (::xml_schema::flags (), this),
      CharacteristicNominals_ (CharacteristicNominals, ::xml_schema::flags (), this),
      CharacteristicItems_ (::xml_schema::flags (), this),
      CharacteristicGroups_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (::std::auto_ptr< FormalStandard_type >& FormalStandard,
                                    ::std::auto_ptr< CharacteristicDefinitions_type >& CharacteristicDefinitions,
                                    ::std::auto_ptr< CharacteristicNominals_type >& CharacteristicNominals)
    : ::xml_schema::type (),
      FormalStandard_ (FormalStandard, ::xml_schema::flags (), this),
      CharacteristicDefinitions_ (CharacteristicDefinitions, ::xml_schema::flags (), this),
      DefaultCharacteristicDefinitions_ (::xml_schema::flags (), this),
      DefaultToleranceDefinitions_ (::xml_schema::flags (), this),
      CharacteristicNominals_ (CharacteristicNominals, ::xml_schema::flags (), this),
      CharacteristicItems_ (::xml_schema::flags (), this),
      CharacteristicGroups_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (const CharacteristicAspectsListsType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      FormalStandard_ (x.FormalStandard_, f, this),
      CharacteristicDefinitions_ (x.CharacteristicDefinitions_, f, this),
      DefaultCharacteristicDefinitions_ (x.DefaultCharacteristicDefinitions_, f, this),
      DefaultToleranceDefinitions_ (x.DefaultToleranceDefinitions_, f, this),
      CharacteristicNominals_ (x.CharacteristicNominals_, f, this),
      CharacteristicItems_ (x.CharacteristicItems_, f, this),
      CharacteristicGroups_ (x.CharacteristicGroups_, f, this)
    {
    }

    CharacteristicAspectsListsType::
    CharacteristicAspectsListsType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      FormalStandard_ (f, this),
      CharacteristicDefinitions_ (f, this),
      DefaultCharacteristicDefinitions_ (f, this),
      DefaultToleranceDefinitions_ (f, this),
      CharacteristicNominals_ (f, this),
      CharacteristicItems_ (f, this),
      CharacteristicGroups_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicAspectsListsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // FormalStandard
        //
        if (n.name () == "FormalStandard" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< FormalStandard_type > r (
            FormalStandard_traits::create (i, f, this));

          if (!FormalStandard_.present ())
          {
            this->FormalStandard_.set (r);
            continue;
          }
        }

        // CharacteristicDefinitions
        //
        if (n.name () == "CharacteristicDefinitions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicDefinitions_type > r (
            CharacteristicDefinitions_traits::create (i, f, this));

          if (!CharacteristicDefinitions_.present ())
          {
            this->CharacteristicDefinitions_.set (r);
            continue;
          }
        }

        // DefaultCharacteristicDefinitions
        //
        if (n.name () == "DefaultCharacteristicDefinitions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DefaultCharacteristicDefinitions_type > r (
            DefaultCharacteristicDefinitions_traits::create (i, f, this));

          if (!this->DefaultCharacteristicDefinitions_)
          {
            this->DefaultCharacteristicDefinitions_.set (r);
            continue;
          }
        }

        // DefaultToleranceDefinitions
        //
        if (n.name () == "DefaultToleranceDefinitions" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< DefaultToleranceDefinitions_type > r (
            DefaultToleranceDefinitions_traits::create (i, f, this));

          if (!this->DefaultToleranceDefinitions_)
          {
            this->DefaultToleranceDefinitions_.set (r);
            continue;
          }
        }

        // CharacteristicNominals
        //
        if (n.name () == "CharacteristicNominals" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicNominals_type > r (
            CharacteristicNominals_traits::create (i, f, this));

          if (!CharacteristicNominals_.present ())
          {
            this->CharacteristicNominals_.set (r);
            continue;
          }
        }

        // CharacteristicItems
        //
        if (n.name () == "CharacteristicItems" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicItems_type > r (
            CharacteristicItems_traits::create (i, f, this));

          if (!this->CharacteristicItems_)
          {
            this->CharacteristicItems_.set (r);
            continue;
          }
        }

        // CharacteristicGroups
        //
        if (n.name () == "CharacteristicGroups" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicGroups_type > r (
            CharacteristicGroups_traits::create (i, f, this));

          if (!this->CharacteristicGroups_)
          {
            this->CharacteristicGroups_.set (r);
            continue;
          }
        }

        break;
      }

      if (!FormalStandard_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "FormalStandard",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!CharacteristicDefinitions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicDefinitions",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!CharacteristicNominals_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicNominals",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CharacteristicAspectsListsType* CharacteristicAspectsListsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicAspectsListsType (*this, f, c);
    }

    CharacteristicAspectsListsType::
    ~CharacteristicAspectsListsType ()
    {
    }

    // MeasuredCharacteristicsType
    //

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (const CharacteristicActuals_type& CharacteristicActuals)
    : ::xml_schema::type (),
      CharacteristicActuals_ (CharacteristicActuals, ::xml_schema::flags (), this),
      CharacteristicGroupStatuses_ (::xml_schema::flags (), this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (::std::auto_ptr< CharacteristicActuals_type >& CharacteristicActuals)
    : ::xml_schema::type (),
      CharacteristicActuals_ (CharacteristicActuals, ::xml_schema::flags (), this),
      CharacteristicGroupStatuses_ (::xml_schema::flags (), this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (const MeasuredCharacteristicsType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicActuals_ (x.CharacteristicActuals_, f, this),
      CharacteristicGroupStatuses_ (x.CharacteristicGroupStatuses_, f, this)
    {
    }

    MeasuredCharacteristicsType::
    MeasuredCharacteristicsType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicActuals_ (f, this),
      CharacteristicGroupStatuses_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void MeasuredCharacteristicsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicActuals
        //
        if (n.name () == "CharacteristicActuals" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicActuals_type > r (
            CharacteristicActuals_traits::create (i, f, this));

          if (!CharacteristicActuals_.present ())
          {
            this->CharacteristicActuals_.set (r);
            continue;
          }
        }

        // CharacteristicGroupStatuses
        //
        if (n.name () == "CharacteristicGroupStatuses" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicGroupStatuses_type > r (
            CharacteristicGroupStatuses_traits::create (i, f, this));

          if (!this->CharacteristicGroupStatuses_)
          {
            this->CharacteristicGroupStatuses_.set (r);
            continue;
          }
        }

        break;
      }

      if (!CharacteristicActuals_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicActuals",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    MeasuredCharacteristicsType* MeasuredCharacteristicsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class MeasuredCharacteristicsType (*this, f, c);
    }

    MeasuredCharacteristicsType::
    ~MeasuredCharacteristicsType ()
    {
    }

    // CharacteristicItemsType
    //

    CharacteristicItemsType::
    CharacteristicItemsType ()
    : ::xml_schema::type (),
      CharacteristicItem_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicItemsType::
    CharacteristicItemsType (const CharacteristicItemsType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicItem_ (x.CharacteristicItem_, f, this)
    {
    }

    CharacteristicItemsType::
    CharacteristicItemsType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicItem_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicItemsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicItem
        //
        if (n.name () == "CharacteristicItem" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicItem_type > r (
            CharacteristicItem_traits::create (i, f, this));

          this->CharacteristicItem_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicItemsType* CharacteristicItemsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicItemsType (*this, f, c);
    }

    CharacteristicItemsType::
    ~CharacteristicItemsType ()
    {
    }

    // CharacteristicGroupsType
    //

    CharacteristicGroupsType::
    CharacteristicGroupsType ()
    : ::xml_schema::type (),
      CharacteristicGroup_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicGroupsType::
    CharacteristicGroupsType (const CharacteristicGroupsType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicGroup_ (x.CharacteristicGroup_, f, this)
    {
    }

    CharacteristicGroupsType::
    CharacteristicGroupsType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicGroup_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicGroup
        //
        if (n.name () == "CharacteristicGroup" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicGroup_type > r (
            CharacteristicGroup_traits::create (i, f, this));

          this->CharacteristicGroup_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicGroupsType* CharacteristicGroupsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupsType (*this, f, c);
    }

    CharacteristicGroupsType::
    ~CharacteristicGroupsType ()
    {
    }

    // CharacteristicGroupStatusesType
    //

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType ()
    : ::xml_schema::type (),
      CharacteristicGroupStatus_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType (const CharacteristicGroupStatusesType& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicGroupStatus_ (x.CharacteristicGroupStatus_, f, this)
    {
    }

    CharacteristicGroupStatusesType::
    CharacteristicGroupStatusesType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicGroupStatus_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicGroupStatusesType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicGroupStatus
        //
        if (n.name () == "CharacteristicGroupStatus" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicGroupStatus_type > r (
            CharacteristicGroupStatus_traits::create (i, f, this));

          this->CharacteristicGroupStatus_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicGroupStatusesType* CharacteristicGroupStatusesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicGroupStatusesType (*this, f, c);
    }

    CharacteristicGroupStatusesType::
    ~CharacteristicGroupStatusesType ()
    {
    }

    // CharacteristicDefinitionsType
    //

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType ()
    : ::xml_schema::type (),
      CharacteristicDefinition_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType (const CharacteristicDefinitionsType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicDefinition_ (x.CharacteristicDefinition_, f, this)
    {
    }

    CharacteristicDefinitionsType::
    CharacteristicDefinitionsType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicDefinition_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicDefinitionsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicDefinition
        //
        if (n.name () == "CharacteristicDefinition" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicDefinition_type > r (
            CharacteristicDefinition_traits::create (i, f, this));

          this->CharacteristicDefinition_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicDefinitionsType* CharacteristicDefinitionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicDefinitionsType (*this, f, c);
    }

    CharacteristicDefinitionsType::
    ~CharacteristicDefinitionsType ()
    {
    }

    // ToleranceDefinitionsType
    //

    ToleranceDefinitionsType::
    ToleranceDefinitionsType ()
    : ::xml_schema::type (),
      LinearTolerance_ (::xml_schema::flags (), this),
      AngularTolerance_ (::xml_schema::flags (), this)
    {
    }

    ToleranceDefinitionsType::
    ToleranceDefinitionsType (const ToleranceDefinitionsType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      LinearTolerance_ (x.LinearTolerance_, f, this),
      AngularTolerance_ (x.AngularTolerance_, f, this)
    {
    }

    ToleranceDefinitionsType::
    ToleranceDefinitionsType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      LinearTolerance_ (f, this),
      AngularTolerance_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ToleranceDefinitionsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // LinearTolerance
        //
        if (n.name () == "LinearTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< LinearTolerance_type > r (
            LinearTolerance_traits::create (i, f, this));

          this->LinearTolerance_.push_back (r);
          continue;
        }

        // AngularTolerance
        //
        if (n.name () == "AngularTolerance" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< AngularTolerance_type > r (
            AngularTolerance_traits::create (i, f, this));

          this->AngularTolerance_.push_back (r);
          continue;
        }

        break;
      }
    }

    ToleranceDefinitionsType* ToleranceDefinitionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ToleranceDefinitionsType (*this, f, c);
    }

    ToleranceDefinitionsType::
    ~ToleranceDefinitionsType ()
    {
    }

    // CharacteristicNominalsType
    //

    CharacteristicNominalsType::
    CharacteristicNominalsType ()
    : ::xml_schema::type (),
      CharacteristicNominal_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicNominalsType::
    CharacteristicNominalsType (const CharacteristicNominalsType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicNominal_ (x.CharacteristicNominal_, f, this)
    {
    }

    CharacteristicNominalsType::
    CharacteristicNominalsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicNominal_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicNominalsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicNominal
        //
        if (n.name () == "CharacteristicNominal" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicNominal_type > r (
            CharacteristicNominal_traits::create (i, f, this));

          this->CharacteristicNominal_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicNominalsType* CharacteristicNominalsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicNominalsType (*this, f, c);
    }

    CharacteristicNominalsType::
    ~CharacteristicNominalsType ()
    {
    }

    // CharacteristicActualsType
    //

    CharacteristicActualsType::
    CharacteristicActualsType ()
    : ::xml_schema::type (),
      CharacteristicActual_ (::xml_schema::flags (), this)
    {
    }

    CharacteristicActualsType::
    CharacteristicActualsType (const CharacteristicActualsType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CharacteristicActual_ (x.CharacteristicActual_, f, this)
    {
    }

    CharacteristicActualsType::
    CharacteristicActualsType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CharacteristicActual_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void CharacteristicActualsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicActual
        //
        if (n.name () == "CharacteristicActual" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicActual_type > r (
            CharacteristicActual_traits::create (i, f, this));

          this->CharacteristicActual_.push_back (r);
          continue;
        }

        break;
      }
    }

    CharacteristicActualsType* CharacteristicActualsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicActualsType (*this, f, c);
    }

    CharacteristicActualsType::
    ~CharacteristicActualsType ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
        ::xsd::qif2::Characteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
        ::xsd::qif2::Characteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
        ::xsd::qif2::Characteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Characteristics (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Characteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::Characteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Characteristics (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Characteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::Characteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
        ::xsd::qif2::Characteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
        ::xsd::qif2::Characteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
        ::xsd::qif2::Characteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
          ::xsd::qif2::Characteristics (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "Characteristics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicAspectsListsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Characteristics",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType >
    Characteristics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "Characteristics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicAspectsListsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicAspectsListsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Characteristics",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
        ::xsd::qif2::MeasuredCharacteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
        ::xsd::qif2::MeasuredCharacteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
        ::xsd::qif2::MeasuredCharacteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeasuredCharacteristics (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeasuredCharacteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::MeasuredCharacteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeasuredCharacteristics (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeasuredCharacteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::MeasuredCharacteristics (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
        ::xsd::qif2::MeasuredCharacteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
        ::xsd::qif2::MeasuredCharacteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
        ::xsd::qif2::MeasuredCharacteristics (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
          ::xsd::qif2::MeasuredCharacteristics (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "MeasuredCharacteristics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeasuredCharacteristicsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeasuredCharacteristics",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType >
    MeasuredCharacteristics (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "MeasuredCharacteristics" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::MeasuredCharacteristicsType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::MeasuredCharacteristicsType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MeasuredCharacteristics",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
        ::xsd::qif2::CharacteristicGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
        ::xsd::qif2::CharacteristicGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
        ::xsd::qif2::CharacteristicGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
        ::xsd::qif2::CharacteristicGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
        ::xsd::qif2::CharacteristicGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
        ::xsd::qif2::CharacteristicGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
          ::xsd::qif2::CharacteristicGroup (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicGroup" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicGroupType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicGroup",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType >
    CharacteristicGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicGroup" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicGroupType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicGroupType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicGroup",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
        ::xsd::qif2::CharacteristicManufacturingProcessGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
        ::xsd::qif2::CharacteristicManufacturingProcessGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
        ::xsd::qif2::CharacteristicManufacturingProcessGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicManufacturingProcessGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicManufacturingProcessGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicManufacturingProcessGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicManufacturingProcessGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicManufacturingProcessGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicManufacturingProcessGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
        ::xsd::qif2::CharacteristicManufacturingProcessGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
        ::xsd::qif2::CharacteristicManufacturingProcessGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
        ::xsd::qif2::CharacteristicManufacturingProcessGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
          ::xsd::qif2::CharacteristicManufacturingProcessGroup (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicManufacturingProcessGroup" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicManufacturingProcessGroupType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicManufacturingProcessGroup",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType >
    CharacteristicManufacturingProcessGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicManufacturingProcessGroup" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicManufacturingProcessGroupType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicManufacturingProcessGroupType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicManufacturingProcessGroup",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
        ::xsd::qif2::CharacteristicSimultaneityGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
        ::xsd::qif2::CharacteristicSimultaneityGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
        ::xsd::qif2::CharacteristicSimultaneityGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicSimultaneityGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicSimultaneityGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicSimultaneityGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicSimultaneityGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicSimultaneityGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicSimultaneityGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
        ::xsd::qif2::CharacteristicSimultaneityGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
        ::xsd::qif2::CharacteristicSimultaneityGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
        ::xsd::qif2::CharacteristicSimultaneityGroup (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
          ::xsd::qif2::CharacteristicSimultaneityGroup (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicSimultaneityGroup" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicSimultaneityGroupType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicSimultaneityGroup",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType >
    CharacteristicSimultaneityGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicSimultaneityGroup" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicSimultaneityGroupType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicSimultaneityGroupType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicSimultaneityGroup",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
        ::xsd::qif2::CharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
        ::xsd::qif2::CharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
        ::xsd::qif2::CharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
        ::xsd::qif2::CharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
        ::xsd::qif2::CharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
        ::xsd::qif2::CharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
          ::xsd::qif2::CharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicDefinitionBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType >
    CharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicDefinitionBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicDefinitionBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
          ::xsd::qif2::AngleBetweenCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleBetweenCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType >
    AngleBetweenCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleBetweenCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
          ::xsd::qif2::AngleCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType >
    AngleCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
          ::xsd::qif2::AngularCoordinateCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularCoordinateCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType >
    AngularCoordinateCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularCoordinateCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
        ::xsd::qif2::AngleFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
          ::xsd::qif2::AngleFromCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleFromCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType >
    AngleFromCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleFromCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
        ::xsd::qif2::AngularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
          ::xsd::qif2::AngularityCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType >
    AngularityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
        ::xsd::qif2::ChordCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
        ::xsd::qif2::ChordCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
        ::xsd::qif2::ChordCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
        ::xsd::qif2::ChordCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
        ::xsd::qif2::ChordCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
        ::xsd::qif2::ChordCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
          ::xsd::qif2::ChordCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ChordCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType >
    ChordCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ChordCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
          ::xsd::qif2::CircularityCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType >
    CircularityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::CircularRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
          ::xsd::qif2::CircularRunoutCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularRunoutCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType >
    CircularRunoutCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularRunoutCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
        ::xsd::qif2::ConcentricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
        ::xsd::qif2::ConcentricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
        ::xsd::qif2::ConcentricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
        ::xsd::qif2::ConcentricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
        ::xsd::qif2::ConcentricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
        ::xsd::qif2::ConcentricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
          ::xsd::qif2::ConcentricityCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConcentricityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType >
    ConcentricityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ConcentricityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
        ::xsd::qif2::CurveLengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
        ::xsd::qif2::CurveLengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
        ::xsd::qif2::CurveLengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
        ::xsd::qif2::CurveLengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
        ::xsd::qif2::CurveLengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
        ::xsd::qif2::CurveLengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
          ::xsd::qif2::CurveLengthCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CurveLengthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType >
    CurveLengthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CurveLengthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
        ::xsd::qif2::CylindricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
        ::xsd::qif2::CylindricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
        ::xsd::qif2::CylindricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
        ::xsd::qif2::CylindricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
        ::xsd::qif2::CylindricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
        ::xsd::qif2::CylindricityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
          ::xsd::qif2::CylindricityCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CylindricityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType >
    CylindricityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CylindricityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
        ::xsd::qif2::DepthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
        ::xsd::qif2::DepthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
        ::xsd::qif2::DepthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
        ::xsd::qif2::DepthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
        ::xsd::qif2::DepthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
        ::xsd::qif2::DepthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
          ::xsd::qif2::DepthCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DepthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType >
    DepthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DepthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
        ::xsd::qif2::DiameterCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
        ::xsd::qif2::DiameterCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
        ::xsd::qif2::DiameterCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
        ::xsd::qif2::DiameterCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
        ::xsd::qif2::DiameterCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
        ::xsd::qif2::DiameterCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
          ::xsd::qif2::DiameterCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DiameterCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType >
    DiameterCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DiameterCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
          ::xsd::qif2::DistanceBetweenCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceBetweenCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType >
    DistanceBetweenCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceBetweenCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
        ::xsd::qif2::DistanceFromCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
          ::xsd::qif2::DistanceFromCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceFromCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType >
    DistanceFromCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceFromCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
        ::xsd::qif2::FlatnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
        ::xsd::qif2::FlatnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
        ::xsd::qif2::FlatnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
        ::xsd::qif2::FlatnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
        ::xsd::qif2::FlatnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
        ::xsd::qif2::FlatnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
          ::xsd::qif2::FlatnessCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FlatnessCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType >
    FlatnessCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FlatnessCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
        ::xsd::qif2::HeightCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
        ::xsd::qif2::HeightCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
        ::xsd::qif2::HeightCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
        ::xsd::qif2::HeightCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
        ::xsd::qif2::HeightCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
        ::xsd::qif2::HeightCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
          ::xsd::qif2::HeightCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "HeightCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType >
    HeightCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "HeightCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
        ::xsd::qif2::LengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
        ::xsd::qif2::LengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
        ::xsd::qif2::LengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
        ::xsd::qif2::LengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
        ::xsd::qif2::LengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
        ::xsd::qif2::LengthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
          ::xsd::qif2::LengthCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LengthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType >
    LengthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LengthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
          ::xsd::qif2::LinearCoordinateCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LinearCoordinateCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType >
    LinearCoordinateCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LinearCoordinateCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::LineProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::LineProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::LineProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::LineProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::LineProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::LineProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
          ::xsd::qif2::LineProfileCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LineProfileCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType >
    LineProfileCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LineProfileCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
        ::xsd::qif2::ParallelismCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
        ::xsd::qif2::ParallelismCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
        ::xsd::qif2::ParallelismCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
        ::xsd::qif2::ParallelismCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
        ::xsd::qif2::ParallelismCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
        ::xsd::qif2::ParallelismCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
          ::xsd::qif2::ParallelismCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ParallelismCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType >
    ParallelismCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ParallelismCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
        ::xsd::qif2::PerpendicularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
        ::xsd::qif2::PerpendicularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
        ::xsd::qif2::PerpendicularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
        ::xsd::qif2::PerpendicularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
        ::xsd::qif2::PerpendicularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
        ::xsd::qif2::PerpendicularityCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
          ::xsd::qif2::PerpendicularityCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PerpendicularityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType >
    PerpendicularityCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PerpendicularityCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::PointProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::PointProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::PointProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::PointProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::PointProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::PointProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
          ::xsd::qif2::PointProfileCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PointProfileCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType >
    PointProfileCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PointProfileCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
        ::xsd::qif2::PositionCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
        ::xsd::qif2::PositionCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
        ::xsd::qif2::PositionCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
        ::xsd::qif2::PositionCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
        ::xsd::qif2::PositionCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
        ::xsd::qif2::PositionCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
          ::xsd::qif2::PositionCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PositionCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType >
    PositionCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PositionCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
        ::xsd::qif2::RadiusCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
        ::xsd::qif2::RadiusCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
        ::xsd::qif2::RadiusCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
        ::xsd::qif2::RadiusCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
        ::xsd::qif2::RadiusCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
        ::xsd::qif2::RadiusCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
          ::xsd::qif2::RadiusCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RadiusCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType >
    RadiusCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "RadiusCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
        ::xsd::qif2::SquareCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
        ::xsd::qif2::SquareCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
        ::xsd::qif2::SquareCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
        ::xsd::qif2::SquareCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
        ::xsd::qif2::SquareCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
        ::xsd::qif2::SquareCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
          ::xsd::qif2::SquareCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SquareCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType >
    SquareCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SquareCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
        ::xsd::qif2::StraightnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
        ::xsd::qif2::StraightnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
        ::xsd::qif2::StraightnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
        ::xsd::qif2::StraightnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
        ::xsd::qif2::StraightnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
        ::xsd::qif2::StraightnessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
          ::xsd::qif2::StraightnessCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "StraightnessCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType >
    StraightnessCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "StraightnessCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
          ::xsd::qif2::SurfaceProfileCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType >
    SurfaceProfileCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::std::string& u,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::std::string& u,
                                                      ::xml_schema::error_handler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::std::string& u,
                                                      ::xercesc::DOMErrorHandler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      ::xml_schema::error_handler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      ::xercesc::DOMErrorHandler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      const ::std::string& sid,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      const ::std::string& sid,
                                                      ::xml_schema::error_handler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::std::istream& is,
                                                      const ::std::string& sid,
                                                      ::xercesc::DOMErrorHandler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::InputSource& i,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::InputSource& i,
                                                      ::xml_schema::error_handler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xercesc::InputSource& i,
                                                      ::xercesc::DOMErrorHandler& h,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
          ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileNonUniformCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType >
    SurfaceProfileNonUniformCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                      ::xml_schema::flags f,
                                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileNonUniformCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
          ::xsd::qif2::SurfaceTextureCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceTextureCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType >
    SurfaceTextureCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceTextureCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
        ::xsd::qif2::SymmetryCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
        ::xsd::qif2::SymmetryCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
        ::xsd::qif2::SymmetryCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
        ::xsd::qif2::SymmetryCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
        ::xsd::qif2::SymmetryCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
        ::xsd::qif2::SymmetryCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
          ::xsd::qif2::SymmetryCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SymmetryCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType >
    SymmetryCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SymmetryCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
        ::xsd::qif2::ThicknessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
        ::xsd::qif2::ThicknessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
        ::xsd::qif2::ThicknessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
        ::xsd::qif2::ThicknessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
        ::xsd::qif2::ThicknessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
        ::xsd::qif2::ThicknessCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
          ::xsd::qif2::ThicknessCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThicknessCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType >
    ThicknessCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThicknessCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
        ::xsd::qif2::ThreadCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
        ::xsd::qif2::ThreadCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
        ::xsd::qif2::ThreadCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
        ::xsd::qif2::ThreadCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
        ::xsd::qif2::ThreadCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
        ::xsd::qif2::ThreadCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
          ::xsd::qif2::ThreadCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThreadCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType >
    ThreadCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThreadCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::TotalRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::TotalRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::TotalRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::TotalRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::TotalRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
        ::xsd::qif2::TotalRunoutCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
          ::xsd::qif2::TotalRunoutCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "TotalRunoutCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType >
    TotalRunoutCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "TotalRunoutCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::std::string& u,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::std::string& u,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::std::string& u,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xercesc::InputSource& i,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xercesc::InputSource& i,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xercesc::InputSource& i,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedAttributeCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAttributeCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType >
    UserDefinedAttributeCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAttributeCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedLinearCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedLinearCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType >
    UserDefinedLinearCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedLinearCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::std::string& u,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::std::string& u,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::std::string& u,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xercesc::InputSource& i,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xercesc::InputSource& i,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xercesc::InputSource& i,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedAngularCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAngularCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType >
    UserDefinedAngularCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAngularCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::std::string& u,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::std::string& u,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::std::string& u,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::InputSource& i,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::InputSource& i,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xercesc::InputSource& i,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTemperatureCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType >
    UserDefinedTemperatureCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTemperatureCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedAreaCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAreaCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType >
    UserDefinedAreaCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAreaCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedForceCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedForceCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType >
    UserDefinedForceCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedForceCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedMassCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedMassCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType >
    UserDefinedMassCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedMassCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::std::string& u,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::std::string& u,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::std::string& u,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xercesc::InputSource& i,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xercesc::InputSource& i,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xercesc::InputSource& i,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedPressureCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedPressureCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType >
    UserDefinedPressureCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedPressureCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedSpeedCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedSpeedCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType >
    UserDefinedSpeedCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedSpeedCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedTimeCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTimeCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType >
    UserDefinedTimeCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTimeCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
          ::xsd::qif2::UserDefinedUnitCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedUnitCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType >
    UserDefinedUnitCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedUnitCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
        ::xsd::qif2::WidthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
        ::xsd::qif2::WidthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
        ::xsd::qif2::WidthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicDefinition (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicDefinition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
        ::xsd::qif2::WidthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
        ::xsd::qif2::WidthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
        ::xsd::qif2::WidthCharacteristicDefinition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
          ::xsd::qif2::WidthCharacteristicDefinition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WidthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType >
    WidthCharacteristicDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "WidthCharacteristicDefinition" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicDefinitionType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicDefinitionType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicDefinition",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
        ::xsd::qif2::CharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
        ::xsd::qif2::CharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
        ::xsd::qif2::CharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
        ::xsd::qif2::CharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
        ::xsd::qif2::CharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
        ::xsd::qif2::CharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
          ::xsd::qif2::CharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicNominalBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType >
    CharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicNominalBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicNominalBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
        ::xsd::qif2::AngleBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
          ::xsd::qif2::AngleBetweenCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleBetweenCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType >
    AngleBetweenCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleBetweenCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
        ::xsd::qif2::AngleCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
        ::xsd::qif2::AngleCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
        ::xsd::qif2::AngleCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
        ::xsd::qif2::AngleCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
        ::xsd::qif2::AngleCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
        ::xsd::qif2::AngleCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
          ::xsd::qif2::AngleCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType >
    AngleCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
          ::xsd::qif2::AngularCoordinateCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularCoordinateCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType >
    AngularCoordinateCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularCoordinateCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
        ::xsd::qif2::AngleFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
        ::xsd::qif2::AngleFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
        ::xsd::qif2::AngleFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
        ::xsd::qif2::AngleFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
        ::xsd::qif2::AngleFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
        ::xsd::qif2::AngleFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
          ::xsd::qif2::AngleFromCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleFromCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType >
    AngleFromCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleFromCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
        ::xsd::qif2::AngularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
        ::xsd::qif2::AngularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
        ::xsd::qif2::AngularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
        ::xsd::qif2::AngularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
        ::xsd::qif2::AngularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
        ::xsd::qif2::AngularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
          ::xsd::qif2::AngularityCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType >
    AngularityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
        ::xsd::qif2::ChordCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
        ::xsd::qif2::ChordCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
        ::xsd::qif2::ChordCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
        ::xsd::qif2::ChordCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
        ::xsd::qif2::ChordCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
        ::xsd::qif2::ChordCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
          ::xsd::qif2::ChordCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ChordCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType >
    ChordCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ChordCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
        ::xsd::qif2::CircularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
        ::xsd::qif2::CircularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
        ::xsd::qif2::CircularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
        ::xsd::qif2::CircularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
        ::xsd::qif2::CircularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
        ::xsd::qif2::CircularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
          ::xsd::qif2::CircularityCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType >
    CircularityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
        ::xsd::qif2::CircularRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
          ::xsd::qif2::CircularRunoutCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularRunoutCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType >
    CircularRunoutCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularRunoutCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
        ::xsd::qif2::ConcentricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
        ::xsd::qif2::ConcentricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
        ::xsd::qif2::ConcentricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
        ::xsd::qif2::ConcentricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
        ::xsd::qif2::ConcentricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
        ::xsd::qif2::ConcentricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
          ::xsd::qif2::ConcentricityCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConcentricityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType >
    ConcentricityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ConcentricityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
        ::xsd::qif2::CurveLengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
        ::xsd::qif2::CurveLengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
        ::xsd::qif2::CurveLengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
        ::xsd::qif2::CurveLengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
        ::xsd::qif2::CurveLengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
        ::xsd::qif2::CurveLengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
          ::xsd::qif2::CurveLengthCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CurveLengthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType >
    CurveLengthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CurveLengthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
        ::xsd::qif2::CylindricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
        ::xsd::qif2::CylindricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
        ::xsd::qif2::CylindricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
        ::xsd::qif2::CylindricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
        ::xsd::qif2::CylindricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
        ::xsd::qif2::CylindricityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
          ::xsd::qif2::CylindricityCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CylindricityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType >
    CylindricityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CylindricityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
        ::xsd::qif2::DepthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
        ::xsd::qif2::DepthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
        ::xsd::qif2::DepthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
        ::xsd::qif2::DepthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
        ::xsd::qif2::DepthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
        ::xsd::qif2::DepthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
          ::xsd::qif2::DepthCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DepthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType >
    DepthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DepthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
        ::xsd::qif2::DiameterCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
        ::xsd::qif2::DiameterCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
        ::xsd::qif2::DiameterCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
        ::xsd::qif2::DiameterCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
        ::xsd::qif2::DiameterCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
        ::xsd::qif2::DiameterCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
          ::xsd::qif2::DiameterCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DiameterCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType >
    DiameterCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DiameterCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
          ::xsd::qif2::DistanceBetweenCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceBetweenCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType >
    DistanceBetweenCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceBetweenCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
        ::xsd::qif2::DistanceFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
        ::xsd::qif2::DistanceFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
        ::xsd::qif2::DistanceFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
        ::xsd::qif2::DistanceFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
        ::xsd::qif2::DistanceFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
        ::xsd::qif2::DistanceFromCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
          ::xsd::qif2::DistanceFromCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceFromCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType >
    DistanceFromCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceFromCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
        ::xsd::qif2::FlatnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
        ::xsd::qif2::FlatnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
        ::xsd::qif2::FlatnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
        ::xsd::qif2::FlatnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
        ::xsd::qif2::FlatnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
        ::xsd::qif2::FlatnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
          ::xsd::qif2::FlatnessCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FlatnessCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType >
    FlatnessCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FlatnessCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
        ::xsd::qif2::HeightCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
        ::xsd::qif2::HeightCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
        ::xsd::qif2::HeightCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
        ::xsd::qif2::HeightCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
        ::xsd::qif2::HeightCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
        ::xsd::qif2::HeightCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
          ::xsd::qif2::HeightCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "HeightCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType >
    HeightCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "HeightCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
        ::xsd::qif2::LengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
        ::xsd::qif2::LengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
        ::xsd::qif2::LengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
        ::xsd::qif2::LengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
        ::xsd::qif2::LengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
        ::xsd::qif2::LengthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
          ::xsd::qif2::LengthCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LengthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType >
    LengthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LengthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
          ::xsd::qif2::LinearCoordinateCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LinearCoordinateCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType >
    LinearCoordinateCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LinearCoordinateCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
        ::xsd::qif2::LineProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
        ::xsd::qif2::LineProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
        ::xsd::qif2::LineProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
        ::xsd::qif2::LineProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
        ::xsd::qif2::LineProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
        ::xsd::qif2::LineProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
          ::xsd::qif2::LineProfileCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LineProfileCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType >
    LineProfileCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LineProfileCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
        ::xsd::qif2::ParallelismCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
        ::xsd::qif2::ParallelismCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
        ::xsd::qif2::ParallelismCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
        ::xsd::qif2::ParallelismCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
        ::xsd::qif2::ParallelismCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
        ::xsd::qif2::ParallelismCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
          ::xsd::qif2::ParallelismCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ParallelismCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType >
    ParallelismCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ParallelismCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
        ::xsd::qif2::PerpendicularityCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
          ::xsd::qif2::PerpendicularityCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PerpendicularityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType >
    PerpendicularityCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PerpendicularityCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
        ::xsd::qif2::PointProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
        ::xsd::qif2::PointProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
        ::xsd::qif2::PointProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
        ::xsd::qif2::PointProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
        ::xsd::qif2::PointProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
        ::xsd::qif2::PointProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
          ::xsd::qif2::PointProfileCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PointProfileCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType >
    PointProfileCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PointProfileCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
        ::xsd::qif2::PositionCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
        ::xsd::qif2::PositionCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
        ::xsd::qif2::PositionCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
        ::xsd::qif2::PositionCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
        ::xsd::qif2::PositionCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
        ::xsd::qif2::PositionCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
          ::xsd::qif2::PositionCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PositionCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType >
    PositionCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PositionCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
        ::xsd::qif2::RadiusCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
        ::xsd::qif2::RadiusCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
        ::xsd::qif2::RadiusCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
        ::xsd::qif2::RadiusCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
        ::xsd::qif2::RadiusCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
        ::xsd::qif2::RadiusCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
          ::xsd::qif2::RadiusCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RadiusCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType >
    RadiusCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "RadiusCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
        ::xsd::qif2::SquareCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
        ::xsd::qif2::SquareCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
        ::xsd::qif2::SquareCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
        ::xsd::qif2::SquareCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
        ::xsd::qif2::SquareCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
        ::xsd::qif2::SquareCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
          ::xsd::qif2::SquareCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SquareCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType >
    SquareCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SquareCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
        ::xsd::qif2::StraightnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
        ::xsd::qif2::StraightnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
        ::xsd::qif2::StraightnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
        ::xsd::qif2::StraightnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
        ::xsd::qif2::StraightnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
        ::xsd::qif2::StraightnessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
          ::xsd::qif2::StraightnessCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "StraightnessCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType >
    StraightnessCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "StraightnessCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
          ::xsd::qif2::SurfaceProfileCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType >
    SurfaceProfileCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::std::string& u,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::std::string& u,
                                                   ::xml_schema::error_handler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::std::string& u,
                                                   ::xercesc::DOMErrorHandler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   ::xml_schema::error_handler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   ::xercesc::DOMErrorHandler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   const ::std::string& sid,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   const ::std::string& sid,
                                                   ::xml_schema::error_handler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::std::istream& is,
                                                   const ::std::string& sid,
                                                   ::xercesc::DOMErrorHandler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::InputSource& i,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::InputSource& i,
                                                   ::xml_schema::error_handler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xercesc::InputSource& i,
                                                   ::xercesc::DOMErrorHandler& h,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
          ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileNonUniformCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType >
    SurfaceProfileNonUniformCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                   ::xml_schema::flags f,
                                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileNonUniformCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
          ::xsd::qif2::SurfaceTextureCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceTextureCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType >
    SurfaceTextureCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceTextureCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
        ::xsd::qif2::SymmetryCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
        ::xsd::qif2::SymmetryCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
        ::xsd::qif2::SymmetryCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
        ::xsd::qif2::SymmetryCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
        ::xsd::qif2::SymmetryCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
        ::xsd::qif2::SymmetryCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
          ::xsd::qif2::SymmetryCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SymmetryCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType >
    SymmetryCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SymmetryCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
        ::xsd::qif2::ThicknessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
        ::xsd::qif2::ThicknessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
        ::xsd::qif2::ThicknessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
        ::xsd::qif2::ThicknessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
        ::xsd::qif2::ThicknessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
        ::xsd::qif2::ThicknessCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
          ::xsd::qif2::ThicknessCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThicknessCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType >
    ThicknessCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThicknessCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
        ::xsd::qif2::ThreadCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
        ::xsd::qif2::ThreadCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
        ::xsd::qif2::ThreadCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
        ::xsd::qif2::ThreadCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
        ::xsd::qif2::ThreadCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
        ::xsd::qif2::ThreadCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
          ::xsd::qif2::ThreadCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThreadCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType >
    ThreadCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThreadCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
        ::xsd::qif2::TotalRunoutCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
          ::xsd::qif2::TotalRunoutCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "TotalRunoutCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType >
    TotalRunoutCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "TotalRunoutCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedAttributeCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAttributeCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType >
    UserDefinedAttributeCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAttributeCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedLinearCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedLinearCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType >
    UserDefinedLinearCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedLinearCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedAngularCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAngularCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType >
    UserDefinedAngularCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAngularCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::std::string& u,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::std::string& u,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::std::string& u,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xercesc::InputSource& i,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xercesc::InputSource& i,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xercesc::InputSource& i,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedTemperatureCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTemperatureCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType >
    UserDefinedTemperatureCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTemperatureCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedAreaCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAreaCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType >
    UserDefinedAreaCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAreaCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedForceCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedForceCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType >
    UserDefinedForceCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedForceCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedMassCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedMassCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType >
    UserDefinedMassCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedMassCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedPressureCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedPressureCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType >
    UserDefinedPressureCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedPressureCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedSpeedCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedSpeedCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType >
    UserDefinedSpeedCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedSpeedCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedTimeCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTimeCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType >
    UserDefinedTimeCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTimeCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
          ::xsd::qif2::UserDefinedUnitCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedUnitCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType >
    UserDefinedUnitCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedUnitCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
        ::xsd::qif2::WidthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
        ::xsd::qif2::WidthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
        ::xsd::qif2::WidthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicNominal (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicNominal (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
        ::xsd::qif2::WidthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
        ::xsd::qif2::WidthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
        ::xsd::qif2::WidthCharacteristicNominal (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
          ::xsd::qif2::WidthCharacteristicNominal (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WidthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType >
    WidthCharacteristicNominal (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "WidthCharacteristicNominal" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicNominalType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicNominalType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicNominal",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
        ::xsd::qif2::CharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
        ::xsd::qif2::CharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
        ::xsd::qif2::CharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
        ::xsd::qif2::CharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
        ::xsd::qif2::CharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
        ::xsd::qif2::CharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
          ::xsd::qif2::CharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicActualBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType >
    CharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicActualBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicActualBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
        ::xsd::qif2::AngleBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
        ::xsd::qif2::AngleBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
        ::xsd::qif2::AngleBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
        ::xsd::qif2::AngleBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
        ::xsd::qif2::AngleBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
        ::xsd::qif2::AngleBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
          ::xsd::qif2::AngleBetweenCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleBetweenCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType >
    AngleBetweenCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleBetweenCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
        ::xsd::qif2::AngleCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
        ::xsd::qif2::AngleCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
        ::xsd::qif2::AngleCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
        ::xsd::qif2::AngleCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
        ::xsd::qif2::AngleCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
        ::xsd::qif2::AngleCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
          ::xsd::qif2::AngleCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType >
    AngleCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
          ::xsd::qif2::AngularCoordinateCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularCoordinateCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType >
    AngularCoordinateCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularCoordinateCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
        ::xsd::qif2::AngleFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
        ::xsd::qif2::AngleFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
        ::xsd::qif2::AngleFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
        ::xsd::qif2::AngleFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
        ::xsd::qif2::AngleFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
        ::xsd::qif2::AngleFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
          ::xsd::qif2::AngleFromCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleFromCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType >
    AngleFromCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleFromCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
        ::xsd::qif2::AngularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
        ::xsd::qif2::AngularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
        ::xsd::qif2::AngularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
        ::xsd::qif2::AngularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
        ::xsd::qif2::AngularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
        ::xsd::qif2::AngularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
          ::xsd::qif2::AngularityCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType >
    AngularityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
        ::xsd::qif2::ChordCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
        ::xsd::qif2::ChordCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
        ::xsd::qif2::ChordCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
        ::xsd::qif2::ChordCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
        ::xsd::qif2::ChordCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
        ::xsd::qif2::ChordCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
          ::xsd::qif2::ChordCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ChordCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType >
    ChordCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ChordCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
        ::xsd::qif2::CircularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
        ::xsd::qif2::CircularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
        ::xsd::qif2::CircularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
        ::xsd::qif2::CircularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
        ::xsd::qif2::CircularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
        ::xsd::qif2::CircularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
          ::xsd::qif2::CircularityCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType >
    CircularityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
        ::xsd::qif2::CircularRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
        ::xsd::qif2::CircularRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
        ::xsd::qif2::CircularRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
        ::xsd::qif2::CircularRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
        ::xsd::qif2::CircularRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
        ::xsd::qif2::CircularRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
          ::xsd::qif2::CircularRunoutCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularRunoutCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType >
    CircularRunoutCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularRunoutCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
        ::xsd::qif2::ConcentricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
        ::xsd::qif2::ConcentricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
        ::xsd::qif2::ConcentricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
        ::xsd::qif2::ConcentricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
        ::xsd::qif2::ConcentricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
        ::xsd::qif2::ConcentricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
          ::xsd::qif2::ConcentricityCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConcentricityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType >
    ConcentricityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ConcentricityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
        ::xsd::qif2::CurveLengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
        ::xsd::qif2::CurveLengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
        ::xsd::qif2::CurveLengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
        ::xsd::qif2::CurveLengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
        ::xsd::qif2::CurveLengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
        ::xsd::qif2::CurveLengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
          ::xsd::qif2::CurveLengthCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CurveLengthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType >
    CurveLengthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CurveLengthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
        ::xsd::qif2::CylindricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
        ::xsd::qif2::CylindricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
        ::xsd::qif2::CylindricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
        ::xsd::qif2::CylindricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
        ::xsd::qif2::CylindricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
        ::xsd::qif2::CylindricityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
          ::xsd::qif2::CylindricityCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CylindricityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType >
    CylindricityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CylindricityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
        ::xsd::qif2::DepthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
        ::xsd::qif2::DepthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
        ::xsd::qif2::DepthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
        ::xsd::qif2::DepthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
        ::xsd::qif2::DepthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
        ::xsd::qif2::DepthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
          ::xsd::qif2::DepthCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DepthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType >
    DepthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DepthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
        ::xsd::qif2::DiameterCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
        ::xsd::qif2::DiameterCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
        ::xsd::qif2::DiameterCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
        ::xsd::qif2::DiameterCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
        ::xsd::qif2::DiameterCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
        ::xsd::qif2::DiameterCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
          ::xsd::qif2::DiameterCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DiameterCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType >
    DiameterCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DiameterCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
          ::xsd::qif2::DistanceBetweenCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceBetweenCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType >
    DistanceBetweenCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceBetweenCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
        ::xsd::qif2::DistanceFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
        ::xsd::qif2::DistanceFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
        ::xsd::qif2::DistanceFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
        ::xsd::qif2::DistanceFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
        ::xsd::qif2::DistanceFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
        ::xsd::qif2::DistanceFromCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
          ::xsd::qif2::DistanceFromCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceFromCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType >
    DistanceFromCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceFromCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
        ::xsd::qif2::FlatnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
        ::xsd::qif2::FlatnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
        ::xsd::qif2::FlatnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
        ::xsd::qif2::FlatnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
        ::xsd::qif2::FlatnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
        ::xsd::qif2::FlatnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
          ::xsd::qif2::FlatnessCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FlatnessCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType >
    FlatnessCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FlatnessCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
        ::xsd::qif2::HeightCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
        ::xsd::qif2::HeightCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
        ::xsd::qif2::HeightCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
        ::xsd::qif2::HeightCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
        ::xsd::qif2::HeightCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
        ::xsd::qif2::HeightCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
          ::xsd::qif2::HeightCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "HeightCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType >
    HeightCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "HeightCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
        ::xsd::qif2::LengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
        ::xsd::qif2::LengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
        ::xsd::qif2::LengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
        ::xsd::qif2::LengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
        ::xsd::qif2::LengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
        ::xsd::qif2::LengthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
          ::xsd::qif2::LengthCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LengthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType >
    LengthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LengthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
          ::xsd::qif2::LinearCoordinateCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LinearCoordinateCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType >
    LinearCoordinateCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LinearCoordinateCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
        ::xsd::qif2::LineProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
        ::xsd::qif2::LineProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
        ::xsd::qif2::LineProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
        ::xsd::qif2::LineProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
        ::xsd::qif2::LineProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
        ::xsd::qif2::LineProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
          ::xsd::qif2::LineProfileCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LineProfileCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType >
    LineProfileCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LineProfileCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
        ::xsd::qif2::ParallelismCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
        ::xsd::qif2::ParallelismCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
        ::xsd::qif2::ParallelismCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
        ::xsd::qif2::ParallelismCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
        ::xsd::qif2::ParallelismCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
        ::xsd::qif2::ParallelismCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
          ::xsd::qif2::ParallelismCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ParallelismCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType >
    ParallelismCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ParallelismCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
        ::xsd::qif2::PerpendicularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
        ::xsd::qif2::PerpendicularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
        ::xsd::qif2::PerpendicularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
        ::xsd::qif2::PerpendicularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
        ::xsd::qif2::PerpendicularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
        ::xsd::qif2::PerpendicularityCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
          ::xsd::qif2::PerpendicularityCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PerpendicularityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType >
    PerpendicularityCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PerpendicularityCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
        ::xsd::qif2::PointProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
        ::xsd::qif2::PointProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
        ::xsd::qif2::PointProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
        ::xsd::qif2::PointProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
        ::xsd::qif2::PointProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
        ::xsd::qif2::PointProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
          ::xsd::qif2::PointProfileCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PointProfileCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType >
    PointProfileCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PointProfileCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
        ::xsd::qif2::PositionCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
        ::xsd::qif2::PositionCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
        ::xsd::qif2::PositionCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
        ::xsd::qif2::PositionCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
        ::xsd::qif2::PositionCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
        ::xsd::qif2::PositionCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
          ::xsd::qif2::PositionCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PositionCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType >
    PositionCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PositionCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
        ::xsd::qif2::RadiusCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
        ::xsd::qif2::RadiusCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
        ::xsd::qif2::RadiusCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
        ::xsd::qif2::RadiusCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
        ::xsd::qif2::RadiusCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
        ::xsd::qif2::RadiusCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
          ::xsd::qif2::RadiusCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RadiusCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType >
    RadiusCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "RadiusCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
        ::xsd::qif2::SquareCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
        ::xsd::qif2::SquareCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
        ::xsd::qif2::SquareCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
        ::xsd::qif2::SquareCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
        ::xsd::qif2::SquareCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
        ::xsd::qif2::SquareCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
          ::xsd::qif2::SquareCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SquareCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType >
    SquareCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SquareCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
        ::xsd::qif2::StraightnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
        ::xsd::qif2::StraightnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
        ::xsd::qif2::StraightnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
        ::xsd::qif2::StraightnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
        ::xsd::qif2::StraightnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
        ::xsd::qif2::StraightnessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
          ::xsd::qif2::StraightnessCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "StraightnessCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType >
    StraightnessCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "StraightnessCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
          ::xsd::qif2::SurfaceProfileCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType >
    SurfaceProfileCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::std::string& u,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::std::string& u,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::std::string& u,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::InputSource& i,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::InputSource& i,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xercesc::InputSource& i,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (const ::xercesc::DOMDocument& d,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
          ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileNonUniformCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType >
    SurfaceProfileNonUniformCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileNonUniformCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
          ::xsd::qif2::SurfaceTextureCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceTextureCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType >
    SurfaceTextureCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceTextureCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
        ::xsd::qif2::SymmetryCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
        ::xsd::qif2::SymmetryCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
        ::xsd::qif2::SymmetryCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
        ::xsd::qif2::SymmetryCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
        ::xsd::qif2::SymmetryCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
        ::xsd::qif2::SymmetryCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
          ::xsd::qif2::SymmetryCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SymmetryCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType >
    SymmetryCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SymmetryCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
        ::xsd::qif2::ThicknessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
        ::xsd::qif2::ThicknessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
        ::xsd::qif2::ThicknessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
        ::xsd::qif2::ThicknessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
        ::xsd::qif2::ThicknessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
        ::xsd::qif2::ThicknessCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
          ::xsd::qif2::ThicknessCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThicknessCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType >
    ThicknessCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThicknessCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
        ::xsd::qif2::ThreadCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
        ::xsd::qif2::ThreadCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
        ::xsd::qif2::ThreadCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
        ::xsd::qif2::ThreadCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
        ::xsd::qif2::ThreadCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
        ::xsd::qif2::ThreadCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
          ::xsd::qif2::ThreadCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThreadCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType >
    ThreadCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThreadCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
        ::xsd::qif2::TotalRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
        ::xsd::qif2::TotalRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
        ::xsd::qif2::TotalRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
        ::xsd::qif2::TotalRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
        ::xsd::qif2::TotalRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
        ::xsd::qif2::TotalRunoutCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
          ::xsd::qif2::TotalRunoutCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "TotalRunoutCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType >
    TotalRunoutCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "TotalRunoutCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedAttributeCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAttributeCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType >
    UserDefinedAttributeCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAttributeCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedLinearCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedLinearCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType >
    UserDefinedLinearCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedLinearCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedAngularCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAngularCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType >
    UserDefinedAngularCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAngularCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::std::string& u,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::std::string& u,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::std::string& u,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xercesc::InputSource& i,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xercesc::InputSource& i,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xercesc::InputSource& i,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (const ::xercesc::DOMDocument& d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedTemperatureCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTemperatureCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType >
    UserDefinedTemperatureCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTemperatureCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedAreaCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAreaCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType >
    UserDefinedAreaCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAreaCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedForceCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedForceCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType >
    UserDefinedForceCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedForceCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedMassCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedMassCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType >
    UserDefinedMassCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedMassCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (const ::xercesc::DOMDocument& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedPressureCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedPressureCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType >
    UserDefinedPressureCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedPressureCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedSpeedCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedSpeedCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType >
    UserDefinedSpeedCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedSpeedCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedTimeCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTimeCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType >
    UserDefinedTimeCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTimeCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
          ::xsd::qif2::UserDefinedUnitCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedUnitCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType >
    UserDefinedUnitCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedUnitCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
        ::xsd::qif2::WidthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
        ::xsd::qif2::WidthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
        ::xsd::qif2::WidthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicActual (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicActual (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
        ::xsd::qif2::WidthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
        ::xsd::qif2::WidthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
        ::xsd::qif2::WidthCharacteristicActual (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
          ::xsd::qif2::WidthCharacteristicActual (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WidthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType >
    WidthCharacteristicActual (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "WidthCharacteristicActual" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicActualType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicActualType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicActual",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
        ::xsd::qif2::CharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
        ::xsd::qif2::CharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
        ::xsd::qif2::CharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
        ::xsd::qif2::CharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
        ::xsd::qif2::CharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
        ::xsd::qif2::CharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
          ::xsd::qif2::CharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicItemBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType >
    CharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CharacteristicItemBaseType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CharacteristicItemBaseType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
        ::xsd::qif2::AngleBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
        ::xsd::qif2::AngleBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
        ::xsd::qif2::AngleBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
        ::xsd::qif2::AngleBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
        ::xsd::qif2::AngleBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
        ::xsd::qif2::AngleBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
          ::xsd::qif2::AngleBetweenCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleBetweenCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType >
    AngleBetweenCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleBetweenCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleBetweenCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleBetweenCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleBetweenCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
        ::xsd::qif2::AngleCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
        ::xsd::qif2::AngleCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
        ::xsd::qif2::AngleCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
        ::xsd::qif2::AngleCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
        ::xsd::qif2::AngleCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
        ::xsd::qif2::AngleCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
          ::xsd::qif2::AngleCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType >
    AngleCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
        ::xsd::qif2::AngularCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
          ::xsd::qif2::AngularCoordinateCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularCoordinateCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType >
    AngularCoordinateCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularCoordinateCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularCoordinateCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularCoordinateCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularCoordinateCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
        ::xsd::qif2::AngleFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
        ::xsd::qif2::AngleFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
        ::xsd::qif2::AngleFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngleFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngleFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
        ::xsd::qif2::AngleFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
        ::xsd::qif2::AngleFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
        ::xsd::qif2::AngleFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
          ::xsd::qif2::AngleFromCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngleFromCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType >
    AngleFromCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngleFromCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngleFromCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngleFromCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngleFromCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
        ::xsd::qif2::AngularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
        ::xsd::qif2::AngularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
        ::xsd::qif2::AngularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::AngularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::AngularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
        ::xsd::qif2::AngularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
        ::xsd::qif2::AngularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
        ::xsd::qif2::AngularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
          ::xsd::qif2::AngularityCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "AngularityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType >
    AngularityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "AngularityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::AngularityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::AngularityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "AngularityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
        ::xsd::qif2::ChordCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
        ::xsd::qif2::ChordCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
        ::xsd::qif2::ChordCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ChordCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ChordCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
        ::xsd::qif2::ChordCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
        ::xsd::qif2::ChordCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
        ::xsd::qif2::ChordCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
          ::xsd::qif2::ChordCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ChordCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType >
    ChordCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ChordCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ChordCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ChordCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ChordCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
        ::xsd::qif2::CircularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
        ::xsd::qif2::CircularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
        ::xsd::qif2::CircularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
        ::xsd::qif2::CircularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
        ::xsd::qif2::CircularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
        ::xsd::qif2::CircularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
          ::xsd::qif2::CircularityCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType >
    CircularityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
        ::xsd::qif2::CircularRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
        ::xsd::qif2::CircularRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
        ::xsd::qif2::CircularRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CircularRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CircularRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
        ::xsd::qif2::CircularRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
        ::xsd::qif2::CircularRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
        ::xsd::qif2::CircularRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
          ::xsd::qif2::CircularRunoutCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CircularRunoutCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType >
    CircularRunoutCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CircularRunoutCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CircularRunoutCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CircularRunoutCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CircularRunoutCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
        ::xsd::qif2::ConcentricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
        ::xsd::qif2::ConcentricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
        ::xsd::qif2::ConcentricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ConcentricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ConcentricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
        ::xsd::qif2::ConcentricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
        ::xsd::qif2::ConcentricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
        ::xsd::qif2::ConcentricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
          ::xsd::qif2::ConcentricityCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConcentricityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType >
    ConcentricityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ConcentricityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ConcentricityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ConcentricityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConcentricityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
        ::xsd::qif2::CurveLengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
        ::xsd::qif2::CurveLengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
        ::xsd::qif2::CurveLengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CurveLengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CurveLengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
        ::xsd::qif2::CurveLengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
        ::xsd::qif2::CurveLengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
        ::xsd::qif2::CurveLengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
          ::xsd::qif2::CurveLengthCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CurveLengthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType >
    CurveLengthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CurveLengthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CurveLengthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CurveLengthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CurveLengthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
        ::xsd::qif2::CylindricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
        ::xsd::qif2::CylindricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
        ::xsd::qif2::CylindricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::CylindricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::CylindricityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
        ::xsd::qif2::CylindricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
        ::xsd::qif2::CylindricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
        ::xsd::qif2::CylindricityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
          ::xsd::qif2::CylindricityCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "CylindricityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType >
    CylindricityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "CylindricityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::CylindricityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::CylindricityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CylindricityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
        ::xsd::qif2::DepthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
        ::xsd::qif2::DepthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
        ::xsd::qif2::DepthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DepthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DepthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
        ::xsd::qif2::DepthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
        ::xsd::qif2::DepthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
        ::xsd::qif2::DepthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
          ::xsd::qif2::DepthCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DepthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType >
    DepthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DepthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DepthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DepthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DepthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
        ::xsd::qif2::DiameterCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
        ::xsd::qif2::DiameterCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
        ::xsd::qif2::DiameterCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DiameterCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DiameterCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
        ::xsd::qif2::DiameterCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
        ::xsd::qif2::DiameterCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
        ::xsd::qif2::DiameterCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
          ::xsd::qif2::DiameterCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DiameterCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType >
    DiameterCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DiameterCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DiameterCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DiameterCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiameterCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceBetweenCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
        ::xsd::qif2::DistanceBetweenCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
          ::xsd::qif2::DistanceBetweenCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceBetweenCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType >
    DistanceBetweenCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceBetweenCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceBetweenCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceBetweenCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceBetweenCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
        ::xsd::qif2::DistanceFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
        ::xsd::qif2::DistanceFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
        ::xsd::qif2::DistanceFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::DistanceFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::DistanceFromCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
        ::xsd::qif2::DistanceFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
        ::xsd::qif2::DistanceFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
        ::xsd::qif2::DistanceFromCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
          ::xsd::qif2::DistanceFromCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "DistanceFromCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType >
    DistanceFromCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "DistanceFromCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::DistanceFromCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::DistanceFromCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DistanceFromCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
        ::xsd::qif2::FlatnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
        ::xsd::qif2::FlatnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
        ::xsd::qif2::FlatnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::FlatnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::FlatnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
        ::xsd::qif2::FlatnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
        ::xsd::qif2::FlatnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
        ::xsd::qif2::FlatnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
          ::xsd::qif2::FlatnessCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "FlatnessCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType >
    FlatnessCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "FlatnessCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::FlatnessCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::FlatnessCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FlatnessCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
        ::xsd::qif2::HeightCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
        ::xsd::qif2::HeightCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
        ::xsd::qif2::HeightCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::HeightCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::HeightCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
        ::xsd::qif2::HeightCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
        ::xsd::qif2::HeightCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
        ::xsd::qif2::HeightCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
          ::xsd::qif2::HeightCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "HeightCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType >
    HeightCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "HeightCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::HeightCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::HeightCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HeightCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
        ::xsd::qif2::LengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
        ::xsd::qif2::LengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
        ::xsd::qif2::LengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LengthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
        ::xsd::qif2::LengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
        ::xsd::qif2::LengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
        ::xsd::qif2::LengthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
          ::xsd::qif2::LengthCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LengthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType >
    LengthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LengthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LengthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LengthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LengthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LinearCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LinearCoordinateCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
        ::xsd::qif2::LinearCoordinateCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
          ::xsd::qif2::LinearCoordinateCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LinearCoordinateCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType >
    LinearCoordinateCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LinearCoordinateCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LinearCoordinateCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LinearCoordinateCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LinearCoordinateCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
        ::xsd::qif2::LineProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
        ::xsd::qif2::LineProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
        ::xsd::qif2::LineProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::LineProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::LineProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
        ::xsd::qif2::LineProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
        ::xsd::qif2::LineProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
        ::xsd::qif2::LineProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
          ::xsd::qif2::LineProfileCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "LineProfileCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType >
    LineProfileCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "LineProfileCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::LineProfileCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::LineProfileCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LineProfileCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
        ::xsd::qif2::ParallelismCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
        ::xsd::qif2::ParallelismCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
        ::xsd::qif2::ParallelismCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ParallelismCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ParallelismCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
        ::xsd::qif2::ParallelismCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
        ::xsd::qif2::ParallelismCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
        ::xsd::qif2::ParallelismCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
          ::xsd::qif2::ParallelismCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ParallelismCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType >
    ParallelismCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ParallelismCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ParallelismCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ParallelismCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ParallelismCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
        ::xsd::qif2::PerpendicularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
        ::xsd::qif2::PerpendicularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
        ::xsd::qif2::PerpendicularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PerpendicularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PerpendicularityCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
        ::xsd::qif2::PerpendicularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
        ::xsd::qif2::PerpendicularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
        ::xsd::qif2::PerpendicularityCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
          ::xsd::qif2::PerpendicularityCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PerpendicularityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType >
    PerpendicularityCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PerpendicularityCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PerpendicularityCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PerpendicularityCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PerpendicularityCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
        ::xsd::qif2::PointProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
        ::xsd::qif2::PointProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
        ::xsd::qif2::PointProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PointProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PointProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
        ::xsd::qif2::PointProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
        ::xsd::qif2::PointProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
        ::xsd::qif2::PointProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
          ::xsd::qif2::PointProfileCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PointProfileCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType >
    PointProfileCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PointProfileCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PointProfileCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PointProfileCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PointProfileCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
        ::xsd::qif2::PositionCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
        ::xsd::qif2::PositionCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
        ::xsd::qif2::PositionCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::PositionCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::PositionCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
        ::xsd::qif2::PositionCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
        ::xsd::qif2::PositionCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
        ::xsd::qif2::PositionCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
          ::xsd::qif2::PositionCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "PositionCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType >
    PositionCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "PositionCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::PositionCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::PositionCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PositionCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
        ::xsd::qif2::RadiusCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
        ::xsd::qif2::RadiusCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
        ::xsd::qif2::RadiusCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::RadiusCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::RadiusCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
        ::xsd::qif2::RadiusCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
        ::xsd::qif2::RadiusCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
        ::xsd::qif2::RadiusCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
          ::xsd::qif2::RadiusCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "RadiusCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType >
    RadiusCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "RadiusCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::RadiusCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::RadiusCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RadiusCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
        ::xsd::qif2::SquareCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
        ::xsd::qif2::SquareCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
        ::xsd::qif2::SquareCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SquareCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SquareCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
        ::xsd::qif2::SquareCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
        ::xsd::qif2::SquareCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
        ::xsd::qif2::SquareCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
          ::xsd::qif2::SquareCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SquareCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType >
    SquareCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SquareCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SquareCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SquareCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SquareCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
        ::xsd::qif2::StraightnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
        ::xsd::qif2::StraightnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
        ::xsd::qif2::StraightnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::StraightnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::StraightnessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
        ::xsd::qif2::StraightnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
        ::xsd::qif2::StraightnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
        ::xsd::qif2::StraightnessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
          ::xsd::qif2::StraightnessCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "StraightnessCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType >
    StraightnessCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "StraightnessCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::StraightnessCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::StraightnessCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StraightnessCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
          ::xsd::qif2::SurfaceProfileCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType >
    SurfaceProfileCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::std::string& u,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::std::string& u,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::std::string& u,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::InputSource& i,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::InputSource& i,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xercesc::InputSource& i,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
        ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (const ::xercesc::DOMDocument& d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
          ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceProfileNonUniformCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType >
    SurfaceProfileNonUniformCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceProfileNonUniformCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceProfileNonUniformCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceProfileNonUniformCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SurfaceTextureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SurfaceTextureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
        ::xsd::qif2::SurfaceTextureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
          ::xsd::qif2::SurfaceTextureCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SurfaceTextureCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType >
    SurfaceTextureCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SurfaceTextureCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SurfaceTextureCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SurfaceTextureCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SurfaceTextureCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
        ::xsd::qif2::SymmetryCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
        ::xsd::qif2::SymmetryCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
        ::xsd::qif2::SymmetryCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::SymmetryCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::SymmetryCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
        ::xsd::qif2::SymmetryCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
        ::xsd::qif2::SymmetryCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
        ::xsd::qif2::SymmetryCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
          ::xsd::qif2::SymmetryCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SymmetryCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType >
    SymmetryCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SymmetryCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::SymmetryCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::SymmetryCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SymmetryCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
        ::xsd::qif2::ThicknessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
        ::xsd::qif2::ThicknessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
        ::xsd::qif2::ThicknessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThicknessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThicknessCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
        ::xsd::qif2::ThicknessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
        ::xsd::qif2::ThicknessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
        ::xsd::qif2::ThicknessCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
          ::xsd::qif2::ThicknessCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThicknessCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType >
    ThicknessCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThicknessCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThicknessCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThicknessCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThicknessCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
        ::xsd::qif2::ThreadCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
        ::xsd::qif2::ThreadCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
        ::xsd::qif2::ThreadCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::ThreadCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::ThreadCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
        ::xsd::qif2::ThreadCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
        ::xsd::qif2::ThreadCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
        ::xsd::qif2::ThreadCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
          ::xsd::qif2::ThreadCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ThreadCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType >
    ThreadCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ThreadCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::ThreadCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::ThreadCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
        ::xsd::qif2::TotalRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
        ::xsd::qif2::TotalRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
        ::xsd::qif2::TotalRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::TotalRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::TotalRunoutCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
        ::xsd::qif2::TotalRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
        ::xsd::qif2::TotalRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
        ::xsd::qif2::TotalRunoutCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
          ::xsd::qif2::TotalRunoutCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "TotalRunoutCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType >
    TotalRunoutCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "TotalRunoutCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::TotalRunoutCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::TotalRunoutCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalRunoutCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAttributeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (const ::xercesc::DOMDocument& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedAttributeCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAttributeCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType >
    UserDefinedAttributeCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAttributeCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAttributeCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAttributeCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::std::string& u,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::std::string& u,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::std::string& u,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedLinearCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::std::istream& is,
                                         const ::std::string& sid,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedLinearCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xercesc::InputSource& i,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xercesc::InputSource& i,
                                         ::xml_schema::error_handler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xercesc::InputSource& i,
                                         ::xercesc::DOMErrorHandler& h,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedLinearCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (const ::xercesc::DOMDocument& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedLinearCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedLinearCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType >
    UserDefinedLinearCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                         ::xml_schema::flags f,
                                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedLinearCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedLinearCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedLinearCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedLinearCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAngularCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAngularCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAngularCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (const ::xercesc::DOMDocument& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedAngularCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAngularCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType >
    UserDefinedAngularCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAngularCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAngularCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAngularCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAngularCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (const ::xercesc::DOMDocument& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedTemperatureCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTemperatureCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType >
    UserDefinedTemperatureCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTemperatureCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTemperatureCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTemperatureCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedAreaCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedAreaCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedAreaCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedAreaCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedAreaCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType >
    UserDefinedAreaCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedAreaCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedAreaCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedAreaCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedAreaCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedForceCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedForceCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedForceCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedForceCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedForceCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType >
    UserDefinedForceCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedForceCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedForceCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedForceCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedForceCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedMassCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedMassCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedMassCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedMassCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedMassCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType >
    UserDefinedMassCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedMassCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedMassCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedMassCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedMassCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedPressureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedPressureCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedPressureCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (const ::xercesc::DOMDocument& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedPressureCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedPressureCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType >
    UserDefinedPressureCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedPressureCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedPressureCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedPressureCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedPressureCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedSpeedCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (const ::xercesc::DOMDocument& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedSpeedCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedSpeedCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType >
    UserDefinedSpeedCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedSpeedCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedSpeedCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedSpeedCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedTimeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedTimeCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedTimeCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedTimeCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedTimeCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType >
    UserDefinedTimeCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedTimeCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedTimeCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedTimeCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedTimeCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::UserDefinedUnitCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::UserDefinedUnitCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
        ::xsd::qif2::UserDefinedUnitCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (const ::xercesc::DOMDocument& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
          ::xsd::qif2::UserDefinedUnitCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "UserDefinedUnitCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType >
    UserDefinedUnitCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "UserDefinedUnitCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::UserDefinedUnitCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::UserDefinedUnitCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserDefinedUnitCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
        ::xsd::qif2::WidthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
        ::xsd::qif2::WidthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
        ::xsd::qif2::WidthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::xsd::qif2::WidthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicItem (isrc, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::xsd::qif2::WidthCharacteristicItem (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
        ::xsd::qif2::WidthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
        ::xsd::qif2::WidthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
        ::xsd::qif2::WidthCharacteristicItem (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
          ::xsd::qif2::WidthCharacteristicItem (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "WidthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }

    ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType >
    WidthCharacteristicItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "WidthCharacteristicItem" &&
          n.namespace_ () == "http://qifstandards.org/xsd/qif2")
      {
        ::std::auto_ptr< ::xsd::qif2::WidthCharacteristicItemType > r (
          ::xsd::cxx::tree::traits< ::xsd::qif2::WidthCharacteristicItemType, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WidthCharacteristicItem",
        "http://qifstandards.org/xsd/qif2");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

