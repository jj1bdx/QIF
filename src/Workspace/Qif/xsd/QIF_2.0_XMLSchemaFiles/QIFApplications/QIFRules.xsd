<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is part of QIF 2.0, an open, industry-wide standard -->
<!-- established by the Dimensional Metrology Standards Consortium.    -->
<!-- This document shall not be used in any manner to claim any        -->
<!-- proprietary rights to such information, such as rights to a       -->
<!-- patent, trademark, or copyright.                                  -->

<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://qifstandards.org/xsd/qif2"
  xmlns:t="http://qifstandards.org/xsd/qif2"
  targetNamespace="http://qifstandards.org/xsd/qif2"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  version="2.0.0">

  <xs:include schemaLocation="../QIFLibrary/Expressions.xsd"/>
  <xs:include schemaLocation="../QIFLibrary/IntermediatesPMI.xsd"/>

  <xs:element name="Rules"
    type="QIFRulesType"/>

  <xs:complexType name="QIFRulesType">
    <xs:annotation>
      <xs:documentation>
        The QIFRulesType defines a collection of sets of rules for
        selecting quality measurement items. Currently it contains a
        complete model of rules for selecting the quantity of hit points
        and/or the strategy for selecting hit points and/or a substitute
        feature algorithm. It also contains a stub model of rules for
        selecting DMEs. Rules sets for other types of decisions might be
        added.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Version"
        type="VersionType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Version element gives version information about
            the rules.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="RulesUnits"
        type="OtherUnitsType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional RulesUnits element defines the units that apply in
            the FeatureRules. If this element does not exist, the units are
            the primary units given in the FileUnits element of the
            QIFDocument. Feature and characteristic information expressed
            elsewhere in other units must be converted to these units while
            using rules.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="FeatureRules"
        type="FeatureRulesType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional FeatureRules element defines rules for
            selecting the quantity of hit points for a feature and/or
            the strategy to use for selecting the points and/or the
            substitute feature algorithm to use.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DMESelectionRules"
        type="DMESelectionRulesType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional DMESelectionRules element defines a stub for a set
            of rules for selecting DMEs.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="FeatureRulesType">
    <xs:annotation>
      <xs:documentation>
        The FeatureRulesType defines two methods of setting the quantity of
        hit points to use for a feature and/or a strategy to use for
        selecting the hit points and/or the substitute feature algorithm to
        use to fit the feature to the hit points. If the
        IfThenElseFeatureRules and MaxFeatureRules are both used to find
        the quantity of points for a feature, both sets of rules should be
        applied and the maximum value should be used. Also if both are used
        and they give different point sampling strategies or different
        substitute feature algorithms, the evaluating system may use any of
        those strategies or algorithms.

        Since a given feature F may be associated with zero to many
        characteristics C1 ... Cn, if there is any characteristic
        associated with F, the rules should be evaluated for each FCi pair,
        and the number or density of hit points to use for F should be set
        to the maximum value.

        If a number of hit points must be compared with a density of hit
        points, the evaluating system should find and use the area of the
        feature to convert density values to numbers of points.

        The rules are to be evaluated in an environment in which the
        SamplingRigor has been set to some positive integer less than or
        equal to the SamplingRigorMax element so that the
        SamplingRigorIsType Boolean expression can be evaluated.
        SamplingRigor values start at 1 and end at the value of the
        SamplingRigorMax element. For example, if SamplingRigorMax is 2,
        the values 1 and 2 might represent LOW and HIGH, respectively. If
        the SamplingRigorMax is 4, the values 1 through 4 might represent
        LOW, MEDIUM, HIGH, and SUPER, respectively.

        Numerical quantities that are constants, feature parameters, or
        characteristic parameters may be used in conditions.

        The numerical quantities FeatureLength and FeatureArea may also be
        used in conditions. The evaluating system must set the value of
        FeatureLength for the feature being processed if FeatureLength is
        used in any condition. The evaluating system must set the value of
        FeatureArea for the feature being processed if FeatureArea is used
        in any condition.

        The rules are not intended for picking the quantity of points or
        point sampling strategy to use for measuring a characteristic that
        is not associated with any feature.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SamplingRigorMax"
        type="xs:unsignedInt">
        <xs:annotation>
          <xs:documentation>
            The SamplingRigorMax element is the inclusive upper limit on
            point levels.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IfThenElseFeatureRules"
        type="IfThenElseFeatureRulesType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional IfThenElseFeatureRules element is a set of rules
            for selecting the number or density of hit points for a feature
            and/or a strategy to use for selecting the hit points and/or a
            substitute feature algorithm. The first rule that applies is
            used to set the quantity of hit points and/or the strategy
            and/or the algorithm.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MaxFeatureRules"
        type="MaxFeatureRulesType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional MaxFeatureRules element is a set of rules for
            selecting the number or density of hit points for a feature
            and/or a strategy to use for selecting the hit points and/or a
            substitute feature algorithm. The largest value returned by all
            rules that apply is used to set the quantity of hit points. If
            the rules that apply give different point sampling strategies
            or substitute feature algorithms, the evaluating system may use
            any of those strategies or algorithms.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="QIFRuleBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The abstract QIFRuleBaseType defines the base type for all QIF
        rules.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name"
      type="xs:token">
      <xs:annotation>
        <xs:documentation>
          The optional name attribute is the name of the rule.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="IfThenElseFeatureRulesType">
    <xs:annotation>
      <xs:documentation>
        The IfThenElseFeatureRulesType defines a set of rules for selecting
        (1) the number or density of hit points for a single feature,
        possibly with an associated characteristic, and/or (2) a strategy
        for selecting the points, and/or (3) the substitute feature
        algorithm to use to fit the feature to the hit points. To evaluate
        an IfThenElseFeatureRulesType, each IfThenFeatureRule should be
        considered in order until the 'if' part of one of them evaluates to
        true, at which point the 'then' part of the rule should be
        evaluated and the value of the point quantity and or point sampling
        strategy returned. In this case, the remainder of the
        IfThenFeatureRules should be ignored. If the 'if' part of no
        IfThenFeatureRule evaluates to true, then the 'then' part of the
        Else should be evaluated and returned.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="IfThenFeatureRule"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each IfThenFeatureRule element defines a conditional rule for
            selecting the number or density of hit points.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Else"
        type="ElseRuleType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The Else element is an unconditional rule for selecting the
            number or density of hit points.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MaxFeatureRulesType">
    <xs:annotation>
      <xs:documentation>
        The MaxFeatureRulesType defines a set of rules for selecting (1)
        the number or density of hit points for a single feature, possibly
        with an associated characteristic and/or (2) a strategy for
        selecting the points, and/or (3) the substitute feature algorithm
        to use to fit the feature to the hit points. To evaluate a
        MaxFeatureRulesType, keep track of a current answer for point
        quantity, which is initially set to zero. Each IfThenFeatureRule
        should be considered in order. If the 'if' part of a rule evaluates
        to true, the 'then' part of the rule should be evaluated and if
        that value is greater than the current answer, the current answer
        should be set to that value. If the 'if' part of no
        IfThenFeatureRule evaluates to true, so that the current answer is
        still zero after all IfThenFeatureRuleshave been processed, then
        the 'then' part of the Else should be evaluated and the current
        answer set to that value. The returned value for point quantity is
        the final value of the current answer. In addition to keeping track
        of the current answer for point quantity, the evaluating system
        should collect all the strategies and substitute feature algorithms
        from the 'then' parts that were evaluated.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="IfThenFeatureRule"
        maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Each IfThenFeatureRule element defines a conditional rule for
            selecting the number or density of hit points and/or a strategy
            for selecting the points, and/or a substitute feature
            algorithm.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Else"
        type="ElseRuleType"
        minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The optional Else element is an unconditional rule for
            selecting the number or density of hit points.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DMESelectionRulesType">
    <xs:annotation>
      <xs:documentation>
        The DMESelectionRulesType defines a stub for a set of rules for
        selecting DMEs.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="DMESelectionRule"
        maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PointRuleBaseType"
    abstract="true">
    <xs:annotation>
      <xs:documentation>
        The abstract PointRuleBaseType defines the base type for rules for
        selecting the number or density of hit points and/or a strategy for
        selecting the points.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="QIFRuleBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IfThenFeatureRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenFeatureRuleType defines a rule containing an optional
        'if' part and an optional 'then points' part. The 'then points'
        part of the rule applies if the 'if' part does not exist or
        evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PointRuleBaseType">
        <xs:sequence>
          <xs:element ref="BooleanExpression"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional BooleanExpression element is the 'if' part of
                the rule.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenPoints"
            type="ThenPointsType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPoints element gives the quantity of
                points to use if the 'if' part evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ElseRuleType">
    <xs:annotation>
      <xs:documentation>
        The ElseRuleType defines a rule containing an optional 'then
        points' part which always applies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="PointRuleBaseType">
        <xs:sequence>
          <xs:element name="ThenPoints"
            type="ThenPointsType">
            <xs:annotation>
              <xs:documentation>
                The ThenPoints element gives (only) the quantity of points
                to use.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ThenPointsType">
    <xs:annotation>
      <xs:documentation>
        The ThenPointsType defines an optional choice of four alternative
        methods for specifying the quantity of hit points to be used. In
        the two density alternatives: (1) for curves, the value is in
        points per unit length in linear units; (2) for surfaces, the value
        is in points per unit area in area units.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:choice
        minOccurs="0">
        <xs:element name="NumberOfPoints"
          type="xs:unsignedInt">
          <xs:annotation>
            <xs:documentation>
              The NumberOfPoints element is the number of points to be
              used. A larger or smaller number of points may not be used.
              This element is in an optional choice.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MinPoints"
          type="xs:unsignedInt">
          <xs:annotation>
            <xs:documentation>
              The MinPoints element is the minimum number of points to be
              used. A smaller number of points may not be used. A larger
              number of points may be used. This element is in an optional
              choice.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="PointDensity"
          type="PositiveDecimalType">
          <xs:annotation>
            <xs:documentation>
              The PointDensity element is the density of points to be used.
              A larger or smaller point density may not be used, except as
              is unavoidable because the number of points is an integer.
              This element is in an optional choice.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MinPointDensity"
          type="PositiveDecimalType">
          <xs:annotation>
            <xs:documentation>
              The MinPointDensity element is the minimum density of points
              to be used. A smaller point density may not be used. A larger
              point density may be used. This element is in an optional
              choice.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:annotation>
    <xs:documentation>
      There follow pairs of definitions of IfThenXXXRuleType and
      XXXPointSamplingStrategyType for each of 22 feature types. The
      IfThenXXXRuleType is derived from the IfThenFeatureRuleType and
      inherits the BooleanExpression element and the optional ThenPoints
      element from it. In addition, the IfThenXXXRuleType specifies an
      optional set of point sampling strategies and an optional set of
      substitute feature algorithms that may be assigned by rule to
      features of the XXX type. The complex composite features, edge point,
      and thread are not included. In all cases, the set of allowed
      substitute feature algorithms is the one given for XXX features in
      FeatureTypes.xsd. The sets of point sampling strategies used here are
      defined in QIFExpressions.xsd. Most of them come from ISO14406:2010.
 
      In addition to IfThenXXXRuleType definitions for specific feature
      types, there is an IfThenSurfaceRuleType for any type of surface
      feature and an IfThenCurveRuleType for any type of curve feature.
      Those have only the BooleanExpression and ThenPoints elements.
    </xs:documentation>
  </xs:annotation>

<!-- BEGIN TYPES SPECIFIC TO ARC -->

  <xs:complexType name="IfThenArcRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenArcRuleType defines a conditional rule that applies if
        the feature under consideration is an arc. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="ArcPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ArcPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The ArcPointSamplingStrategyType defines a point sampling strategy
        for an arc. The strategy is either an enumerated arc strategy or a
        user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="OpenCurvePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for an arc.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO ARC -->

<!-- BEGIN TYPES SPECIFIC TO CIRCLE -->

  <xs:complexType name="IfThenCircleRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenCircleRuleType defines a conditional rule that applies if
        the feature under consideration is a circle. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="CirclePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CirclePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The CirclePointSamplingStrategyType defines a point sampling
        strategy for a circle. The strategy is either an enumerated circle
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="ClosedCurvePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a circle.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point
            sampling strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CIRCLE -->

<!-- BEGIN TYPES SPECIFIC TO CONE -->

  <xs:complexType name="IfThenConeRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenConeRuleType defines a conditional rule that applies if
        the feature under consideration is a cone. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="ConePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The ConePointSamplingStrategyType defines a point sampling strategy
        for a cone. The strategy is either an enumerated cone strategy or a
        user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="ConePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a cone.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CONE -->

<!-- BEGIN TYPES SPECIFIC TO CONICAL SEGMENT -->

  <xs:complexType name="IfThenConicalSegmentRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenConicalSegmentRuleType defines a conditional rule that
        applies if the feature under consideration is a conical segment.
        The rule contains an inherited 'if' part, an inherited ThenPoints
        part, and two more 'then' parts. The 'then' parts of the rule apply
        if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="ConicalSegmentPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConicalSegmentPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The ConicalSegmentPointSamplingStrategyType defines a point
        sampling strategy for a conical segment. The strategy is either an
        enumerated conical segment strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="ConePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a conical segment.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CONICAL SEGMENT -->

<!-- BEGIN TYPES SPECIFIC TO CUBOID -->

  <xs:complexType name="IfThenCuboidRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenCuboidRuleType defines a conditional rule that applies if
        the feature under consideration is a cuboid. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="CuboidPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CuboidPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The CuboidPointSamplingStrategyType defines a point sampling
        strategy for a cuboid. The strategy is either an enumerated cuboid
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="PrismPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a cuboid.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CUBOID -->

<!-- BEGIN TYPES SPECIFIC TO CYLINDER -->

  <xs:complexType name="IfThenCylinderRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenCylinderRuleType defines a conditional rule that applies
        if the feature under consideration is a cylinder. The rule contains
        an inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="CylinderPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CylinderPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The CylinderPointSamplingStrategyType defines a point sampling
        strategy for a cylinder. The strategy is either an enumerated
        cylinder strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SurfaceOfRevolutionPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a cylinder.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CYLINDER -->

<!-- BEGIN TYPES SPECIFIC TO CYLINDRICAL SEGMENT -->

  <xs:complexType name="IfThenCylindricalSegmentRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenCylindricalSegmentRuleType defines a conditional rule
        that applies if the feature under consideration is a cylindrical
        segment. The rule contains an inherited 'if' part, an inherited
        ThenPoints part, and two more 'then' parts. The 'then' parts of the
        rule apply if the 'if' part evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="CylindricalSegmentPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CylindricalSegmentPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The CylindricalSegmentPointSamplingStrategyType defines a point
        sampling strategy for a cylindrical segment. The strategy is
        either an enumerated cylindrical segment strategy or a user defined
        strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SurfaceOfRevolutionPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a cylindrical segment.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CYLINDRICAL SEGMENT -->

<!-- THERE ARE NO TYPES SPECIFIC TO EDGE POINT -->

<!-- BEGIN TYPES SPECIFIC TO ELLIPSE -->

  <xs:complexType name="IfThenEllipseRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenEllipseRuleType defines a conditional rule that applies
        if the feature under consideration is an ellipse. The rule contains
        an inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="EllipsePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="EllipsePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The EllipsePointSamplingStrategyType defines a point sampling
        strategy for an ellipse. The strategy is either an enumerated
        ellipse strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="ClosedCurvePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for an ellipse.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO ELLIPSE -->

<!-- BEGIN TYPES SPECIFIC TO ELONGATED CYLINDER -->

  <xs:complexType name="IfThenElongatedCylinderRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenElongatedCylinderRuleType defines a conditional rule that
        applies if the feature under consideration is an elongated
        cylinder. The rule contains an inherited 'if' part, an inherited
        ThenPoints part, and two more 'then' parts. The 'then' parts of the
        rule apply if the 'if' part evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="ElongatedCylinderPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ElongatedCylinderPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The ElongatedCylinderPointSamplingStrategyType defines a point
        sampling strategy for an elongated cylinder. The strategy is either
        an enumerated elongated cylinder strategy or a user defined
        strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="ElongatedCylinderPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for an elongated cylinder.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO ELONGATEDCYLINDER -->

<!-- BEGIN TYPES SPECIFIC TO EXTRUDED-CROSS-SECTION -->

  <xs:complexType name="IfThenExtrudedCrossSectionRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenExtrudedCrossSectionRuleType defines a conditional rule
        that applies if the feature under consideration is an extruded
        cross-section. The rule contains an inherited 'if' part, an
        inherited ThenPoints part, and two more 'then' parts. The 'then'
        parts of the rule apply if the 'if' part evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="ExtrudedCrossSectionPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="CurveSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExtrudedCrossSectionPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The ExtrudedCrossSectionPointSamplingStrategyType defines a point
        sampling strategy for an extruded cross-section. The strategy is
        either an enumerated extruded cross-section strategy or a user
        defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="ExtrudedCrossSectionPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for an extruded cross-section.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO EXTRUDED-CROSS-SECTION -->

<!-- BEGIN TYPES SPECIFIC TO LINE -->

  <xs:complexType name="IfThenLineRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenLineRuleType defines a conditional rule that applies if
        the feature under consideration is a line. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="LinePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LinePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The LinePointSamplingStrategyType defines a point sampling
        strategy for a line. The strategy is either an enumerated line
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="OpenCurvePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a line.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO LINE -->

<!-- BEGIN TYPES SPECIFIC TO OPPOSITE LINES -->

  <xs:complexType name="IfThenOppositeLinesRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenOppositeLinesRuleType defines a conditional rule that
        applies if the feature under consideration is an opposite lines.
        The rule contains an inherited 'if' part, an inherited ThenPoints
        part, and two more 'then' parts. The 'then' parts of the rule apply
        if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="OppositeLinesPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OppositeLinesPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The OppositeLinesPointSamplingStrategyType defines a point
        sampling strategy for an opposite lines. The strategy is either an
        enumerated opposite lines strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="OpenCurvePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for an opposite lines.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO OPPOSITE LINES -->

<!-- BEGIN TYPES SPECIFIC TO OPPOSITE PLANES -->

  <xs:complexType name="IfThenOppositePlanesRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenOppositePlanesRuleType defines a conditional rule that
        applies if the feature under consideration is an opposite
        planes. The rule contains an inherited 'if' part, an inherited
        ThenPoints part, and two more 'then' parts. The 'then' parts
        of the rule apply if the 'if' part does not exist or evaluates
        to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="OppositePlanesPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OppositePlanesPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The OppositePlanesPointSamplingStrategyType defines a point
        sampling strategy for an opposite planes. The strategy is either
        an enumerated opposite planes strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="PlanePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for an opposite planes.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO OPPOSITE PLANES -->

<!-- BEGIN TYPES SPECIFIC TO PLANE -->

  <xs:complexType name="IfThenPlaneRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenPlaneRuleType defines a conditional rule that applies if
        the feature under consideration is a plane. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="PlanePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PlanePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The PlanePointSamplingStrategyType defines a point sampling
        strategy for a plane. The strategy is either an enumerated plane
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="PlanePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a plane.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO PLANE -->

<!-- BEGIN TYPES SPECIFIC TO POINT-DEFINED CURVE -->

  <xs:complexType name="IfThenPointDefinedCurveRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenPointDefinedCurveRuleType defines a conditional rule that
        applies if the feature under consideration is a point-defined
        curve. The rule contains an inherited 'if' part, an inherited
        ThenPoints part, and two more 'then' parts. The 'then' parts of the
        rule apply if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="PointDefinedCurvePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="CurveSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PointDefinedCurvePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The PointDefinedCurvePointSamplingStrategyType defines a point
        sampling strategy for a point-defined curve. The strategy is
        either an enumerated point-defined curve strategy or a user defined
        strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="PointDefinedPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a point-defined curve.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO POINT-DEFINED CURVE -->

<!-- BEGIN TYPES SPECIFIC TO POINT-DEFINED SURFACE -->

  <xs:complexType name="IfThenPointDefinedSurfaceRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenPointDefinedSurfaceRuleType defines a conditional rule
        that applies if the feature under consideration is a point-defined
        surface. The rule contains an inherited 'if' part, an inherited
        ThenPoints part, and two more 'then' parts. The 'then' parts of the
        rule apply if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="PointDefinedSurfacePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="SurfaceSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PointDefinedSurfacePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The PointDefinedSurfacePointSamplingStrategyType defines a point
        sampling strategy for a point-defined surface. The strategy is
        either an enumerated point-defined surface strategy or a user
        defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="PointDefinedPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a point-defined surface.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO POINT-DEFINED SURFACE -->

<!-- BEGIN TYPES SPECIFIC TO POINT -->

  <xs:complexType name="IfThenPointRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenPointRuleType defines a conditional rule that applies if
        the feature under consideration is a point. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and one more
        'then' part. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="PointPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PointPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The PointPointSamplingStrategyType defines a point sampling
        strategy for a point. The strategy is either an enumerated point
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="PointPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a point.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO POINT -->

<!-- BEGIN TYPES SPECIFIC TO SPHERE -->

  <xs:complexType name="IfThenSphereRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenSphereRuleType defines a conditional rule that applies if
        the feature under consideration is a sphere. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="SpherePointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SpherePointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The SpherePointSamplingStrategyType defines a point sampling
        strategy for a sphere. The strategy is either an enumerated sphere
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SpherePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a sphere.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO SPHERE -->

<!-- BEGIN TYPES SPECIFIC TO SPHERICAL SEGMENT -->

  <xs:complexType name="IfThenSphericalSegmentRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenSphericalSegmentRuleType defines a conditional rule that
        applies if the feature under consideration is a spherical segment.
        The rule contains an inherited 'if' part, an inherited ThenPoints
        part, and two more 'then' parts. The 'then' parts of the rule apply
        if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="SphericalSegmentPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SphericalSegmentPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The SphericalSegmentPointSamplingStrategyType defines a point
        sampling strategy for a spherical segment. The strategy is either
        an enumerated spherical segment strategy or a user defined
        strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SpherePointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a spherical segment.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point
            sampling strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO SPHERICAL SEGMENT -->

<!-- BEGIN TYPES SPECIFIC TO SURFACE OF REVOLUTION -->

  <xs:complexType name="IfThenSurfaceOfRevolutionRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenSurfaceOfRevolutionRuleType defines a conditional rule
        that applies if the feature under consideration is a surface of
        revolution. The rule contains an inherited 'if' part, an inherited
        ThenPoints part, and two more 'then' parts. The 'then' parts of the
        rule apply if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="SurfaceOfRevolutionPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="CurveSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SurfaceOfRevolutionPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The SurfaceOfRevolutionPointSamplingStrategyType defines a point
        sampling strategy for a surface of revolution. The strategy is
        either an enumerated surface of revolution strategy or a user
        defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SurfaceOfRevolutionPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a surface of revolution.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO SURFACE OF REVOLUTION -->

<!-- NO TYPES FOR THREADED FEATURE -->

<!-- BEGIN TYPES SPECIFIC TO TOROIDAL SEGMENT -->

  <xs:complexType name="IfThenToroidalSegmentRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenToroidalSegmentRuleType defines a conditional rule that
        applies if the feature under consideration is a toroidal segment.
        The rule contains an inherited 'if' part, an inherited ThenPoints
        part, and two more 'then' parts. The 'then' parts of the rule apply
        if the 'if' part does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="ToroidalSegmentPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="NonFeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ToroidalSegmentPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The ToroidalSegmentPointSamplingStrategyType defines a point
        sampling strategy for a toroidal segment. The strategy is either
        an enumerated toroidal segment strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SurfaceOfRevolutionPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a toroidal segment.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO TOROIDAL SEGMENT -->

<!-- BEGIN TYPES SPECIFIC TO TORUS -->

  <xs:complexType name="IfThenTorusRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenTorusRuleType defines a conditional rule that applies if
        the feature under consideration is a torus. The rule contains an
        inherited 'if' part, an inherited ThenPoints part, and two more
        'then' parts. The 'then' parts of the rule apply if the 'if' part
        does not exist or evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType">
        <xs:sequence>
          <xs:element name="ThenPointStrategy"
            type="TorusPointSamplingStrategyType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenPointStrategy element is the point
                sampling strategy to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ThenFittingAlgorithm"
            type="FeatureOfSizeSubstituteFeatureAlgorithmType"
            minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                The optional ThenFittingAlgorithm element is the substitute
                feature algorithm to be used if the 'if' part of the rule
                does not exist or evaluates to true.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TorusPointSamplingStrategyType">
    <xs:annotation>
      <xs:documentation>
        The TorusPointSamplingStrategyType defines a point sampling
        strategy for a torus. The strategy is either an enumerated torus
        strategy or a user defined strategy.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="PointSamplingStrategyEnum"
        type="SurfaceOfRevolutionPointSamplingStrategyEnumType">
        <xs:annotation>
          <xs:documentation>
            The PointSamplingStrategyEnum element is a commonly used point
            sampling strategy for a torus.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedStrategy"
        type="xs:token">
        <xs:annotation>
          <xs:documentation>
            The UserDefinedStrategy element is the name of a point sampling
            strategy defined by the user.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO TORUS -->

<!-- NO TYPES FOR COMPLEX COMPOSITE FEATURES -->

<!-- BEGIN TYPES SPECIFIC TO SURFACE -->

  <xs:complexType name="IfThenSurfaceRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenSurfaceRuleType defines a conditional rule that applies
        if the feature under consideration is a surface. The rule contains
        an inherited 'if' part and an inherited ThenPoints part. The 'then'
        part of the rule applies if the 'if' part does not exist or
        evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType"/>
    </xs:complexContent>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO SURFACE -->

<!-- BEGIN TYPES SPECIFIC TO CURVE -->

  <xs:complexType name="IfThenCurveRuleType">
    <xs:annotation>
      <xs:documentation>
        The IfThenCurveRuleType defines a conditional rule that applies if
        the feature under consideration is a curve. The rule contains an
        inherited 'if' part and an inherited ThenPoints part. The 'then'
        part of the rule applies if the 'if' part does not exist or
        evaluates to true.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IfThenFeatureRuleType"/>
    </xs:complexContent>
  </xs:complexType>

<!-- END TYPES SPECIFIC TO CURVE -->

  <xs:complexType name="DMESelectionRuleType">
    <xs:annotation>
      <xs:documentation>
        The DMESelectionRuleType defines a stub for a rule for selecting a
        DME.
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>

<!-- START SUBSTITUTION GROUP FOR IfThenFeatureRule -->

  <xs:element name="IfThenFeatureRule"
    type="IfThenFeatureRuleType"/>

  <xs:element name="IfThenCurveRule"
    type="IfThenCurveRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenSurfaceRule"
    type="IfThenSurfaceRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenArcRule"
    type="IfThenArcRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenCircleRule"
    type="IfThenCircleRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenConeRule"
    type="IfThenConeRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenConicalSegmentRule"
    type="IfThenConicalSegmentRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenCuboidRule"
    type="IfThenCuboidRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenCylinderRule"
    type="IfThenCylinderRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenCylindricalSegmentRule"
    type="IfThenCylindricalSegmentRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenEllipseRule"
    type="IfThenEllipseRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenElongatedCylinderRule"
    type="IfThenElongatedCylinderRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenExtrudedCrossSectionRule"
    type="IfThenExtrudedCrossSectionRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenLineRule"
    type="IfThenLineRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenOppositeLinesRule"
    type="IfThenOppositeLinesRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenOppositePlanesRule"
    type="IfThenOppositePlanesRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenPlaneRule"
    type="IfThenPlaneRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenPointDefinedCurveRule"
    type="IfThenPointDefinedCurveRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenPointDefinedSurfaceRule"
    type="IfThenPointDefinedSurfaceRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenPointRule"
    type="IfThenPointRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenSphereRule"
    type="IfThenSphereRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenSphericalSegmentRule"
    type="IfThenSphericalSegmentRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenSurfaceOfRevolutionRule"
    type="IfThenSurfaceOfRevolutionRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenToroidalSegmentRule"
    type="IfThenToroidalSegmentRuleType"
    substitutionGroup="IfThenFeatureRule"/>

  <xs:element name="IfThenTorusRule"
    type="IfThenTorusRuleType"
    substitutionGroup="IfThenFeatureRule"/>

<!-- END SUBSTITUTION GROUP FOR IfThenFeatureRule -->

  <xs:element name="DMESelectionRule"
    type="DMESelectionRuleType"/>

</xs:schema>
