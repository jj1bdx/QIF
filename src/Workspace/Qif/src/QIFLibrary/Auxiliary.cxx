// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Auxiliary.hxx"

namespace xsd
{
  namespace qif2
  {
    // CoordinateSystemSetType
    // 

    const CoordinateSystemSetType::CoordinateSystem_sequence& CoordinateSystemSetType::
    CoordinateSystem () const
    {
      return this->CoordinateSystem_;
    }

    CoordinateSystemSetType::CoordinateSystem_sequence& CoordinateSystemSetType::
    CoordinateSystem ()
    {
      return this->CoordinateSystem_;
    }

    void CoordinateSystemSetType::
    CoordinateSystem (const CoordinateSystem_sequence& s)
    {
      this->CoordinateSystem_ = s;
    }

    const CoordinateSystemSetType::N_type& CoordinateSystemSetType::
    N () const
    {
      return this->N_.get ();
    }

    CoordinateSystemSetType::N_type& CoordinateSystemSetType::
    N ()
    {
      return this->N_.get ();
    }

    void CoordinateSystemSetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void CoordinateSystemSetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // CADCoordinateSystemType
    // 

    const CADCoordinateSystemType::CoordinateSystemCore_type& CADCoordinateSystemType::
    CoordinateSystemCore () const
    {
      return this->CoordinateSystemCore_.get ();
    }

    CADCoordinateSystemType::CoordinateSystemCore_type& CADCoordinateSystemType::
    CoordinateSystemCore ()
    {
      return this->CoordinateSystemCore_.get ();
    }

    void CADCoordinateSystemType::
    CoordinateSystemCore (const CoordinateSystemCore_type& x)
    {
      this->CoordinateSystemCore_.set (x);
    }

    void CADCoordinateSystemType::
    CoordinateSystemCore (::std::auto_ptr< CoordinateSystemCore_type > x)
    {
      this->CoordinateSystemCore_.set (x);
    }


    // AuxiliarySetType
    // 

    const AuxiliarySetType::Auxiliary_sequence& AuxiliarySetType::
    Auxiliary () const
    {
      return this->Auxiliary_;
    }

    AuxiliarySetType::Auxiliary_sequence& AuxiliarySetType::
    Auxiliary ()
    {
      return this->Auxiliary_;
    }

    void AuxiliarySetType::
    Auxiliary (const Auxiliary_sequence& s)
    {
      this->Auxiliary_ = s;
    }

    const AuxiliarySetType::N_type& AuxiliarySetType::
    N () const
    {
      return this->N_.get ();
    }

    AuxiliarySetType::N_type& AuxiliarySetType::
    N ()
    {
      return this->N_.get ();
    }

    void AuxiliarySetType::
    N (const N_type& x)
    {
      this->N_.set (x);
    }

    void AuxiliarySetType::
    N (::std::auto_ptr< N_type > x)
    {
      this->N_.set (x);
    }


    // AuxiliaryBaseType
    // 


    // PointAuxiliaryType
    // 

    const PointAuxiliaryType::XYZ_type& PointAuxiliaryType::
    XYZ () const
    {
      return this->XYZ_.get ();
    }

    PointAuxiliaryType::XYZ_type& PointAuxiliaryType::
    XYZ ()
    {
      return this->XYZ_.get ();
    }

    void PointAuxiliaryType::
    XYZ (const XYZ_type& x)
    {
      this->XYZ_.set (x);
    }

    void PointAuxiliaryType::
    XYZ (::std::auto_ptr< XYZ_type > x)
    {
      this->XYZ_.set (x);
    }


    // LineAuxiliaryType
    // 

    const LineAuxiliaryType::StartPoint_type& LineAuxiliaryType::
    StartPoint () const
    {
      return this->StartPoint_.get ();
    }

    LineAuxiliaryType::StartPoint_type& LineAuxiliaryType::
    StartPoint ()
    {
      return this->StartPoint_.get ();
    }

    void LineAuxiliaryType::
    StartPoint (const StartPoint_type& x)
    {
      this->StartPoint_.set (x);
    }

    void LineAuxiliaryType::
    StartPoint (::std::auto_ptr< StartPoint_type > x)
    {
      this->StartPoint_.set (x);
    }

    const LineAuxiliaryType::EndPoint_type& LineAuxiliaryType::
    EndPoint () const
    {
      return this->EndPoint_.get ();
    }

    LineAuxiliaryType::EndPoint_type& LineAuxiliaryType::
    EndPoint ()
    {
      return this->EndPoint_.get ();
    }

    void LineAuxiliaryType::
    EndPoint (const EndPoint_type& x)
    {
      this->EndPoint_.set (x);
    }

    void LineAuxiliaryType::
    EndPoint (::std::auto_ptr< EndPoint_type > x)
    {
      this->EndPoint_.set (x);
    }


    // AuxiliaryPlaneBaseType
    // 

    const AuxiliaryPlaneBaseType::Plane_type& AuxiliaryPlaneBaseType::
    Plane () const
    {
      return this->Plane_.get ();
    }

    AuxiliaryPlaneBaseType::Plane_type& AuxiliaryPlaneBaseType::
    Plane ()
    {
      return this->Plane_.get ();
    }

    void AuxiliaryPlaneBaseType::
    Plane (const Plane_type& x)
    {
      this->Plane_.set (x);
    }

    void AuxiliaryPlaneBaseType::
    Plane (::std::auto_ptr< Plane_type > x)
    {
      this->Plane_.set (x);
    }


    // PlaneReferenceType
    // 


    // PlaneClippingType
    // 

    const PlaneClippingType::index_type& PlaneClippingType::
    index () const
    {
      return this->index_.get ();
    }

    PlaneClippingType::index_type& PlaneClippingType::
    index ()
    {
      return this->index_.get ();
    }

    void PlaneClippingType::
    index (const index_type& x)
    {
      this->index_.set (x);
    }

    const PlaneClippingType::enable_type& PlaneClippingType::
    enable () const
    {
      return this->enable_.get ();
    }

    PlaneClippingType::enable_type& PlaneClippingType::
    enable ()
    {
      return this->enable_.get ();
    }

    void PlaneClippingType::
    enable (const enable_type& x)
    {
      this->enable_.set (x);
    }

    PlaneClippingType::enable_type PlaneClippingType::
    enable_default_value ()
    {
      return enable_type (true);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    // CoordinateSystemSetType
    //

    CoordinateSystemSetType::
    CoordinateSystemSetType (const N_type& N)
    : ::xml_schema::type (),
      CoordinateSystem_ (this),
      N_ (N, this)
    {
    }

    CoordinateSystemSetType::
    CoordinateSystemSetType (const CoordinateSystemSetType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      CoordinateSystem_ (x.CoordinateSystem_, f, this),
      N_ (x.N_, f, this)
    {
    }

    CoordinateSystemSetType::
    CoordinateSystemSetType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CoordinateSystem_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CoordinateSystemSetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CoordinateSystem
        //
        if (n.name () == "CoordinateSystem" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystem_type > r (
            CoordinateSystem_traits::create (i, f, this));

          this->CoordinateSystem_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    CoordinateSystemSetType* CoordinateSystemSetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CoordinateSystemSetType (*this, f, c);
    }

    CoordinateSystemSetType& CoordinateSystemSetType::
    operator= (const CoordinateSystemSetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->CoordinateSystem_ = x.CoordinateSystem_;
        this->N_ = x.N_;
      }

      return *this;
    }

    CoordinateSystemSetType::
    ~CoordinateSystemSetType ()
    {
    }

    // CADCoordinateSystemType
    //

    CADCoordinateSystemType::
    CADCoordinateSystemType (const id_type& id,
                             const CoordinateSystemCore_type& CoordinateSystemCore)
    : ::xsd::qif2::DrawableBaseType (id),
      CoordinateSystemCore_ (CoordinateSystemCore, this)
    {
    }

    CADCoordinateSystemType::
    CADCoordinateSystemType (const id_type& id,
                             ::std::auto_ptr< CoordinateSystemCore_type > CoordinateSystemCore)
    : ::xsd::qif2::DrawableBaseType (id),
      CoordinateSystemCore_ (CoordinateSystemCore, this)
    {
    }

    CADCoordinateSystemType::
    CADCoordinateSystemType (const CADCoordinateSystemType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::DrawableBaseType (x, f, c),
      CoordinateSystemCore_ (x.CoordinateSystemCore_, f, this)
    {
    }

    CADCoordinateSystemType::
    CADCoordinateSystemType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xsd::qif2::DrawableBaseType (e, f | ::xml_schema::flags::base, c),
      CoordinateSystemCore_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void CADCoordinateSystemType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::DrawableBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CoordinateSystemCore
        //
        if (n.name () == "CoordinateSystemCore" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CoordinateSystemCore_type > r (
            CoordinateSystemCore_traits::create (i, f, this));

          if (!CoordinateSystemCore_.present ())
          {
            this->CoordinateSystemCore_.set (r);
            continue;
          }
        }

        break;
      }

      if (!CoordinateSystemCore_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CoordinateSystemCore",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    CADCoordinateSystemType* CADCoordinateSystemType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CADCoordinateSystemType (*this, f, c);
    }

    CADCoordinateSystemType& CADCoordinateSystemType::
    operator= (const CADCoordinateSystemType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::DrawableBaseType& > (*this) = x;
        this->CoordinateSystemCore_ = x.CoordinateSystemCore_;
      }

      return *this;
    }

    CADCoordinateSystemType::
    ~CADCoordinateSystemType ()
    {
    }

    // AuxiliarySetType
    //

    AuxiliarySetType::
    AuxiliarySetType (const N_type& N)
    : ::xml_schema::type (),
      Auxiliary_ (this),
      N_ (N, this)
    {
    }

    AuxiliarySetType::
    AuxiliarySetType (const AuxiliarySetType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Auxiliary_ (x.Auxiliary_, f, this),
      N_ (x.N_, f, this)
    {
    }

    AuxiliarySetType::
    AuxiliarySetType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Auxiliary_ (this),
      N_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AuxiliarySetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Auxiliary
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Auxiliary",
              "http://qifstandards.org/xsd/qif2",
              &::xsd::cxx::tree::factory_impl< Auxiliary_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Auxiliary_type > r (
              dynamic_cast< Auxiliary_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->Auxiliary_.push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "N" && n.namespace_ ().empty ())
        {
          this->N_.set (N_traits::create (i, f, this));
          continue;
        }
      }

      if (!N_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "N",
          "");
      }
    }

    AuxiliarySetType* AuxiliarySetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AuxiliarySetType (*this, f, c);
    }

    AuxiliarySetType& AuxiliarySetType::
    operator= (const AuxiliarySetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Auxiliary_ = x.Auxiliary_;
        this->N_ = x.N_;
      }

      return *this;
    }

    AuxiliarySetType::
    ~AuxiliarySetType ()
    {
    }

    // AuxiliaryBaseType
    //

    AuxiliaryBaseType::
    AuxiliaryBaseType (const id_type& id)
    : ::xsd::qif2::DrawableBaseType (id)
    {
    }

    AuxiliaryBaseType::
    AuxiliaryBaseType (const AuxiliaryBaseType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::DrawableBaseType (x, f, c)
    {
    }

    AuxiliaryBaseType::
    AuxiliaryBaseType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::DrawableBaseType (e, f, c)
    {
    }

    AuxiliaryBaseType* AuxiliaryBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AuxiliaryBaseType (*this, f, c);
    }

    AuxiliaryBaseType::
    ~AuxiliaryBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AuxiliaryBaseType >
    _xsd_AuxiliaryBaseType_type_factory_init (
      "AuxiliaryBaseType",
      "http://qifstandards.org/xsd/qif2");

    // PointAuxiliaryType
    //

    PointAuxiliaryType::
    PointAuxiliaryType (const id_type& id,
                        const XYZ_type& XYZ)
    : ::xsd::qif2::AuxiliaryBaseType (id),
      XYZ_ (XYZ, this)
    {
    }

    PointAuxiliaryType::
    PointAuxiliaryType (const id_type& id,
                        ::std::auto_ptr< XYZ_type > XYZ)
    : ::xsd::qif2::AuxiliaryBaseType (id),
      XYZ_ (XYZ, this)
    {
    }

    PointAuxiliaryType::
    PointAuxiliaryType (const PointAuxiliaryType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryBaseType (x, f, c),
      XYZ_ (x.XYZ_, f, this)
    {
    }

    PointAuxiliaryType::
    PointAuxiliaryType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryBaseType (e, f | ::xml_schema::flags::base, c),
      XYZ_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PointAuxiliaryType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AuxiliaryBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // XYZ
        //
        if (n.name () == "XYZ" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< XYZ_type > r (
            XYZ_traits::create (i, f, this));

          if (!XYZ_.present ())
          {
            this->XYZ_.set (r);
            continue;
          }
        }

        break;
      }

      if (!XYZ_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "XYZ",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    PointAuxiliaryType* PointAuxiliaryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointAuxiliaryType (*this, f, c);
    }

    PointAuxiliaryType& PointAuxiliaryType::
    operator= (const PointAuxiliaryType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::AuxiliaryBaseType& > (*this) = x;
        this->XYZ_ = x.XYZ_;
      }

      return *this;
    }

    PointAuxiliaryType::
    ~PointAuxiliaryType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PointAuxiliaryType >
    _xsd_PointAuxiliaryType_type_factory_init (
      "PointAuxiliaryType",
      "http://qifstandards.org/xsd/qif2");

    // LineAuxiliaryType
    //

    LineAuxiliaryType::
    LineAuxiliaryType (const id_type& id,
                       const StartPoint_type& StartPoint,
                       const EndPoint_type& EndPoint)
    : ::xsd::qif2::AuxiliaryBaseType (id),
      StartPoint_ (StartPoint, this),
      EndPoint_ (EndPoint, this)
    {
    }

    LineAuxiliaryType::
    LineAuxiliaryType (const LineAuxiliaryType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryBaseType (x, f, c),
      StartPoint_ (x.StartPoint_, f, this),
      EndPoint_ (x.EndPoint_, f, this)
    {
    }

    LineAuxiliaryType::
    LineAuxiliaryType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryBaseType (e, f | ::xml_schema::flags::base, c),
      StartPoint_ (this),
      EndPoint_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void LineAuxiliaryType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AuxiliaryBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StartPoint
        //
        if (n.name () == "StartPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< StartPoint_type > r (
            StartPoint_traits::create (i, f, this));

          if (!StartPoint_.present ())
          {
            this->StartPoint_.set (r);
            continue;
          }
        }

        // EndPoint
        //
        if (n.name () == "EndPoint" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< EndPoint_type > r (
            EndPoint_traits::create (i, f, this));

          if (!EndPoint_.present ())
          {
            this->EndPoint_.set (r);
            continue;
          }
        }

        break;
      }

      if (!StartPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "StartPoint",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!EndPoint_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "EndPoint",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    LineAuxiliaryType* LineAuxiliaryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LineAuxiliaryType (*this, f, c);
    }

    LineAuxiliaryType& LineAuxiliaryType::
    operator= (const LineAuxiliaryType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::AuxiliaryBaseType& > (*this) = x;
        this->StartPoint_ = x.StartPoint_;
        this->EndPoint_ = x.EndPoint_;
      }

      return *this;
    }

    LineAuxiliaryType::
    ~LineAuxiliaryType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, LineAuxiliaryType >
    _xsd_LineAuxiliaryType_type_factory_init (
      "LineAuxiliaryType",
      "http://qifstandards.org/xsd/qif2");

    // AuxiliaryPlaneBaseType
    //

    AuxiliaryPlaneBaseType::
    AuxiliaryPlaneBaseType (const id_type& id,
                            const Plane_type& Plane)
    : ::xsd::qif2::AuxiliaryBaseType (id),
      Plane_ (Plane, this)
    {
    }

    AuxiliaryPlaneBaseType::
    AuxiliaryPlaneBaseType (const id_type& id,
                            ::std::auto_ptr< Plane_type > Plane)
    : ::xsd::qif2::AuxiliaryBaseType (id),
      Plane_ (Plane, this)
    {
    }

    AuxiliaryPlaneBaseType::
    AuxiliaryPlaneBaseType (const AuxiliaryPlaneBaseType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryBaseType (x, f, c),
      Plane_ (x.Plane_, f, this)
    {
    }

    AuxiliaryPlaneBaseType::
    AuxiliaryPlaneBaseType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryBaseType (e, f | ::xml_schema::flags::base, c),
      Plane_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void AuxiliaryPlaneBaseType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AuxiliaryBaseType::parse (p, f);

      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Plane
        //
        if (n.name () == "Plane" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Plane_type > r (
            Plane_traits::create (i, f, this));

          if (!Plane_.present ())
          {
            this->Plane_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Plane_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Plane",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    AuxiliaryPlaneBaseType* AuxiliaryPlaneBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AuxiliaryPlaneBaseType (*this, f, c);
    }

    AuxiliaryPlaneBaseType& AuxiliaryPlaneBaseType::
    operator= (const AuxiliaryPlaneBaseType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::AuxiliaryBaseType& > (*this) = x;
        this->Plane_ = x.Plane_;
      }

      return *this;
    }

    AuxiliaryPlaneBaseType::
    ~AuxiliaryPlaneBaseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AuxiliaryPlaneBaseType >
    _xsd_AuxiliaryPlaneBaseType_type_factory_init (
      "AuxiliaryPlaneBaseType",
      "http://qifstandards.org/xsd/qif2");

    // PlaneReferenceType
    //

    PlaneReferenceType::
    PlaneReferenceType (const id_type& id,
                        const Plane_type& Plane)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (id,
                                           Plane)
    {
    }

    PlaneReferenceType::
    PlaneReferenceType (const id_type& id,
                        ::std::auto_ptr< Plane_type > Plane)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (id,
                                           Plane)
    {
    }

    PlaneReferenceType::
    PlaneReferenceType (const PlaneReferenceType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (x, f, c)
    {
    }

    PlaneReferenceType::
    PlaneReferenceType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (e, f, c)
    {
    }

    PlaneReferenceType* PlaneReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PlaneReferenceType (*this, f, c);
    }

    PlaneReferenceType::
    ~PlaneReferenceType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlaneReferenceType >
    _xsd_PlaneReferenceType_type_factory_init (
      "PlaneReferenceType",
      "http://qifstandards.org/xsd/qif2");

    // PlaneClippingType
    //

    PlaneClippingType::
    PlaneClippingType (const id_type& id,
                       const Plane_type& Plane,
                       const index_type& index)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (id,
                                           Plane),
      index_ (index, this),
      enable_ (enable_default_value (), this)
    {
    }

    PlaneClippingType::
    PlaneClippingType (const id_type& id,
                       ::std::auto_ptr< Plane_type > Plane,
                       const index_type& index)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (id,
                                           Plane),
      index_ (index, this),
      enable_ (enable_default_value (), this)
    {
    }

    PlaneClippingType::
    PlaneClippingType (const PlaneClippingType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (x, f, c),
      index_ (x.index_, f, this),
      enable_ (x.enable_, f, this)
    {
    }

    PlaneClippingType::
    PlaneClippingType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::AuxiliaryPlaneBaseType (e, f | ::xml_schema::flags::base, c),
      index_ (this),
      enable_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PlaneClippingType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      this->::xsd::qif2::AuxiliaryPlaneBaseType::parse (p, f);

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "index" && n.namespace_ ().empty ())
        {
          this->index_.set (index_traits::create (i, f, this));
          continue;
        }

        if (n.name () == "enable" && n.namespace_ ().empty ())
        {
          this->enable_.set (enable_traits::create (i, f, this));
          continue;
        }
      }

      if (!index_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "index",
          "");
      }

      if (!enable_.present ())
      {
        this->enable_.set (enable_default_value ());
      }
    }

    PlaneClippingType* PlaneClippingType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PlaneClippingType (*this, f, c);
    }

    PlaneClippingType& PlaneClippingType::
    operator= (const PlaneClippingType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::AuxiliaryPlaneBaseType& > (*this) = x;
        this->index_ = x.index_;
        this->enable_ = x.enable_;
      }

      return *this;
    }

    PlaneClippingType::
    ~PlaneClippingType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, PlaneClippingType >
    _xsd_PlaneClippingType_type_factory_init (
      "PlaneClippingType",
      "http://qifstandards.org/xsd/qif2");

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::PointAuxiliaryType >
    _xsd_PointAuxiliary_element_factory_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "PointAuxiliary",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::LineAuxiliaryType >
    _xsd_LineAuxiliary_element_factory_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "LineAuxiliary",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::PlaneReferenceType >
    _xsd_PlaneReference_element_factory_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "PlaneReference",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::PlaneClippingType >
    _xsd_PlaneClipping_element_factory_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "PlaneClipping",
      "http://qifstandards.org/xsd/qif2");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement& e, const CoordinateSystemSetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CoordinateSystem
      //
      for (CoordinateSystemSetType::CoordinateSystem_const_iterator
           b (i.CoordinateSystem ().begin ()), n (i.CoordinateSystem ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CoordinateSystem",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << *b;
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const CADCoordinateSystemType& i)
    {
      e << static_cast< const ::xsd::qif2::DrawableBaseType& > (i);

      // CoordinateSystemCore
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CoordinateSystemCore",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.CoordinateSystemCore ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const AuxiliarySetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Auxiliary
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (AuxiliarySetType::Auxiliary_const_iterator
             b (i.Auxiliary ().begin ()), n (i.Auxiliary ().end ());
             b != n; ++b)
        {
          if (typeid (AuxiliarySetType::Auxiliary_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Auxiliary",
                "http://qifstandards.org/xsd/qif2",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "Auxiliary",
              "http://qifstandards.org/xsd/qif2",
              true, true, e, *b);
        }
      }

      // N
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "N",
            e));

        a << i.N ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const AuxiliaryBaseType& i)
    {
      e << static_cast< const ::xsd::qif2::DrawableBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AuxiliaryBaseType >
    _xsd_AuxiliaryBaseType_type_serializer_init (
      "AuxiliaryBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const PointAuxiliaryType& i)
    {
      e << static_cast< const ::xsd::qif2::AuxiliaryBaseType& > (i);

      // XYZ
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "XYZ",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.XYZ ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PointAuxiliaryType >
    _xsd_PointAuxiliaryType_type_serializer_init (
      "PointAuxiliaryType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const LineAuxiliaryType& i)
    {
      e << static_cast< const ::xsd::qif2::AuxiliaryBaseType& > (i);

      // StartPoint
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StartPoint",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.StartPoint ();
      }

      // EndPoint
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "EndPoint",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.EndPoint ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LineAuxiliaryType >
    _xsd_LineAuxiliaryType_type_serializer_init (
      "LineAuxiliaryType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const AuxiliaryPlaneBaseType& i)
    {
      e << static_cast< const ::xsd::qif2::AuxiliaryBaseType& > (i);

      // Plane
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Plane",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Plane ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AuxiliaryPlaneBaseType >
    _xsd_AuxiliaryPlaneBaseType_type_serializer_init (
      "AuxiliaryPlaneBaseType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const PlaneReferenceType& i)
    {
      e << static_cast< const ::xsd::qif2::AuxiliaryPlaneBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlaneReferenceType >
    _xsd_PlaneReferenceType_type_serializer_init (
      "PlaneReferenceType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const PlaneClippingType& i)
    {
      e << static_cast< const ::xsd::qif2::AuxiliaryPlaneBaseType& > (i);

      // index
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "index",
            e));

        a << i.index ();
      }

      // enable
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "enable",
            e));

        a << i.enable ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PlaneClippingType >
    _xsd_PlaneClippingType_type_serializer_init (
      "PlaneClippingType",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::PointAuxiliaryType >
    _xsd_PointAuxiliary_element_serializer_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "PointAuxiliary",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::LineAuxiliaryType >
    _xsd_LineAuxiliary_element_serializer_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "LineAuxiliary",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::PlaneReferenceType >
    _xsd_PlaneReference_element_serializer_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "PlaneReference",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::PlaneClippingType >
    _xsd_PlaneClipping_element_serializer_init (
      "Auxiliary",
      "http://qifstandards.org/xsd/qif2",
      "PlaneClipping",
      "http://qifstandards.org/xsd/qif2");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

