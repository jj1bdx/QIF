// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Expressions.hxx"

namespace xsd
{
  namespace qif2
  {
    // SamplingRigorIsType
    // 

    const SamplingRigorIsType::val_type& SamplingRigorIsType::
    val () const
    {
      return this->val_.get ();
    }

    SamplingRigorIsType::val_type& SamplingRigorIsType::
    val ()
    {
      return this->val_.get ();
    }

    void SamplingRigorIsType::
    val (const val_type& x)
    {
      this->val_.set (x);
    }


    // FeatureIsDatumType
    // 


    // FeatureIsInternalType
    // 


    // CharacteristicIsType
    // 

    const CharacteristicIsType::val_type& CharacteristicIsType::
    val () const
    {
      return this->val_.get ();
    }

    CharacteristicIsType::val_type& CharacteristicIsType::
    val ()
    {
      return this->val_.get ();
    }

    void CharacteristicIsType::
    val (const val_type& x)
    {
      this->val_.set (x);
    }

    void CharacteristicIsType::
    val (::std::auto_ptr< val_type > x)
    {
      this->val_.set (x);
    }


    // ShapeClassIsType
    // 

    const ShapeClassIsType::val_type& ShapeClassIsType::
    val () const
    {
      return this->val_.get ();
    }

    ShapeClassIsType::val_type& ShapeClassIsType::
    val ()
    {
      return this->val_.get ();
    }

    void ShapeClassIsType::
    val (const val_type& x)
    {
      this->val_.set (x);
    }

    void ShapeClassIsType::
    val (::std::auto_ptr< val_type > x)
    {
      this->val_.set (x);
    }


    // PointSamplingStrategyEnumBaseType
    // 

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (value v)
    : ::xml_schema::nmtoken (_xsd_PointSamplingStrategyEnumBaseType_literals_[v])
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const PointSamplingStrategyEnumBaseType& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    PointSamplingStrategyEnumBaseType& PointSamplingStrategyEnumBaseType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_PointSamplingStrategyEnumBaseType_literals_[v]);

      return *this;
    }


    // PointPointSamplingStrategyEnumType
    // 

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const PointPointSamplingStrategyEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    PointPointSamplingStrategyEnumType& PointPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // OpenCurvePointSamplingStrategyEnumType
    // 

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const OpenCurvePointSamplingStrategyEnumType& v,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    OpenCurvePointSamplingStrategyEnumType& OpenCurvePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // ClosedCurvePointSamplingStrategyEnumType
    // 

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[v])
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ClosedCurvePointSamplingStrategyEnumType& v,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    ClosedCurvePointSamplingStrategyEnumType& ClosedCurvePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[v]);

      return *this;
    }


    // PointDefinedPointSamplingStrategyEnumType
    // 

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_PointDefinedPointSamplingStrategyEnumType_literals_[v])
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const PointDefinedPointSamplingStrategyEnumType& v,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    PointDefinedPointSamplingStrategyEnumType& PointDefinedPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_PointDefinedPointSamplingStrategyEnumType_literals_[v]);

      return *this;
    }


    // ConePointSamplingStrategyEnumType
    // 

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ConePointSamplingStrategyEnumType& v,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    ConePointSamplingStrategyEnumType& ConePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // ElongatedCylinderPointSamplingStrategyEnumType
    // 

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ElongatedCylinderPointSamplingStrategyEnumType& v,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    ElongatedCylinderPointSamplingStrategyEnumType& ElongatedCylinderPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // ExtrudedCrossSectionPointSamplingStrategyEnumType
    // 

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ExtrudedCrossSectionPointSamplingStrategyEnumType& v,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType& ExtrudedCrossSectionPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // PrismPointSamplingStrategyEnumType
    // 

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const PrismPointSamplingStrategyEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    PrismPointSamplingStrategyEnumType& PrismPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // SpherePointSamplingStrategyEnumType
    // 

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const SpherePointSamplingStrategyEnumType& v,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    SpherePointSamplingStrategyEnumType& SpherePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // SurfaceOfRevolutionPointSamplingStrategyEnumType
    // 

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const SurfaceOfRevolutionPointSamplingStrategyEnumType& v,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType& SurfaceOfRevolutionPointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // PlanePointSamplingStrategyEnumType
    // 

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (value v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const char* v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::std::string& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::xsd::qif2::PointSamplingStrategyEnumBaseType& v)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v)
    {
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const PlanePointSamplingStrategyEnumType& v,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (v, f, c)
    {
    }

    PlanePointSamplingStrategyEnumType& PlanePointSamplingStrategyEnumType::
    operator= (value v)
    {
      static_cast< ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (*this) = v;

      return *this;
    }


    // CharacteristicTypeEnumType
    // 

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (value v)
    : ::xml_schema::nmtoken (_xsd_CharacteristicTypeEnumType_literals_[v])
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const char* v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::std::string& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::xml_schema::nmtoken& v)
    : ::xml_schema::nmtoken (v)
    {
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const CharacteristicTypeEnumType& v,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (v, f, c)
    {
    }

    CharacteristicTypeEnumType& CharacteristicTypeEnumType::
    operator= (value v)
    {
      static_cast< ::xml_schema::nmtoken& > (*this) = 
      ::xml_schema::nmtoken (_xsd_CharacteristicTypeEnumType_literals_[v]);

      return *this;
    }


    // ArithmeticFeatureParameterType
    // 

    const ArithmeticFeatureParameterType::Parameter_type& ArithmeticFeatureParameterType::
    Parameter () const
    {
      return this->Parameter_.get ();
    }

    ArithmeticFeatureParameterType::Parameter_type& ArithmeticFeatureParameterType::
    Parameter ()
    {
      return this->Parameter_.get ();
    }

    void ArithmeticFeatureParameterType::
    Parameter (const Parameter_type& x)
    {
      this->Parameter_.set (x);
    }

    void ArithmeticFeatureParameterType::
    Parameter (::std::auto_ptr< Parameter_type > x)
    {
      this->Parameter_.set (x);
    }


    // ArithmeticCharacteristicParameterType
    // 

    const ArithmeticCharacteristicParameterType::CharacteristicTypeEnum_type& ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum () const
    {
      return this->CharacteristicTypeEnum_.get ();
    }

    ArithmeticCharacteristicParameterType::CharacteristicTypeEnum_type& ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum ()
    {
      return this->CharacteristicTypeEnum_.get ();
    }

    void ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum (const CharacteristicTypeEnum_type& x)
    {
      this->CharacteristicTypeEnum_.set (x);
    }

    void ArithmeticCharacteristicParameterType::
    CharacteristicTypeEnum (::std::auto_ptr< CharacteristicTypeEnum_type > x)
    {
      this->CharacteristicTypeEnum_.set (x);
    }

    const ArithmeticCharacteristicParameterType::Parameter_type& ArithmeticCharacteristicParameterType::
    Parameter () const
    {
      return this->Parameter_.get ();
    }

    ArithmeticCharacteristicParameterType::Parameter_type& ArithmeticCharacteristicParameterType::
    Parameter ()
    {
      return this->Parameter_.get ();
    }

    void ArithmeticCharacteristicParameterType::
    Parameter (const Parameter_type& x)
    {
      this->Parameter_.set (x);
    }

    void ArithmeticCharacteristicParameterType::
    Parameter (::std::auto_ptr< Parameter_type > x)
    {
      this->Parameter_.set (x);
    }


    // FeatureLengthType
    // 


    // FeatureAreaType
    // 
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    // SamplingRigorIsType
    //

    SamplingRigorIsType::
    SamplingRigorIsType (const val_type& val)
    : ::xsd::qif2::BooleanExpressionBaseType (),
      val_ (val, this)
    {
    }

    SamplingRigorIsType::
    SamplingRigorIsType (const SamplingRigorIsType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c),
      val_ (x.val_, f, this)
    {
    }

    SamplingRigorIsType::
    SamplingRigorIsType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      val_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void SamplingRigorIsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "val" && n.namespace_ ().empty ())
        {
          this->val_.set (val_traits::create (i, f, this));
          continue;
        }
      }

      if (!val_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "val",
          "");
      }
    }

    SamplingRigorIsType* SamplingRigorIsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SamplingRigorIsType (*this, f, c);
    }

    SamplingRigorIsType& SamplingRigorIsType::
    operator= (const SamplingRigorIsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::BooleanExpressionBaseType& > (*this) = x;
        this->val_ = x.val_;
      }

      return *this;
    }

    SamplingRigorIsType::
    ~SamplingRigorIsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SamplingRigorIsType >
    _xsd_SamplingRigorIsType_type_factory_init (
      "SamplingRigorIsType",
      "http://qifstandards.org/xsd/qif2");

    // FeatureIsDatumType
    //

    FeatureIsDatumType::
    FeatureIsDatumType ()
    : ::xsd::qif2::BooleanExpressionBaseType ()
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const FeatureIsDatumType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c)
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f, c)
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (a, f, c)
    {
    }

    FeatureIsDatumType::
    FeatureIsDatumType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (s, e, f, c)
    {
    }

    FeatureIsDatumType* FeatureIsDatumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureIsDatumType (*this, f, c);
    }

    FeatureIsDatumType::
    ~FeatureIsDatumType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeatureIsDatumType >
    _xsd_FeatureIsDatumType_type_factory_init (
      "FeatureIsDatumType",
      "http://qifstandards.org/xsd/qif2");

    // FeatureIsInternalType
    //

    FeatureIsInternalType::
    FeatureIsInternalType ()
    : ::xsd::qif2::BooleanExpressionBaseType ()
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const FeatureIsInternalType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c)
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f, c)
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (a, f, c)
    {
    }

    FeatureIsInternalType::
    FeatureIsInternalType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (s, e, f, c)
    {
    }

    FeatureIsInternalType* FeatureIsInternalType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureIsInternalType (*this, f, c);
    }

    FeatureIsInternalType::
    ~FeatureIsInternalType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeatureIsInternalType >
    _xsd_FeatureIsInternalType_type_factory_init (
      "FeatureIsInternalType",
      "http://qifstandards.org/xsd/qif2");

    // CharacteristicIsType
    //

    CharacteristicIsType::
    CharacteristicIsType (const val_type& val)
    : ::xsd::qif2::BooleanExpressionBaseType (),
      val_ (val, this)
    {
    }

    CharacteristicIsType::
    CharacteristicIsType (const CharacteristicIsType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c),
      val_ (x.val_, f, this)
    {
    }

    CharacteristicIsType::
    CharacteristicIsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      val_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void CharacteristicIsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "val" && n.namespace_ ().empty ())
        {
          this->val_.set (val_traits::create (i, f, this));
          continue;
        }
      }

      if (!val_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "val",
          "");
      }
    }

    CharacteristicIsType* CharacteristicIsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicIsType (*this, f, c);
    }

    CharacteristicIsType& CharacteristicIsType::
    operator= (const CharacteristicIsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::BooleanExpressionBaseType& > (*this) = x;
        this->val_ = x.val_;
      }

      return *this;
    }

    CharacteristicIsType::
    ~CharacteristicIsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CharacteristicIsType >
    _xsd_CharacteristicIsType_type_factory_init (
      "CharacteristicIsType",
      "http://qifstandards.org/xsd/qif2");

    // ShapeClassIsType
    //

    ShapeClassIsType::
    ShapeClassIsType (const val_type& val)
    : ::xsd::qif2::BooleanExpressionBaseType (),
      val_ (val, this)
    {
    }

    ShapeClassIsType::
    ShapeClassIsType (const ShapeClassIsType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (x, f, c),
      val_ (x.val_, f, this)
    {
    }

    ShapeClassIsType::
    ShapeClassIsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
    : ::xsd::qif2::BooleanExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      val_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void ShapeClassIsType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "val" && n.namespace_ ().empty ())
        {
          this->val_.set (val_traits::create (i, f, this));
          continue;
        }
      }

      if (!val_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "val",
          "");
      }
    }

    ShapeClassIsType* ShapeClassIsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ShapeClassIsType (*this, f, c);
    }

    ShapeClassIsType& ShapeClassIsType::
    operator= (const ShapeClassIsType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::BooleanExpressionBaseType& > (*this) = x;
        this->val_ = x.val_;
      }

      return *this;
    }

    ShapeClassIsType::
    ~ShapeClassIsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ShapeClassIsType >
    _xsd_ShapeClassIsType_type_factory_init (
      "ShapeClassIsType",
      "http://qifstandards.org/xsd/qif2");

    // PointSamplingStrategyEnumBaseType
    //

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_PointSamplingStrategyEnumBaseType_convert ();
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_PointSamplingStrategyEnumBaseType_convert ();
    }

    PointSamplingStrategyEnumBaseType::
    PointSamplingStrategyEnumBaseType (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_PointSamplingStrategyEnumBaseType_convert ();
    }

    PointSamplingStrategyEnumBaseType* PointSamplingStrategyEnumBaseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointSamplingStrategyEnumBaseType (*this, f, c);
    }

    PointSamplingStrategyEnumBaseType::value PointSamplingStrategyEnumBaseType::
    _xsd_PointSamplingStrategyEnumBaseType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointSamplingStrategyEnumBaseType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PointSamplingStrategyEnumBaseType_indexes_,
                        _xsd_PointSamplingStrategyEnumBaseType_indexes_ + 9,
                        *this,
                        c));

      if (i == _xsd_PointSamplingStrategyEnumBaseType_indexes_ + 9 || _xsd_PointSamplingStrategyEnumBaseType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const PointSamplingStrategyEnumBaseType::
    _xsd_PointSamplingStrategyEnumBaseType_literals_[9] =
    {
      "ORTHOGONALGRID",
      "BIRDCAGE",
      "POLARGRID",
      "SPECIFIEDGRID",
      "STRATIFIED",
      "HELIX",
      "SPIRAL",
      "SPIDERWEB",
      "POINTS"
    };

    const PointSamplingStrategyEnumBaseType::value PointSamplingStrategyEnumBaseType::
    _xsd_PointSamplingStrategyEnumBaseType_indexes_[9] =
    {
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::BIRDCAGE,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::HELIX,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::ORTHOGONALGRID,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::POINTS,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::POLARGRID,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::SPECIFIEDGRID,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::SPIDERWEB,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::SPIRAL,
      ::xsd::qif2::PointSamplingStrategyEnumBaseType::STRATIFIED
    };

    // PointPointSamplingStrategyEnumType
    //

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_PointPointSamplingStrategyEnumType_convert ();
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_PointPointSamplingStrategyEnumType_convert ();
    }

    PointPointSamplingStrategyEnumType::
    PointPointSamplingStrategyEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_PointPointSamplingStrategyEnumType_convert ();
    }

    PointPointSamplingStrategyEnumType* PointPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointPointSamplingStrategyEnumType (*this, f, c);
    }

    PointPointSamplingStrategyEnumType::value PointPointSamplingStrategyEnumType::
    _xsd_PointPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PointPointSamplingStrategyEnumType_indexes_,
                        _xsd_PointPointSamplingStrategyEnumType_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_PointPointSamplingStrategyEnumType_indexes_ + 1 || _xsd_PointPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* PointPointSamplingStrategyEnumType::
    _xsd_PointPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const PointPointSamplingStrategyEnumType::value PointPointSamplingStrategyEnumType::
    _xsd_PointPointSamplingStrategyEnumType_indexes_[1] =
    {
      ::xsd::qif2::PointPointSamplingStrategyEnumType::POINTS
    };

    // OpenCurvePointSamplingStrategyEnumType
    //

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
    }

    OpenCurvePointSamplingStrategyEnumType::
    OpenCurvePointSamplingStrategyEnumType (const ::std::string& s,
                                            const ::xercesc::DOMElement* e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_OpenCurvePointSamplingStrategyEnumType_convert ();
    }

    OpenCurvePointSamplingStrategyEnumType* OpenCurvePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class OpenCurvePointSamplingStrategyEnumType (*this, f, c);
    }

    OpenCurvePointSamplingStrategyEnumType::value OpenCurvePointSamplingStrategyEnumType::
    _xsd_OpenCurvePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OpenCurvePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_,
                        _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_ + 1,
                        *this,
                        c));

      if (i == _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_ + 1 || _xsd_OpenCurvePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* OpenCurvePointSamplingStrategyEnumType::
    _xsd_OpenCurvePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const OpenCurvePointSamplingStrategyEnumType::value OpenCurvePointSamplingStrategyEnumType::
    _xsd_OpenCurvePointSamplingStrategyEnumType_indexes_[1] =
    {
      ::xsd::qif2::OpenCurvePointSamplingStrategyEnumType::POINTS
    };

    // ClosedCurvePointSamplingStrategyEnumType
    //

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
    }

    ClosedCurvePointSamplingStrategyEnumType::
    ClosedCurvePointSamplingStrategyEnumType (const ::std::string& s,
                                              const ::xercesc::DOMElement* e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_ClosedCurvePointSamplingStrategyEnumType_convert ();
    }

    ClosedCurvePointSamplingStrategyEnumType* ClosedCurvePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ClosedCurvePointSamplingStrategyEnumType (*this, f, c);
    }

    ClosedCurvePointSamplingStrategyEnumType::value ClosedCurvePointSamplingStrategyEnumType::
    _xsd_ClosedCurvePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ClosedCurvePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_,
                        _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_ + 2 || _xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const ClosedCurvePointSamplingStrategyEnumType::
    _xsd_ClosedCurvePointSamplingStrategyEnumType_literals_[2] =
    {
      "POINTS",
      "EQUIDISTANT"
    };

    const ClosedCurvePointSamplingStrategyEnumType::value ClosedCurvePointSamplingStrategyEnumType::
    _xsd_ClosedCurvePointSamplingStrategyEnumType_indexes_[2] =
    {
      ::xsd::qif2::ClosedCurvePointSamplingStrategyEnumType::EQUIDISTANT,
      ::xsd::qif2::ClosedCurvePointSamplingStrategyEnumType::POINTS
    };

    // PointDefinedPointSamplingStrategyEnumType
    //

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
    }

    PointDefinedPointSamplingStrategyEnumType::
    PointDefinedPointSamplingStrategyEnumType (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_PointDefinedPointSamplingStrategyEnumType_convert ();
    }

    PointDefinedPointSamplingStrategyEnumType* PointDefinedPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PointDefinedPointSamplingStrategyEnumType (*this, f, c);
    }

    PointDefinedPointSamplingStrategyEnumType::value PointDefinedPointSamplingStrategyEnumType::
    _xsd_PointDefinedPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PointDefinedPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_,
                        _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_ + 2 || _xsd_PointDefinedPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const PointDefinedPointSamplingStrategyEnumType::
    _xsd_PointDefinedPointSamplingStrategyEnumType_literals_[2] =
    {
      "GIVENPOINTS",
      "POINTS"
    };

    const PointDefinedPointSamplingStrategyEnumType::value PointDefinedPointSamplingStrategyEnumType::
    _xsd_PointDefinedPointSamplingStrategyEnumType_indexes_[2] =
    {
      ::xsd::qif2::PointDefinedPointSamplingStrategyEnumType::GIVENPOINTS,
      ::xsd::qif2::PointDefinedPointSamplingStrategyEnumType::POINTS
    };

    // ConePointSamplingStrategyEnumType
    //

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_ConePointSamplingStrategyEnumType_convert ();
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_ConePointSamplingStrategyEnumType_convert ();
    }

    ConePointSamplingStrategyEnumType::
    ConePointSamplingStrategyEnumType (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_ConePointSamplingStrategyEnumType_convert ();
    }

    ConePointSamplingStrategyEnumType* ConePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConePointSamplingStrategyEnumType (*this, f, c);
    }

    ConePointSamplingStrategyEnumType::value ConePointSamplingStrategyEnumType::
    _xsd_ConePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ConePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ConePointSamplingStrategyEnumType_indexes_,
                        _xsd_ConePointSamplingStrategyEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_ConePointSamplingStrategyEnumType_indexes_ + 5 || _xsd_ConePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* ConePointSamplingStrategyEnumType::
    _xsd_ConePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const ConePointSamplingStrategyEnumType::value ConePointSamplingStrategyEnumType::
    _xsd_ConePointSamplingStrategyEnumType_indexes_[5] =
    {
      ::xsd::qif2::ConePointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::POLARGRID,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::SPIDERWEB,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::SPIRAL,
      ::xsd::qif2::ConePointSamplingStrategyEnumType::STRATIFIED
    };

    // ElongatedCylinderPointSamplingStrategyEnumType
    //

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
    }

    ElongatedCylinderPointSamplingStrategyEnumType::
    ElongatedCylinderPointSamplingStrategyEnumType (const ::std::string& s,
                                                    const ::xercesc::DOMElement* e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert ();
    }

    ElongatedCylinderPointSamplingStrategyEnumType* ElongatedCylinderPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ElongatedCylinderPointSamplingStrategyEnumType (*this, f, c);
    }

    ElongatedCylinderPointSamplingStrategyEnumType::value ElongatedCylinderPointSamplingStrategyEnumType::
    _xsd_ElongatedCylinderPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_,
                        _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_ + 6 || _xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* ElongatedCylinderPointSamplingStrategyEnumType::
    _xsd_ElongatedCylinderPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const ElongatedCylinderPointSamplingStrategyEnumType::value ElongatedCylinderPointSamplingStrategyEnumType::
    _xsd_ElongatedCylinderPointSamplingStrategyEnumType_indexes_[6] =
    {
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::ElongatedCylinderPointSamplingStrategyEnumType::STRATIFIED
    };

    // ExtrudedCrossSectionPointSamplingStrategyEnumType
    //

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::
    ExtrudedCrossSectionPointSamplingStrategyEnumType (const ::std::string& s,
                                                       const ::xercesc::DOMElement* e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert ();
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType* ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExtrudedCrossSectionPointSamplingStrategyEnumType (*this, f, c);
    }

    ExtrudedCrossSectionPointSamplingStrategyEnumType::value ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_,
                        _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_ + 3 || _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const ExtrudedCrossSectionPointSamplingStrategyEnumType::value ExtrudedCrossSectionPointSamplingStrategyEnumType::
    _xsd_ExtrudedCrossSectionPointSamplingStrategyEnumType_indexes_[3] =
    {
      ::xsd::qif2::ExtrudedCrossSectionPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::ExtrudedCrossSectionPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::ExtrudedCrossSectionPointSamplingStrategyEnumType::STRATIFIED
    };

    // PrismPointSamplingStrategyEnumType
    //

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_PrismPointSamplingStrategyEnumType_convert ();
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_PrismPointSamplingStrategyEnumType_convert ();
    }

    PrismPointSamplingStrategyEnumType::
    PrismPointSamplingStrategyEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_PrismPointSamplingStrategyEnumType_convert ();
    }

    PrismPointSamplingStrategyEnumType* PrismPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PrismPointSamplingStrategyEnumType (*this, f, c);
    }

    PrismPointSamplingStrategyEnumType::value PrismPointSamplingStrategyEnumType::
    _xsd_PrismPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PrismPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PrismPointSamplingStrategyEnumType_indexes_,
                        _xsd_PrismPointSamplingStrategyEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_PrismPointSamplingStrategyEnumType_indexes_ + 6 || _xsd_PrismPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* PrismPointSamplingStrategyEnumType::
    _xsd_PrismPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const PrismPointSamplingStrategyEnumType::value PrismPointSamplingStrategyEnumType::
    _xsd_PrismPointSamplingStrategyEnumType_indexes_[6] =
    {
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::PrismPointSamplingStrategyEnumType::STRATIFIED
    };

    // SpherePointSamplingStrategyEnumType
    //

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_SpherePointSamplingStrategyEnumType_convert ();
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_SpherePointSamplingStrategyEnumType_convert ();
    }

    SpherePointSamplingStrategyEnumType::
    SpherePointSamplingStrategyEnumType (const ::std::string& s,
                                         const ::xercesc::DOMElement* e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_SpherePointSamplingStrategyEnumType_convert ();
    }

    SpherePointSamplingStrategyEnumType* SpherePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SpherePointSamplingStrategyEnumType (*this, f, c);
    }

    SpherePointSamplingStrategyEnumType::value SpherePointSamplingStrategyEnumType::
    _xsd_SpherePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SpherePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SpherePointSamplingStrategyEnumType_indexes_,
                        _xsd_SpherePointSamplingStrategyEnumType_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_SpherePointSamplingStrategyEnumType_indexes_ + 5 || _xsd_SpherePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* SpherePointSamplingStrategyEnumType::
    _xsd_SpherePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const SpherePointSamplingStrategyEnumType::value SpherePointSamplingStrategyEnumType::
    _xsd_SpherePointSamplingStrategyEnumType_indexes_[5] =
    {
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::SpherePointSamplingStrategyEnumType::STRATIFIED
    };

    // SurfaceOfRevolutionPointSamplingStrategyEnumType
    //

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::
    SurfaceOfRevolutionPointSamplingStrategyEnumType (const ::std::string& s,
                                                      const ::xercesc::DOMElement* e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert ();
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType* SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SurfaceOfRevolutionPointSamplingStrategyEnumType (*this, f, c);
    }

    SurfaceOfRevolutionPointSamplingStrategyEnumType::value SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_,
                        _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_ + 6 || _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const SurfaceOfRevolutionPointSamplingStrategyEnumType::value SurfaceOfRevolutionPointSamplingStrategyEnumType::
    _xsd_SurfaceOfRevolutionPointSamplingStrategyEnumType_indexes_[6] =
    {
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::BIRDCAGE,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::HELIX,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::SurfaceOfRevolutionPointSamplingStrategyEnumType::STRATIFIED
    };

    // PlanePointSamplingStrategyEnumType
    //

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (e, f, c)
    {
      _xsd_PlanePointSamplingStrategyEnumType_convert ();
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::xercesc::DOMAttr& a,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (a, f, c)
    {
      _xsd_PlanePointSamplingStrategyEnumType_convert ();
    }

    PlanePointSamplingStrategyEnumType::
    PlanePointSamplingStrategyEnumType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::xsd::qif2::PointSamplingStrategyEnumBaseType (s, e, f, c)
    {
      _xsd_PlanePointSamplingStrategyEnumType_convert ();
    }

    PlanePointSamplingStrategyEnumType* PlanePointSamplingStrategyEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PlanePointSamplingStrategyEnumType (*this, f, c);
    }

    PlanePointSamplingStrategyEnumType::value PlanePointSamplingStrategyEnumType::
    _xsd_PlanePointSamplingStrategyEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlanePointSamplingStrategyEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_PlanePointSamplingStrategyEnumType_indexes_,
                        _xsd_PlanePointSamplingStrategyEnumType_indexes_ + 7,
                        *this,
                        c));

      if (i == _xsd_PlanePointSamplingStrategyEnumType_indexes_ + 7 || _xsd_PlanePointSamplingStrategyEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const* PlanePointSamplingStrategyEnumType::
    _xsd_PlanePointSamplingStrategyEnumType_literals_ = ::xsd::qif2::PointSamplingStrategyEnumBaseType::_xsd_PointSamplingStrategyEnumBaseType_literals_;

    const PlanePointSamplingStrategyEnumType::value PlanePointSamplingStrategyEnumType::
    _xsd_PlanePointSamplingStrategyEnumType_indexes_[7] =
    {
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::ORTHOGONALGRID,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::POINTS,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::POLARGRID,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::SPECIFIEDGRID,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::SPIDERWEB,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::SPIRAL,
      ::xsd::qif2::PlanePointSamplingStrategyEnumType::STRATIFIED
    };

    // CharacteristicTypeEnumType
    //

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (e, f, c)
    {
      _xsd_CharacteristicTypeEnumType_convert ();
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (a, f, c)
    {
      _xsd_CharacteristicTypeEnumType_convert ();
    }

    CharacteristicTypeEnumType::
    CharacteristicTypeEnumType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::nmtoken (s, e, f, c)
    {
      _xsd_CharacteristicTypeEnumType_convert ();
    }

    CharacteristicTypeEnumType* CharacteristicTypeEnumType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class CharacteristicTypeEnumType (*this, f, c);
    }

    CharacteristicTypeEnumType::value CharacteristicTypeEnumType::
    _xsd_CharacteristicTypeEnumType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CharacteristicTypeEnumType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_CharacteristicTypeEnumType_indexes_,
                        _xsd_CharacteristicTypeEnumType_indexes_ + 34,
                        *this,
                        c));

      if (i == _xsd_CharacteristicTypeEnumType_indexes_ + 34 || _xsd_CharacteristicTypeEnumType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const CharacteristicTypeEnumType::
    _xsd_CharacteristicTypeEnumType_literals_[34] =
    {
      "ANGLE",
      "ANGLECOORDINATE",
      "ANGLEFROM",
      "ANGLEBETWEEN",
      "ANGULARITY",
      "CHORD",
      "CIRCULARITY",
      "CIRCULARRUNOUT",
      "CONCENTRICITY",
      "CURVELENGTH",
      "CYLINDRICITY",
      "DEPTH",
      "DIAMETER",
      "DISTANCE",
      "DISTANCEFROM",
      "FLATNESS",
      "HEIGHT",
      "LENGTH",
      "LENGTHCOORDINATE",
      "LINEPROFILE",
      "PERPENDICULARITY",
      "PARALLELISM",
      "POINTPROFILE",
      "POSITION",
      "RADIUS",
      "SQUARE",
      "STRAIGHTNESS",
      "SURFACEPROFILE",
      "SURFACEPROFILENONUNIFORM",
      "SYMMETRY",
      "THICKNESS",
      "THREAD",
      "TOTALRUNOUT",
      "WIDTH"
    };

    const CharacteristicTypeEnumType::value CharacteristicTypeEnumType::
    _xsd_CharacteristicTypeEnumType_indexes_[34] =
    {
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLE,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLEBETWEEN,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLECOORDINATE,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGLEFROM,
      ::xsd::qif2::CharacteristicTypeEnumType::ANGULARITY,
      ::xsd::qif2::CharacteristicTypeEnumType::CHORD,
      ::xsd::qif2::CharacteristicTypeEnumType::CIRCULARITY,
      ::xsd::qif2::CharacteristicTypeEnumType::CIRCULARRUNOUT,
      ::xsd::qif2::CharacteristicTypeEnumType::CONCENTRICITY,
      ::xsd::qif2::CharacteristicTypeEnumType::CURVELENGTH,
      ::xsd::qif2::CharacteristicTypeEnumType::CYLINDRICITY,
      ::xsd::qif2::CharacteristicTypeEnumType::DEPTH,
      ::xsd::qif2::CharacteristicTypeEnumType::DIAMETER,
      ::xsd::qif2::CharacteristicTypeEnumType::DISTANCE,
      ::xsd::qif2::CharacteristicTypeEnumType::DISTANCEFROM,
      ::xsd::qif2::CharacteristicTypeEnumType::FLATNESS,
      ::xsd::qif2::CharacteristicTypeEnumType::HEIGHT,
      ::xsd::qif2::CharacteristicTypeEnumType::LENGTH,
      ::xsd::qif2::CharacteristicTypeEnumType::LENGTHCOORDINATE,
      ::xsd::qif2::CharacteristicTypeEnumType::LINEPROFILE,
      ::xsd::qif2::CharacteristicTypeEnumType::PARALLELISM,
      ::xsd::qif2::CharacteristicTypeEnumType::PERPENDICULARITY,
      ::xsd::qif2::CharacteristicTypeEnumType::POINTPROFILE,
      ::xsd::qif2::CharacteristicTypeEnumType::POSITION,
      ::xsd::qif2::CharacteristicTypeEnumType::RADIUS,
      ::xsd::qif2::CharacteristicTypeEnumType::SQUARE,
      ::xsd::qif2::CharacteristicTypeEnumType::STRAIGHTNESS,
      ::xsd::qif2::CharacteristicTypeEnumType::SURFACEPROFILE,
      ::xsd::qif2::CharacteristicTypeEnumType::SURFACEPROFILENONUNIFORM,
      ::xsd::qif2::CharacteristicTypeEnumType::SYMMETRY,
      ::xsd::qif2::CharacteristicTypeEnumType::THICKNESS,
      ::xsd::qif2::CharacteristicTypeEnumType::THREAD,
      ::xsd::qif2::CharacteristicTypeEnumType::TOTALRUNOUT,
      ::xsd::qif2::CharacteristicTypeEnumType::WIDTH
    };

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::SamplingRigorIsType >
    _xsd_SamplingRigorIs_element_factory_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "SamplingRigorIs",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FeatureIsDatumType >
    _xsd_FeatureIsDatum_element_factory_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureIsDatum",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FeatureIsInternalType >
    _xsd_FeatureIsInternal_element_factory_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureIsInternal",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::CharacteristicIsType >
    _xsd_CharacteristicIs_element_factory_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "CharacteristicIs",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ShapeClassIsType >
    _xsd_ShapeClassIs_element_factory_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "ShapeClassIs",
      "http://qifstandards.org/xsd/qif2");


    // ArithmeticFeatureParameterType
    //

    ArithmeticFeatureParameterType::
    ArithmeticFeatureParameterType (const Parameter_type& Parameter)
    : ::xsd::qif2::ArithmeticExpressionBaseType (),
      Parameter_ (Parameter, this)
    {
    }

    ArithmeticFeatureParameterType::
    ArithmeticFeatureParameterType (const ArithmeticFeatureParameterType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c),
      Parameter_ (x.Parameter_, f, this)
    {
    }

    ArithmeticFeatureParameterType::
    ArithmeticFeatureParameterType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      Parameter_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ArithmeticFeatureParameterType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Parameter
        //
        if (n.name () == "Parameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Parameter_type > r (
            Parameter_traits::create (i, f, this));

          if (!Parameter_.present ())
          {
            this->Parameter_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Parameter",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArithmeticFeatureParameterType* ArithmeticFeatureParameterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArithmeticFeatureParameterType (*this, f, c);
    }

    ArithmeticFeatureParameterType& ArithmeticFeatureParameterType::
    operator= (const ArithmeticFeatureParameterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::ArithmeticExpressionBaseType& > (*this) = x;
        this->Parameter_ = x.Parameter_;
      }

      return *this;
    }

    ArithmeticFeatureParameterType::
    ~ArithmeticFeatureParameterType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ArithmeticFeatureParameterType >
    _xsd_ArithmeticFeatureParameterType_type_factory_init (
      "ArithmeticFeatureParameterType",
      "http://qifstandards.org/xsd/qif2");

    // ArithmeticCharacteristicParameterType
    //

    ArithmeticCharacteristicParameterType::
    ArithmeticCharacteristicParameterType (const CharacteristicTypeEnum_type& CharacteristicTypeEnum,
                                           const Parameter_type& Parameter)
    : ::xsd::qif2::ArithmeticExpressionBaseType (),
      CharacteristicTypeEnum_ (CharacteristicTypeEnum, this),
      Parameter_ (Parameter, this)
    {
    }

    ArithmeticCharacteristicParameterType::
    ArithmeticCharacteristicParameterType (const ArithmeticCharacteristicParameterType& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c),
      CharacteristicTypeEnum_ (x.CharacteristicTypeEnum_, f, this),
      Parameter_ (x.Parameter_, f, this)
    {
    }

    ArithmeticCharacteristicParameterType::
    ArithmeticCharacteristicParameterType (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f | ::xml_schema::flags::base, c),
      CharacteristicTypeEnum_ (this),
      Parameter_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ArithmeticCharacteristicParameterType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // CharacteristicTypeEnum
        //
        if (n.name () == "CharacteristicTypeEnum" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< CharacteristicTypeEnum_type > r (
            CharacteristicTypeEnum_traits::create (i, f, this));

          if (!CharacteristicTypeEnum_.present ())
          {
            this->CharacteristicTypeEnum_.set (r);
            continue;
          }
        }

        // Parameter
        //
        if (n.name () == "Parameter" && n.namespace_ () == "http://qifstandards.org/xsd/qif2")
        {
          ::std::auto_ptr< Parameter_type > r (
            Parameter_traits::create (i, f, this));

          if (!Parameter_.present ())
          {
            this->Parameter_.set (r);
            continue;
          }
        }

        break;
      }

      if (!CharacteristicTypeEnum_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "CharacteristicTypeEnum",
          "http://qifstandards.org/xsd/qif2");
      }

      if (!Parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Parameter",
          "http://qifstandards.org/xsd/qif2");
      }
    }

    ArithmeticCharacteristicParameterType* ArithmeticCharacteristicParameterType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ArithmeticCharacteristicParameterType (*this, f, c);
    }

    ArithmeticCharacteristicParameterType& ArithmeticCharacteristicParameterType::
    operator= (const ArithmeticCharacteristicParameterType& x)
    {
      if (this != &x)
      {
        static_cast< ::xsd::qif2::ArithmeticExpressionBaseType& > (*this) = x;
        this->CharacteristicTypeEnum_ = x.CharacteristicTypeEnum_;
        this->Parameter_ = x.Parameter_;
      }

      return *this;
    }

    ArithmeticCharacteristicParameterType::
    ~ArithmeticCharacteristicParameterType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ArithmeticCharacteristicParameterType >
    _xsd_ArithmeticCharacteristicParameterType_type_factory_init (
      "ArithmeticCharacteristicParameterType",
      "http://qifstandards.org/xsd/qif2");

    // FeatureLengthType
    //

    FeatureLengthType::
    FeatureLengthType ()
    : ::xsd::qif2::ArithmeticExpressionBaseType ()
    {
    }

    FeatureLengthType::
    FeatureLengthType (const FeatureLengthType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c)
    {
    }

    FeatureLengthType::
    FeatureLengthType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f, c)
    {
    }

    FeatureLengthType::
    FeatureLengthType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (a, f, c)
    {
    }

    FeatureLengthType::
    FeatureLengthType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (s, e, f, c)
    {
    }

    FeatureLengthType* FeatureLengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureLengthType (*this, f, c);
    }

    FeatureLengthType::
    ~FeatureLengthType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeatureLengthType >
    _xsd_FeatureLengthType_type_factory_init (
      "FeatureLengthType",
      "http://qifstandards.org/xsd/qif2");

    // FeatureAreaType
    //

    FeatureAreaType::
    FeatureAreaType ()
    : ::xsd::qif2::ArithmeticExpressionBaseType ()
    {
    }

    FeatureAreaType::
    FeatureAreaType (const FeatureAreaType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (x, f, c)
    {
    }

    FeatureAreaType::
    FeatureAreaType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (e, f, c)
    {
    }

    FeatureAreaType::
    FeatureAreaType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (a, f, c)
    {
    }

    FeatureAreaType::
    FeatureAreaType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xsd::qif2::ArithmeticExpressionBaseType (s, e, f, c)
    {
    }

    FeatureAreaType* FeatureAreaType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class FeatureAreaType (*this, f, c);
    }

    FeatureAreaType::
    ~FeatureAreaType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, FeatureAreaType >
    _xsd_FeatureAreaType_type_factory_init (
      "FeatureAreaType",
      "http://qifstandards.org/xsd/qif2");

    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ArithmeticFeatureParameterType >
    _xsd_ArithmeticFeatureParameter_element_factory_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "ArithmeticFeatureParameter",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::ArithmeticCharacteristicParameterType >
    _xsd_ArithmeticCharacteristicParameter_element_factory_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "ArithmeticCharacteristicParameter",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FeatureLengthType >
    _xsd_FeatureLength_element_factory_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureLength",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::xsd::qif2::FeatureAreaType >
    _xsd_FeatureArea_element_factory_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureArea",
      "http://qifstandards.org/xsd/qif2");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xsd
{
  namespace qif2
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace xsd
{
  namespace qif2
  {
    void
    operator<< (::xercesc::DOMElement& e, const SamplingRigorIsType& i)
    {
      e << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);

      // val
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "val",
            e));

        a << i.val ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SamplingRigorIsType >
    _xsd_SamplingRigorIsType_type_serializer_init (
      "SamplingRigorIsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FeatureIsDatumType& i)
    {
      e << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FeatureIsDatumType& i)
    {
      a << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FeatureIsDatumType& i)
    {
      l << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeatureIsDatumType >
    _xsd_FeatureIsDatumType_type_serializer_init (
      "FeatureIsDatumType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FeatureIsInternalType& i)
    {
      e << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FeatureIsInternalType& i)
    {
      a << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FeatureIsInternalType& i)
    {
      l << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeatureIsInternalType >
    _xsd_FeatureIsInternalType_type_serializer_init (
      "FeatureIsInternalType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const CharacteristicIsType& i)
    {
      e << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);

      // val
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "val",
            e));

        a << i.val ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CharacteristicIsType >
    _xsd_CharacteristicIsType_type_serializer_init (
      "CharacteristicIsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ShapeClassIsType& i)
    {
      e << static_cast< const ::xsd::qif2::BooleanExpressionBaseType& > (i);

      // val
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "val",
            e));

        a << i.val ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ShapeClassIsType >
    _xsd_ShapeClassIsType_type_serializer_init (
      "ShapeClassIsType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const PointSamplingStrategyEnumBaseType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const PointSamplingStrategyEnumBaseType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const PointSamplingStrategyEnumBaseType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const PointPointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const PointPointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const PointPointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const OpenCurvePointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const OpenCurvePointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const OpenCurvePointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ClosedCurvePointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ClosedCurvePointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ClosedCurvePointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const PointDefinedPointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const PointDefinedPointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const PointDefinedPointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ConePointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ConePointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ConePointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ElongatedCylinderPointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ElongatedCylinderPointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ElongatedCylinderPointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExtrudedCrossSectionPointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ExtrudedCrossSectionPointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const ExtrudedCrossSectionPointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const PrismPointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const PrismPointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const PrismPointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const SpherePointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const SpherePointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const SpherePointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const SurfaceOfRevolutionPointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const SurfaceOfRevolutionPointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const SurfaceOfRevolutionPointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const PlanePointSamplingStrategyEnumType& i)
    {
      e << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const PlanePointSamplingStrategyEnumType& i)
    {
      a << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const PlanePointSamplingStrategyEnumType& i)
    {
      l << static_cast< const ::xsd::qif2::PointSamplingStrategyEnumBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMElement& e, const CharacteristicTypeEnumType& i)
    {
      e << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const CharacteristicTypeEnumType& i)
    {
      a << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const CharacteristicTypeEnumType& i)
    {
      l << static_cast< const ::xml_schema::nmtoken& > (i);
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::SamplingRigorIsType >
    _xsd_SamplingRigorIs_element_serializer_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "SamplingRigorIs",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FeatureIsDatumType >
    _xsd_FeatureIsDatum_element_serializer_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureIsDatum",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FeatureIsInternalType >
    _xsd_FeatureIsInternal_element_serializer_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureIsInternal",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::CharacteristicIsType >
    _xsd_CharacteristicIs_element_serializer_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "CharacteristicIs",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ShapeClassIsType >
    _xsd_ShapeClassIs_element_serializer_init (
      "BooleanExpression",
      "http://qifstandards.org/xsd/qif2",
      "ShapeClassIs",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ArithmeticFeatureParameterType& i)
    {
      e << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);

      // Parameter
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Parameter",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Parameter ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ArithmeticFeatureParameterType >
    _xsd_ArithmeticFeatureParameterType_type_serializer_init (
      "ArithmeticFeatureParameterType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const ArithmeticCharacteristicParameterType& i)
    {
      e << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);

      // CharacteristicTypeEnum
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "CharacteristicTypeEnum",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.CharacteristicTypeEnum ();
      }

      // Parameter
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Parameter",
            "http://qifstandards.org/xsd/qif2",
            e));

        s << i.Parameter ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ArithmeticCharacteristicParameterType >
    _xsd_ArithmeticCharacteristicParameterType_type_serializer_init (
      "ArithmeticCharacteristicParameterType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FeatureLengthType& i)
    {
      e << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FeatureLengthType& i)
    {
      a << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FeatureLengthType& i)
    {
      l << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeatureLengthType >
    _xsd_FeatureLengthType_type_serializer_init (
      "FeatureLengthType",
      "http://qifstandards.org/xsd/qif2");


    void
    operator<< (::xercesc::DOMElement& e, const FeatureAreaType& i)
    {
      e << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const FeatureAreaType& i)
    {
      a << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const FeatureAreaType& i)
    {
      l << static_cast< const ::xsd::qif2::ArithmeticExpressionBaseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FeatureAreaType >
    _xsd_FeatureAreaType_type_serializer_init (
      "FeatureAreaType",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ArithmeticFeatureParameterType >
    _xsd_ArithmeticFeatureParameter_element_serializer_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "ArithmeticFeatureParameter",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::ArithmeticCharacteristicParameterType >
    _xsd_ArithmeticCharacteristicParameter_element_serializer_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "ArithmeticCharacteristicParameter",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FeatureLengthType >
    _xsd_FeatureLength_element_serializer_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureLength",
      "http://qifstandards.org/xsd/qif2");


    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::xsd::qif2::FeatureAreaType >
    _xsd_FeatureArea_element_serializer_init (
      "ArithmeticExpression",
      "http://qifstandards.org/xsd/qif2",
      "FeatureArea",
      "http://qifstandards.org/xsd/qif2");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

